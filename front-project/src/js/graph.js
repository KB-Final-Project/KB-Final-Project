!(function () {
  function e(e, t) {
    return (
      Object.keys(t).forEach(function (i) {
        "default" === i ||
          "__esModule" === i ||
          e.hasOwnProperty(i) ||
          Object.defineProperty(e, i, {
            enumerable: !0,
            get: function () {
              return t[i];
            }
          });
      }),
      e
    );
  }
  function t(e, t, i, a) {
    Object.defineProperty(e, t, {
      get: i,
      set: a,
      enumerable: !0,
      configurable: !0
    });
  }
  var i,
    a,
    n,
    s,
    o,
    r,
    l,
    c,
    h,
    d,
    u,
    g,
    p,
    f,
    m,
    x,
    b,
    v,
    y,
    w,
    C,
    k =
      "undefined" != typeof globalThis
        ? globalThis
        : "undefined" != typeof self
        ? self
        : "undefined" != typeof window
        ? window
        : "undefined" != typeof global
        ? global
        : {},
    A = {},
    S = {},
    L = k.parcelRequirec6c5;
  null == L &&
    (((L = function (e) {
      if (e in A) return A[e].exports;
      if (e in S) {
        var t = S[e];
        delete S[e];
        var i = { id: e, exports: {} };
        return (A[e] = i), t.call(i.exports, i, i.exports), i.exports;
      }
      var a = Error("Cannot find module '" + e + "'");
      throw ((a.code = "MODULE_NOT_FOUND"), a);
    }).register = function (e, t) {
      S[e] = t;
    }),
    (k.parcelRequirec6c5 = L)),
    L.register("6rwMJ", function (e, t) {
      e.exports = [
        {
          date: "2022-10-29",
          open: 36.01,
          close: 35.1,
          high: 36,
          low: 34.98,
          volume: 2617774,
          uOpen: 36.25,
          uClose: 33.9,
          uHigh: 34.98,
          uLow: 34.64,
          uVolume: 2653970,
          change: 0,
          changePercent: 0,
          label: "Oct 29, 19",
          changeOverTime: 0
        },
        {
          date: "2022-10-30",
          open: 34.8,
          close: 34.33,
          high: 35.3,
          low: 34.23,
          volume: 1779815,
          uOpen: 34.5,
          uClose: 34.5,
          uHigh: 34.69,
          uLow: 34.61,
          uVolume: 1795109,
          change: -0.63,
          changePercent: -1.8933,
          label: "Oct 30, 19",
          changeOverTime: -0.018531
        },
        {
          date: "2022-10-31",
          open: 33.53,
          close: 33.17,
          high: 34.62,
          low: 33.23,
          volume: 2803319,
          uOpen: 33.96,
          uClose: 32.9,
          uHigh: 33.17,
          uLow: 32.39,
          uVolume: 2781295,
          change: -0.64,
          changePercent: -1.8875,
          label: "Oct 31, 19",
          changeOverTime: -0.036709
        },
        {
          date: "2022-11-01",
          open: 33.21,
          close: 34.55,
          high: 34.4,
          low: 33.66,
          volume: 2141225,
          uOpen: 34.12,
          uClose: 34.35,
          uHigh: 34.7,
          uLow: 33.89,
          uVolume: 2168664,
          change: 1.12,
          changePercent: 3.4975,
          label: "Nov 1, 19",
          changeOverTime: -0.003292
        },
        {
          date: "2022-11-04",
          open: 34.9,
          close: 35.59,
          high: 35.5,
          low: 34.98,
          volume: 1519871,
          uOpen: 34.2,
          uClose: 35.06,
          uHigh: 34.8,
          uLow: 34.59,
          uVolume: 1486370,
          change: 0.29,
          changePercent: 0.8865,
          label: "Nov 4, 19",
          changeOverTime: 0.005584
        },
        {
          date: "2022-11-05",
          open: 35.77,
          close: 33.38,
          high: 35.76,
          low: 33.8,
          volume: 1926635,
          uOpen: 34.46,
          uClose: 34.28,
          uHigh: 34.42,
          uLow: 33.97,
          uVolume: 1912218,
          change: -0.65,
          changePercent: -1.8931,
          label: "Nov 5, 19",
          changeOverTime: -0.013049
        },
        {
          date: "2022-11-06",
          open: 33.88,
          close: 34.61,
          high: 34.13,
          low: 34.07,
          volume: 2111260,
          uOpen: 34.41,
          uClose: 33.72,
          uHigh: 34.09,
          uLow: 34.23,
          uVolume: 2085817,
          change: 0.28,
          changePercent: 0.8178,
          label: "Nov 6, 19",
          changeOverTime: -0.00518
        },
        {
          date: "2022-11-07",
          open: 34.2,
          close: 34.26,
          high: 36.22,
          low: 34.36,
          volume: 6259928,
          uOpen: 33.8,
          uClose: 33.59,
          uHigh: 36.23,
          uLow: 34.34,
          uVolume: 6398894,
          change: -0.19,
          changePercent: -0.592,
          label: "Nov 7, 19",
          changeOverTime: -0.0107
        },
        {
          date: "2022-11-08",
          open: 38.38,
          close: 37.7,
          high: 40.1,
          low: 36.66,
          volume: 10755989,
          uOpen: 37.85,
          uClose: 38.33,
          uHigh: 39.4,
          uLow: 36.58,
          uVolume: 10519839,
          change: 4.3,
          changePercent: 12.3091,
          label: "Nov 8, 19",
          changeOverTime: 0.115294
        },
        {
          date: "2022-11-11",
          open: 38.14,
          close: 39.99,
          high: 40.41,
          low: 37.79,
          volume: 4011919,
          uOpen: 37.43,
          uClose: 39.7,
          uHigh: 40.45,
          uLow: 38.07,
          uVolume: 3998775,
          change: 1.09,
          changePercent: 2.9954,
          label: "Nov 11, 19",
          changeOverTime: 0.145084
        },
        {
          date: "2022-11-12",
          open: 39.98,
          close: 39.59,
          high: 39.56,
          low: 38.82,
          volume: 3794301,
          uOpen: 40.03,
          uClose: 39.62,
          uHigh: 39.35,
          uLow: 38.77,
          uVolume: 3735517,
          change: -0.8,
          changePercent: -2.1297,
          label: "Nov 12, 19",
          changeOverTime: 0.123626
        },
        {
          date: "2022-11-13",
          open: 38.97,
          close: 39.69,
          high: 39.98,
          low: 38.35,
          volume: 2324031,
          uOpen: 37.65,
          uClose: 38.26,
          uHigh: 40,
          uLow: 37.51,
          uVolume: 2298571,
          change: 0.33,
          changePercent: 0.8629,
          label: "Nov 13, 19",
          changeOverTime: 0.131566
        },
        {
          date: "2022-11-14",
          open: 38.86,
          close: 39.85,
          high: 40.82,
          low: 38.56,
          volume: 2593341,
          uOpen: 39.42,
          uClose: 39.21,
          uHigh: 39.71,
          uLow: 39.04,
          uVolume: 2584979,
          change: 0.85,
          changePercent: 2.2146,
          label: "Nov 14, 19",
          changeOverTime: 0.153453
        },
        {
          date: "2022-11-15",
          open: 41,
          close: 40.52,
          high: 39.81,
          low: 40.48,
          volume: 2314080,
          uOpen: 41,
          uClose: 41.52,
          uHigh: 40.31,
          uLow: 38.69,
          uVolume: 2306652,
          change: 0.76,
          changePercent: 1.8872,
          label: "Nov 15, 19",
          changeOverTime: 0.179917
        },
        {
          date: "2022-11-18",
          open: 40.46,
          close: 40.6,
          high: 41.4,
          low: 39.95,
          volume: 1877989,
          uOpen: 39.63,
          uClose: 41.6,
          uHigh: 41,
          uLow: 40.04,
          uVolume: 1854103,
          change: 0.28,
          changePercent: 0.6903,
          label: "Nov 18, 19",
          changeOverTime: 0.189738
        },
        {
          date: "2022-11-19",
          open: 40.02,
          close: 38.83,
          high: 40.22,
          low: 37.94,
          volume: 2486004,
          uOpen: 39.7,
          uClose: 39,
          uHigh: 39.95,
          uLow: 38.19,
          uVolume: 2455938,
          change: -2.17,
          changePercent: -5.4722,
          label: "Nov 19, 19",
          changeOverTime: 0.121886
        },
        {
          date: "2022-11-20",
          open: 38.53,
          close: 40.35,
          high: 39.78,
          low: 38.11,
          volume: 2824626,
          uOpen: 38.08,
          uClose: 40,
          uHigh: 39.68,
          uLow: 38.39,
          uVolume: 2753415,
          change: 1.11,
          changePercent: 3.011,
          label: "Nov 20, 19",
          changeOverTime: 0.154067
        },
        {
          date: "2022-11-21",
          open: 39.6,
          close: 40.09,
          high: 41.33,
          low: 38.87,
          volume: 3427350,
          uOpen: 40.88,
          uClose: 41.7,
          uHigh: 40.13,
          uLow: 40.44,
          uVolume: 3368350,
          change: 0.93,
          changePercent: 2.45,
          label: "Nov 21, 19",
          changeOverTime: 0.181371
        },
        {
          date: "2022-11-22",
          open: 40.51,
          close: 43.2,
          high: 41.41,
          low: 40.2,
          volume: 3748525,
          uOpen: 39.99,
          uClose: 42.6,
          uHigh: 41.69,
          uLow: 41.6,
          uVolume: 3744138,
          change: 1.36,
          changePercent: 3.3768,
          label: "Nov 22, 19",
          changeOverTime: 0.224899
        },
        {
          date: "2022-11-25",
          open: 42.43,
          close: 42.63,
          high: 41.9,
          low: 41.7,
          volume: 2797902,
          uOpen: 42.21,
          uClose: 42.61,
          uHigh: 41.76,
          uLow: 42.2,
          uVolume: 2787678,
          change: -0.21,
          changePercent: -0.5315,
          label: "Nov 25, 19",
          changeOverTime: 0.211682
        },
        {
          date: "2022-11-26",
          open: 41.87,
          close: 40.39,
          high: 42.62,
          low: 40.42,
          volume: 2368962,
          uOpen: 42.26,
          uClose: 41.7,
          uHigh: 41.67,
          uLow: 40.45,
          uVolume: 2344501,
          change: -0.7,
          changePercent: -1.7388,
          label: "Nov 26, 19",
          changeOverTime: 0.191759
        },
        {
          date: "2022-11-27",
          open: 41.92,
          close: 40,
          high: 41.98,
          low: 39.97,
          volume: 2331335,
          uOpen: 41.88,
          uClose: 41,
          uHigh: 40.72,
          uLow: 39.54,
          uVolume: 2320826,
          change: -1.2,
          changePercent: -3.114,
          label: "Nov 27, 19",
          changeOverTime: 0.154846
        },
        {
          date: "2022-11-29",
          open: 39.96,
          close: 39.75,
          high: 39.65,
          low: 39.95,
          volume: 940129,
          uOpen: 39.77,
          uClose: 40.44,
          uHigh: 39.97,
          uLow: 38.9,
          uVolume: 936524,
          change: 0.16,
          changePercent: 0.3998,
          label: "Nov 29, 19",
          changeOverTime: 0.1583
        },
        {
          date: "2022-12-02",
          open: 39.69,
          close: 41.17,
          high: 41.82,
          low: 38.75,
          volume: 3215782,
          uOpen: 40.3,
          uClose: 41.32,
          uHigh: 40.6,
          uLow: 39.75,
          uVolume: 3114082,
          change: 0.72,
          changePercent: 1.8667,
          label: "Dec 2, 19",
          changeOverTime: 0.1814
        },
        {
          date: "2022-12-03",
          open: 40.98,
          close: 40.46,
          high: 42.09,
          low: 40.85,
          volume: 2415909,
          uOpen: 39.51,
          uClose: 42.17,
          uHigh: 41.35,
          uLow: 40.85,
          uVolume: 2358707,
          change: 0.34,
          changePercent: 0.824,
          label: "Dec 3, 19",
          changeOverTime: 0.1935
        },
        {
          date: "2022-12-04",
          open: 41.67,
          close: 41.84,
          high: 42.78,
          low: 41,
          volume: 2687715,
          uOpen: 41.34,
          uClose: 40.91,
          uHigh: 42.21,
          uLow: 42,
          uVolume: 2645240,
          change: 0.41,
          changePercent: 0.9874,
          label: "Dec 4, 19",
          changeOverTime: 0.201521
        },
        {
          date: "2022-12-05",
          open: 41.71,
          close: 41.56,
          high: 42.91,
          low: 41.3,
         
        },
        {
          date: "2022-12-06",
          open: 43.2,
          close: 42.78,
          high: 43.5,
          low: 42.6,
          volume: 4979568,
          uOpen: 41.41,
          uClose: 42.55,
          uHigh: 43.52,
          uLow: 41.73,
          uVolume: 4874735,
          change: 0.02,
          changePercent: 0.0493,
          label: "Dec 6, 19",
          changeOverTime: 0.223518
        },
        {
          date: "2022-12-09",
          open: 41.54,
          close: 41.24,
          high: 43.26,
          low: 41.04,
          volume: 4044464,
          uOpen: 41.53,
          uClose: 42.49,
          uHigh: 42.82,
          uLow: 40.61,
          uVolume: 4064602,
          change: -0.3,
          changePercent: -0.7155,
          label: "Dec 9, 19",
          changeOverTime: 0.215761
        },
        {
          date: "2022-12-10",
          open: 42.46,
          close: 43.16,
          high: 42.6,
          low: 41.65,
          volume: 4041974,
          uOpen: 42.63,
          uClose: 43.45,
          uHigh: 42,
          uLow: 40.61,
          uVolume: 3978412,
          change: 0.77,
          changePercent: 1.8707,
          label: "Dec 10, 19",
          changeOverTime: 0.233554
        },
        {
          date: "2022-12-11",
          open: 42.9,
          close: 44.07,
          high: 44.34,
          low: 42.59,
          volume: 3608823,
          uOpen: 43.2,
          uClose: 44.06,
          uHigh: 44.95,
          uLow: 42.14,
          uVolume: 3538718,
          change: 1.26,
          changePercent: 3.0731,
          label: "Dec 11, 19",
          changeOverTime: 0.276079
        },
        {
          date: "2022-12-12",
          open: 43.6,
          close: 43.88,
          high: 44.1,
          low: 43.03,
          volume: 2553774,
          uOpen: 44.1,
          uClose: 44.67,
          uHigh: 43.4,
          uLow: 43.77,
          uVolume: 2565016,
          change: -0.2,
          changePercent: -0.4835,
          label: "Dec 12, 19",
          changeOverTime: 0.25902
        },
        {
          date: "2022-12-13",
          open: 43.5,
          close: 43.33,
          high: 44.35,
          low: 41.94,
          volume: 3337673,
          uOpen: 42.6,
          uClose: 43.62,
          uHigh: 43.98,
          uLow: 42.11,
          uVolume: 3225719,
          change: -0.28,
          changePercent: -0.6349,
          label: "Dec 13, 19",
          changeOverTime: 0.257432
        },
        {
          date: "2022-12-16",
          open: 44.34,
          close: 44,
          high: 44.67,
          low: 43.35,
          volume: 3170427,
          uOpen: 44.32,
          uClose: 44,
          uHigh: 44.21,
          uLow: 42.53,
          uVolume: 3254426,
          change: 0.75,
          changePercent: 1.793,
          label: "Dec 16, 19",
          changeOverTime: 0.278754
        },
        {
          date: "2022-12-17",
          open: 43.78,
          close: 44.75,
          high: 45.61,
          low: 43.6,
          volume: 1885914,
          uOpen: 43.74,
          uClose: 45.31,
          uHigh: 44.04,
          uLow: 44.3,
          uVolume: 1843376,
          change: 0.29,
          changePercent: 0.7075,
          label: "Dec 17, 19",
          changeOverTime: 0.286196
        },
        {
          date: "2022-12-18",
          open: 44.7,
          close: 46.06,
          high: 45.44,
          low: 44.35,
          volume: 5388376,
          uOpen: 44,
          uClose: 45.56,
          uHigh: 46.55,
          uLow: 45.25,
          uVolume: 5397277,
          change: 0.97,
          changePercent: 2.2507,
          label: "Dec 18, 19",
          changeOverTime: 0.324178
        },
        {
          date: "2022-12-19",
          open: 45.88,
          close: 46.42,
          high: 46.25,
          low: 44.41,
          volume: 1799269,
          uOpen: 44.75,
          uClose: 45.4,
          uHigh: 45.49,
          uLow: 44.44,
          uVolume: 1814408,
          change: 0.7,
          changePercent: 1.5879,
          label: "Dec 19, 19",
          changeOverTime: 0.341763
        },
        {
          date: "2022-12-20",
          open: 45.68,
          close: 44,
          high: 47.08,
          low: 43.82,
          volume: 2130269,
          uOpen: 46.59,
          uClose: 44.32,
          uHigh: 47.38,
          uLow: 45.7,
          uVolume: 2116397,
          change: -1.02,
          changePercent: -2.3298,
          label: "Dec 20, 19",
          changeOverTime: 0.313338
        },
        {
          date: "2022-12-23",
          open: 45.06,
          close: 46,
          high: 45.57,
          low: 45.11,
          volume: 1745837,
          uOpen: 45.93,
          uClose: 45.7,
          uHigh: 45.33,
          uLow: 44.13,
          uVolume: 1773684,
          change: 0.49,
          changePercent: 1.1098,
          label: "Dec 23, 19",
          changeOverTime: 0.318653
        },
        {
          date: "2022-12-24",
          open: 45.95,
          close: 45.49,
          high: 45.4,
          low: 46.3,
          volume: 2281142,
          uOpen: 46.01,
          uClose: 45.62,
          uHigh: 45.18,
          uLow: 46,
          uVolume: 2272076,
          change: 0.6,
          changePercent: 1.3653,
          label: "Dec 24, 19",
          changeOverTime: 0.340028
        },
        {
          date: "2022-12-26",
          open: 45.23,
          close: 45.81,
          high: 47.52,
          low: 45.69,
          volume: 1007288,
          uOpen: 46.82,
          uClose: 47.07,
          uHigh: 46.55,
          uLow: 46.71,
          uVolume: 1004690,
          change: 0.6,
          changePercent: 1.2985,
          label: "Dec 26, 19",
          changeOverTime: 0.352027
        },
        {
          date: "2022-12-27",
          open: 47.63,
          close: 46.7,
          high: 47.13,
          low: 45.41,
          volume: 1547642,
          uOpen: 46.5,
          uClose: 47.8,
          uHigh: 47.99,
          uLow: 47.29,
          uVolume: 1496844,
          change: 0.54,
          changePercent: 1.2306,
          label: "Dec 27, 19",
          changeOverTime: 0.37105
        },
        {
          date: "2022-12-30",
          open: 46.74,
          close: 47.75,
          high: 47.17,
          low: 45.94,
          volume: 1564049,
          uOpen: 46.76,
          uClose: 46.76,
          uHigh: 46.96,
          uLow: 46.03,
          uVolume: 1570778,
          change: -0.48,
          changePercent: -1.0364,
          label: "Dec 30, 19",
          changeOverTime: 0.35
        },
        {
          date: "2022-12-31",
          open: 47.13,
          close: 47.24,
          high: 47.68,
          low: 45.63,
          volume: 1546059,
          uOpen: 47.43,
          uClose: 46.78,
          uHigh: 47.51,
          uLow: 46.22,
          uVolume: 1579825,
          change: 0.31,
          changePercent: 0.7029,
          label: "Dec 31, 19",
          changeOverTime: 0.366055
        },
        {
          date: "2023-01-02",
          open: 47.08,
          close: 45.43,
          high: 46.63,
          low: 46.91,
          volume: 2244769,
          uOpen: 46.64,
          uClose: 46.29,
          uHigh: 48.74,
          uLow: 45.32,
          uVolume: 2209444,
          change: -0.76,
          changePercent: -1.634,
          label: "Jan 2, 20",
          changeOverTime: 0.337854
        },
        {
          date: "2023-01-03",
          open: 44.83,
          close: 46.74,
          high: 47.4,
          low: 44.77,
          volume: 2231937,
          uOpen: 46.56,
          uClose: 44.97,
          uHigh: 47.52,
          uLow: 44.61,
          uVolume: 2231156,
          change: -0.51,
          changePercent: -1.1018,
          label: "Jan 3, 20",
          changeOverTime: 0.327509
        },
        {
          date: "2023-01-06",
          open: 45.13,
          close: 46.2,
          high: 46.06,
          low: 46.13,
          volume: 2636978,
          uOpen: 45.18,
          uClose: 44.93,
          uHigh: 46.7,
          uLow: 44.17,
          uVolume: 2539124,
          change: -0.08,
          changePercent: -0.1806,
          label: "Jan 6, 20",
          changeOverTime: 0.32392
        },
        {
          date: "2023-01-07",
          open: 46.95,
          close: 47.21,
          high: 46.58,
          low: 46.09,
          volume: 2204053,
          uOpen: 45.83,
          uClose: 46.18,
          uHigh: 47.73,
          uLow: 45.64,
          uVolume: 2184855,
          change: 1.15,
          changePercent: 2.5379,
          label: "Jan 7, 20",
          changeOverTime: 0.368658
        },
        {
          date: "2023-01-08",
          open: 46.18,
          close: 46.75,
          high: 47.4,
          low: 46.74,
          volume: 2835645,
          uOpen: 46.19,
          uClose: 47.15,
          uHigh: 46.5,
          uLow: 47.48,
          uVolume: 2840960,
          change: 0,
          changePercent: 0,
          label: "Jan 8, 20",
          changeOverTime: 0.367444
        },
        {
          date: "2023-01-09",
          open: 47.65,
          close: 46.1,
          high: 46.69,
          low: 45.94,
          volume: 1798940,
          uOpen: 48.41,
          uClose: 47.18,
          uHigh: 48.4,
          uLow: 46.41,
          uVolume: 1871398,
          change: 0.01,
          changePercent: 0.0222,
          label: "Jan 9, 20",
          changeOverTime: 0.364816
        },
        {
          date: "2023-01-10",
          open: 47.7,
          close: 47.41,
          high: 46.19,
          low: 47.06,
          volume: 1438084,
          uOpen: 48.12,
          uClose: 46.72,
          uHigh: 46.48,
          uLow: 46.51,
          uVolume: 1475593,
          change: -0.2,
          changePercent: -0.428,
          label: "Jan 10, 20",
          changeOverTime: 0.350805
        },
        {
          date: "2023-01-13",
          open: 47.05,
          close: 47.19,
          high: 48.96,
          low: 47.1,
          volume: 1885520,
          uOpen: 46.72,
          uClose: 46.58,
          uHigh: 48.74,
          uLow: 46.4,
          uVolume: 1835214,
          change: 1.03,
          changePercent: 2.1742,
          label: "Jan 13, 20",
          changeOverTime: 0.391872
        },
        {
          date: "2023-01-14",
          open: 46.35,
          close: 48.11,
          high: 48.66,
          low: 46.73,
          volume: 2852495,
          uOpen: 48.22,
          uClose: 48.85,
          uHigh: 49.41,
          uLow: 48.11,
          uVolume: 2926009,
          change: 0.49,
          changePercent: 1.092,
          label: "Jan 14, 20",
          changeOverTime: 0.41189
        },
        {
          date: "2023-01-15",
          open: 47.81,
          close: 48.09,
          high: 48.18,
          low: 47.99,
          volume: 2449875,
          uOpen: 47.84,
          uClose: 47.93,
          uHigh: 49.16,
          uLow: 47.4,
          uVolume: 2508068,
          change: -0.4,
          changePercent: -0.8613,
          label: "Jan 15, 20",
          changeOverTime: 0.39127
        },
        {
          date: "2023-01-16",
          open: 48.04,
          close: 47.66,
          high: 48.84,
          low: 47,
          volume: 4557541,
          uOpen: 49.19,
          uClose: 48.97,
          uHigh: 48.19,
          uLow: 47,
          uVolume: 4554773,
          change: 0.5,
          changePercent: 1.0982,
          label: "Jan 16, 20",
          changeOverTime: 0.398581
        },
        {
          date: "2023-01-17",
          open: 47.66,
          close: 48.89,
          high: 49.02,
          low: 48.71,
          volume: 3070011,
          uOpen: 49.23,
          uClose: 49.04,
          uHigh: 48.24,
          uLow: 47.69,
          uVolume: 3009781,
          change: 0.79,
          changePercent: 1.672,
          label: "Jan 17, 20",
          changeOverTime: 0.434328
        },
        {
          date: "2023-01-21",
          open: 48.18,
          close: 49.52,
          high: 50.67,
          low: 48.11,
          volume: 1693203,
          uOpen: 49.58,
          uClose: 50.43,
          uHigh: 50.62,
          uLow: 49.17,
          uVolume: 1689118,
          change: 0.19,
          changePercent: 0.4057,
          label: "Jan 21, 20",
          changeOverTime: 0.431955
        },
        {
          date: "2023-01-22",
          open: 48.3,
          close: 48.28,
          high: 50.6,
          low: 49.41,
          volume: 1566984,
          uOpen: 48.8,
          uClose: 48.63,
          uHigh: 49.05,
          uLow: 48.95,
          uVolume: 1573676,
          change: -0.06,
          changePercent: -0.1265,
          label: "Jan 22, 20",
          changeOverTime: 0.424542
        },
        {
          date: "2023-01-23",
          open: 48.48,
          close: 48.47,
          high: 50.19,
          low: 49.69,
          volume: 1550914,
          uOpen: 48.01,
          uClose: 49.02,
          uHigh: 49.62,
          uLow: 48.69,
          uVolume: 1523544,
          change: 0.14,
          changePercent: 0.298,
          label: "Jan 23, 20",
          changeOverTime: 0.443
        },
        {
          date: "2023-01-24",
          open: 50.1,
          close: 50.6,
          high: 49.11,
          low: 48.47,
          volume: 3162138,
          uOpen: 49.7,
          uClose: 49.12,
          uHigh: 49.82,
          uLow: 48.12,
          uVolume: 3182422,
          change: 0.22,
          changePercent: 0.4506,
          label: "Jan 24, 20",
          changeOverTime: 0.445355
        },
        {
          date: "2023-01-27",
          open: 49.64,
          close: 48.94,
          high: 49.37,
          low: 47.8,
          volume: 2098460,
          uOpen: 47.95,
          uClose: 48.07,
          uHigh: 48.95,
          uLow: 47.4,
          uVolume: 2043522,
          change: -1.27,
          changePercent: -2.6018,
          label: "Jan 27, 20",
          changeOverTime: 0.400044
        },
        {
          date: "2023-01-28",
          open: 47.8,
          close: 47.78,
          high: 48.51,
          low: 49.02,
          volume: 2086436,
          uOpen: 48.5,
          uClose: 48.31,
          uHigh: 49.16,
          uLow: 48.43,
          uVolume: 2088876,
          change: -0.02,
          changePercent: -0.0426,
          label: "Jan 28, 20",
          changeOverTime: 0.396792
        },
        {
          date: "2023-01-29",
          open: 48.5,
          close: 49.25,
          high: 50.08,
          low: 48.19,
          volume: 2075493,
          uOpen: 48.04,
          uClose: 48.71,
          uHigh: 49.79,
          uLow: 47.88,
          uVolume: 2075113,
          change: 0.58,
          changePercent: 1.2293,
          label: "Jan 29, 20",
          changeOverTime: 0.41235
        },
        {
          date: "2023-01-30",
          open: 48.46,
          close: 48.57,
          high: 49.47,
          low: 47.89,
          volume: 1293161,
          uOpen: 47.81,
          uClose: 49.07,
          uHigh: 48.86,
          uLow: 46.91,
          uVolume: 1316043,
          change: -0.4,
          changePercent: -0.8497,
          label: "Jan 30, 20",
          changeOverTime: 0.417095
        },
        {
          date: "2023-01-31",
          open: 49.2,
          close: 46.78,
          high: 49,
          low: 45.52,
          volume: 1937638,
          uOpen: 48.8,
          uClose: 46.63,
          uHigh: 47.6,
          uLow: 45.87,
          uVolume: 1892186,
          change: -1.14,
          changePercent: -2.4,
          label: "Jan 31, 20",
          changeOverTime: 0.37076
        },
        {
          date: "2023-02-03",
          open: 47.84,
          close: 48.85,
          high: 47.17,
          low: 46.75,
          volume: 1058785,
          uOpen: 46.7,
          uClose: 48.06,
          uHigh: 47.33,
          uLow: 46.87,
          uVolume: 1062627,
          change: 0.38,
          changePercent: 0.8027,
          label: "Feb 3, 20",
          changeOverTime: 0.396564
        },
        {
          date: "2023-02-04",
          open: 49.22,
          close: 49.4,
          high: 49.65,
          low: 47.97,
          volume: 1668735,
          uOpen: 49.39,
          uClose: 50.83,
          uHigh: 49.9,
          uLow: 48.42,
          uVolume: 1667918,
          change: 2.5,
          changePercent: 5.2626,
          label: "Feb 4, 20",
          changeOverTime: 0.462467
        },
        {
          date: "2023-02-05",
          open: 51.35,
          close: 50.71,
          high: 51,
          low: 49.71,
          volume: 2257712,
          uOpen: 51.23,
          uClose: 49.19,
          uHigh: 50.2,
          uLow: 49.44,
          uVolume: 2255050,
          change: 0.14,
          changePercent: 0.2661,
          label: "Feb 5, 20",
          changeOverTime: 0.464711
        },
        {
          date: "2023-02-06",
          open: 49.32,
          close: 51.11,
          high: 51.13,
          low: 50.42,
          volume: 3494975,
          uOpen: 50.67,
          uClose: 51.6,
          uHigh: 51.75,
          uLow: 50.58,
          uVolume: 3493465,
          change: 1.05,
          changePercent: 2.2215,
          label: "Feb 6, 20",
          changeOverTime: 0.503036
        },
        {
          date: "2023-02-07",
          open: 52.43,
          close: 52.01,
          high: 53.58,
          low: 51.07,
          volume: 2812294,
          uOpen: 52.61,
          uClose: 51.6,
          uHigh: 51.57,
          uLow: 51.99,
          uVolume: 2883659,
          change: 0.02,
          changePercent: 0.0412,
          label: "Feb 7, 20",
          changeOverTime: 0.50744
        },
        {
          date: "2023-02-10",
          open: 52,
          close: 52.25,
          high: 52.82,
          low: 51.48,
          volume: 2088125,
          uOpen: 52,
          uClose: 51.91,
          uHigh: 51.64,
          uLow: 52.4,
          uVolume: 2112854,
          change: 0.29,
          changePercent: 0.5644,
          label: "Feb 10, 20",
          changeOverTime: 0.504868
        },
        {
          date: "2023-02-11",
          open: 50.75,
          close: 52.38,
          high: 53.93,
          low: 51.59,
          volume: 2656238,
          uOpen: 52.79,
          uClose: 52.52,
          uHigh: 52.18,
          uLow: 52.66,
          uVolume: 2664417,
          change: 0.38,
          changePercent: 0.7623,
          label: "Feb 11, 20",
          changeOverTime: 0.513742
        },
        {
          date: "2023-02-12",
          open: 52.19,
          close: 52.76,
          high: 52.01,
          low: 51.52,
          volume: 1761837,
          uOpen: 53.13,
          uClose: 51.41,
          uHigh: 53.8,
          uLow: 51.42,
          uVolume: 1774812,
          change: -0.16,
          changePercent: -0.3163,
          label: "Feb 12, 20",
          changeOverTime: 0.511551
        },
        {
          date: "2023-02-13",
          open: 51.55,
          close: 53.73,
          high: 55.21,
          low: 52.06,
          volume: 3881933,
          uOpen: 52.94,
          uClose: 51.84,
          uHigh: 53.5,
          uLow: 50.46,
          uVolume: 3729984,
          change: 1.08,
          changePercent: 2.1462,
          label: "Feb 13, 20",
          changeOverTime: 0.553317
        },
        {
          date: "2023-02-14",
          open: 52,
          close: 52.98,
          high: 52.58,
          low: 51.32,
          volume: 1372336,
          uOpen: 51,
          uClose: 51.96,
          uHigh: 53.72,
          uLow: 52.06,
          uVolume: 1348117,
          change: 0.14,
          changePercent: 0.2799,
          label: "Feb 14, 20",
          changeOverTime: 0.544297
        },
        {
          date: "2023-02-18",
          open: 53.39,
          close: 52.36,
          high: 55.66,
          low: 54.1,
          volume: 4904739,
          uOpen: 52.51,
          uClose: 53.62,
          uHigh: 54.01,
          uLow: 51.9,
          uVolume: 4857484,
          change: 0.44,
          changePercent: 0.87,
          label: "Feb 18, 20",
          changeOverTime: 0.550921
        },
        {
          date: "2023-02-19",
          open: 55.1,
          close: 56.42,
          high: 57.5,
          low: 52.84,
          volume: 7249561,
          uOpen: 55.03,
          uClose: 54.69,
          uHigh: 57.75,
          uLow: 53.19,
          uVolume: 6974177,
          change: 2.3,
          changePercent: 4.352,
          label: "Feb 19, 20",
          changeOverTime: 0.611965
        },
        {
          date: "2023-02-20",
          open: 63.93,
          close: 63.7,
          high: 67.88,
          low: 64.67,
          volume: 20152454,
          uOpen: 62.91,
          uClose: 64.05,
          uHigh: 67.32,
          uLow: 62.9,
          uVolume: 19494864,
          change: 9.28,
          changePercent: 17.0981,
          label: "Feb 20, 20",
          changeOverTime: 0.921422
        },
        {
          date: "2023-02-21",
          open: 63.23,
          close: 65,
          high: 66.57,
          low: 65.64,
          volume: 7042314,
          uOpen: 65.16,
          uClose: 66,
          uHigh: 68,
          uLow: 65.32,
          uVolume: 6955470,
          change: 1.38,
          changePercent: 2.2297,
          label: "Feb 21, 20",
          changeOverTime: 0.953469
        },
        {
          date: "2023-02-24",
          open: 63.1,
          close: 60.1,
          high: 63.07,
          low: 58.86,
          volume: 8915859,
          uOpen: 61.86,
          uClose: 62.47,
          uHigh: 63.91,
          uLow: 61.1,
          uVolume: 8638833,
          change: -5.38,
          changePercent: -8.2212,
          label: "Feb 24, 20",
          changeOverTime: 0.782824
        },
        {
          date: "2023-02-25",
          open: 60.3,
          close: 59.29,
          high: 62,
          low: 58.46,
          volume: 3362544,
          uOpen: 62.86,
          uClose: 58.9,
          uHigh: 61.3,
          uLow: 58.58,
          uVolume: 3362907,
          change: -1.95,
          changePercent: -3.3124,
          label: "Feb 25, 20",
          changeOverTime: 0.726049
        },
        {
          date: "2023-02-26",
          open: 58.4,
          close: 57.97,
          high: 60.67,
          low: 58.87,
          volume: 4794291,
          uOpen: 59.5,
          uClose: 59.69,
          uHigh: 59.69,
          uLow: 56.82,
          uVolume: 4822847,
          change: -0.7,
          changePercent: -1.2435,
          label: "Feb 26, 20",
          changeOverTime: 0.698812
        },
        {
          date: "2023-02-27",
          open: 57,
          close: 55.85,
          high: 59.07,
          low: 54.35,
          volume: 4047778,
          uOpen: 56,
          uClose: 54.64,
          uHigh: 59.27,
          uLow: 54.07,
          uVolume: 3927905,
          change: -2.52,
          changePercent: -4.4424,
          label: "Feb 27, 20",
          changeOverTime: 0.620978
        },
        {
          date: "2023-02-28",
          open: 56,
          close: 56.97,
          high: 57.3,
          low: 52.03,
          volume: 5851971,
          uOpen: 55,
          uClose: 58.45,
          uHigh: 57.3,
          uLow: 52.81,
          uVolume: 5921181,
          change: 1.24,
          changePercent: 2.2791,
          label: "Feb 28, 20",
          changeOverTime: 0.660746
        },
        {
          date: "2023-03-02",
          open: 56.44,
          close: 54.5,
          high: 58.17,
          low: 54.44,
          volume: 4166814,
          uOpen: 58.29,
          uClose: 55,
          uHigh: 58.2,
          uLow: 54.18,
          uVolume: 4179194,
          change: -1.48,
          changePercent: -2.5378,
          label: "Mar 2, 20",
          changeOverTime: 0.610416
        },
        {
          date: "2023-03-03",
          open: 56.36,
          close: 55.55,
          high: 56.81,
          low: 51.9,
          volume: 3165374,
          uOpen: 54.99,
          uClose: 54.5,
          uHigh: 56.8,
          uLow: 53.5,
          uVolume: 3053736,
          change: -1.23,
          changePercent: -2.1907,
          label: "Mar 3, 20",
          changeOverTime: 0.58889
        },
        {
          date: "2023-03-04",
          open: 55.15,
          close: 54.52,
          high: 57.01,
          low: 55.65,
          volume: 1969099,
          uOpen: 56.48,
          uClose: 54.58,
          uHigh: 56.72,
          uLow: 54.34,
          uVolume: 1970551,
          change: 1.09,
          changePercent: 2.0472,
          label: "Mar 4, 20",
          changeOverTime: 0.61544
        },
        {
          date: "2023-03-05",
          open: 55.25,
          close: 52.89,
          high: 54.42,
          low: 51.08,
          volume: 2420775,
          uOpen: 55.01,
          uClose: 53.83,
          uHigh: 55.61,
          uLow: 53.23,
          uVolume: 2377498,
          change: -2.8,
          changePercent: -5.204,
          label: "Mar 5, 20",
          changeOverTime: 0.525582
        },
        {
          date: "2023-03-06",
          open: 51.01,
          close: 51.77,
          high: 53.36,
          low: 48.87,
          volume: 3141870,
          uOpen: 50.81,
          uClose: 51.49,
          uHigh: 51.29,
          uLow: 49.78,
          uVolume: 3182581,
          change: -2.2,
          changePercent: -4.4353,
          label: "Mar 6, 20",
          changeOverTime: 0.481616
        },
        {
          date: "2023-03-09",
          open: 46.75,
          close: 45.17,
          high: 46.38,
          low: 44.49,
          volume: 4652912,
          uOpen: 46.53,
          uClose: 45.76,
          uHigh: 46.93,
          uLow: 46.04,
          uVolume: 4672987,
          change: -4.57,
          changePercent: -9.2491,
          label: "Mar 9, 20",
          changeOverTime: 0.342603
        },
        {
          date: "2023-03-10",
          open: 47.08,
          close: 46.71,
          high: 48.43,
          low: 42.11,
          volume: 4682252,
          uOpen: 48.29,
          uClose: 46.74,
          uHigh: 48.87,
          uLow: 41.65,
          uVolume: 4639639,
          change: 0.43,
          changePercent: 0.941,
          label: "Mar 10, 20",
          changeOverTime: 0.344948
        },
        {
          date: "2023-03-11",
          open: 45.38,
          close: 43.03,
          high: 44.84,
          low: 40.25,
          volume: 5323041,
          uOpen: 43.82,
          uClose: 42.28,
          uHigh: 45.35,
          uLow: 41.45,
          uVolume: 5332339,
          change: -4,
          changePercent: -8.617,
          label: "Mar 11, 20",
          changeOverTime: 0.232207
        },
        {
          date: "2023-03-12",
          open: 38,
          close: 36.63,
          high: 38.68,
          low: 34.75,
          volume: 7912132,
          uOpen: 40,
          uClose: 37.05,
          uHigh: 38.44,
          uLow: 34.97,
          uVolume: 7791062,
          change: -6.17,
          changePercent: -14.4803,
          label: "Mar 12, 20",
          changeOverTime: 0.052644
        },
        {
          date: "2023-03-13",
          open: 39.47,
          close: 37.51,
          high: 41,
          low: 34.56,
          volume: 4708163,
          uOpen: 39.03,
          uClose: 37.94,
          uHigh: 41,
          uLow: 34.56,
          uVolume: 4791822,
          change: 0.84,
          changePercent: 2.3551,
          label: "Mar 13, 20",
          changeOverTime: 0.076718
        },
        {
          date: "2023-03-16",
          open: 32.53,
          close: 29.97,
          high: 33,
          low: 28.01,
          volume: 7337898,
          uOpen: 31.52,
          uClose: 28.9,
          uHigh: 33,
          uLow: 28.23,
          uVolume: 7466123,
          change: -7.71,
          changePercent: -21.2668,
          label: "Mar 16, 20",
          changeOverTime: -0.154443
        },
        {
          date: "2023-03-17",
          open: 29.3,
          close: 29.3,
          high: 30.92,
          low: 25.89,
          volume: 5700201,
          uOpen: 30.6,
          uClose: 28.29,
          uHigh: 31.17,
          uLow: 25.59,
          uVolume: 5531575,
          change: -0.57,
          changePercent: -1.9431,
          label: "Mar 17, 20",
          changeOverTime: -0.172099
        },
        {
          date: "2023-03-18",
          open: 27.17,
          close: 25.21,
          high: 26.81,
          low: 20.08,
          volume: 9483232,
          uOpen: 26.74,
          uClose: 25.61,
          uHigh: 27,
          uLow: 20.23,
          uVolume: 9740632,
          change: -3.15,
          changePercent: -11.3624,
          label: "Mar 18, 20",
          changeOverTime: -0.266802
        },
        {
          date: "2023-03-19",
          open: 25.22,
          close: 27.34,
          high: 28.27,
          low: 23.48,
          volume: 5296850,
          uOpen: 25.32,
          uClose: 26.38,
          uHigh: 27.79,
          uLow: 23.63,
          uVolume: 5478589,
          change: 1.35,
          changePercent: 5.256,
          label: "Mar 19, 20",
          changeOverTime: -0.230395
        },
        {
          date: "2023-03-20",
          open: 27.62,
          close: 27.88,
          high: 32.21,
          low: 26.66,
          volume: 8228380,
          uOpen: 27.61,
          uClose: 28.15,
          uHigh: 32.24,
          uLow: 27.4,
          uVolume: 8251335,
          change: 0.91,
          changePercent: 3.4186,
          label: "Mar 20, 20",
          changeOverTime: -0.205202
        },
        {
          date: "2023-03-23",
          open: 28.04,
          close: 32.35,
          high: 32.22,
          low: 26.9,
          volume: 7862800,
          uOpen: 27.61,
          uClose: 32.33,
          uHigh: 31.69,
          uLow: 27.06,
          uVolume: 7896729,
          change: 4.16,
          changePercent: 14.8559,
          label: "Mar 23, 20",
          changeOverTime: -0.07647
        },
        {
          date: "2023-03-24",
          open: 35.85,
          close: 38.47,
          high: 40.1,
          low: 35.3,
          volume: 8720822,
          uOpen: 36.76,
          uClose: 36.83,
          uHigh: 40.4,
          uLow: 35.2,
          uVolume: 8558076,
          change: 5.9,
          changePercent: 18.8177,
          label: "Mar 24, 20",
          changeOverTime: 0.090634
        },
        {
          date: "2023-03-25",
          open: 37.17,
          close: 39.98,
          high: 44.24,
          low: 37.87,
          volume: 6776258,
          uOpen: 37.44,
          uClose: 40.08,
          uHigh: 45.34,
          uLow: 37.54,
          uVolume: 6863668,
          change: 3.09,
          changePercent: 8.5549,
          label: "Mar 25, 20",
          changeOverTime: 0.183329
        },
        {
          date: "2023-03-26",
          open: 41.5,
          close: 42.71,
          high: 42.71,
          low: 39.8,
          volume: 5865166,
          uOpen: 41.2,
          uClose: 42.18,
          uHigh: 43.72,
          uLow: 40.64,
          uVolume: 5875536,
          change: 0.92,
          changePercent: 2.297,
          label: "Mar 26, 20",
          changeOverTime: 0.20815
        },
        {
          date: "2023-03-27",
          open: 38.58,
          close: 39.06,
          high: 40.81,
          low: 38.45,
          volume: 4504876,
          uOpen: 39.43,
          uClose: 38.77,
          uHigh: 41.12,
          uLow: 37.12,
          uVolume: 4504415,
          change: -2.91,
          changePercent: -7.2413,
          label: "Mar 27, 20",
          changeOverTime: 0.12377
        },
        {
          date: "2023-03-30",
          open: 39.75,
          close: 37.43,
          high: 40.28,
          low: 36.18,
          volume: 4598458,
          uOpen: 39.06,
          uClose: 38.56,
          uHigh: 41.4,
          uLow: 36.11,
          uVolume: 4477356,
          change: -0.9,
          changePercent: -2.3815,
          label: "Mar 30, 20",
          changeOverTime: 0.09786
        },
        {
          date: "2023-03-31",
          open: 37.86,
          close: 37.03,
          high: 39.19,
          low: 35.89,
          volume: 4176393,
          uOpen: 37.57,
          uClose: 36.92,
          uHigh: 38.4,
          uLow: 35.24,
          uVolume: 4162168,
          change: -1.08,
          changePercent: -2.8227,
          label: "Mar 31, 20",
          changeOverTime: 0.06873
        },
        {
          date: "2023-04-01",
          open: 35.09,
          close: 33,
          high: 35.94,
          low: 32.4,
          volume: 6054881,
          uOpen: 34.36,
          uClose: 32.45,
          uHigh: 35.34,
          uLow: 31.97,
          uVolume: 6090273,
          change: -4.59,
          changePercent: -12.8553,
          label: "Apr 1, 20",
          changeOverTime: -0.071469
        },
        {
          date: "2023-04-02",
          open: 32.51,
          close: 31.36,
          high: 33.19,
          low: 29.83,
          volume: 4340447,
          uOpen: 31.21,
          uClose: 31.38,
          uHigh: 33.4,
          uLow: 30.48,
          uVolume: 4284035,
          change: -1.32,
          changePercent: -4.3042,
          label: "Apr 2, 20",
          changeOverTime: -0.1138
        },
        {
          date: "2023-04-03",
          open: 31.58,
          close: 31.02,
          high: 31.32,
          low: 29.53,
          volume: 3371618,
          uOpen: 30.98,
          uClose: 31.16,
          uHigh: 31.72,
          uLow: 30.05,
          uVolume: 3331987,
          change: 0.18,
          changePercent: 0.6249,
          label: "Apr 3, 20",
          changeOverTime: -0.103632
        },
        {
          date: "2023-04-06",
          open: 32.8,
          close: 38.43,
          high: 38.93,
          low: 32.66,
          volume: 4929697,
          uOpen: 33.01,
          uClose: 38.13,
          uHigh: 38.26,
          uLow: 33.49,
          uVolume: 5050497,
          change: 7.06,
          changePercent: 22.8363,
          label: "Apr 6, 20",
          changeOverTime: 0.098608
        },
        {
          date: "2023-04-07",
          open: 40.22,
          close: 39.6,
          high: 42.79,
          low: 38,
          volume: 5956689,
          uOpen: 40.27,
          uClose: 39.1,
          uHigh: 43.14,
          uLow: 39.1,
          uVolume: 5933744,
          change: 0.71,
          changePercent: 1.8806,
          label: "Apr 7, 20",
          changeOverTime: 0.122962
        },
        {
          date: "2023-04-08",
          open: 40.82,
          close: 40.3,
          high: 41.3,
          low: 39.59,
          volume: 5700339,
          uOpen: 39.16,
          uClose: 40.42,
          uHigh: 41.8,
          uLow: 39.04,
          uVolume: 5551999,
          change: 1.41,
          changePercent: 3.7573,
          label: "Apr 8, 20",
          changeOverTime: 0.166948
        },
        {
          date: "2023-04-09",
          open: 42.56,
          close: 42.12,
          high: 42.83,
          low: 40.26,
          volume: 4748921,
          uOpen: 42.56,
          uClose: 41.15,
          uHigh: 43.9,
          uLow: 40.82,
          uVolume: 4829968,
          change: 1.46,
          changePercent: 3.8487,
          label: "Apr 9, 20",
          changeOverTime: 0.20994
        },
        {
          date: "2023-04-13",
          open: 41.14,
          close: 39.57,
          high: 42.09,
          low: 37.97,
          volume: 2536659,
          uOpen: 40.38,
          uClose: 39.97,
          uHigh: 41.64,
          uLow: 38.96,
          uVolume: 2626143,
          change: -2.19,
          changePercent: -5.5932,
          label: "Apr 13, 20",
          changeOverTime: 0.139859
        },
        {
          date: "2023-04-14",
          open: 40.33,
          close: 39.5,
          high: 42.01,
          low: 39.7,
          volume: 3572563,
          uOpen: 41.12,
          uClose: 39.7,
          uHigh: 41.02,
          uLow: 38.6,
          uVolume: 3479573,
          change: 0.26,
          changePercent: 0.6722,
          label: "Apr 14, 20",
          changeOverTime: 0.149793
        },
        {
          date: "2023-04-15",
          open: 38.24,
          close: 37.46,
          high: 37.72,
          low: 37.13,
          volume: 3626593,
          uOpen: 38.6,
          uClose: 36.41,
          uHigh: 38.6,
          uLow: 36.8,
          uVolume: 3643e3,
          change: -2.61,
          changePercent: -6.9108,
          label: "Apr 15, 20",
          changeOverTime: 0.069413
        },
        {
          date: "2023-04-16",
          open: 37.45,
          close: 34.7,
          high: 37.07,
          low: 33.97,
          volume: 3291147,
          uOpen: 36.75,
          uClose: 34.17,
          uHigh: 38.32,
          uLow: 34.52,
          uVolume: 3249128,
          change: -2.78,
          changePercent: -7.6247,
          label: "Apr 16, 20",
          changeOverTime: -0.01316
        },
        {
          date: "2023-04-17",
          open: 35.43,
          close: 37.92,
          high: 37.91,
          low: 35.1,
          volume: 3095232,
          uOpen: 36.74,
          uClose: 36.65,
          uHigh: 37.11,
          uLow: 35,
          uVolume: 3093215,
          change: 3.1,
          changePercent: 8.9248,
          label: "Apr 17, 20",
          changeOverTime: 0.076802
        },
        {
          date: "2023-04-20",
          open: 36,
          close: 37.44,
          high: 37.33,
          low: 35.43,
          volume: 2339418,
          uOpen: 35.28,
          uClose: 36.96,
          uHigh: 38.26,
          uLow: 35.27,
          uVolume: 2396599,
          change: 0.13,
          changePercent: 0.3677,
          label: "Apr 20, 20",
          changeOverTime: 0.082212
        },
        {
          date: "2023-04-21",
          open: 35.83,
          close: 36.8,
          high: 38.64,
          low: 35.35,
          volume: 1886815,
          uOpen: 36.95,
          uClose: 36.5,
          uHigh: 37.41,
          uLow: 35.52,
          uVolume: 1904771,
          change: -0.27,
          changePercent: -0.7363,
          label: "Apr 21, 20",
          changeOverTime: 0.071657
        },
        {
          date: "2023-04-22",
          open: 38.43,
          close: 40.6,
          high: 39.54,
          low: 37.54,
          volume: 3184601,
          uOpen: 37.57,
          uClose: 39.46,
          uHigh: 39.79,
          uLow: 38.24,
          uVolume: 3271350,
          change: 2.54,
          changePercent: 7.1218,
          label: "Apr 22, 20",
          changeOverTime: 0.15192
        },
        {
          date: "2023-04-23",
          open: 41,
          close: 38.93,
          high: 42.15,
          low: 39.19,
          volume: 2867327,
          uOpen: 39.34,
          uClose: 39,
          uHigh: 41.31,
          uLow: 38.94,
          uVolume: 2844288,
          change: -0.39,
          changePercent: -0.9824,
          label: "Apr 23, 20",
          changeOverTime: 0.13651
        },
        {
          date: "2023-04-24",
          open: 39,
          close: 41.1,
          high: 42.73,
          low: 39.32,
          volume: 3127803,
          uOpen: 39.4,
          uClose: 42.54,
          uHigh: 42.47,
          uLow: 40.12,
          uVolume: 3092452,
          change: 2.39,
          changePercent: 6.2802,
          label: "Apr 24, 20",
          changeOverTime: 0.21133
        },
        {
          date: "2023-04-27",
          open: 42.13,
          close: 44.29,
          high: 44.09,
          low: 42.1,
          volume: 2594437,
          uOpen: 41.88,
          uClose: 44.49,
          uHigh: 43.54,
          uLow: 41,
          uVolume: 2616165,
          change: 2.35,
          changePercent: 5.9304,
          label: "Apr 27, 20",
          changeOverTime: 0.283126
        },
        {
          date: "2023-04-28",
          open: 45,
          close: 42.65,
          high: 45.9,
          low: 42.34,
          volume: 2698941,
          uOpen: 46,
          uClose: 43.72,
          uHigh: 47.7,
          uLow: 43.27,
          uVolume: 2645368,
          change: -0.88,
          changePercent: -2.0427,
          label: "Apr 28, 20",
          changeOverTime: 0.251323
        },
        {
          date: "2023-04-29",
          open: 45.45,
          close: 47.08,
          high: 47.73,
          low: 45.2,
          volume: 3352490,
          uOpen: 45.98,
          uClose: 45.94,
          uHigh: 47.32,
          uLow: 43.33,
          uVolume: 3275150,
          change: 3.57,
          changePercent: 8.2455,
          label: "Apr 29, 20",
          changeOverTime: 0.363908
        },
        {
          date: "2023-04-30",
          open: 45.41,
          close: 44.13,
          high: 45.55,
          low: 44.7,
          volume: 3313924,
          uOpen: 46.26,
          uClose: 44.45,
          uHigh: 46.42,
          uLow: 44.38,
          uVolume: 3234484,
          change: -1.66,
          changePercent: -3.7303,
          label: "Apr 30, 20",
          changeOverTime: 0.302418
        },
        {
          date: "2023-05-01",
          open: 42.72,
          close: 43.98,
          high: 44.53,
          low: 41.32,
          volume: 2419428,
          uOpen: 41.79,
          uClose: 42.69,
          uHigh: 43.41,
          uLow: 42.12,
          uVolume: 2406372,
          change: -1.6,
          changePercent: -3.5278,
          label: "May 1, 20",
          changeOverTime: 0.268163
        },
        {
          date: "2023-05-04",
          open: 42.6,
          close: 43.31,
          high: 43.9,
          low: 41.79,
          volume: 1976993,
          uOpen: 43.55,
          uClose: 43.15,
          uHigh: 43.1,
          uLow: 41.63,
          uVolume: 1942559,
          change: 0.14,
          changePercent: 0.3126,
          label: "May 4, 20",
          changeOverTime: 0.271869
        },
        {
          date: "2023-05-05",
          open: 45.2,
          close: 44.9,
          high: 45.43,
          low: 43.91,
          volume: 3223418,
          uOpen: 45.6,
          uClose: 43.7,
          uHigh: 45.27,
          uLow: 44.34,
          uVolume: 3121254,
          change: 1.03,
          changePercent: 2.4457,
          label: "May 5, 20",
          changeOverTime: 0.292188
        },
        {
          date: "2023-05-06",
          open: 44.79,
          close: 45.45,
          high: 45.36,
          low: 45.49,
          volume: 4076870,
          uOpen: 45.23,
          uClose: 44.33,
          uHigh: 45.99,
          uLow: 44.61,
          uVolume: 4088599,
          change: -0.17,
          changePercent: -0.3952,
          label: "May 6, 20",
          changeOverTime: 0.28799
        },
        {
          date: "2023-05-07",
          open: 45.81,
          close: 50.17,
          high: 50.76,
          low: 45.31,
          volume: 7658071,
          uOpen: 44.72,
          uClose: 50.74,
          uHigh: 51.97,
          uLow: 44.73,
          uVolume: 7416023,
          change: 5.27,
          changePercent: 12.0591,
          label: "May 7, 20",
          changeOverTime: 0.449954
        },
        {
          date: "2023-05-08",
          open: 52,
          close: 54.13,
          high: 59.73,
          low: 49.77,
          volume: 12790072,
          uOpen: 53,
          uClose: 53.39,
          uHigh: 59.91,
          uLow: 49.74,
          uVolume: 12979282,
          change: 4.45,
          changePercent: 9.088,
          label: "May 8, 20",
          changeOverTime: 0.59392
        },
        {
          date: "2023-05-11",
          open: 54.19,
          close: 56.37,
          high: 58.24,
          low: 52.2,
          volume: 5254611,
          uOpen: 53.34,
          uClose: 57.27,
          uHigh: 58.18,
          uLow: 53.14,
          uVolume: 5273610,
          change: 2.93,
          changePercent: 5.3909,
          label: "May 11, 20",
          changeOverTime: 0.664999
        },
        {
          date: "2023-05-12",
          open: 54.26,
          close: 51.44,
          high: 57,
          low: 49.76,
          volume: 8831018,
          uOpen: 53.37,
          uClose: 50.77,
          uHigh: 55,
          uLow: 50.33,
          uVolume: 8794895,
          change: -6.74,
          changePercent: -12.0341,
          label: "May 12, 20",
          changeOverTime: 0.457483
        },
        {
          date: "2023-05-13",
          open: 47.2,
          close: 47.08,
          high: 49.07,
          low: 46.22,
          volume: 15030187,
          uOpen: 47.5,
          uClose: 48.15,
          uHigh: 49.25,
          uLow: 46.53,
          uVolume: 15153469,
          change: -2.75,
          changePercent: -5.5523,
          label: "May 13, 20",
          changeOverTime: 0.377454
        },
        {
          date: "2023-05-14",
          open: 46.89,
          close: 47.72,
          high: 49.53,
          low: 46.29,
          volume: 6417268,
          uOpen: 45.45,
          uClose: 48.85,
          uHigh: 49.01,
          uLow: 47.02,
          uVolume: 6351751,
          change: 0.96,
          changePercent: 2.0648,
          label: "May 14, 20",
          changeOverTime: 0.406023
        },
        {
          date: "2023-05-15",
          open: 49.02,
          close: 50.11,
          high: 51.42,
          low: 47.9,
          volume: 4822039,
          uOpen: 47.9,
          uClose: 49.37,
          uHigh: 51.66,
          uLow: 48.4,
          uVolume: 4941006,
          change: 1.32,
          changePercent: 2.793,
          label: "May 15, 20",
          changeOverTime: 0.461551
        },
        {
          date: "2023-05-18",
          open: 51.48,
          close: 51.45,
          high: 52.27,
          low: 50.92,
          volume: 4756206,
          uOpen: 51.54,
          uClose: 50.83,
          uHigh: 52.32,
          uLow: 49.8,
          uVolume: 4711934,
          change: 0.85,
          changePercent: 1.763,
          label: "May 18, 20",
          changeOverTime: 0.477374
        },
        {
          date: "2023-05-19",
          open: 50.84,
          close: 52.51,
          high: 53.1,
          low: 49.51,
          volume: 3311406,
          uOpen: 50.17,
          uClose: 53.13,
          uHigh: 55,
          uLow: 49.62,
          uVolume: 3330267,
          change: 1.54,
          changePercent: 2.9696,
          label: "May 19, 20",
          changeOverTime: 0.519174
        },
        {
          date: "2023-05-20",
          open: 53.1,
          close: 55.59,
          high: 55.19,
          low: 53.35,
          volume: 3742877,
          uOpen: 54.1,
          uClose: 56.69,
          uHigh: 55.28,
          uLow: 53.95,
          uVolume: 3800781,
          change: 2.98,
          changePercent: 5.9624,
          label: "May 20, 20",
          changeOverTime: 0.599448
        },
        {
          date: "2023-05-21",
          open: 54.77,
          close: 54.58,
          high: 56.33,
          low: 53.42,
          volume: 2038377,
          uOpen: 56.5,
          uClose: 55.55,
          uHigh: 57.6,
          uLow: 54.38,
          uVolume: 1985188,
          change: 0.11,
          changePercent: 0.2042,
          label: "May 21, 20",
          changeOverTime: 0.613152
        },
        {
          date: "2023-05-22",
          open: 56.4,
          close: 58.4,
          high: 58.22,
          low: 55.79,
          volume: 5167092,
          uOpen: 56.1,
          uClose: 56.8,
          uHigh: 59.27,
          uLow: 55.8,
          uVolume: 5264772,
          change: 2.38,
          changePercent: 4.3355,
          label: "May 22, 20",
          changeOverTime: 0.688629
        },
        {
          date: "2023-05-26",
          open: 60.51,
          close: 60.6,
          high: 61.4,
          low: 60.46,
          volume: 4942220,
          uOpen: 58.67,
          uClose: 60.25,
          uHigh: 60.8,
          uLow: 59.64,
          uVolume: 4868289,
          change: 2.47,
          changePercent: 4.2722,
          label: "May 26, 20",
          changeOverTime: 0.769251
        },
        {
          date: "2023-05-27",
          open: 62,
          close: 59.41,
          high: 61.16,
          low: 58.4,
          volume: 3849615,
          uOpen: 60,
          uClose: 60.9,
          uHigh: 60.8,
          uLow: 58.2,
          uVolume: 3932022,
          change: 0.19,
          changePercent: 0.3173,
          label: "May 27, 20",
          changeOverTime: 0.759573
        },
        {
          date: "2023-05-28",
          open: 61.3,
          close: 58.4,
          high: 61.11,
          low: 58.31,
          volume: 3510853,
          uOpen: 59.1,
          uClose: 58.8,
          uHigh: 63.13,
          uLow: 59.01,
          uVolume: 3507559,
          change: -1.69,
          changePercent: -2.927,
          label: "May 28, 20",
          changeOverTime: 0.729463
        },
        {
          date: "2023-05-29",
          open: 59.8,
          close: 59.93,
          high: 59.32,
          low: 57.42,
          volume: 3870684,
          uOpen: 59.4,
          uClose: 58.19,
          uHigh: 59.03,
          uLow: 58.79,
          uVolume: 3805095,
          change: 0.64,
          changePercent: 1.1203,
          label: "May 29, 20",
          changeOverTime: 0.74926
        },
        {
          date: "2023-06-01",
          open: 59.22,
          close: 60.93,
          high: 60.21,
          low: 59.92,
          volume: 3243097,
          uOpen: 59.54,
          uClose: 59.7,
          uHigh: 59.27,
          uLow: 59.76,
          uVolume: 3291370,
          change: 0.23,
          changePercent: 0.4026,
          label: "Jun 1, 20",
          changeOverTime: 0.746021
        },
        {
          date: "2023-06-02",
          open: 60,
          close: 62.23,
          high: 61.01,
          low: 58.41,
          volume: 3069398,
          uOpen: 60,
          uClose: 59.55,
          uHigh: 62.33,
          uLow: 59.23,
          uVolume: 3192477,
          change: 1.16,
          changePercent: 2.0728,
          label: "Jun 2, 20",
          changeOverTime: 0.760133
        },
        {
          date: "2023-06-03",
          open: 62.83,
          close: 64.5,
          high: 63.81,
          low: 61.18,
          volume: 4706713,
          uOpen: 60.46,
          uClose: 62.56,
          uHigh: 64.87,
          uLow: 60.6,
          uVolume: 4606525,
          change: 2.71,
          changePercent: 4.6633,
          label: "Jun 3, 20",
          changeOverTime: 0.85758
        },
        {
          date: "2023-06-04",
          open: 65.73,
          close: 64.19,
          high: 67.85,
          low: 62.62,
          volume: 5131102,
          uOpen: 64.49,
          uClose: 64.18,
          uHigh: 68.45,
          uLow: 60.71,
          uVolume: 4957445,
          change: -0.68,
          changePercent: -1.0511,
          label: "Jun 4, 20",
          changeOverTime: 0.85401
        },
        {
          date: "2023-06-05",
          open: 65.96,
          close: 61.41,
          high: 66.62,
          low: 61.37,
          volume: 4104738,
          uOpen: 64.57,
          uClose: 61.02,
          uHigh: 66.73,
          uLow: 61.74,
          uVolume: 4028685,
          change: -2.1,
          changePercent: -3.4418,
          label: "Jun 5, 20",
          changeOverTime: 0.79106
        },
        {
          date: "2023-06-08",
          open: 65.1,
          close: 64.12,
          high: 64.55,
          low: 62.8,
          volume: 4129459,
          uOpen: 65.15,
          uClose: 62.95,
          uHigh: 64.12,
          uLow: 62.89,
          uVolume: 4025632,
          change: 2.96,
          changePercent: 4.9651,
          label: "Jun 8, 20",
          changeOverTime: 0.873656
        },
        {
          date: "2023-06-09",
          open: 64.25,
          close: 64.12,
          high: 63.07,
          low: 61.85,
          volume: 2296945,
          uOpen: 62.5,
          uClose: 63.11,
          uHigh: 62.89,
          uLow: 62.58,
          uVolume: 2289795,
          change: -1.11,
          changePercent: -1.7237,
          label: "Jun 9, 20",
          changeOverTime: 0.825421
        },
        {
          date: "2023-06-10",
          open: 62.59,
          close: 59.89,
          high: 62.72,
          low: 61.08,
          volume: 3571569,
          uOpen: 64.19,
          uClose: 62.42,
          uHigh: 63.72,
          uLow: 60.87,
          uVolume: 3559484,
          change: -1.6,
          changePercent: -2.7274,
          label: "Jun 10, 20",
          changeOverTime: 0.794154
        },
        {
          date: "2023-06-11",
          open: 57.66,
          close: 57.8,
          high: 59.27,
          low: 57.68,
          volume: 4010088,
          uOpen: 57.79,
          uClose: 56.4,
          uHigh: 60.95,
          uLow: 57.44,
          uVolume: 3961722,
          change: -3.36,
          changePercent: -5.7391,
          label: "Jun 11, 20",
          changeOverTime: 0.68122
        },
        {
          date: "2023-06-12",
          open: 61.33,
          close: 57.26,
          high: 59.86,
          low: 56.47,
          volume: 2327723,
          uOpen: 60,
          uClose: 59.19,
          uHigh: 59.78,
          uLow: 56.7,
          uVolume: 2324679,
          change: 0.5,
          changePercent: 0.8846,
          label: "Jun 12, 20",
          changeOverTime: 0.688404
        },
        {
          date: "2023-06-15",
          open: 56.6,
          close: 63,
          high: 62.47,
          low: 56.17,
          volume: 3791551,
          uOpen: 56.7,
          uClose: 60,
          uHigh: 62.86,
          uLow: 58.18,
          uVolume: 3763954,
          change: 3.29,
          changePercent: 5.8257,
          label: "Jun 15, 20",
          changeOverTime: 0.808185
        },
        {
          date: "2023-06-16",
          open: 65.17,
          close: 60.9,
          high: 64.38,
          low: 59.66,
          volume: 4766798,
          uOpen: 63.87,
          uClose: 61.3,
          uHigh: 63.07,
          uLow: 59.03,
          uVolume: 4848495,
          change: -0.9,
          changePercent: -1.5,
          label: "Jun 16, 20",
          changeOverTime: 0.767913
        },
        {
          date: "2023-06-17",
          open: 62.2,
          close: 62.07,
          high: 62.9,
          low: 62.19,
          volume: 2559429,
          uOpen: 61.9,
          uClose: 62.78,
          uHigh: 64.1,
          uLow: 61.51,
          uVolume: 2612826,
          change: 1.71,
          changePercent: 2.775,
          label: "Jun 17, 20",
          changeOverTime: 0.817332
        },
        {
          date: "2023-06-18",
          open: 62.66,
          close: 61.68,
          high: 64,
          low: 62,
          volume: 1639482,
          uOpen: 62.36,
          uClose: 63.2,
          uHigh: 64,
          uLow: 60.36,
          uVolume: 1661269,
          change: 0.6,
          changePercent: 1.0008,
          label: "Jun 18, 20",
          changeOverTime: 0.849587
        },
        {
          date: "2023-06-19",
          open: 63.93,
          close: 64.04,
          high: 64.86,
          low: 63.1,
          volume: 5255484,
          uOpen: 63.06,
          uClose: 64.53,
          uHigh: 66.17,
          uLow: 62.1,
          uVolume: 5082785,
          change: 0.91,
          changePercent: 1.511,
          label: "Jun 19, 20",
          changeOverTime: 0.843871
        },
        {
          date: "2023-06-22",
          open: 65.31,
          close: 63.27,
          high: 64,
          low: 61.9,
          volume: 4696624,
          uOpen: 65.96,
          uClose: 61.62,
          uHigh: 65,
          uLow: 62.2,
          uVolume: 4777935,
          change: -1.64,
          changePercent: -2.5853,
          label: "Jun 22, 20",
          changeOverTime: 0.809858
        },
        {
          date: "2023-06-23",
          open: 63.47,
          close: 64.08,
          high: 64.36,
          low: 63.7,
          volume: 3248388,
          uOpen: 61.48,
          uClose: 63.42,
          uHigh: 64.71,
          uLow: 61.9,
          uVolume: 3148849,
          change: 2.49,
          changePercent: 4.0413,
          label: "Jun 23, 20",
          changeOverTime: 0.87969
        },
        {
          date: "2023-06-24",
          open: 62.54,
          close: 61,
          high: 65.04,
          low: 60.78,
          volume: 3845966,
          uOpen: 63.76,
          uClose: 62.2,
          uHigh: 65.56,
          uLow: 59.01,
          uVolume: 3785171,
          change: -3.96,
          changePercent: -6.2079,
          label: "Jun 24, 20",
          changeOverTime: 0.763668
        },
        {
          date: "2023-06-25",
          open: 60.24,
          close: 60.26,
          high: 61.96,
          low: 60.29,
          volume: 2217363,
          uOpen: 61.02,
          uClose: 60.08,
          uHigh: 61.07,
          uLow: 60.39,
          uVolume: 2213705,
          change: -0.23,
          changePercent: -0.377,
          label: "Jun 25, 20",
          changeOverTime: 0.783979
        },
        {
          date: "2023-06-26",
          open: 60.92,
          close: 58.14,
          high: 61.82,
          low: 56.48,
          volume: 5218141,
          uOpen: 60.55,
          uClose: 57.06,
          uHigh: 61.07,
          uLow: 54.85,
          uVolume: 5349003,
          change: -3.6,
          changePercent: -5.9271,
          label: "Jun 26, 20",
          changeOverTime: 0.662021
        },
        {
          date: "2023-06-29",
          open: 57.05,
          close: 58.47,
          high: 59.87,
          low: 55.44,
          volume: 4039981,
          uOpen: 58.39,
          uClose: 58,
          uHigh: 58.54,
          uLow: 54.82,
          uVolume: 3997351,
          change: 1.57,
          changePercent: 2.771,
          label: "Jun 29, 20",
          changeOverTime: 0.71128
        },
        {
          date: "2023-06-30",
          open: 58,
          close: 58.63,
          high: 60.54,
          low: 57.2,
          volume: 2326404,
          uOpen: 59,
          uClose: 57.99,
          uHigh: 59.78,
          uLow: 58.37,
          uVolume: 2240398,
          change: 0.49,
          changePercent: 0.867,
          label: "Jun 30, 20",
          changeOverTime: 0.738371
        },
        {
          date: "2023-07-01",
          open: 58.5,
          close: 61.63,
          high: 61.94,
          low: 59.06,
          volume: 2849011,
          uOpen: 57.7,
          uClose: 58.96,
          uHigh: 61.96,
          uLow: 57.68,
          uVolume: 2838214,
          change: 1.3,
          changePercent: 2.3574,
          label: "Jul 1, 20",
          changeOverTime: 0.765241
        },
        {
          date: "2023-07-02",
          open: 61,
          close: 62.84,
          high: 61.3,
          low: 61.91,
          volume: 2206319,
          uOpen: 60,
          uClose: 62.22,
          uHigh: 62.1,
          uLow: 61.28,
          uVolume: 2217723,
          change: 1.06,
          changePercent: 1.8074,
          label: "Jul 2, 20",
          changeOverTime: 0.783944
        },
        {
          date: "2023-07-06",
          open: 62.74,
          close: 61.56,
          high: 64.3,
          low: 60.86,
          volume: 2754405,
          uOpen: 63.46,
          uClose: 64.13,
          uHigh: 64.91,
          uLow: 62.73,
          uVolume: 2695276,
          change: 1.34,
          changePercent: 2.2915,
          label: "Jul 6, 20",
          changeOverTime: 0.840216
        },
        {
          date: "2023-07-07",
          open: 63.57,
          close: 63.49,
          high: 67.29,
          low: 62.28,
          volume: 5659806,
          uOpen: 63.21,
          uClose: 65.54,
          uHigh: 69.74,
          uLow: 62.92,
          uVolume: 5692975,
          change: 1.46,
          changePercent: 2.4021,
          label: "Jul 7, 20",
          changeOverTime: 0.882124
        },
        {
          date: "2023-07-08",
          open: 65,
          close: 64.91,
          high: 65.03,
          low: 63.53,
          volume: 3339116,
          uOpen: 64.8,
          uClose: 65.03,
          uHigh: 66.94,
          uLow: 63.38,
          uVolume: 3252388,
          change: 0.92,
          changePercent: 1.5026,
          label: "Jul 8, 20",
          changeOverTime: 0.881969
        },
        {
          date: "2023-07-09",
          open: 64.92,
          close: 63.21,
          high: 67.45,
          low: 64.61,
          volume: 2386964,
          uOpen: 66.65,
          uClose: 63.72,
          uHigh: 66.18,
          uLow: 63.33,
          uVolume: 2456595,
          change: -0.62,
          changePercent: -1.0143,
          label: "Jul 9, 20",
          changeOverTime: 0.87532
        },
        {
          date: "2023-07-10",
          open: 63.53,
          close: 62.95,
          high: 64.5,
          low: 64.21,
          volume: 1649858,
          uOpen: 66.05,
          uClose: 64.75,
          uHigh: 66.42,
          uLow: 61.59,
          uVolume: 1689025,
          change: -0.77,
          changePercent: -1.2232,
          label: "Jul 10, 20",
          changeOverTime: 0.845413
        },
        {
          date: "2023-07-13",
          open: 64.1,
          close: 58.8,
          high: 65.39,
          low: 60.1,
          volume: 3002661,
          uOpen: 65.7,
          uClose: 60.1,
          uHigh: 63.4,
          uLow: 60.56,
          uVolume: 2969132,
          change: -4.11,
          changePercent: -6.773,
          label: "Jul 13, 20",
          changeOverTime: 0.741617
        },
        {
          date: "2023-07-14",
          open: 61,
          close: 58.01,
          high: 61.2,
          low: 58.64,
          volume: 3964394,
          uOpen: 58.98,
          uClose: 60.63,
          uHigh: 61.79,
          uLow: 58.28,
          uVolume: 3846104,
          change: -0.36,
          changePercent: -0.6105,
          label: "Jul 14, 20",
          changeOverTime: 0.717899
        },
        {
          date: "2023-07-15",
          open: 60.95,
          close: 60.05,
          high: 62.4,
          low: 58.87,
          volume: 1867214,
          uOpen: 61.8,
          uClose: 59.13,
          uHigh: 59.9,
          uLow: 59.81,
          uVolume: 1875647,
          change: 1.27,
          changePercent: 2.1878,
          label: "Jul 15, 20",
          changeOverTime: 0.780549
        },
        {
          date: "2023-07-16",
          open: 59.35,
          close: 62.54,
          high: 63.1,
          low: 59.42,
          volume: 3470963,
          uOpen: 59.64,
          uClose: 63.7,
          uHigh: 65.92,
          uLow: 58.32,
          uVolume: 3478546,
          change: 3.23,
          changePercent: 5.446,
          label: "Jul 16, 20",
          changeOverTime: 0.878551
        },
        {
          date: "2023-07-17",
          open: 63.49,
          close: 65.29,
          high: 66.99,
          low: 63.11,
          volume: 2919970,
          uOpen: 65.18,
          uClose: 66.72,
          uHigh: 66.89,
          uLow: 64.06,
          uVolume: 2940978,
          change: 2.11,
          changePercent: 3.3657,
          label: "Jul 17, 20",
          changeOverTime: 0.944867
        },
        {
          date: "2023-07-20",
          open: 65.74,
          close: 66.56,
          high: 69.8,
          low: 65.46,
          volume: 4412290,
          uOpen: 66.07,
          uClose: 66.45,
          uHigh: 68.3,
          uLow: 66.56,
          uVolume: 4499298,
          change: 2,
          changePercent: 3.1542,
          label: "Jul 20, 20",
          changeOverTime: 0.982897
        },
        {
          date: "2023-07-21",
          open: 67.99,
          close: 66.73,
          high: 68.62,
          low: 66.41,
          volume: 2899362,
          uOpen: 68.46,
          uClose: 65.36,
          uHigh: 70.69,
          uLow: 67.61,
          uVolume: 2868567,
          change: -1.23,
          changePercent: -1.9104,
          label: "Jul 21, 20",
          changeOverTime: 0.929798
        },
        {
          date: "2023-07-22",
          open: 66.64,
          close: 70.2,
          high: 69.51,
          low: 65.2,
          volume: 2635450,
          uOpen: 65.34,
          uClose: 70.5,
          uHigh: 68.62,
          uLow: 65.6,
          uVolume: 2679519,
          change: 2.47,
          changePercent: 3.6666,
          label: "Jul 22, 20",
          changeOverTime: 1.042607
        },
        {
          date: "2023-07-23",
          open: 68.08,
          close: 66,
          high: 69.6,
          low: 65.69,
          volume: 4415555,
          uOpen: 68.86,
          uClose: 65.7,
          uHigh: 70,
          uLow: 64.86,
          uVolume: 4457942,
          change: -2,
          changePercent: -2.958,
          label: "Jul 23, 20",
          changeOverTime: 0.94552
        },
        {
          date: "2023-07-24",
          open: 64.9,
          close: 68.3,
          high: 68.52,
          low: 65.34,
          volume: 2701141,
          uOpen: 67.57,
          uClose: 67.89,
          uHigh: 68.8,
          uLow: 67.09,
          uVolume: 2650056,
          change: 0.22,
          changePercent: 0.3455,
          label: "Jul 24, 20",
          changeOverTime: 0.987518
        },
        {
          date: "2023-07-27",
          open: 67.71,
          close: 68.08,
          high: 68.83,
          low: 67.63,
          volume: 4047055,
          uOpen: 70.07,
          uClose: 67.18,
          uHigh: 68.39,
          uLow: 67.62,
          uVolume: 3978981,
          change: 1.24,
          changePercent: 1.8214,
          label: "Jul 27, 20",
          changeOverTime: 1.012459
        },
        {
          date: "2023-07-28",
          open: 69.08,
          close: 65,
          high: 69.09,
          low: 66.66,
          volume: 2171562,
          uOpen: 66.51,
          uClose: 66,
          uHigh: 70.24,
          uLow: 65.35,
          uVolume: 2225164,
          change: -1.93,
          changePercent: -2.9382,
          label: "Jul 28, 20",
          changeOverTime: 0.965657
        },
        {
          date: "2023-07-29",
          open: 66.69,
          close: 68.47,
          high: 68,
          low: 67.65,
          volume: 2041172,
          uOpen: 67.54,
          uClose: 67.73,
          uHigh: 68.39,
          uLow: 67.13,
          uVolume: 2054921,
          change: 1.54,
          changePercent: 2.2931,
          label: "Jul 29, 20",
          changeOverTime: 0.98395
        },
        {
          date: "2023-07-30",
          open: 68.27,
          close: 70.3,
          high: 70.73,
          low: 66.2,
          volume: 3975033,
          uOpen: 68.25,
          uClose: 69.9,
          uHigh: 70.42,
          uLow: 66.3,
          uVolume: 3983668,
          change: 3.48,
          changePercent: 5.3779,
          label: "Jul 30, 20",
          changeOverTime: 1.102867
        },
        {
          date: "2023-07-31",
          open: 73.3,
          close: 71.07,
          high: 74,
          low: 67.91,
          volume: 3072595,
          uOpen: 73.78,
          uClose: 71.02,
          uHigh: 74,
          uLow: 67.93,
          uVolume: 2941945,
          change: -1.54,
          changePercent: -2.2318,
          label: "Jul 31, 20",
          changeOverTime: 1.044144
        },
        {
          date: "2023-08-03",
          open: 71.21,
          close: 68.96,
          high: 70.82,
          low: 67.13,
          volume: 2769545,
          uOpen: 70.07,
          uClose: 70.28,
          uHigh: 72.81,
          uLow: 67.74,
          uVolume: 2680288,
          change: -0.45,
          changePercent: -0.673,
          label: "Aug 3, 20",
          changeOverTime: 1.038481
        },
        {
          date: "2023-08-04",
          open: 71.9,
          close: 70.89,
          high: 71.2,
          low: 69.53,
          volume: 3323465,
          uOpen: 71.8,
          uClose: 71.42,
          uHigh: 71.6,
          uLow: 70.72,
          uVolume: 3296835,
          change: 0.3,
          changePercent: 0.459,
          label: "Aug 4, 20",
          changeOverTime: 1.056066
        },
        {
          date: "2023-08-05",
          open: 69.22,
          close: 72.1,
          high: 72.18,
          low: 69.33,
          volume: 2617083,
          uOpen: 70.97,
          uClose: 72.5,
          uHigh: 72.73,
          uLow: 68.33,
          uVolume: 2604569,
          change: 2.47,
          changePercent: 3.502,
          label: "Aug 5, 20",
          changeOverTime: 1.13668
        },
        {
          date: "2023-08-06",
          open: 72.55,
          close: 73.15,
          high: 73.6,
          low: 72.09,
          volume: 6589767,
          uOpen: 71.12,
          uClose: 72.55,
          uHigh: 75.3,
          uLow: 72.25,
          uVolume: 6649827,
          change: 0.84,
          changePercent: 1.1665,
          label: "Aug 6, 20",
          changeOverTime: 1.128941
        },
        {
          date: "2023-08-07",
          open: 81.65,
          close: 82.64,
          high: 87.7,
          low: 76,
          volume: 27655931,
          uOpen: 79.51,
          uClose: 80.28,
          uHigh: 85.5,
          uLow: 77,
          uVolume: 28649161,
          change: 8.52,
          changePercent: 12.0405,
          label: "Aug 7, 20",
          changeOverTime: 1.365881
        },
        {
          date: "2023-08-10",
          open: 83.03,
          close: 79.69,
          high: 82.8,
          low: 78.6,
          volume: 4119285,
          uOpen: 82.81,
          uClose: 80.73,
          uHigh: 81.54,
          uLow: 82.2,
          uVolume: 4165296,
          change: -0.43,
          changePercent: -0.5444,
          label: "Aug 10, 20",
          changeOverTime: 1.398748
        },
        {
          date: "2023-08-11",
          open: 81.44,
          close: 76.78,
          high: 80.97,
          low: 76.4,
          volume: 4190930,
          uOpen: 82.33,
          uClose: 79.04,
          uHigh: 80.08,
          uLow: 76.77,
          uVolume: 4129386,
          change: -4.07,
          changePercent: -5.0925,
          label: "Aug 11, 20",
          changeOverTime: 1.288909
        },
        {
          date: "2023-08-12",
          open: 75.6,
          close: 77,
          high: 82.32,
          low: 77.36,
          volume: 3404497,
          uOpen: 77.03,
          uClose: 79,
          uHigh: 79.56,
          uLow: 77.52,
          uVolume: 3312565,
          change: 0.68,
          changePercent: 0.8949,
          label: "Aug 12, 20",
          changeOverTime: 1.261838
        },
        {
          date: "2023-08-13",
          open: 78.31,
          close: 75.2,
          high: 80.61,
          low: 77.17,
          volume: 4622309,
          uOpen: 78.85,
          uClose: 77.93,
          uHigh: 78.58,
          uLow: 77.5,
          uVolume: 4622267,
          change: -1.59,
          changePercent: -2.1312,
          label: "Aug 13, 20",
          changeOverTime: 1.222435
        },
        {
          date: "2023-08-14",
          open: 75.29,
          close: 78.85,
          high: 79.73,
          low: 76.72,
          volume: 3044461,
          uOpen: 74.71,
          uClose: 77.48,
          uHigh: 79.59,
          uLow: 76.03,
          uVolume: 3101444,
          change: 2.3,
          changePercent: 3.0697,
          label: "Aug 14, 20",
          changeOverTime: 1.308327
        },
        {
          date: "2023-08-17",
          open: 80.42,
          close: 83.21,
          high: 83,
          low: 78.8,
          volume: 3460224,
          uOpen: 79.97,
          uClose: 83.12,
          uHigh: 83.3,
          uLow: 78.55,
          uVolume: 3493198,
          change: 3.16,
          changePercent: 4.1797,
          label: "Aug 17, 20",
          changeOverTime: 1.397892
        },
        {
          date: "2023-08-18",
          open: 83.6,
          close: 84.49,
          high: 84.63,
          low: 80.36,
          volume: 3657034,
          uOpen: 81,
          uClose: 85.6,
          uHigh: 83.61,
          uLow: 81.19,
          uVolume: 3571098,
          change: 2.61,
          changePercent: 3.2646,
          label: "Aug 18, 20",
          changeOverTime: 1.503208
        },
        {
          date: "2023-08-19",
          open: 85.18,
          close: 85.93,
          high: 86.82,
          low: 84.61,
          volume: 3698565,
          uOpen: 83.87,
          uClose: 87.32,
          uHigh: 86.62,
          uLow: 83.43,
          uVolume: 3745594,
          change: 1.54,
          changePercent: 1.8827,
          label: "Aug 19, 20",
          changeOverTime: 1.547065
        },
        {
          date: "2023-08-20",
          open: 84.25,
          close: 85.23,
          high: 88,
          low: 85.83,
          volume: 2610434,
          uOpen: 85.42,
          uClose: 83.87,
          uHigh: 86,
          uLow: 83.22,
          uVolume: 2538611,
          change: -1.01,
          changePercent: -1.173,
          label: "Aug 20, 20",
          changeOverTime: 1.488569
        },
        {
          date: "2023-08-21",
          open: 83.41,
          close: 87.2,
          high: 86.13,
          low: 86.88,
          volume: 1831305,
          uOpen: 86.5,
          uClose: 83.7,
          uHigh: 84.42,
          uLow: 85.06,
          uVolume: 1823325,
          change: 0.37,
          changePercent: 0.4253,
          label: "Aug 21, 20",
          changeOverTime: 1.523688
        },
        {
          date: "2023-08-24",
          open: 86.62,
          close: 87.4,
          high: 87.87,
          low: 83.85,
          volume: 2074975,
          uOpen: 87.02,
          uClose: 84.8,
          uHigh: 85.4,
          uLow: 82.28,
          uVolume: 2041726,
          change: 0.4,
          changePercent: 0.4954,
          label: "Aug 24, 20",
          changeOverTime: 1.48216
        },
        {
          date: "2023-08-25",
          open: 86.27,
          close: 84.51,
          high: 87.16,
          low: 82.34,
          volume: 2091374,
          uOpen: 84.48,
          uClose: 84.35,
          uHigh: 87.17,
          uLow: 82.54,
          uVolume: 2131332,
          change: -0.81,
          changePercent: -0.9366,
          label: "Aug 25, 20",
          changeOverTime: 1.511231
        },
        {
          date: "2023-08-26",
          open: 83.59,
          close: 84.32,
          high: 89.5,
          low: 85.6,
          volume: 3704448,
          uOpen: 85.45,
          uClose: 87.57,
          uHigh: 87.65,
          uLow: 86,
          uVolume: 3856979,
          change: 1.02,
          changePercent: 1.2578,
          label: "Aug 26, 20",
          changeOverTime: 1.54771
        },
        {
          date: "2023-08-27",
          open: 85.62,
          close: 85.59,
          high: 90.17,
          low: 85.58,
          volume: 2620131,
          uOpen: 84.97,
          uClose: 85.6,
          uHigh: 88.81,
          uLow: 86.92,
          uVolume: 2540983,
          change: 1.41,
          changePercent: 1.6747,
          label: "Aug 27, 20",
          changeOverTime: 1.523364
        },
        {
          date: "2023-08-28",
          open: 86.45,
          close: 91.39,
          high: 91.03,
          low: 86.27,
          volume: 1862283,
          uOpen: 88.29,
          uClose: 89.87,
          uHigh: 90.78,
          uLow: 87.59,
          uVolume: 1886349,
          change: 2.12,
          changePercent: 2.4947,
          label: "Aug 28, 20",
          changeOverTime: 1.588418
        },
        {
          date: "2023-08-31",
          open: 88.57,
          close: 87.82,
          high: 91.3,
          low: 88.14,
          volume: 2186316,
          uOpen: 90.17,
          uClose: 87.42,
          uHigh: 87.41,
          uLow: 87.3,
          uVolume: 2181231,
          change: -1.63,
          changePercent: -1.7874,
          label: "Aug 31, 20",
          changeOverTime: 1.608187
        },
        {
          date: "2023-09-01",
          open: 89.7,
          close: 91.69,
          high: 92.53,
          low: 85.73,
          volume: 2470735,
          uOpen: 88.2,
          uClose: 89.97,
          uHigh: 89.9,
          uLow: 89.22,
          uVolume: 2407566,
          change: 2.75,
          changePercent: 3.136,
          label: "Sep 1, 20",
          changeOverTime: 1.645636
        },
        {
          date: "2023-09-02",
          open: 93.79,
          close: 89.43,
          high: 96.44,
          low: 91.96,
          volume: 4704602,
          uOpen: 91.88,
          uClose: 91.72,
          uHigh: 94.5,
          uLow: 88.92,
          uVolume: 4700253,
          change: 0.84,
          changePercent: 0.9801,
          label: "Sep 2, 20",
          changeOverTime: 1.64721
        },
        {
          date: "2023-09-03",
          open: 90.2,
          close: 85.69,
          high: 90.08,
          low: 82.69,
          volume: 3428732,
          uOpen: 91.4,
          uClose: 87.74,
          uHigh: 92.32,
          uLow: 85.11,
          uVolume: 3439760,
          change: -4,
          changePercent: -4.4538,
          label: "Sep 3, 20",
          changeOverTime: 1.593497
        },
        {
          date: "2023-09-04",
          open: 88.33,
          close: 86.94,
          high: 86.3,
          low: 79.17,
          volume: 3390869,
          uOpen: 86.4,
          uClose: 86.42,
          uHigh: 89.79,
          uLow: 81.02,
          uVolume: 3394052,
          change: -1.59,
          changePercent: -1.8638,
          label: "Sep 4, 20",
          changeOverTime: 1.507897
        },
        {
          date: "2023-09-08",
          open: 82.27,
          close: 81.7,
          high: 85.67,
          low: 81.62,
          volume: 2765641,
          uOpen: 80.97,
          uClose: 80.84,
          uHigh: 88.21,
          uLow: 83.31,
          uVolume: 2752630,
          change: -3.24,
          changePercent: -4.0236,
          label: "Sep 8, 20",
          changeOverTime: 1.453855
        },
        {
          date: "2023-09-09",
          open: 82.4,
          close: 84.16,
          high: 85.16,
          low: 80.5,
          volume: 3337068,
          uOpen: 83.93,
          uClose: 82.99,
          uHigh: 87.7,
          uLow: 82.1,
          uVolume: 3394890,
          change: 1.71,
          changePercent: 2.109,
          label: "Sep 9, 20",
          changeOverTime: 1.479008
        },
        {
          date: "2023-09-10",
          open: 86.09,
          close: 86.42,
          high: 87.82,
          low: 82.17,
          volume: 2942550,
          uOpen: 86.53,
          uClose: 86.1,
          uHigh: 86.77,
          uLow: 82.04,
          uVolume: 3059185,
          change: 0.45,
          changePercent: 0.5557,
          label: "Sep 10, 20",
          changeOverTime: 1.497985
        },
        {
          date: "2023-09-11",
          open: 86.96,
          close: 87.31,
          high: 86.84,
          low: 86.21,
          volume: 3087711,
          uOpen: 85.44,
          uClose: 89.45,
          uHigh: 89.71,
          uLow: 84.51,
          uVolume: 3061715,
          change: 2.67,
          changePercent: 3.3003,
          label: "Sep 11, 20",
          changeOverTime: 1.599546
        },
        {
          date: "2023-09-14",
          open: 91.22,
          close: 91.26,
          high: 91.77,
          low: 87.1,
          volume: 3291760,
          uOpen: 88.05,
          uClose: 90.87,
          uHigh: 91.32,
          uLow: 87.65,
          uVolume: 3309967,
          change: 1.8,
          changePercent: 2.1932,
          label: "Sep 14, 20",
          changeOverTime: 1.64021
        },
        {
          date: "2023-09-15",
          open: 88.02,
          close: 95.37,
          high: 96.84,
          low: 90.07,
          volume: 5720465,
          uOpen: 91.25,
          uClose: 93.28,
          uHigh: 96.78,
          uLow: 88.21,
          uVolume: 5614291,
          change: 4.06,
          changePercent: 4.7012,
          label: "Sep 15, 20",
          changeOverTime: 1.765879
        },
        {
          date: "2023-09-16",
          open: 94.95,
          close: 96.71,
          high: 97.17,
          low: 92.1,
          volume: 6895440,
          uOpen: 95.95,
          uClose: 95.88,
          uHigh: 98.43,
          uLow: 93.51,
          uVolume: 6777002,
          change: 3.82,
          changePercent: 4.29,
          label: "Sep 16, 20",
          changeOverTime: 1.81224
        },
        {
          date: "2023-09-17",
          open: 95.3,
          close: 99.24,
          high: 97,
          low: 92.94,
          volume: 5239616,
          uOpen: 94.9,
          uClose: 101.24,
          uHigh: 101,
          uLow: 95.47,
          uVolume: 5424180,
          change: 1.48,
          changePercent: 1.5575,
          label: "Sep 17, 20",
          changeOverTime: 1.9374
        },
        {
          date: "2023-09-18",
          open: 102.08,
          close: 97.23,
          high: 101,
          low: 93.57,
          volume: 4845904,
          uOpen: 101.46,
          uClose: 97.99,
          uHigh: 100,
          uLow: 93.29,
          uVolume: 4842493,
          change: -0.58,
          changePercent: -0.6073,
          label: "Sep 18, 20",
          changeOverTime: 1.919154
        },
        {
          date: "2023-09-21",
          open: 97.39,
          close: 99.27,
          high: 99.07,
          low: 93.85,
          volume: 3884415,
          uOpen: 96.21,
          uClose: 96.77,
          uHigh: 99.84,
          uLow: 94.08,
          uVolume: 3972011,
          change: -0.16,
          changePercent: -0.1712,
          label: "Sep 21, 20",
          changeOverTime: 1.85587
        },
        {
          date: "2023-09-22",
          open: 99.32,
          close: 99.33,
          high: 100.34,
          low: 95.01,
          volume: 3742355,
          uOpen: 99.1,
          uClose: 101.55,
          uHigh: 104.19,
          uLow: 97.01,
          uVolume: 3672388,
          change: 3.49,
          changePercent: 3.66,
          label: "Sep 22, 20",
          changeOverTime: 1.942257
        },
        {
          date: "2023-09-23",
          open: 102,
          close: 98.67,
          high: 105.57,
          low: 96.32,
          volume: 3731500,
          uOpen: 102,
          uClose: 97.21,
          uHigh: 102.95,
          uLow: 96.55,
          uVolume: 3828640,
          change: -2.9,
          changePercent: -2.9555,
          label: "Sep 23, 20",
          changeOverTime: 1.856195
        },
        {
          date: "2023-09-24",
          open: 97.08,
          close: 97.89,
          high: 104.27,
          low: 97.3,
          volume: 2809754,
          uOpen: 96.71,
          uClose: 98.7,
          uHigh: 104.94,
          uLow: 97.3,
          uVolume: 2786988,
          change: 1.55,
          changePercent: 1.562,
          label: "Sep 24, 20",
          changeOverTime: 1.972281
        },
        {
          date: "2023-09-25",
          open: 104.09,
          close: 106.15,
          high: 105.36,
          low: 101.59,
          volume: 2709590,
          uOpen: 102.8,
          uClose: 102.47,
          uHigh: 103.57,
          uLow: 101.24,
          uVolume: 2647857,
          change: 3.59,
          changePercent: 3.55,
          label: "Sep 25, 20",
          changeOverTime: 1.998297
        },
        {
          date: "2023-09-28",
          open: 104.93,
          close: 101.81,
          high: 103.72,
          low: 102.09,
          volume: 2791773,
          uOpen: 104.9,
          uClose: 103.87,
          uHigh: 103.71,
          uLow: 101.43,
          uVolume: 2736799,
          change: -0.11,
          changePercent: -0.1089,
          label: "Sep 28, 20",
          changeOverTime: 2.037776
        },
        {
          date: "2023-09-29",
          open: 104.3,
          close: 102.25,
          high: 107.81,
          low: 103.99,
          volume: 1805648,
          uOpen: 104.23,
          uClose: 103.25,
          uHigh: 106.43,
          uLow: 100.28,
          uVolume: 1817865,
          change: 0.27,
          changePercent: 0.259,
          label: "Sep 29, 20",
          changeOverTime: 2.017937
        },
        {
          date: "2023-09-30",
          open: 103.47,
          close: 106.58,
          high: 104.43,
          low: 102.73,
          volume: 3579571,
          uOpen: 104.35,
          uClose: 102.6,
          uHigh: 107.74,
          uLow: 105.64,
          uVolume: 3517357,
          change: 0.17,
          changePercent: 0.173,
          label: "Sep 30, 20",
          changeOverTime: 2.073814
        },
        {
          date: "2023-10-01",
          open: 105.3,
          close: 108.43,
          high: 108.94,
          low: 104.2,
          volume: 3736880,
          uOpen: 104.35,
          uClose: 111.55,
          uHigh: 110.89,
          uLow: 102.9,
          uVolume: 3632715,
          change: 6.22,
          changePercent: 5.949,
          label: "Oct 1, 20",
          changeOverTime: 2.220223
        },
        {
          date: "2023-10-02",
          open: 104.27,
          close: 108.42,
          high: 111.95,
          low: 105.75,
          volume: 2259231,
          uOpen: 105.21,
          uClose: 111.55,
          uHigh: 114.42,
          uLow: 107.33,
          uVolume: 2309381,
          change: 0.65,
          changePercent: 0.6341,
          label: "Oct 2, 20",
          changeOverTime: 2.242286
        },
        {
          date: "2023-10-05",
          open: 111.88,
          close: 111.63,
          high: 115.55,
          low: 113.14,
          volume: 2483078,
          uOpen: 109.83,
          uClose: 112.33,
          uHigh: 112.54,
          uLow: 112.8,
          uVolume: 2520390,
          change: 2.01,
          changePercent: 1.8416,
          label: "Oct 5, 20",
          changeOverTime: 2.346159
        },
        {
          date: "2023-10-06",
          open: 114.58,
          close: 106.13,
          high: 115.03,
          low: 108.26,
          volume: 3431045,
          uOpen: 110.71,
          uClose: 107.3,
          uHigh: 114.13,
          uLow: 105.65,
          uVolume: 3440514,
          change: -5.27,
          changePercent: -4.81,
          label: "Oct 6, 20",
          changeOverTime: 2.126056
        },
        {
          date: "2023-10-07",
          open: 108.75,
          close: 105.61,
          high: 108.37,
          low: 106.8,
          volume: 3617091,
          uOpen: 110.85,
          uClose: 109.74,
          uHigh: 109.59,
          uLow: 108.1,
          uVolume: 3650700,
          change: 0.53,
          changePercent: 0.5007,
          label: "Oct 7, 20",
          changeOverTime: 2.200404
        },
        {
          date: "2023-10-08",
          open: 109.15,
          close: 105.24,
          high: 107.04,
          low: 106.61,
          volume: 2396645,
          uOpen: 111.59,
          uClose: 107.75,
          uHigh: 111.5,
          uLow: 105.4,
          uVolume: 2344767,
          change: -0.48,
          changePercent: -0.4479,
          label: "Oct 8, 20",
          changeOverTime: 2.14279
        },
        {
          date: "2023-10-09",
          open: 105.63,
          close: 107.84,
          high: 107.6,
          low: 107.09,
          volume: 1928629,
          uOpen: 106.79,
          uClose: 106.12,
          uHigh: 107.6,
          uLow: 106.61,
          uVolume: 1909490,
          change: -0.79,
          changePercent: -0.7652,
          label: "Oct 9, 20",
          changeOverTime: 2.162448
        },
        {
          date: "2023-10-12",
          open: 109.75,
          close: 102,
          high: 109.4,
          low: 104.75,
          volume: 2618535,
          uOpen: 107.75,
          uClose: 104.64,
          uHigh: 110.03,
          uLow: 100.29,
          uVolume: 2509132,
          change: -3.39,
          changePercent: -3.2343,
          label: "Oct 12, 20",
          changeOverTime: 2.010983
        },
        {
          date: "2023-10-13",
          open: 104.38,
          close: 105.9,
          high: 106.04,
          low: 100.05,
          volume: 2463768,
          uOpen: 105.7,
          uClose: 101.4,
          uHigh: 106.09,
          uLow: 104.18,
          uVolume: 2481854,
          change: 0.2,
          changePercent: 0.1909,
          label: "Oct 13, 20",
          changeOverTime: 2.040108
        },
        {
          date: "2023-10-14",
          open: 104.7,
          close: 103.15,
          high: 109.21,
          low: 101.55,
          volume: 2611266,
          uOpen: 104.4,
          uClose: 105.87,
          uHigh: 105.52,
          uLow: 106.15,
          uVolume: 2603572,
          change: 1.72,
          changePercent: 1.6702,
          label: "Oct 14, 20",
          changeOverTime: 2.083144
        },
        {
          date: "2023-10-15",
          open: 103.2,
          close: 102.79,
          high: 110.86,
          low: 103.8,
          volume: 3572217,
          uOpen: 103,
          uClose: 104.09,
          uHigh: 111.14,
          uLow: 104.1,
          uVolume: 3525170,
          change: -1.05,
          changePercent: -1.0231,
          label: "Oct 15, 20",
          changeOverTime: 2.106425
        },
        {
          date: "2023-10-16",
          open: 107.16,
          close: 99.12,
          high: 106.36,
          low: 101.83,
          volume: 3956866,
          uOpen: 106.57,
          uClose: 98.99,
          uHigh: 105.33,
          uLow: 101.68,
          uVolume: 3932165,
          change: -4.92,
          changePercent: -4.8453,
          label: "Oct 16, 20",
          changeOverTime: 1.884921
        },
        {
          date: "2023-10-19",
          open: 100.63,
          close: 98.52,
          high: 102.32,
          low: 101,
          volume: 2837884,
          uOpen: 102.79,
          uClose: 99.1,
          uHigh: 103.23,
          uLow: 97.8,
          uVolume: 2861952,
          change: 1.39,
          changePercent: 1.4317,
          label: "Oct 19, 20",
          changeOverTime: 1.946531
        },
        {
          date: "2023-10-20",
          open: 99.34,
          close: 102.75,
          high: 104.89,
          low: 98.24,
          volume: 2793832,
          uOpen: 100.07,
          uClose: 102.63,
          uHigh: 102.15,
          uLow: 100.04,
          uVolume: 2776911,
          change: -0.02,
          changePercent: -0.0206,
          label: "Oct 20, 20",
          changeOverTime: 1.99701
        },
        {
          date: "2023-10-21",
          open: 102.47,
          close: 99.64,
          high: 103.79,
          low: 101.08,
          volume: 1703418,
          uOpen: 100.29,
          uClose: 100.99,
          uHigh: 106.42,
          uLow: 100.41,
          uVolume: 1693219,
          change: 0.22,
          changePercent: 0.2344,
          label: "Oct 21, 20",
          changeOverTime: 2.001882
        },
        {
          date: "2023-10-22",
          open: 102.48,
          close: 98.19,
          high: 102.32,
          low: 96.94,
          volume: 2291145,
          uOpen: 102.98,
          uClose: 98.67,
          uHigh: 101.46,
          uLow: 98.21,
          uVolume: 2328063,
          change: -1.9,
          changePercent: -1.9523,
          label: "Oct 22, 20",
          changeOverTime: 1.923123
        },
        {
          date: "2023-10-23",
          open: 99.75,
          close: 97.93,
          high: 102.07,
          low: 97,
          volume: 1593163,
          uOpen: 101.16,
          uClose: 97.73,
          uHigh: 99.1,
          uLow: 96,
          uVolume: 1619528,
          change: -0.64,
          changePercent: -0.6674,
          label: "Oct 23, 20",
          changeOverTime: 1.8512
        },
        {
          date: "2023-10-26",
          open: 97,
          close: 93.6,
          high: 99.47,
          low: 93.27,
          volume: 2328125,
          uOpen: 99,
          uClose: 94.52,
          uHigh: 100.26,
          uLow: 94.16,
          uVolume: 2325606,
          change: -4.28,
          changePercent: -4.3517,
          label: "Oct 26, 20",
          changeOverTime: 1.779216
        },
        {
          date: "2023-10-27",
          open: 95.66,
          close: 95.63,
          high: 96.42,
          low: 95.25,
          volume: 1881902,
          uOpen: 96.89,
          uClose: 96.6,
          uHigh: 97.72,
          uLow: 91.61,
          uVolume: 1870465,
          change: 0.48,
          changePercent: 0.5286,
          label: "Oct 27, 20",
          changeOverTime: 1.749557
        },
        {
          date: "2023-10-28",
          open: 91.24,
          close: 92.18,
          high: 92.79,
          low: 89.74,
          volume: 1734513,
          uOpen: 92.87,
          uClose: 91.37,
          uHigh: 94.05,
          uLow: 92.24,
          uVolume: 1763200,
          change: -2.94,
          changePercent: -3.153,
          label: "Oct 28, 20",
          changeOverTime: 1.669745
        }
      ];
    }); // Bootstrap JS
  /*!
   * Bootstrap v5.3.2 (https://getbootstrap.com/)
   * Copyright 2011-2023 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   */ var O = {};
  t(O, "popperGenerator", function () {
    return eQ;
  }),
    t(O, "detectOverflow", function () {
      return eW;
    }),
    t(O, "createPopperBase", function () {
      return e0;
    }),
    t(O, "createPopper", function () {
      return e1;
    }),
    t(O, "createPopperLite", function () {
      return e2;
    });
  var T = {};
  t(T, "top", function () {
    return P;
  }),
    t(T, "bottom", function () {
      return M;
    }),
    t(T, "right", function () {
      return _;
    }),
    t(T, "left", function () {
      return D;
    }),
    t(T, "auto", function () {
      return E;
    }),
    t(T, "basePlacements", function () {
      return I;
    }),
    t(T, "start", function () {
      return H;
    }),
    t(T, "end", function () {
      return F;
    }),
    t(T, "clippingParents", function () {
      return z;
    }),
    t(T, "viewport", function () {
      return Y;
    }),
    t(T, "popper", function () {
      return X;
    }),
    t(T, "reference", function () {
      return N;
    }),
    t(T, "variationPlacements", function () {
      return R;
    }),
    t(T, "placements", function () {
      return V;
    }),
    t(T, "beforeRead", function () {
      return W;
    }),
    t(T, "read", function () {
      return B;
    }),
    t(T, "afterRead", function () {
      return G;
    }),
    t(T, "beforeMain", function () {
      return j;
    }),
    t(T, "main", function () {
      return $;
    }),
    t(T, "afterMain", function () {
      return U;
    }),
    t(T, "beforeWrite", function () {
      return q;
    }),
    t(T, "write", function () {
      return Z;
    }),
    t(T, "afterWrite", function () {
      return J;
    }),
    t(T, "modifierPhases", function () {
      return K;
    });
  var P = "top",
    M = "bottom",
    _ = "right",
    D = "left",
    E = "auto",
    I = [P, M, _, D],
    H = "start",
    F = "end",
    z = "clippingParents",
    Y = "viewport",
    X = "popper",
    N = "reference",
    R = /*#__PURE__*/ I.reduce(function (e, t) {
      return e.concat([t + "-" + H, t + "-" + F]);
    }, []),
    V = /*#__PURE__*/ [].concat(I, [E]).reduce(function (e, t) {
      return e.concat([t, t + "-" + H, t + "-" + F]);
    }, []),
    W = "beforeRead",
    B = "read",
    G = "afterRead",
    j = "beforeMain",
    $ = "main",
    U = "afterMain",
    q = "beforeWrite",
    Z = "write",
    J = "afterWrite",
    K = [W, B, G, j, $, U, q, Z, J],
    Q = {};
  function ee(e) {
    return e ? (e.nodeName || "").toLowerCase() : null;
  }
  function et(e) {
    if (null == e) return window;
    if ("[object Window]" !== e.toString()) {
      var t = e.ownerDocument;
      return (t && t.defaultView) || window;
    }
    return e;
  }
  function ei(e) {
    var t = et(e).Element;
    return e instanceof t || e instanceof Element;
  }
  function ea(e) {
    var t = et(e).HTMLElement;
    return e instanceof t || e instanceof HTMLElement;
  }
  function en(e) {
    // IE 11 has no ShadowRoot
    if ("undefined" == typeof ShadowRoot) return !1;
    var t = et(e).ShadowRoot;
    return e instanceof t || e instanceof ShadowRoot;
  }
  t(Q, "applyStyles", function () {
    return es;
  }),
    t(Q, "arrow", function () {
      return eS;
    }),
    t(Q, "computeStyles", function () {
      return eP;
    }),
    t(Q, "eventListeners", function () {
      return e_;
    }),
    t(Q, "flip", function () {
      return eB;
    }),
    t(Q, "hide", function () {
      return e$;
    }),
    t(Q, "offset", function () {
      return eU;
    }),
    t(Q, "popperOffsets", function () {
      return eq;
    }),
    t(Q, "preventOverflow", function () {
      return eZ;
    });
  var es = {
    name: "applyStyles",
    enabled: !0,
    phase: "write",
    // and applies them to the HTMLElements such as popper and arrow
    fn: function (e) {
      var t = e.state;
      Object.keys(t.elements).forEach(function (e) {
        var i = t.styles[e] || {},
          a = t.attributes[e] || {},
          n = t.elements[e];
        ea(n) &&
          ee(n) && // Flow doesn't support to extend this property, but it's the most
          // effective way to apply styles to an HTMLElement
          // $FlowFixMe[cannot-write]
          (Object.assign(n.style, i),
          Object.keys(a).forEach(function (e) {
            var t = a[e];
            !1 === t
              ? n.removeAttribute(e)
              : n.setAttribute(e, !0 === t ? "" : t);
          }));
      });
    },
    effect: function (e) {
      var t = e.state,
        i = {
          popper: {
            position: t.options.strategy,
            left: "0",
            top: "0",
            margin: "0"
          },
          arrow: { position: "absolute" },
          reference: {}
        };
      return (
        Object.assign(t.elements.popper.style, i.popper),
        (t.styles = i),
        t.elements.arrow && Object.assign(t.elements.arrow.style, i.arrow),
        function () {
          Object.keys(t.elements).forEach(function (e) {
            var a = t.elements[e],
              n = t.attributes[e] || {},
              s = Object.keys(
                t.styles.hasOwnProperty(e) ? t.styles[e] : i[e]
              ).reduce(function (e, t) {
                return (e[t] = ""), e;
              }, {});
            ea(a) &&
              ee(a) &&
              (Object.assign(a.style, s),
              Object.keys(n).forEach(function (e) {
                a.removeAttribute(e);
              }));
          });
        }
      );
    }, 
    requires: ["computeStyles"]
  };
  function eo(e) {
    return e.split("-")[0];
  }
  var er = Math.max,
    el = Math.min,
    ec = Math.round;
  function eh() {
    var e = navigator.userAgentData;
    return null != e && e.brands && Array.isArray(e.brands)
      ? e.brands
          .map(function (e) {
            return e.brand + "/" + e.version;
          })
          .join(" ")
      : navigator.userAgent;
  }
  function ed() {
    return !/^((?!chrome|android).)*safari/i.test(eh());
  }
  function eu(e, t, i) {
    void 0 === t && (t = !1), void 0 === i && (i = !1);
    var a = e.getBoundingClientRect(),
      n = 1,
      s = 1;
    t &&
      ea(e) &&
      ((n = (e.offsetWidth > 0 && ec(a.width) / e.offsetWidth) || 1),
      (s = (e.offsetHeight > 0 && ec(a.height) / e.offsetHeight) || 1));
    var o = (ei(e) ? et(e) : window).visualViewport,
      r = !ed() && i,
      l = (a.left + (r && o ? o.offsetLeft : 0)) / n,
      c = (a.top + (r && o ? o.offsetTop : 0)) / s,
      h = a.width / n,
      d = a.height / s;
    return {
      width: h,
      height: d,
      top: c,
      right: l + h,
      bottom: c + d,
      left: l,
      x: l,
      y: c
    };
  }
  function eg(e) {
    var t = eu(e),
      i = e.offsetWidth,
      a = e.offsetHeight; // Use the clientRect sizes if it's not been transformed.
    return (
      1 >= Math.abs(t.width - i) && (i = t.width),
      1 >= Math.abs(t.height - a) && (a = t.height),
      { x: e.offsetLeft, y: e.offsetTop, width: i, height: a }
    );
  }
  function ep(e, t) {
    var i = t.getRootNode && t.getRootNode(); // First, attempt with faster native method
    if (e.contains(t)) return !0; // Give up, the result is false
    if (i && en(i)) {
      var a = t;
      do {
        if (a && e.isSameNode(a)) return !0; // $FlowFixMe[prop-missing]: need a better way to handle this...
        a = a.parentNode || a.host;
      } while (a);
    }
    return !1;
  }
  function ef(e) {
    return et(e).getComputedStyle(e);
  }
  function em(e) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((ei(e) ? e.ownerDocument : e.document) || window.document)
      .documentElement;
  }
  function ex(e) {
    return "html" === ee(e)
      ? e // $FlowFixMe[prop-missing]
      : e.assignedSlot || // step into the shadow DOM of the parent of a slotted node
          e.parentNode ||
          (en(e) ? e.host : null) ||
          em(e); // fallback
  }
  function eb(e) {
    return ea(e) && "fixed" !== ef(e).position ? e.offsetParent : null;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  function ev(e) {
    for (
      var t = et(e), i = eb(e);
      i &&
      ["table", "td", "th"].indexOf(ee(i)) >= 0 &&
      "static" === ef(i).position;

    )
      i = eb(i);
    return i &&
      ("html" === ee(i) || ("body" === ee(i) && "static" === ef(i).position))
      ? t
      : i || // return the containing block
          (function (e) {
            var t = /firefox/i.test(eh());
            if (/Trident/i.test(eh()) && ea(e) && "fixed" === ef(e).position)
              return null;
            var i = ex(e);
            for (
              en(i) && (i = i.host);
              ea(i) && 0 > ["html", "body"].indexOf(ee(i));

            ) {
              var a = ef(i); // This is non-exhaustive but covers the most common CSS properties that
              // create a containing block.
              // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
              if (
                "none" !== a.transform ||
                "none" !== a.perspective ||
                "paint" === a.contain ||
                -1 !== ["transform", "perspective"].indexOf(a.willChange) ||
                (t && "filter" === a.willChange) ||
                (t && a.filter && "none" !== a.filter)
              )
                return i;
              i = i.parentNode;
            }
            return null;
          })(
            // Gets the closest ancestor positioned element. Handles some edge cases,
            e
          ) ||
          t;
  }
  function ey(e) {
    return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
  }
  function ew(e, t, i) {
    return er(e, el(t, i));
  }
  function eC() {
    return { top: 0, right: 0, bottom: 0, left: 0 };
  }
  function ek(e) {
    return Object.assign({}, eC(), e);
  }
  function eA(e, t) {
    return t.reduce(function (t, i) {
      return (t[i] = e), t;
    }, {});
  }
  var eS = {
    name: "arrow",
    enabled: !0,
    phase: "main",
    fn: function (e) {
      var t,
        i = e.state,
        a = e.name,
        n = e.options,
        s = i.elements.arrow,
        o = i.modifiersData.popperOffsets,
        r = eo(i.placement),
        l = ey(r),
        c = [D, _].indexOf(r) >= 0 ? "height" : "width";
      if (s && o) {
        var h,
          d = ek(
            "number" !=
              typeof (h =
                "function" == typeof (h = n.padding)
                  ? h(Object.assign({}, i.rects, { placement: i.placement }))
                  : h)
              ? h
              : eA(h, I)
          ),
          u = eg(s),
          g = "y" === l ? P : D,
          p = "y" === l ? M : _,
          f =
            i.rects.reference[c] +
            i.rects.reference[l] -
            o[l] -
            i.rects.popper[c],
          m = o[l] - i.rects.reference[l],
          x = ev(s),
          b = x ? ("y" === l ? x.clientHeight || 0 : x.clientWidth || 0) : 0,
          v = d[g],
          y = b - u[c] - d[p],
          w = b / 2 - u[c] / 2 + (f / 2 - m / 2),
          C = ew(v, w, y);
        i.modifiersData[a] = (((t = {})[l] = C), (t.centerOffset = C - w), t);
      }
    },
    effect: function (e) {
      var t = e.state,
        i = e.options.element,
        a = void 0 === i ? "[data-popper-arrow]" : i;
      null != a &&
        ("string" != typeof a || (a = t.elements.popper.querySelector(a))) &&
        ep(t.elements.popper, a) &&
        (t.elements.arrow = a);
    },  
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };
  function eL(e) {
    return e.split("-")[1];
  }
  var eO = { top: "auto", right: "auto", bottom: "auto", left: "auto" }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  function eT(e) {
    var t,
      i,
      a,
      n,
      s,
      o,
      r,
      l = e.popper,
      c = e.popperRect,
      h = e.placement,
      d = e.variation,
      u = e.offsets,
      g = e.position,
      p = e.gpuAcceleration,
      f = e.adaptive,
      m = e.roundOffsets,
      x = e.isFixed,
      b = u.x,
      v = void 0 === b ? 0 : b,
      y = u.y,
      w = void 0 === y ? 0 : y,
      C = "function" == typeof m ? m({ x: v, y: w }) : { x: v, y: w };
    (v = C.x), (w = C.y);
    var k = u.hasOwnProperty("x"),
      A = u.hasOwnProperty("y"),
      S = D,
      L = P,
      O = window;
    if (f) {
      var T = ev(l),
        E = "clientHeight",
        I = "clientWidth";
      T === et(l) &&
        "static" !== ef((T = em(l))).position &&
        "absolute" === g &&
        ((E = "scrollHeight"), (I = "scrollWidth")),
        (h === P || ((h === D || h === _) && d === F)) &&
          ((L = M),
          (w -=
            (x && T === O && O.visualViewport
              ? O.visualViewport.height
              : T[E]) - c.height),
          (w *= p ? 1 : -1)),
        (h === D || ((h === P || h === M) && d === F)) &&
          ((S = _),
          (v -=
            (x && T === O && O.visualViewport ? O.visualViewport.width : T[I]) -
            c.width),
          (v *= p ? 1 : -1));
    }
    var H = Object.assign({ position: g }, f && eO),
      z =
        !0 === m
          ? ((t = { x: v, y: w }),
            (i = et(l)),
            (a = t.x),
            (n = t.y),
            {
              x: ec(a * (s = i.devicePixelRatio || 1)) / s || 0,
              y: ec(n * s) / s || 0
            })
          : { x: v, y: w };
    return ((v = z.x), (w = z.y), p)
      ? Object.assign(
          {},
          H,
          (((r = {})[L] = A ? "0" : ""),
          (r[S] = k ? "0" : ""),
          (r.transform =
            1 >= (O.devicePixelRatio || 1)
              ? "translate(" + v + "px, " + w + "px)"
              : "translate3d(" + v + "px, " + w + "px, 0)"),
          r)
        )
      : Object.assign(
          {},
          H,
          (((o = {})[L] = A ? w + "px" : ""),
          (o[S] = k ? v + "px" : ""),
          (o.transform = ""),
          o)
        );
  }
  var eP = {
      name: "computeStyles",
      enabled: !0,
      phase: "beforeWrite",
      fn: function (e) {
        var t = e.state,
          i = e.options,
          a = i.gpuAcceleration,
          n = i.adaptive,
          s = i.roundOffsets,
          o = void 0 === s || s,
          r = {
            placement: eo(t.placement),
            variation: eL(t.placement),
            popper: t.elements.popper,
            popperRect: t.rects.popper,
            gpuAcceleration: void 0 === a || a,
            isFixed: "fixed" === t.options.strategy
          };
        null != t.modifiersData.popperOffsets &&
          (t.styles.popper = Object.assign(
            {},
            t.styles.popper,
            eT(
              Object.assign({}, r, {
                offsets: t.modifiersData.popperOffsets,
                position: t.options.strategy,
                adaptive: void 0 === n || n,
                roundOffsets: o
              })
            )
          )),
          null != t.modifiersData.arrow &&
            (t.styles.arrow = Object.assign(
              {},
              t.styles.arrow,
              eT(
                Object.assign({}, r, {
                  offsets: t.modifiersData.arrow,
                  position: "absolute",
                  adaptive: !1,
                  roundOffsets: o
                })
              )
            )),
          (t.attributes.popper = Object.assign({}, t.attributes.popper, {
            "data-popper-placement": t.placement
          }));
      },  
      data: {}
    },
    eM = { passive: !0 },
    e_ = {
      name: "eventListeners",
      enabled: !0,
      phase: "write",
      fn: function () {},
      effect: function (e) {
        var t = e.state,
          i = e.instance,
          a = e.options,
          n = a.scroll,
          s = void 0 === n || n,
          o = a.resize,
          r = void 0 === o || o,
          l = et(t.elements.popper),
          c = [].concat(t.scrollParents.reference, t.scrollParents.popper);
        return (
          s &&
            c.forEach(function (e) {
              e.addEventListener("scroll", i.update, eM);
            }),
          r && l.addEventListener("resize", i.update, eM),
          function () {
            s &&
              c.forEach(function (e) {
                e.removeEventListener("scroll", i.update, eM);
              }),
              r && l.removeEventListener("resize", i.update, eM);
          }
        );
      },  
      data: {}
    },
    eD = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function eE(e) {
    return e.replace(/left|right|bottom|top/g, function (e) {
      return eD[e];
    });
  }
  var eI = { start: "end", end: "start" };
  function eH(e) {
    return e.replace(/start|end/g, function (e) {
      return eI[e];
    });
  }
  function eF(e) {
    var t = et(e);
    return { scrollLeft: t.pageXOffset, scrollTop: t.pageYOffset };
  }
  function ez(e) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return eu(em(e)).left + eF(e).scrollLeft;
  }
  function eY(e) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var t = ef(e),
      i = t.overflow,
      a = t.overflowX,
      n = t.overflowY;
    return /auto|scroll|overlay|hidden/.test(i + n + a);
  }
  function eX(e, t) {
    void 0 === t && (t = []);
    var i,
      a = (function e(t) {
        return ["html", "body", "#document"].indexOf(ee(t)) >= 0
          ? t.ownerDocument.body
          : ea(t) && eY(t)
          ? t
          : e(ex(t));
      })(e),
      n = a === (null == (i = e.ownerDocument) ? void 0 : i.body),
      s = et(a),
      o = n ? [s].concat(s.visualViewport || [], eY(a) ? a : []) : a,
      r = t.concat(o);
    return n ? r : r.concat(eX(ex(o)));
  }
  function eN(e) {
    return Object.assign({}, e, {
      left: e.x,
      top: e.y,
      right: e.x + e.width,
      bottom: e.y + e.height
    });
  }
  function eR(e, t, i) {
    var a, n, s, o, r, l, c, h, d, u;
    return t === Y
      ? eN(
          (function (e, t) {
            var i = et(e),
              a = em(e),
              n = i.visualViewport,
              s = a.clientWidth,
              o = a.clientHeight,
              r = 0,
              l = 0;
            if (n) {
              (s = n.width), (o = n.height);
              var c = ed();
              (c || (!c && "fixed" === t)) &&
                ((r = n.offsetLeft), (l = n.offsetTop));
            }
            return { width: s, height: o, x: r + ez(e), y: l };
          })(e, i)
        )
      : ei(t)
      ? (((a = eu(t, !1, "fixed" === i)).top = a.top + t.clientTop),
        (a.left = a.left + t.clientLeft),
        (a.bottom = a.top + t.clientHeight),
        (a.right = a.left + t.clientWidth),
        (a.width = t.clientWidth),
        (a.height = t.clientHeight),
        (a.x = a.left),
        (a.y = a.top),
        a)
      : eN(
          ((n = em(e)),
          (o = em(n)),
          (r = eF(n)),
          (l = null == (s = n.ownerDocument) ? void 0 : s.body),
          (c = er(
            o.scrollWidth,
            o.clientWidth,
            l ? l.scrollWidth : 0,
            l ? l.clientWidth : 0
          )),
          (h = er(
            o.scrollHeight,
            o.clientHeight,
            l ? l.scrollHeight : 0,
            l ? l.clientHeight : 0
          )),
          (d = -r.scrollLeft + ez(n)),
          (u = -r.scrollTop),
          "rtl" === ef(l || o).direction &&
            (d += er(o.clientWidth, l ? l.clientWidth : 0) - c),
          { width: c, height: h, x: d, y: u })
        );
  } // A "clipping parent" is an overflowable container with the characteristic of
  function eV(e) {
    var t,
      i = e.reference,
      a = e.element,
      n = e.placement,
      s = n ? eo(n) : null,
      o = n ? eL(n) : null,
      r = i.x + i.width / 2 - a.width / 2,
      l = i.y + i.height / 2 - a.height / 2;
    switch (s) {
      case P:
        t = { x: r, y: i.y - a.height };
        break;
      case M:
        t = { x: r, y: i.y + i.height };
        break;
      case _:
        t = { x: i.x + i.width, y: l };
        break;
      case D:
        t = { x: i.x - a.width, y: l };
        break;
      default:
        t = { x: i.x, y: i.y };
    }
    var c = s ? ey(s) : null;
    if (null != c) {
      var h = "y" === c ? "height" : "width";
      switch (o) {
        case H:
          t[c] = t[c] - (i[h] / 2 - a[h] / 2);
          break;
        case F:
          t[c] = t[c] + (i[h] / 2 - a[h] / 2);
      }
    }
    return t;
  }
  function eW(e, t) {
    void 0 === t && (t = {});
    var i,
      a,
      n,
      s,
      o,
      r,
      l,
      c = t,
      h = c.placement,
      d = void 0 === h ? e.placement : h,
      u = c.strategy,
      g = void 0 === u ? e.strategy : u,
      p = c.boundary,
      f = c.rootBoundary,
      m = c.elementContext,
      x = void 0 === m ? X : m,
      b = c.altBoundary,
      v = c.padding,
      y = void 0 === v ? 0 : v,
      w = ek("number" != typeof y ? y : eA(y, I)),
      C = e.rects.popper,
      k = e.elements[void 0 !== b && b ? (x === X ? N : X) : x],
      A =
        ((i = ei(k) ? k : k.contextElement || em(e.elements.popper)),
        (r = (o = [].concat(
          "clippingParents" === (a = void 0 === p ? z : p)
            ? ((n = eX(ex(i))),
              ei(
                (s =
                  ["absolute", "fixed"].indexOf(ef(i).position) >= 0 && ea(i)
                    ? ev(i)
                    : i)
              )
                ? n.filter(function (e) {
                    return ei(e) && ep(e, s) && "body" !== ee(e);
                  })
                : [])
            : [].concat(a),
          [void 0 === f ? Y : f]
        ))[0]),
        ((l = o.reduce(function (e, t) {
          var a = eR(i, t, g);
          return (
            (e.top = er(a.top, e.top)),
            (e.right = el(a.right, e.right)),
            (e.bottom = el(a.bottom, e.bottom)),
            (e.left = er(a.left, e.left)),
            e
          );
        }, eR(i, r, g))).width = l.right - l.left),
        (l.height = l.bottom - l.top),
        (l.x = l.left),
        (l.y = l.top),
        l),
      S = eu(e.elements.reference),
      L = eV({ reference: S, element: C, strategy: "absolute", placement: d }),
      O = eN(Object.assign({}, C, L)),
      T = x === X ? O : S,
      D = {
        top: A.top - T.top + w.top,
        bottom: T.bottom - A.bottom + w.bottom,
        left: A.left - T.left + w.left,
        right: T.right - A.right + w.right
      },
      E = e.modifiersData.offset;
    if (x === X && E) {
      var H = E[d];
      Object.keys(D).forEach(function (e) {
        var t = [_, M].indexOf(e) >= 0 ? 1 : -1,
          i = [P, M].indexOf(e) >= 0 ? "y" : "x";
        D[e] += H[i] * t;
      });
    }
    return D;
  }
  var eB = {
    name: "flip",
    enabled: !0,
    phase: "main",
    fn: function (e) {
      var t = e.state,
        i = e.options,
        a = e.name;
      if (!t.modifiersData[a]._skip) {
        for (
          var n = i.mainAxis,
            s = void 0 === n || n,
            o = i.altAxis,
            r = void 0 === o || o,
            l = i.fallbackPlacements,
            c = i.padding,
            h = i.boundary,
            d = i.rootBoundary,
            u = i.altBoundary,
            g = i.flipVariations,
            p = void 0 === g || g,
            f = i.allowedAutoPlacements,
            m = t.options.placement,
            x = eo(m) === m,
            b =
              l ||
              (x || !p
                ? [eE(m)]
                : (function (e) {
                    if (eo(e) === E) return [];
                    var t = eE(e);
                    return [eH(e), t, eH(t)];
                  })(m)),
            v = [m].concat(b).reduce(function (e, i) {
              var a, n, s, o, r, l, u, g, m, x, b, v;
              return e.concat(
                eo(i) === E
                  ? ((n = (a = {
                      placement: i,
                      boundary: h,
                      rootBoundary: d,
                      padding: c,
                      flipVariations: p,
                      allowedAutoPlacements: f
                    }).placement),
                    (s = a.boundary),
                    (o = a.rootBoundary),
                    (r = a.padding),
                    (l = a.flipVariations),
                    (g = void 0 === (u = a.allowedAutoPlacements) ? V : u),
                    0 ===
                      (b = (x = (m = eL(n))
                        ? l
                          ? R
                          : R.filter(function (e) {
                              return eL(e) === m;
                            })
                        : I).filter(function (e) {
                        return g.indexOf(e) >= 0;
                      })).length && (b = x),
                    Object.keys(
                      (v = b.reduce(function (e, i) {
                        return (
                          (e[i] = eW(t, {
                            placement: i,
                            boundary: s,
                            rootBoundary: o,
                            padding: r
                          })[eo(i)]),
                          e
                        );
                      }, {}))
                    ).sort(function (e, t) {
                      return v[e] - v[t];
                    }))
                  : i
              );
            }, []),
            y = t.rects.reference,
            w = t.rects.popper,
            C = new Map(),
            k = !0,
            A = v[0],
            S = 0;
          S < v.length;
          S++
        ) {
          var L = v[S],
            O = eo(L),
            T = eL(L) === H,
            F = [P, M].indexOf(O) >= 0,
            z = F ? "width" : "height",
            Y = eW(t, {
              placement: L,
              boundary: h,
              rootBoundary: d,
              altBoundary: u,
              padding: c
            }),
            X = F ? (T ? _ : D) : T ? M : P;
          y[z] > w[z] && (X = eE(X));
          var N = eE(X),
            W = [];
          if (
            (s && W.push(Y[O] <= 0),
            r && W.push(Y[X] <= 0, Y[N] <= 0),
            W.every(function (e) {
              return e;
            }))
          ) {
            (A = L), (k = !1);
            break;
          }
          C.set(L, W);
        }
        if (k)
          for (
            var B = p ? 3 : 1,
              G = function (e) {
                var t = v.find(function (t) {
                  var i = C.get(t);
                  if (i)
                    return i.slice(0, e).every(function (e) {
                      return e;
                    });
                });
                if (t) return (A = t), "break";
              },
              j = B;
            j > 0 && "break" !== G(j);
            j--
          );
        t.placement !== A &&
          ((t.modifiersData[a]._skip = !0), (t.placement = A), (t.reset = !0));
      }
    },  
    requiresIfExists: ["offset"],
    data: { _skip: !1 }
  };
  function eG(e, t, i) {
    return (
      void 0 === i && (i = { x: 0, y: 0 }),
      {
        top: e.top - t.height - i.y,
        right: e.right - t.width + i.x,
        bottom: e.bottom - t.height + i.y,
        left: e.left - t.width - i.x
      }
    );
  }
  function ej(e) {
    return [P, _, M, D].some(function (t) {
      return e[t] >= 0;
    });
  }
  var e$ = {
      name: "hide",
      enabled: !0,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: function (e) {
        var t = e.state,
          i = e.name,
          a = t.rects.reference,
          n = t.rects.popper,
          s = t.modifiersData.preventOverflow,
          o = eW(t, { elementContext: "reference" }),
          r = eW(t, { altBoundary: !0 }),
          l = eG(o, a),
          c = eG(r, n, s),
          h = ej(l),
          d = ej(c);
        (t.modifiersData[i] = {
          referenceClippingOffsets: l,
          popperEscapeOffsets: c,
          isReferenceHidden: h,
          hasPopperEscaped: d
        }),
          (t.attributes.popper = Object.assign({}, t.attributes.popper, {
            "data-popper-reference-hidden": h,
            "data-popper-escaped": d
          }));
      }  
    },
    eU = {
      name: "offset",
      enabled: !0,
      phase: "main",
      requires: ["popperOffsets"],
      fn: function (e) {
        var t = e.state,
          i = e.options,
          a = e.name,
          n = i.offset,
          s = void 0 === n ? [0, 0] : n,
          o = V.reduce(function (e, i) {
            var a, n, o, r, l, c;
            return (
              (e[i] =
                ((a = t.rects),
                (o = [D, P].indexOf((n = eo(i))) >= 0 ? -1 : 1),
                (l = (r =
                  "function" == typeof s
                    ? s(Object.assign({}, a, { placement: i }))
                    : s)[0]),
                (c = r[1]),
                (l = l || 0),
                (c = (c || 0) * o),
                [D, _].indexOf(n) >= 0 ? { x: c, y: l } : { x: l, y: c })),
              e
            );
          }, {}),
          r = o[t.placement],
          l = r.x,
          c = r.y;
        null != t.modifiersData.popperOffsets &&
          ((t.modifiersData.popperOffsets.x += l),
          (t.modifiersData.popperOffsets.y += c)),
          (t.modifiersData[a] = o);
      }  
    },
    eq = {
      name: "popperOffsets",
      enabled: !0,
      phase: "read",
      fn: function (e) {
        var t = e.state,
          i = e.name; // Offsets are the actual position the popper needs to have to be
        // properly positioned near its reference element
        // This is the most basic placement, and will be adjusted by
        // the modifiers in the next step
        t.modifiersData[i] = eV({
          reference: t.rects.reference,
          element: t.rects.popper,
          strategy: "absolute",
          placement: t.placement
        });
      },  
      data: {}
    },
    eZ = {
      name: "preventOverflow",
      enabled: !0,
      phase: "main",
      fn: function (e) {
        var t = e.state,
          i = e.options,
          a = e.name,
          n = i.mainAxis,
          s = i.altAxis,
          o = i.boundary,
          r = i.rootBoundary,
          l = i.altBoundary,
          c = i.padding,
          h = i.tether,
          d = void 0 === h || h,
          u = i.tetherOffset,
          g = void 0 === u ? 0 : u,
          p = eW(t, {
            boundary: o,
            rootBoundary: r,
            padding: c,
            altBoundary: l
          }),
          f = eo(t.placement),
          m = eL(t.placement),
          x = !m,
          b = ey(f),
          v = "x" === b ? "y" : "x",
          y = t.modifiersData.popperOffsets,
          w = t.rects.reference,
          C = t.rects.popper,
          k =
            "function" == typeof g
              ? g(Object.assign({}, t.rects, { placement: t.placement }))
              : g,
          A =
            "number" == typeof k
              ? { mainAxis: k, altAxis: k }
              : Object.assign({ mainAxis: 0, altAxis: 0 }, k),
          S = t.modifiersData.offset
            ? t.modifiersData.offset[t.placement]
            : null,
          L = { x: 0, y: 0 };
        if (y) {
          if (void 0 === n || n) {
            var O,
              T = "y" === b ? P : D,
              E = "y" === b ? M : _,
              I = "y" === b ? "height" : "width",
              F = y[b],
              z = F + p[T],
              Y = F - p[E],
              X = d ? -C[I] / 2 : 0,
              N = m === H ? w[I] : C[I],
              R = m === H ? -C[I] : -w[I],
              V = t.elements.arrow,
              W = d && V ? eg(V) : { width: 0, height: 0 },
              B = t.modifiersData["arrow#persistent"]
                ? t.modifiersData["arrow#persistent"].padding
                : eC(),
              G = B[T],
              j = B[E],
              $ = ew(0, w[I], W[I]),
              U = x
                ? w[I] / 2 - X - $ - G - A.mainAxis
                : N - $ - G - A.mainAxis,
              q = x
                ? -w[I] / 2 + X + $ + j + A.mainAxis
                : R + $ + j + A.mainAxis,
              Z = t.elements.arrow && ev(t.elements.arrow),
              J = Z ? ("y" === b ? Z.clientTop || 0 : Z.clientLeft || 0) : 0,
              K = null != (O = null == S ? void 0 : S[b]) ? O : 0,
              Q = F + U - K - J,
              ee = F + q - K,
              et = ew(d ? el(z, Q) : z, F, d ? er(Y, ee) : Y);
            (y[b] = et), (L[b] = et - F);
          }
          if (void 0 !== s && s) {
            var ei,
              ea,
              en = "x" === b ? P : D,
              es = "x" === b ? M : _,
              ec = y[v],
              eh = "y" === v ? "height" : "width",
              ed = ec + p[en],
              eu = ec - p[es],
              ep = -1 !== [P, D].indexOf(f),
              ef = null != (ea = null == S ? void 0 : S[v]) ? ea : 0,
              em = ep ? ed : ec - w[eh] - C[eh] - ef + A.altAxis,
              ex = ep ? ec + w[eh] + C[eh] - ef - A.altAxis : eu,
              eb =
                d && ep
                  ? (ei = ew(em, ec, ex)) > ex
                    ? ex
                    : ei
                  : ew(d ? em : ed, ec, d ? ex : eu);
            (y[v] = eb), (L[v] = eb - ec);
          }
          t.modifiersData[a] = L;
        }
      },  
      requiresIfExists: ["offset"]
    },
    eJ = { placement: "bottom", modifiers: [], strategy: "absolute" };
  function eK() {
    for (var e = arguments.length, t = Array(e), i = 0; i < e; i++)
      t[i] = arguments[i];
    return !t.some(function (e) {
      return !(e && "function" == typeof e.getBoundingClientRect);
    });
  }
  function eQ(e) {
    void 0 === e && (e = {});
    var t = e,
      i = t.defaultModifiers,
      a = void 0 === i ? [] : i,
      n = t.defaultOptions,
      s = void 0 === n ? eJ : n;
    return function (e, t, i) {
      void 0 === i && (i = s);
      var n,
        o = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, eJ, s),
          modifiersData: {},
          elements: { reference: e, popper: t },
          attributes: {},
          styles: {}
        },
        r = [],
        l = !1,
        c = {
          state: o,
          setOptions: function (i) {
            var n,
              l,
              d,
              u,
              g,
              p = "function" == typeof i ? i(o.options) : i;
            h(),
              (o.options = Object.assign({}, s, o.options, p)),
              (o.scrollParents = {
                reference: ei(e)
                  ? eX(e)
                  : e.contextElement
                  ? eX(e.contextElement)
                  : [],
                popper: eX(t)
              }); // properties
            var f =
              ((l = Object.keys(
                (n = [].concat(a, o.options.modifiers).reduce(function (e, t) {
                  var i = e[t.name];
                  return (
                    (e[t.name] = i
                      ? Object.assign({}, i, t, {
                          options: Object.assign({}, i.options, t.options),
                          data: Object.assign({}, i.data, t.data)
                        })
                      : t),
                    e
                  );
                }, {}))
              ).map(function (e) {
                return n[e];
              })),
              (d = new Map()),
              (u = new Set()),
              (g = []),
              l.forEach(function (e) {
                d.set(e.name, e);
              }),
              l.forEach(function (e) {
                u.has(e.name) ||
                  (function e(t) {
                    u.add(t.name),
                      []
                        .concat(t.requires || [], t.requiresIfExists || [])
                        .forEach(function (t) {
                          if (!u.has(t)) {
                            var i = d.get(t);
                            i && e(i);
                          }
                        }),
                      g.push(t);
                  })(e);
              }),
              K.reduce(function (e, t) {
                return e.concat(
                  g.filter(function (e) {
                    return e.phase === t;
                  })
                );
              }, [])); // Strip out disabled modifiers
            return (
              (o.orderedModifiers = f.filter(function (e) {
                return e.enabled;
              })),
              o.orderedModifiers.forEach(function (e) {
                var t = e.name,
                  i = e.options,
                  a = e.effect;
                if ("function" == typeof a) {
                  var n = a({
                    state: o,
                    name: t,
                    instance: c,
                    options: void 0 === i ? {} : i
                  });
                  r.push(n || function () {});
                }
              }),
              c.update()
            );
          }, // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function () {
            if (!l) {
              var e = o.elements,
                t = e.reference,
                i = e.popper; // Don't proceed if `reference` or `popper` are not valid elements
              // anymore
              if (eK(t, i)) {
                // Store the reference and popper rects to be read by modifiers
                (o.rects = {
                  reference:
                    ((n = ev(i)),
                    (s = "fixed" === o.options.strategy),
                    (r = ea(n)),
                    (g =
                      ea(n) &&
                      ((d =
                        ec((h = n.getBoundingClientRect()).width) /
                          n.offsetWidth || 1),
                      (u = ec(h.height) / n.offsetHeight || 1),
                      1 !== d || 1 !== u)),
                    (p = em(n)),
                    (f = eu(t, g, s)),
                    (m = { scrollLeft: 0, scrollTop: 0 }),
                    (x = { x: 0, y: 0 }),
                    (r || (!r && !s)) &&
                      (("body" !== ee(n) || eY(p)) &&
                        (m =
                          (a = n) !== et(a) && ea(a)
                            ? {
                                scrollLeft: a.scrollLeft,
                                scrollTop: a.scrollTop
                              }
                            : eF(a)),
                      ea(n)
                        ? ((x = eu(n, !0)),
                          (x.x += n.clientLeft),
                          (x.y += n.clientTop))
                        : p && (x.x = ez(p))),
                    {
                      x: f.left + m.scrollLeft - x.x,
                      y: f.top + m.scrollTop - x.y,
                      width: f.width,
                      height: f.height
                    }),
                  popper: eg(i)
                }), // most common use case for this is the `flip` modifier changing the
                  // placement, which then needs to re-run all the modifiers, because the
                  // logic was previously ran for the previous placement and is therefore
                  // stale/incorrect
                  (o.reset = !1),
                  (o.placement = o.options.placement), // is filled with the initial data specified by the modifier. This means
                  // it doesn't persist and is fresh on each update.
                  // To ensure persistent data, use `${name}#persistent`
                  o.orderedModifiers.forEach(function (e) {
                    return (o.modifiersData[e.name] = Object.assign(
                      {},
                      e.data
                    ));
                  });
                for (
                  var a, n, s, r, h, d, u, g, p, f, m, x, b = 0;
                  b < o.orderedModifiers.length;
                  b++
                ) {
                  if (!0 === o.reset) {
                    (o.reset = !1), (b = -1);
                    continue;
                  }
                  var v = o.orderedModifiers[b],
                    y = v.fn,
                    w = v.options,
                    C = void 0 === w ? {} : w,
                    k = v.name;
                  "function" == typeof y &&
                    (o =
                      y({ state: o, options: C, name: k, instance: c }) || o);
                }
              }
            }
          }, // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: function () {
            return (
              n ||
                (n = new Promise(function (e) {
                  Promise.resolve().then(function () {
                    (n = void 0),
                      e(
                        new Promise(function (e) {
                          c.forceUpdate(), e(o);
                        })
                      );
                  });
                })),
              n
            );
          },
          destroy: function () {
            h(), (l = !0);
          }
        };
      if (!eK(e, t)) return c;
      function h() {
        r.forEach(function (e) {
          return e();
        }),
          (r = []);
      }
      return (
        c.setOptions(i).then(function (e) {
          !l && i.onFirstUpdate && i.onFirstUpdate(e);
        }),
        c
      );
    };
  }
  var e0 = /*#__PURE__*/ eQ(),
    e1 = eQ({ defaultModifiers: [e_, eq, eP, es, eU, eB, eZ, eS, e$] }),
    e2 = eQ({ defaultModifiers: [e_, eq, eP, es] });  
  e(O, T), e(O, Q);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/data.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * Constants
   */ let e4 = new Map(),
    e3 = {
      set(e, t, i) {
        e4.has(e) || e4.set(e, new Map());
        let a = e4.get(e); // make it clear we only want one instance per element
        // can be removed later when multiple key/instances are fine to be used
        if (!a.has(t) && 0 !== a.size) {
          // eslint-disable-next-line no-console
          console.error(
            `Bootstrap doesn't allow more than one instance per element. Bound instance: ${
              Array.from(a.keys())[0]
            }.`
          );
          return;
        }
        a.set(t, i);
      },
      get: (e, t) => (e4.has(e) && e4.get(e).get(t)) || null,
      remove(e, t) {
        if (!e4.has(e)) return;
        let i = e4.get(e);
        i.delete(t), 0 === i.size && e4.delete(e);
      }
    },
    e5 = "transitionend",
    e6 = (e) => (
      e &&
        window.CSS &&
        window.CSS.escape &&
        (e = e.replace(/#([^\s"#']+)/g, (e, t) => `#${CSS.escape(t)}`)),
      e
    ),
    e9 = (e) =>
      null == e
        ? `${e}`
        : Object.prototype.toString
            .call(e)
            .match(/\s([a-z]+)/i)[1]
            .toLowerCase(),
    e8 = (e) => {
      do e += Math.floor(1e6 * Math.random());
      while (document.getElementById(e));
      return e;
    },
    e7 = (e) => {
      if (!e) return 0; // Get transition-duration of the element
      let { transitionDuration: t, transitionDelay: i } =
          window.getComputedStyle(e),
        a = Number.parseFloat(t),
        n = Number.parseFloat(i);
      return (
        // Return 0 if element or transition duration is not found
        a || n // If multiple durations are defined, take the first
          ? ((t = t.split(",")[0]),
            (i = i.split(",")[0]),
            (Number.parseFloat(t) + Number.parseFloat(i)) * 1e3)
          : 0
      );
    },
    te = (e) => {
      e.dispatchEvent(new Event(e5));
    },
    tt = (e) =>
      !!e &&
      "object" == typeof e &&
      (void 0 !== e.jquery && (e = e[0]), void 0 !== e.nodeType),
    ti = (
      e // it's a jQuery object or a node element
    ) =>
      tt(e)
        ? e.jquery
          ? e[0]
          : e
        : "string" == typeof e && e.length > 0
        ? document.querySelector(e6(e))
        : null,
    ta = (e) => {
      if (!tt(e) || 0 === e.getClientRects().length) return !1;
      let t = "visible" === getComputedStyle(e).getPropertyValue("visibility"),
        i = e.closest("details:not([open])");
      if (!i) return t;
      if (i !== e) {
        let t = e.closest("summary");
        if ((t && t.parentNode !== i) || null === t) return !1;
      }
      return t;
    },
    tn = (e) =>
      !!(
        !e ||
        e.nodeType !== Node.ELEMENT_NODE ||
        e.classList.contains("disabled")
      ) ||
      (void 0 !== e.disabled
        ? e.disabled
        : e.hasAttribute("disabled") && "false" !== e.getAttribute("disabled")),
    ts = (e) => {
      if (!document.documentElement.attachShadow) return null; // Can find the shadow root otherwise it'll return the document
      if ("function" == typeof e.getRootNode) {
        let t = e.getRootNode();
        return t instanceof ShadowRoot ? t : null;
      }
      return e instanceof ShadowRoot
        ? e
        : e.parentNode
        ? ts(e.parentNode)
        : null;
    },
    to = () => {},
    tr = (e) => {
      e.offsetHeight; // eslint-disable-line no-unused-expressions
    },
    tl = () =>
      window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")
        ? window.jQuery
        : null,
    tc = [],
    th = (e) => {
      "loading" === document.readyState
        ? (tc.length ||
            document.addEventListener("DOMContentLoaded", () => {
              for (let e of tc) e();
            }),
          tc.push(e))
        : e();
    },
    td = () => "rtl" === document.documentElement.dir,
    tu = (e) => {
      th(() => {
        let t = tl();
        /* istanbul ignore if */ if (t) {
          let i = e.NAME,
            a = t.fn[i];
          (t.fn[i] = e.jQueryInterface),
            (t.fn[i].Constructor = e),
            (t.fn[i].noConflict = () => ((t.fn[i] = a), e.jQueryInterface));
        }
      });
    },
    tg = (e, t = [], i = e) => ("function" == typeof e ? e(...t) : i),
    tp = (e, t, i = !0) => {
      if (!i) {
        tg(e);
        return;
      }
      let a = e7(t) + 5,
        n = !1,
        s = ({ target: i }) => {
          i === t && ((n = !0), t.removeEventListener(e5, s), tg(e));
        };
      t.addEventListener(e5, s),
        setTimeout(() => {
          n || te(t);
        }, a);
    },
    tf = (e, t, i, a) => {
      let n = e.length,
        s = e.indexOf(t);
      return (
        // if the element does not exist in the list return an element
        // depending on the direction and if cycle is allowed
        -1 === s
          ? !i && a
            ? e[n - 1]
            : e[0]
          : ((s += i ? 1 : -1),
            a && (s = (s + n) % n),
            e[Math.max(0, Math.min(s, n - 1))])
      );
    },
    tm = /[^.]*(?=\..*)\.|.*/,
    tx = /\..*/,
    tb = /::\d+$/,
    tv = {},
    ty = 1,
    tw = { mouseenter: "mouseover", mouseleave: "mouseout" },
    tC = new Set([
      "click",
      "dblclick",
      "mouseup",
      "mousedown",
      "contextmenu",
      "mousewheel",
      "DOMMouseScroll",
      "mouseover",
      "mouseout",
      "mousemove",
      "selectstart",
      "selectend",
      "keydown",
      "keypress",
      "keyup",
      "orientationchange",
      "touchstart",
      "touchmove",
      "touchend",
      "touchcancel",
      "pointerdown",
      "pointermove",
      "pointerup",
      "pointerleave",
      "pointercancel",
      "gesturestart",
      "gesturechange",
      "gestureend",
      "focus",
      "blur",
      "change",
      "reset",
      "select",
      "submit",
      "focusin",
      "focusout",
      "load",
      "unload",
      "beforeunload",
      "resize",
      "move",
      "DOMContentLoaded",
      "readystatechange",
      "error",
      "abort",
      "scroll"
    ]);
  /**
   * Private methods
   */ function tk(e, t) {
    return (t && `${t}::${ty++}`) || e.uidEvent || ty++;
  }
  function tA(e) {
    let t = tk(e);
    return (e.uidEvent = t), (tv[t] = tv[t] || {}), tv[t];
  }
  function tS(e, t, i = null) {
    return Object.values(e).find(
      (e) => e.callable === t && e.delegationSelector === i
    );
  }
  function tL(e, t, i) {
    let a = "string" == typeof t,
      n = tP(e);
    return tC.has(n) || (n = e), [a, a ? i : t || i, n];
  }
  function tO(e, t, i, a, n) {
    var s, o, r;
    if ("string" != typeof t || !e) return;
    let [l, c, h] = tL(t, i, a); // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position
    // this prevents the handler from being dispatched the same way as mouseover or mouseout does
    t in tw &&
      ((s = c),
      (c = function (e) {
        if (
          !e.relatedTarget ||
          (e.relatedTarget !== e.delegateTarget &&
            !e.delegateTarget.contains(e.relatedTarget))
        )
          return s.call(this, e);
      }));
    let d = tA(e),
      u = d[h] || (d[h] = {}),
      g = tS(u, c, l ? i : null);
    if (g) {
      g.oneOff = g.oneOff && n;
      return;
    }
    let p = tk(c, t.replace(tm, "")),
      f = l
        ? ((o = c),
          function t(a) {
            let n = e.querySelectorAll(i);
            for (let { target: s } = a; s && s !== this; s = s.parentNode)
              for (let r of n)
                if (r === s)
                  return (
                    t_(a, { delegateTarget: s }),
                    t.oneOff && tM.off(e, a.type, i, o),
                    o.apply(s, [a])
                  );
          })
        : ((r = c),
          function t(i) {
            return (
              t_(i, { delegateTarget: e }),
              t.oneOff && tM.off(e, i.type, r),
              r.apply(e, [i])
            );
          });
    (f.delegationSelector = l ? i : null),
      (f.callable = c),
      (f.oneOff = n),
      (f.uidEvent = p),
      (u[p] = f),
      e.addEventListener(h, f, l);
  }
  function tT(e, t, i, a, n) {
    let s = tS(t[i], a, n);
    s && (e.removeEventListener(i, s, !!n), delete t[i][s.uidEvent]);
  }
  function tP(e) {
    return (
      tw[ // allow to get the native events from namespaced events ('click.bs.button' --> 'click')
        (e = e.replace(tx, ""))
      ] || e
    );
  }
  let tM = {
    on(e, t, i, a) {
      tO(e, t, i, a, !1);
    },
    one(e, t, i, a) {
      tO(e, t, i, a, !0);
    },
    off(e, t, i, a) {
      if ("string" != typeof t || !e) return;
      let [n, s, o] = tL(t, i, a),
        r = o !== t,
        l = tA(e),
        c = l[o] || {},
        h = t.startsWith(".");
      if (void 0 !== s) {
        // Simplest case: handler is passed, remove that listener ONLY.
        if (!Object.keys(c).length) return;
        tT(e, l, o, s, n ? i : null);
        return;
      }
      if (h)
        for (let i of Object.keys(l))
          !(function (e, t, i, a) {
            let n = t[i] || {};
            for (let [s, o] of Object.entries(n))
              s.includes(a) && tT(e, t, i, o.callable, o.delegationSelector);
          })(e, l, i, t.slice(1));
      for (let [i, a] of Object.entries(c)) {
        let n = i.replace(tb, "");
        (!r || t.includes(n)) && tT(e, l, o, a.callable, a.delegationSelector);
      }
    },
    trigger(e, t, i) {
      if ("string" != typeof t || !e) return null;
      let a = tl(),
        n = tP(t),
        s = t !== n,
        o = null,
        r = !0,
        l = !0,
        c = !1;
      s &&
        a &&
        ((o = a.Event(t, i)),
        a(e).trigger(o),
        (r = !o.isPropagationStopped()),
        (l = !o.isImmediatePropagationStopped()),
        (c = o.isDefaultPrevented()));
      let h = t_(new Event(t, { bubbles: r, cancelable: !0 }), i);
      return (
        c && h.preventDefault(),
        l && e.dispatchEvent(h),
        h.defaultPrevented && o && o.preventDefault(),
        h
      );
    }
  };
  function t_(e, t = {}) {
    for (let [i, a] of Object.entries(t))
      try {
        e[i] = a;
      } catch (t) {
        Object.defineProperty(e, i, { configurable: !0, get: () => a });
      }
    return e;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/manipulator.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ function tD(e) {
    if ("true" === e) return !0;
    if ("false" === e) return !1;
    if (e === Number(e).toString()) return Number(e);
    if ("" === e || "null" === e) return null;
    if ("string" != typeof e) return e;
    try {
      return JSON.parse(decodeURIComponent(e));
    } catch (t) {
      return e;
    }
  }
  function tE(e) {
    return e.replace(/[A-Z]/g, (e) => `-${e.toLowerCase()}`);
  }
  let tI = {
    setDataAttribute(e, t, i) {
      e.setAttribute(`data-bs-${tE(t)}`, i);
    },
    removeDataAttribute(e, t) {
      e.removeAttribute(`data-bs-${tE(t)}`);
    },
    getDataAttributes(e) {
      if (!e) return {};
      let t = {},
        i = Object.keys(e.dataset).filter(
          (e) => e.startsWith("bs") && !e.startsWith("bsConfig")
        );
      for (let a of i) {
        let i = a.replace(/^bs/, "");
        t[(i = i.charAt(0).toLowerCase() + i.slice(1, i.length))] = tD(
          e.dataset[a]
        );
      }
      return t;
    },
    getDataAttribute: (e, t) => tD(e.getAttribute(`data-bs-${tE(t)}`))
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/config.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * Class definition
   */ class tH {
    // Getters
    static get Default() {
      return {};
    }
    static get DefaultType() {
      return {};
    }
    static get NAME() {
      throw Error(
        'You have to implement the static method "NAME", for each component!'
      );
    }
    _getConfig(e) {
      return (
        (e = this._mergeConfigObj(e)),
        (e = this._configAfterMerge(e)),
        this._typeCheckConfig(e),
        e
      );
    }
    _configAfterMerge(e) {
      return e;
    }
    _mergeConfigObj(e, t) {
      let i = tt(t) ? tI.getDataAttribute(t, "config") : {}; // try to parse
      return {
        ...this.constructor.Default,
        ...("object" == typeof i ? i : {}),
        ...(tt(t) ? tI.getDataAttributes(t) : {}),
        ...("object" == typeof e ? e : {})
      };
    }
    _typeCheckConfig(e, t = this.constructor.DefaultType) {
      for (let [i, a] of Object.entries(t)) {
        let t = e[i],
          n = tt(t) ? "element" : e9(t);
        if (!new RegExp(a).test(n))
          throw TypeError(
            `${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${n}" but expected type "${a}".`
          );
      }
    }
  }
  /**
   * Class definition
   */ class tF extends tH {
    // Public
    dispose() {
      for (let e of (e3.remove(this._element, this.constructor.DATA_KEY),
      tM.off(this._element, this.constructor.EVENT_KEY),
      Object.getOwnPropertyNames(this)))
        this[e] = null;
    }
    _queueCallback(e, t, i = !0) {
      tp(e, t, i);
    }
    _getConfig(e) {
      return (
        (e = this._mergeConfigObj(e, this._element)),
        (e = this._configAfterMerge(e)),
        this._typeCheckConfig(e),
        e
      );
    } // Static
    static getInstance(e) {
      return e3.get(ti(e), this.DATA_KEY);
    }
    static getOrCreateInstance(e, t = {}) {
      return (
        this.getInstance(e) || new this(e, "object" == typeof t ? t : null)
      );
    }
    static get VERSION() {
      return "5.3.2";
    }
    static get DATA_KEY() {
      return `bs.${this.NAME}`;
    }
    static get EVENT_KEY() {
      return `.${this.DATA_KEY}`;
    }
    static eventName(e) {
      return `${e}${this.EVENT_KEY}`;
    }
    constructor(e, t) {
      if ((super(), !(e = ti(e)))) return;
      (this._element = e),
        (this._config = this._getConfig(t)),
        e3.set(this._element, this.constructor.DATA_KEY, this);
    }
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap dom/selector-engine.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ let tz = (e) => {
      let t = e.getAttribute("data-bs-target");
      if (!t || "#" === t) {
        let i = e.getAttribute("href"); // The only valid content that could double as a selector are IDs or classes,
        // so everything starting with `#` or `.`. If a "real" URL is used as the selector,
        // `document.querySelector` will rightfully complain it is invalid.
        // See https://github.com/twbs/bootstrap/issues/32273
        if (!i || (!i.includes("#") && !i.startsWith("."))) return null;
        i.includes("#") && !i.startsWith("#") && (i = `#${i.split("#")[1]}`),
          (t = i && "#" !== i ? e6(i.trim()) : null);
      }
      return t;
    },
    tY = {
      find: (e, t = document.documentElement) =>
        [].concat(...Element.prototype.querySelectorAll.call(t, e)),
      findOne: (e, t = document.documentElement) =>
        Element.prototype.querySelector.call(t, e),
      children: (e, t) => [].concat(...e.children).filter((e) => e.matches(t)),
      parents(e, t) {
        let i = [],
          a = e.parentNode.closest(t);
        for (; a; ) i.push(a), (a = a.parentNode.closest(t));
        return i;
      },
      prev(e, t) {
        let i = e.previousElementSibling;
        for (; i; ) {
          if (i.matches(t)) return [i];
          i = i.previousElementSibling;
        }
        return [];
      }, // TODO: this is now unused; remove later along with prev()
      next(e, t) {
        let i = e.nextElementSibling;
        for (; i; ) {
          if (i.matches(t)) return [i];
          i = i.nextElementSibling;
        }
        return [];
      },
      focusableChildren(e) {
        let t = [
          "a",
          "button",
          "input",
          "textarea",
          "select",
          "details",
          "[tabindex]",
          '[contenteditable="true"]'
        ]
          .map((e) => `${e}:not([tabindex^="-"])`)
          .join(",");
        return this.find(t, e).filter((e) => !tn(e) && ta(e));
      },
      getSelectorFromElement(e) {
        let t = tz(e);
        return t && tY.findOne(t) ? t : null;
      },
      getElementFromSelector(e) {
        let t = tz(e);
        return t ? tY.findOne(t) : null;
      },
      getMultipleElementsFromSelector(e) {
        let t = tz(e);
        return t ? tY.find(t) : [];
      }
    },
    tX = (e, t = "hide") => {
      let i = `click.dismiss${e.EVENT_KEY}`,
        a = e.NAME;
      tM.on(document, i, `[data-bs-dismiss="${a}"]`, function (i) {
        if (
          (["A", "AREA"].includes(this.tagName) && i.preventDefault(), tn(this))
        )
          return;
        let n = tY.getElementFromSelector(this) || this.closest(`.${a}`),
          s = e.getOrCreateInstance(n); // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method
        s[t]();
      });
    },
    tN = ".bs.alert",
    tR = `close${tN}`,
    tV = `closed${tN}`;
  /**
   * Class definition
   */ class tW extends tF {
    // Getters
    static get NAME() {
      return "alert";
    } // Public
    close() {
      let e = tM.trigger(this._element, tR);
      if (e.defaultPrevented) return;
      this._element.classList.remove("show");
      let t = this._element.classList.contains("fade");
      this._queueCallback(() => this._destroyElement(), this._element, t);
    } // Private
    _destroyElement() {
      this._element.remove(), tM.trigger(this._element, tV), this.dispose();
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = tW.getOrCreateInstance(this);
        if ("string" == typeof e) {
          if (void 0 === t[e] || e.startsWith("_") || "constructor" === e)
            throw TypeError(`No method named "${e}"`);
          t[e](this);
        }
      });
    }
  }
  /**
   * Data API implementation
   */ tX(tW, "close"),
    /**
     * jQuery
     */ tu(tW);
  let tB = '[data-bs-toggle="button"]';
  /**
   * Class definition
   */ class tG extends tF {
    // Getters
    static get NAME() {
      return "button";
    } // Public
    toggle() {
      // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method
      this._element.setAttribute(
        "aria-pressed",
        this._element.classList.toggle("active")
      );
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = tG.getOrCreateInstance(this);
        "toggle" === e && t[e]();
      });
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, "click.bs.button.data-api", tB, (e) => {
    e.preventDefault();
    let t = e.target.closest(tB),
      i = tG.getOrCreateInstance(t);
    i.toggle();
  }),
    /**
     * jQuery
     */ tu(tG);
  let tj = ".bs.swipe",
    t$ = `touchstart${tj}`,
    tU = `touchmove${tj}`,
    tq = `touchend${tj}`,
    tZ = `pointerdown${tj}`,
    tJ = `pointerup${tj}`,
    tK = { endCallback: null, leftCallback: null, rightCallback: null },
    tQ = {
      endCallback: "(function|null)",
      leftCallback: "(function|null)",
      rightCallback: "(function|null)"
    };
  /**
   * Class definition
   */ class t0 extends tH {
    // Getters
    static get Default() {
      return tK;
    }
    static get DefaultType() {
      return tQ;
    }
    static get NAME() {
      return "swipe";
    } // Public
    dispose() {
      tM.off(this._element, tj);
    } // Private
    _start(e) {
      if (!this._supportPointerEvents) {
        this._deltaX = e.touches[0].clientX;
        return;
      }
      this._eventIsPointerPenTouch(e) && (this._deltaX = e.clientX);
    }
    _end(e) {
      this._eventIsPointerPenTouch(e) &&
        (this._deltaX = e.clientX - this._deltaX),
        this._handleSwipe(),
        tg(this._config.endCallback);
    }
    _move(e) {
      this._deltaX =
        e.touches && e.touches.length > 1
          ? 0
          : e.touches[0].clientX - this._deltaX;
    }
    _handleSwipe() {
      let e = Math.abs(this._deltaX);
      if (e <= 40) return;
      let t = e / this._deltaX;
      (this._deltaX = 0),
        t && tg(t > 0 ? this._config.rightCallback : this._config.leftCallback);
    }
    _initEvents() {
      this._supportPointerEvents
        ? (tM.on(this._element, tZ, (e) => this._start(e)),
          tM.on(this._element, tJ, (e) => this._end(e)),
          this._element.classList.add("pointer-event"))
        : (tM.on(this._element, t$, (e) => this._start(e)),
          tM.on(this._element, tU, (e) => this._move(e)),
          tM.on(this._element, tq, (e) => this._end(e)));
    }
    _eventIsPointerPenTouch(e) {
      return (
        this._supportPointerEvents &&
        ("pen" === e.pointerType || "touch" === e.pointerType)
      );
    } // Static
    static isSupported() {
      return (
        "ontouchstart" in document.documentElement ||
        navigator.maxTouchPoints > 0
      );
    }
    constructor(e, t) {
      if ((super(), (this._element = e), !e || !t0.isSupported())) return;
      (this._config = this._getConfig(t)),
        (this._deltaX = 0),
        (this._supportPointerEvents = !!window.PointerEvent),
        this._initEvents();
    }
  }
  let t1 = ".bs.carousel",
    t2 = ".data-api",
    t4 = "next",
    t3 = "prev",
    t5 = "left",
    t6 = "right",
    t9 = `slide${t1}`,
    t8 = `slid${t1}`,
    t7 = `keydown${t1}`,
    ie = `mouseenter${t1}`,
    it = `mouseleave${t1}`,
    ii = `dragstart${t1}`,
    ia = `load${t1}${t2}`,
    is = `click${t1}${t2}`,
    io = "carousel",
    ir = "active",
    il = ".active",
    ic = ".carousel-item",
    ih = il + ic,
    id = { ArrowLeft: t6, ArrowRight: t5 },
    iu = {
      interval: 5e3,
      keyboard: !0,
      pause: "hover",
      ride: !1,
      touch: !0,
      wrap: !0
    },
    ig = {
      interval: "(number|boolean)", // TODO:v6 remove boolean support
      keyboard: "boolean",
      pause: "(string|boolean)",
      ride: "(boolean|string)",
      touch: "boolean",
      wrap: "boolean"
    };
  /**
   * Class definition
   */ class ip extends tF {
    // Getters
    static get Default() {
      return iu;
    }
    static get DefaultType() {
      return ig;
    }
    static get NAME() {
      return "carousel";
    } // Public
    next() {
      this._slide(t4);
    }
    nextWhenVisible() {
      // FIXME TODO use `document.visibilityState`
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      !document.hidden && ta(this._element) && this.next();
    }
    prev() {
      this._slide(t3);
    }
    pause() {
      this._isSliding && te(this._element), this._clearInterval();
    }
    cycle() {
      this._clearInterval(),
        this._updateInterval(),
        (this._interval = setInterval(
          () => this.nextWhenVisible(),
          this._config.interval
        ));
    }
    _maybeEnableCycle() {
      if (this._config.ride) {
        if (this._isSliding) {
          tM.one(this._element, t8, () => this.cycle());
          return;
        }
        this.cycle();
      }
    }
    to(e) {
      let t = this._getItems();
      if (e > t.length - 1 || e < 0) return;
      if (this._isSliding) {
        tM.one(this._element, t8, () => this.to(e));
        return;
      }
      let i = this._getItemIndex(this._getActive());
      if (i === e) return;
      let a = e > i ? t4 : t3;
      this._slide(a, t[e]);
    }
    dispose() {
      this._swipeHelper && this._swipeHelper.dispose(), super.dispose();
    } // Private
    _configAfterMerge(e) {
      return (e.defaultInterval = e.interval), e;
    }
    _addEventListeners() {
      this._config.keyboard &&
        tM.on(this._element, t7, (e) => this._keydown(e)),
        "hover" === this._config.pause &&
          (tM.on(this._element, ie, () => this.pause()),
          tM.on(this._element, it, () => this._maybeEnableCycle())),
        this._config.touch &&
          t0.isSupported() &&
          this._addTouchEventListeners();
    }
    _addTouchEventListeners() {
      for (let e of tY.find(".carousel-item img", this._element))
        tM.on(e, ii, (e) => e.preventDefault());
      this._swipeHelper = new t0(this._element, {
        leftCallback: () => this._slide(this._directionToOrder(t5)),
        rightCallback: () => this._slide(this._directionToOrder(t6)),
        endCallback: () => {
          "hover" === this._config.pause && // If it's a touch-enabled device, mouseenter/leave are fired as
            // part of the mouse compatibility events on first tap - the carousel
            // would stop cycling until user tapped out of it;
            // here, we listen for touchend, explicitly pause the carousel
            // (as if it's the second time we tap on it, mouseenter compat event
            // is NOT fired) and after a timeout (to allow for mouse compatibility
            // events to fire) we explicitly restart cycling
            (this.pause(),
            this.touchTimeout && clearTimeout(this.touchTimeout),
            (this.touchTimeout = setTimeout(
              () => this._maybeEnableCycle(),
              500 + this._config.interval
            )));
        }
      });
    }
    _keydown(e) {
      if (/input|textarea/i.test(e.target.tagName)) return;
      let t = id[e.key];
      t && (e.preventDefault(), this._slide(this._directionToOrder(t)));
    }
    _getItemIndex(e) {
      return this._getItems().indexOf(e);
    }
    _setActiveIndicatorElement(e) {
      if (!this._indicatorsElement) return;
      let t = tY.findOne(il, this._indicatorsElement);
      t.classList.remove(ir), t.removeAttribute("aria-current");
      let i = tY.findOne(`[data-bs-slide-to="${e}"]`, this._indicatorsElement);
      i && (i.classList.add(ir), i.setAttribute("aria-current", "true"));
    }
    _updateInterval() {
      let e = this._activeElement || this._getActive();
      if (!e) return;
      let t = Number.parseInt(e.getAttribute("data-bs-interval"), 10);
      this._config.interval = t || this._config.defaultInterval;
    }
    _slide(e, t = null) {
      if (this._isSliding) return;
      let i = this._getActive(),
        a = e === t4,
        n = t || tf(this._getItems(), i, a, this._config.wrap);
      if (n === i) return;
      let s = this._getItemIndex(n),
        o = (t) =>
          tM.trigger(this._element, t, {
            relatedTarget: n,
            direction: this._orderToDirection(e),
            from: this._getItemIndex(i),
            to: s
          }),
        r = o(t9);
      if (r.defaultPrevented || !i || !n) return;
      let l = !!this._interval;
      this.pause(),
        (this._isSliding = !0),
        this._setActiveIndicatorElement(s),
        (this._activeElement = n);
      let c = a ? "carousel-item-start" : "carousel-item-end",
        h = a ? "carousel-item-next" : "carousel-item-prev";
      n.classList.add(h),
        tr(n),
        i.classList.add(c),
        n.classList.add(c),
        this._queueCallback(
          () => {
            n.classList.remove(c, h),
              n.classList.add(ir),
              i.classList.remove(ir, h, c),
              (this._isSliding = !1),
              o(t8);
          },
          i,
          this._isAnimated()
        ),
        l && this.cycle();
    }
    _isAnimated() {
      return this._element.classList.contains("slide");
    }
    _getActive() {
      return tY.findOne(ih, this._element);
    }
    _getItems() {
      return tY.find(ic, this._element);
    }
    _clearInterval() {
      this._interval &&
        (clearInterval(this._interval), (this._interval = null));
    }
    _directionToOrder(e) {
      return td() ? (e === t5 ? t3 : t4) : e === t5 ? t4 : t3;
    }
    _orderToDirection(e) {
      return td() ? (e === t3 ? t5 : t6) : e === t3 ? t6 : t5;
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = ip.getOrCreateInstance(this, e);
        if ("number" == typeof e) {
          t.to(e);
          return;
        }
        if ("string" == typeof e) {
          if (void 0 === t[e] || e.startsWith("_") || "constructor" === e)
            throw TypeError(`No method named "${e}"`);
          t[e]();
        }
      });
    }
    constructor(e, t) {
      super(e, t),
        (this._interval = null),
        (this._activeElement = null),
        (this._isSliding = !1),
        (this.touchTimeout = null),
        (this._swipeHelper = null),
        (this._indicatorsElement = tY.findOne(
          ".carousel-indicators",
          this._element
        )),
        this._addEventListeners(),
        this._config.ride === io && this.cycle();
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, is, "[data-bs-slide], [data-bs-slide-to]", function (e) {
    let t = tY.getElementFromSelector(this);
    if (!t || !t.classList.contains(io)) return;
    e.preventDefault();
    let i = ip.getOrCreateInstance(t),
      a = this.getAttribute("data-bs-slide-to");
    if (a) {
      i.to(a), i._maybeEnableCycle();
      return;
    }
    if ("next" === tI.getDataAttribute(this, "slide")) {
      i.next(), i._maybeEnableCycle();
      return;
    }
    i.prev(), i._maybeEnableCycle();
  }),
    tM.on(window, ia, () => {
      let e = tY.find('[data-bs-ride="carousel"]');
      for (let t of e) ip.getOrCreateInstance(t);
    }),
    /**
     * jQuery
     */ tu(ip);
  let im = ".bs.collapse",
    ix = `show${im}`,
    ib = `shown${im}`,
    iv = `hide${im}`,
    iy = `hidden${im}`,
    iw = `click${im}.data-api`,
    iC = "show",
    ik = "collapse",
    iA = "collapsing",
    iS = `:scope .${ik} .${ik}`,
    iL = '[data-bs-toggle="collapse"]',
    iO = { parent: null, toggle: !0 },
    iT = { parent: "(null|element)", toggle: "boolean" };
  /**
   * Class definition
   */ class iP extends tF {
    // Getters
    static get Default() {
      return iO;
    }
    static get DefaultType() {
      return iT;
    }
    static get NAME() {
      return "collapse";
    } // Public
    toggle() {
      this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (this._isTransitioning || this._isShown()) return;
      let e = [];
      if (
        (this._config.parent &&
          (e = this._getFirstLevelChildren(
            ".collapse.show, .collapse.collapsing"
          )
            .filter((e) => e !== this._element)
            .map((e) => iP.getOrCreateInstance(e, { toggle: !1 }))),
        e.length && e[0]._isTransitioning)
      )
        return;
      let t = tM.trigger(this._element, ix);
      if (t.defaultPrevented) return;
      for (let t of e) t.hide();
      let i = this._getDimension();
      this._element.classList.remove(ik),
        this._element.classList.add(iA),
        (this._element.style[i] = 0),
        this._addAriaAndCollapsedClass(this._triggerArray, !0),
        (this._isTransitioning = !0);
      let a = i[0].toUpperCase() + i.slice(1),
        n = `scroll${a}`;
      this._queueCallback(
        () => {
          (this._isTransitioning = !1),
            this._element.classList.remove(iA),
            this._element.classList.add(ik, iC),
            (this._element.style[i] = ""),
            tM.trigger(this._element, ib);
        },
        this._element,
        !0
      ),
        (this._element.style[i] = `${this._element[n]}px`);
    }
    hide() {
      if (this._isTransitioning || !this._isShown()) return;
      let e = tM.trigger(this._element, iv);
      if (e.defaultPrevented) return;
      let t = this._getDimension();
      for (let e of ((this._element.style[t] = `${
        this._element.getBoundingClientRect()[t]
      }px`),
      tr(this._element),
      this._element.classList.add(iA),
      this._element.classList.remove(ik, iC),
      this._triggerArray)) {
        let t = tY.getElementFromSelector(e);
        t && !this._isShown(t) && this._addAriaAndCollapsedClass([e], !1);
      }
      (this._isTransitioning = !0),
        (this._element.style[t] = ""),
        this._queueCallback(
          () => {
            (this._isTransitioning = !1),
              this._element.classList.remove(iA),
              this._element.classList.add(ik),
              tM.trigger(this._element, iy);
          },
          this._element,
          !0
        );
    }
    _isShown(e = this._element) {
      return e.classList.contains(iC);
    } // Private
    _configAfterMerge(e) {
      return (e.toggle = !!e.toggle), (e.parent = ti(e.parent)), e;
    }
    _getDimension() {
      return this._element.classList.contains("collapse-horizontal")
        ? "width"
        : "height";
    }
    _initializeChildren() {
      if (!this._config.parent) return;
      let e = this._getFirstLevelChildren(iL);
      for (let t of e) {
        let e = tY.getElementFromSelector(t);
        e && this._addAriaAndCollapsedClass([t], this._isShown(e));
      }
    }
    _getFirstLevelChildren(e) {
      let t = tY.find(iS, this._config.parent); // remove children if greater depth
      return tY.find(e, this._config.parent).filter((e) => !t.includes(e));
    }
    _addAriaAndCollapsedClass(e, t) {
      if (e.length)
        for (let i of e)
          i.classList.toggle("collapsed", !t),
            i.setAttribute("aria-expanded", t);
    } // Static
    static jQueryInterface(e) {
      let t = {};
      return (
        "string" == typeof e && /show|hide/.test(e) && (t.toggle = !1),
        this.each(function () {
          let i = iP.getOrCreateInstance(this, t);
          if ("string" == typeof e) {
            if (void 0 === i[e]) throw TypeError(`No method named "${e}"`);
            i[e]();
          }
        })
      );
    }
    constructor(e, t) {
      super(e, t), (this._isTransitioning = !1), (this._triggerArray = []);
      let i = tY.find(iL);
      for (let e of i) {
        let t = tY.getSelectorFromElement(e),
          i = tY.find(t).filter((e) => e === this._element);
        null !== t && i.length && this._triggerArray.push(e);
      }
      this._initializeChildren(),
        this._config.parent ||
          this._addAriaAndCollapsedClass(this._triggerArray, this._isShown()),
        this._config.toggle && this.toggle();
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, iw, iL, function (e) {
    for (let t of (("A" === e.target.tagName ||
      (e.delegateTarget && "A" === e.delegateTarget.tagName)) &&
      e.preventDefault(),
    tY.getMultipleElementsFromSelector(this)))
      iP.getOrCreateInstance(t, { toggle: !1 }).toggle();
  }),
    /**
     * jQuery
     */ tu(iP);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap dropdown.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * Constants
   */ let iM = "dropdown",
    i_ = ".bs.dropdown",
    iD = ".data-api",
    iE = "ArrowDown",
    iI = `hide${i_}`,
    iH = `hidden${i_}`,
    iF = `show${i_}`,
    iz = `shown${i_}`,
    iY = `click${i_}${iD}`,
    iX = `keydown${i_}${iD}`,
    iN = `keyup${i_}${iD}`,
    iR = "show",
    iV = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',
    iW = `${iV}.${iR}`,
    iB = ".dropdown-menu",
    iG = td() ? "top-end" : "top-start",
    ij = td() ? "top-start" : "top-end",
    i$ = td() ? "bottom-end" : "bottom-start",
    iU = td() ? "bottom-start" : "bottom-end",
    iq = td() ? "left-start" : "right-start",
    iZ = td() ? "right-start" : "left-start",
    iJ = {
      autoClose: !0,
      boundary: "clippingParents",
      display: "dynamic",
      offset: [0, 2],
      popperConfig: null,
      reference: "toggle"
    },
    iK = {
      autoClose: "(boolean|string)",
      boundary: "(string|element)",
      display: "string",
      offset: "(array|string|function)",
      popperConfig: "(null|object|function)",
      reference: "(string|element|object)"
    };
  /**
   * Class definition
   */ class iQ extends tF {
    // Getters
    static get Default() {
      return iJ;
    }
    static get DefaultType() {
      return iK;
    }
    static get NAME() {
      return iM;
    } // Public
    toggle() {
      return this._isShown() ? this.hide() : this.show();
    }
    show() {
      if (tn(this._element) || this._isShown()) return;
      let e = { relatedTarget: this._element },
        t = tM.trigger(this._element, iF, e);
      if (!t.defaultPrevented) {
        // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
        if (
          (this._createPopper(),
          "ontouchstart" in document.documentElement &&
            !this._parent.closest(".navbar-nav"))
        )
          for (let e of [].concat(...document.body.children))
            tM.on(e, "mouseover", to);
        this._element.focus(),
          this._element.setAttribute("aria-expanded", !0),
          this._menu.classList.add(iR),
          this._element.classList.add(iR),
          tM.trigger(this._element, iz, e);
      }
    }
    hide() {
      if (tn(this._element) || !this._isShown()) return;
      let e = { relatedTarget: this._element };
      this._completeHide(e);
    }
    dispose() {
      this._popper && this._popper.destroy(), super.dispose();
    }
    update() {
      (this._inNavbar = this._detectNavbar()),
        this._popper && this._popper.update();
    } // Private
    _completeHide(e) {
      let t = tM.trigger(this._element, iI, e);
      if (!t.defaultPrevented) {
        // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support
        if ("ontouchstart" in document.documentElement)
          for (let e of [].concat(...document.body.children))
            tM.off(e, "mouseover", to);
        this._popper && this._popper.destroy(),
          this._menu.classList.remove(iR),
          this._element.classList.remove(iR),
          this._element.setAttribute("aria-expanded", "false"),
          tI.removeDataAttribute(this._menu, "popper"),
          tM.trigger(this._element, iH, e);
      }
    }
    _getConfig(e) {
      if (
        "object" == typeof (e = super._getConfig(e)).reference &&
        !tt(e.reference) &&
        "function" != typeof e.reference.getBoundingClientRect
      )
        throw TypeError(
          `${iM.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`
        );
      return e;
    }
    _createPopper() {
      if (void 0 === O)
        throw TypeError(
          "Bootstrap's dropdowns require Popper (https://popper.js.org)"
        );
      let e = this._element;
      "parent" === this._config.reference
        ? (e = this._parent)
        : tt(this._config.reference)
        ? (e = ti(this._config.reference))
        : "object" == typeof this._config.reference &&
          (e = this._config.reference);
      let t = this._getPopperConfig();
      this._popper = O.createPopper(e, this._menu, t);
    }
    _isShown() {
      return this._menu.classList.contains(iR);
    }
    _getPlacement() {
      let e = this._parent;
      if (e.classList.contains("dropend")) return iq;
      if (e.classList.contains("dropstart")) return iZ;
      if (e.classList.contains("dropup-center")) return "top";
      if (e.classList.contains("dropdown-center")) return "bottom"; // We need to trim the value because custom properties can also include spaces
      let t =
        "end" ===
        getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();
      return e.classList.contains("dropup") ? (t ? ij : iG) : t ? iU : i$;
    }
    _detectNavbar() {
      return null !== this._element.closest(".navbar");
    }
    _getOffset() {
      let { offset: e } = this._config;
      return "string" == typeof e
        ? e.split(",").map((e) => Number.parseInt(e, 10))
        : "function" == typeof e
        ? (t) => e(t, this._element)
        : e;
    }
    _getPopperConfig() {
      let e = {
        placement: this._getPlacement(),
        modifiers: [
          {
            name: "preventOverflow",
            options: { boundary: this._config.boundary }
          },
          { name: "offset", options: { offset: this._getOffset() } }
        ]
      };
      return (
        (this._inNavbar || "static" === this._config.display) &&
          (tI.setDataAttribute(this._menu, "popper", "static"),
          (e.modifiers = [{ name: "applyStyles", enabled: !1 }])),
        { ...e, ...tg(this._config.popperConfig, [e]) }
      );
    }
    _selectMenuItem({ key: e, target: t }) {
      let i = tY
        .find(
          ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
          this._menu
        )
        .filter((e) => ta(e));
      i.length && // if target isn't included in items (e.g. when expanding the dropdown)
        // allow cycling to get the last item in case key equals ARROW_UP_KEY
        tf(i, t, e === iE, !i.includes(t)).focus();
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = iQ.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === t[e]) throw TypeError(`No method named "${e}"`);
          t[e]();
        }
      });
    }
    static clearMenus(e) {
      if (2 === e.button || ("keyup" === e.type && "Tab" !== e.key)) return;
      let t = tY.find(iW);
      for (let i of t) {
        let t = iQ.getInstance(i);
        if (!t || !1 === t._config.autoClose) continue;
        let a = e.composedPath(),
          n = a.includes(t._menu);
        if (
          a.includes(t._element) ||
          ("inside" === t._config.autoClose && !n) ||
          ("outside" === t._config.autoClose && n) ||
          (t._menu.contains(e.target) &&
            (("keyup" === e.type && "Tab" === e.key) ||
              /input|select|option|textarea|form/i.test(e.target.tagName)))
        )
          continue;
        let s = { relatedTarget: t._element };
        "click" === e.type && (s.clickEvent = e), t._completeHide(s);
      }
    }
    static dataApiKeydownHandler(e) {
      // If not an UP | DOWN | ESCAPE key => not a dropdown command
      // If input/textarea && if key is other than ESCAPE => not a dropdown command
      let t = /input|textarea/i.test(e.target.tagName),
        i = "Escape" === e.key,
        a = ["ArrowUp", iE].includes(e.key);
      if ((!a && !i) || (t && !i)) return;
      e.preventDefault(); // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
      let n = this.matches(iV)
          ? this
          : tY.prev(this, iV)[0] ||
            tY.next(this, iV)[0] ||
            tY.findOne(iV, e.delegateTarget.parentNode),
        s = iQ.getOrCreateInstance(n);
      if (a) {
        e.stopPropagation(), s.show(), s._selectMenuItem(e);
        return;
      }
      s._isShown() && // else is escape and we check if it is shown
        (e.stopPropagation(), s.hide(), n.focus());
    }
    constructor(e, t) {
      super(e, t),
        (this._popper = null),
        (this._parent = this._element.parentNode), // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/
        (this._menu =
          tY.next(this._element, iB)[0] ||
          tY.prev(this._element, iB)[0] ||
          tY.findOne(iB, this._parent)),
        (this._inNavbar = this._detectNavbar());
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, iX, iV, iQ.dataApiKeydownHandler),
    tM.on(document, iX, iB, iQ.dataApiKeydownHandler),
    tM.on(document, iY, iQ.clearMenus),
    tM.on(document, iN, iQ.clearMenus),
    tM.on(document, iY, iV, function (e) {
      e.preventDefault(), iQ.getOrCreateInstance(this).toggle();
    }),
    /**
     * jQuery
     */ tu(iQ);
  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/backdrop.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * Constants
   */ let i0 = "backdrop",
    i1 = "show",
    i2 = `mousedown.bs.${i0}`,
    i4 = {
      className: "modal-backdrop",
      clickCallback: null,
      isAnimated: !1,
      isVisible: !0, // if false, we use the backdrop helper without adding any element to the dom
      rootElement: "body" // give the choice to place backdrop under different elements
    },
    i3 = {
      className: "string",
      clickCallback: "(function|null)",
      isAnimated: "boolean",
      isVisible: "boolean",
      rootElement: "(element|string)"
    };
  /**
   * Class definition
   */ class i5 extends tH {
    // Getters
    static get Default() {
      return i4;
    }
    static get DefaultType() {
      return i3;
    }
    static get NAME() {
      return i0;
    } // Public
    show(e) {
      if (!this._config.isVisible) {
        tg(e);
        return;
      }
      this._append();
      let t = this._getElement();
      this._config.isAnimated && tr(t),
        t.classList.add(i1),
        this._emulateAnimation(() => {
          tg(e);
        });
    }
    hide(e) {
      if (!this._config.isVisible) {
        tg(e);
        return;
      }
      this._getElement().classList.remove(i1),
        this._emulateAnimation(() => {
          this.dispose(), tg(e);
        });
    }
    dispose() {
      this._isAppended &&
        (tM.off(this._element, i2),
        this._element.remove(),
        (this._isAppended = !1));
    } // Private
    _getElement() {
      if (!this._element) {
        let e = document.createElement("div");
        (e.className = this._config.className),
          this._config.isAnimated && e.classList.add("fade"),
          (this._element = e);
      }
      return this._element;
    }
    _configAfterMerge(e) {
      return (
        // use getElement() with the default "body" to get a fresh Element on each instantiation
        (e.rootElement = ti(e.rootElement)), e
      );
    }
    _append() {
      if (this._isAppended) return;
      let e = this._getElement();
      this._config.rootElement.append(e),
        tM.on(e, i2, () => {
          tg(this._config.clickCallback);
        }),
        (this._isAppended = !0);
    }
    _emulateAnimation(e) {
      tp(e, this._getElement(), this._config.isAnimated);
    }
    constructor(e) {
      super(),
        (this._config = this._getConfig(e)),
        (this._isAppended = !1),
        (this._element = null);
    }
  }
  let i6 = ".bs.focustrap",
    i9 = `focusin${i6}`,
    i8 = `keydown.tab${i6}`,
    i7 = "backward",
    ae = {
      autofocus: !0,
      trapElement: null // The element to trap focus inside of
    },
    at = { autofocus: "boolean", trapElement: "element" };
  /**
   * Class definition
   */ class ai extends tH {
    // Getters
    static get Default() {
      return ae;
    }
    static get DefaultType() {
      return at;
    }
    static get NAME() {
      return "focustrap";
    } // Public
    activate() {
      this._isActive ||
        (this._config.autofocus && this._config.trapElement.focus(),
        tM.off(document, i6),
        tM.on(document, i9, (e) => this._handleFocusin(e)),
        tM.on(document, i8, (e) => this._handleKeydown(e)),
        (this._isActive = !0));
    }
    deactivate() {
      this._isActive && ((this._isActive = !1), tM.off(document, i6));
    } // Private
    _handleFocusin(e) {
      let { trapElement: t } = this._config;
      if (e.target === document || e.target === t || t.contains(e.target))
        return;
      let i = tY.focusableChildren(t);
      0 === i.length
        ? t.focus()
        : this._lastTabNavDirection === i7
        ? i[i.length - 1].focus()
        : i[0].focus();
    }
    _handleKeydown(e) {
      "Tab" === e.key &&
        (this._lastTabNavDirection = e.shiftKey ? i7 : "forward");
    }
    constructor(e) {
      super(),
        (this._config = this._getConfig(e)),
        (this._isActive = !1),
        (this._lastTabNavDirection = null);
    }
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap util/scrollBar.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
   * --------------------------------------------------------------------------
   */ /**
   * Constants
   */ let aa = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
    an = ".sticky-top",
    as = "padding-right",
    ao = "margin-right";
  /**
   * Class definition
   */ class ar {
    // Public
    getWidth() {
      // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
      let e = document.documentElement.clientWidth;
      return Math.abs(window.innerWidth - e);
    }
    hide() {
      let e = this.getWidth();
      this._disableOverFlow(), // give padding to element to balance the hidden scrollbar width
        this._setElementAttributes(this._element, as, (t) => t + e), // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth
        this._setElementAttributes(aa, as, (t) => t + e),
        this._setElementAttributes(an, ao, (t) => t - e);
    }
    reset() {
      this._resetElementAttributes(this._element, "overflow"),
        this._resetElementAttributes(this._element, as),
        this._resetElementAttributes(aa, as),
        this._resetElementAttributes(an, ao);
    }
    isOverflowing() {
      return this.getWidth() > 0;
    } // Private
    _disableOverFlow() {
      this._saveInitialAttribute(this._element, "overflow"),
        (this._element.style.overflow = "hidden");
    }
    _setElementAttributes(e, t, i) {
      let a = this.getWidth();
      this._applyManipulationCallback(e, (e) => {
        if (e !== this._element && window.innerWidth > e.clientWidth + a)
          return;
        this._saveInitialAttribute(e, t);
        let n = window.getComputedStyle(e).getPropertyValue(t);
        e.style.setProperty(t, `${i(Number.parseFloat(n))}px`);
      });
    }
    _saveInitialAttribute(e, t) {
      let i = e.style.getPropertyValue(t);
      i && tI.setDataAttribute(e, t, i);
    }
    _resetElementAttributes(e, t) {
      this._applyManipulationCallback(e, (e) => {
        let i = tI.getDataAttribute(e, t); // We only want to remove the property if the value is `null`; the value can also be zero
        if (null === i) {
          e.style.removeProperty(t);
          return;
        }
        tI.removeDataAttribute(e, t), e.style.setProperty(t, i);
      });
    }
    _applyManipulationCallback(e, t) {
      if (tt(e)) {
        t(e);
        return;
      }
      for (let i of tY.find(e, this._element)) t(i);
    }
    constructor() {
      this._element = document.body;
    }
  }
  let al = ".bs.modal",
    ac = `hide${al}`,
    ah = `hidePrevented${al}`,
    ad = `hidden${al}`,
    au = `show${al}`,
    ag = `shown${al}`,
    ap = `resize${al}`,
    af = `click.dismiss${al}`,
    am = `mousedown.dismiss${al}`,
    ax = `keydown.dismiss${al}`,
    ab = `click${al}.data-api`,
    av = "modal-open",
    ay = "show",
    aw = "modal-static",
    aC = { backdrop: !0, focus: !0, keyboard: !0 },
    ak = {
      backdrop: "(boolean|string)",
      focus: "boolean",
      keyboard: "boolean"
    };
  /**
   * Class definition
   */ class aA extends tF {
    // Getters
    static get Default() {
      return aC;
    }
    static get DefaultType() {
      return ak;
    }
    static get NAME() {
      return "modal";
    } // Public
    toggle(e) {
      return this._isShown ? this.hide() : this.show(e);
    }
    show(e) {
      if (this._isShown || this._isTransitioning) return;
      let t = tM.trigger(this._element, au, { relatedTarget: e });
      t.defaultPrevented ||
        ((this._isShown = !0),
        (this._isTransitioning = !0),
        this._scrollBar.hide(),
        document.body.classList.add(av),
        this._adjustDialog(),
        this._backdrop.show(() => this._showElement(e)));
    }
    hide() {
      if (!this._isShown || this._isTransitioning) return;
      let e = tM.trigger(this._element, ac);
      e.defaultPrevented ||
        ((this._isShown = !1),
        (this._isTransitioning = !0),
        this._focustrap.deactivate(),
        this._element.classList.remove(ay),
        this._queueCallback(
          () => this._hideModal(),
          this._element,
          this._isAnimated()
        ));
    }
    dispose() {
      tM.off(window, al),
        tM.off(this._dialog, al),
        this._backdrop.dispose(),
        this._focustrap.deactivate(),
        super.dispose();
    }
    handleUpdate() {
      this._adjustDialog();
    } // Private
    _initializeBackDrop() {
      return new i5({
        isVisible: !!this._config.backdrop, // 'static' option will be translated to true, and booleans will keep their value,
        isAnimated: this._isAnimated()
      });
    }
    _initializeFocusTrap() {
      return new ai({ trapElement: this._element });
    }
    _showElement(e) {
      document.body.contains(this._element) ||
        document.body.append(this._element),
        (this._element.style.display = "block"),
        this._element.removeAttribute("aria-hidden"),
        this._element.setAttribute("aria-modal", !0),
        this._element.setAttribute("role", "dialog"),
        (this._element.scrollTop = 0);
      let t = tY.findOne(".modal-body", this._dialog);
      t && (t.scrollTop = 0),
        tr(this._element),
        this._element.classList.add(ay),
        this._queueCallback(
          () => {
            this._config.focus && this._focustrap.activate(),
              (this._isTransitioning = !1),
              tM.trigger(this._element, ag, { relatedTarget: e });
          },
          this._dialog,
          this._isAnimated()
        );
    }
    _addEventListeners() {
      tM.on(this._element, ax, (e) => {
        if ("Escape" === e.key) {
          if (this._config.keyboard) {
            this.hide();
            return;
          }
          this._triggerBackdropTransition();
        }
      }),
        tM.on(window, ap, () => {
          this._isShown && !this._isTransitioning && this._adjustDialog();
        }),
        tM.on(this._element, am, (e) => {
          // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks
          tM.one(this._element, af, (t) => {
            if (this._element === e.target && this._element === t.target) {
              if ("static" === this._config.backdrop) {
                this._triggerBackdropTransition();
                return;
              }
              this._config.backdrop && this.hide();
            }
          });
        });
    }
    _hideModal() {
      (this._element.style.display = "none"),
        this._element.setAttribute("aria-hidden", !0),
        this._element.removeAttribute("aria-modal"),
        this._element.removeAttribute("role"),
        (this._isTransitioning = !1),
        this._backdrop.hide(() => {
          document.body.classList.remove(av),
            this._resetAdjustments(),
            this._scrollBar.reset(),
            tM.trigger(this._element, ad);
        });
    }
    _isAnimated() {
      return this._element.classList.contains("fade");
    }
    _triggerBackdropTransition() {
      let e = tM.trigger(this._element, ah);
      if (e.defaultPrevented) return;
      let t =
          this._element.scrollHeight > document.documentElement.clientHeight,
        i = this._element.style.overflowY; // return if the following background transition hasn't yet completed
      "hidden" === i ||
        this._element.classList.contains(aw) ||
        (t || (this._element.style.overflowY = "hidden"),
        this._element.classList.add(aw),
        this._queueCallback(() => {
          this._element.classList.remove(aw),
            this._queueCallback(() => {
              this._element.style.overflowY = i;
            }, this._dialog);
        }, this._dialog),
        this._element.focus());
    }
    /**
     * The following methods are used to handle overflowing modals
     */ _adjustDialog() {
      let e =
          this._element.scrollHeight > document.documentElement.clientHeight,
        t = this._scrollBar.getWidth(),
        i = t > 0;
      if (i && !e) {
        let e = td() ? "paddingLeft" : "paddingRight";
        this._element.style[e] = `${t}px`;
      }
      if (!i && e) {
        let e = td() ? "paddingRight" : "paddingLeft";
        this._element.style[e] = `${t}px`;
      }
    }
    _resetAdjustments() {
      (this._element.style.paddingLeft = ""),
        (this._element.style.paddingRight = "");
    } // Static
    static jQueryInterface(e, t) {
      return this.each(function () {
        let i = aA.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === i[e]) throw TypeError(`No method named "${e}"`);
          i[e](t);
        }
      });
    }
    constructor(e, t) {
      super(e, t),
        (this._dialog = tY.findOne(".modal-dialog", this._element)),
        (this._backdrop = this._initializeBackDrop()),
        (this._focustrap = this._initializeFocusTrap()),
        (this._isShown = !1),
        (this._isTransitioning = !1),
        (this._scrollBar = new ar()),
        this._addEventListeners();
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, ab, '[data-bs-toggle="modal"]', function (e) {
    let t = tY.getElementFromSelector(this);
    ["A", "AREA"].includes(this.tagName) && e.preventDefault(),
      tM.one(t, au, (e) => {
        e.defaultPrevented ||
          tM.one(t, ad, () => {
            ta(this) && this.focus();
          });
      }); // avoid conflict when clicking modal toggler while another one is open
    let i = tY.findOne(".modal.show");
    i && aA.getInstance(i).hide();
    let a = aA.getOrCreateInstance(t);
    a.toggle(this);
  }),
    tX(aA),
    /**
     * jQuery
     */ tu(aA);
  let aS = ".bs.offcanvas",
    aL = ".data-api",
    aO = `load${aS}${aL}`,
    aT = "show",
    aP = "showing",
    aM = "hiding",
    a_ = ".offcanvas.show",
    aD = `show${aS}`,
    aE = `shown${aS}`,
    aI = `hide${aS}`,
    aH = `hidePrevented${aS}`,
    aF = `hidden${aS}`,
    az = `resize${aS}`,
    aY = `click${aS}${aL}`,
    aX = `keydown.dismiss${aS}`,
    aN = { backdrop: !0, keyboard: !0, scroll: !1 },
    aR = {
      backdrop: "(boolean|string)",
      keyboard: "boolean",
      scroll: "boolean"
    };
  /**
   * Class definition
   */ class aV extends tF {
    // Getters
    static get Default() {
      return aN;
    }
    static get DefaultType() {
      return aR;
    }
    static get NAME() {
      return "offcanvas";
    } // Public
    toggle(e) {
      return this._isShown ? this.hide() : this.show(e);
    }
    show(e) {
      if (this._isShown) return;
      let t = tM.trigger(this._element, aD, { relatedTarget: e });
      t.defaultPrevented ||
        ((this._isShown = !0),
        this._backdrop.show(),
        this._config.scroll || new ar().hide(),
        this._element.setAttribute("aria-modal", !0),
        this._element.setAttribute("role", "dialog"),
        this._element.classList.add(aP),
        this._queueCallback(
          () => {
            (!this._config.scroll || this._config.backdrop) &&
              this._focustrap.activate(),
              this._element.classList.add(aT),
              this._element.classList.remove(aP),
              tM.trigger(this._element, aE, { relatedTarget: e });
          },
          this._element,
          !0
        ));
    }
    hide() {
      if (!this._isShown) return;
      let e = tM.trigger(this._element, aI);
      e.defaultPrevented ||
        (this._focustrap.deactivate(),
        this._element.blur(),
        (this._isShown = !1),
        this._element.classList.add(aM),
        this._backdrop.hide(),
        this._queueCallback(
          () => {
            this._element.classList.remove(aT, aM),
              this._element.removeAttribute("aria-modal"),
              this._element.removeAttribute("role"),
              this._config.scroll || new ar().reset(),
              tM.trigger(this._element, aF);
          },
          this._element,
          !0
        ));
    }
    dispose() {
      this._backdrop.dispose(), this._focustrap.deactivate(), super.dispose();
    } // Private
    _initializeBackDrop() {
      // 'static' option will be translated to true, and booleans will keep their value
      let e = !!this._config.backdrop;
      return new i5({
        className: "offcanvas-backdrop",
        isVisible: e,
        isAnimated: !0,
        rootElement: this._element.parentNode,
        clickCallback: e
          ? () => {
              if ("static" === this._config.backdrop) {
                tM.trigger(this._element, aH);
                return;
              }
              this.hide();
            }
          : null
      });
    }
    _initializeFocusTrap() {
      return new ai({ trapElement: this._element });
    }
    _addEventListeners() {
      tM.on(this._element, aX, (e) => {
        if ("Escape" === e.key) {
          if (this._config.keyboard) {
            this.hide();
            return;
          }
          tM.trigger(this._element, aH);
        }
      });
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = aV.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === t[e] || e.startsWith("_") || "constructor" === e)
            throw TypeError(`No method named "${e}"`);
          t[e](this);
        }
      });
    }
    constructor(e, t) {
      super(e, t),
        (this._isShown = !1),
        (this._backdrop = this._initializeBackDrop()),
        (this._focustrap = this._initializeFocusTrap()),
        this._addEventListeners();
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, aY, '[data-bs-toggle="offcanvas"]', function (e) {
    let t = tY.getElementFromSelector(this);
    if ((["A", "AREA"].includes(this.tagName) && e.preventDefault(), tn(this)))
      return;
    tM.one(t, aF, () => {
      // focus on trigger when it is closed
      ta(this) && this.focus();
    }); // avoid conflict when clicking a toggler of an offcanvas, while another is open
    let i = tY.findOne(a_);
    i && i !== t && aV.getInstance(i).hide();
    let a = aV.getOrCreateInstance(t);
    a.toggle(this);
  }),
    tM.on(window, aO, () => {
      for (let e of tY.find(a_)) aV.getOrCreateInstance(e).show();
    }),
    tM.on(window, az, () => {
      for (let e of tY.find("[aria-modal][class*=show][class*=offcanvas-]"))
        "fixed" !== getComputedStyle(e).position &&
          aV.getOrCreateInstance(e).hide();
    }),
    tX(aV),
    /**
     * jQuery
     */ tu(aV);
  let aW = {
      // Global attributes allowed on any supplied element below.
      "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
      a: ["target", "href", "title", "rel"],
      area: [],
      b: [],
      br: [],
      col: [],
      code: [],
      div: [],
      em: [],
      hr: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: [],
      i: [],
      img: ["src", "srcset", "alt", "title", "width", "height"],
      li: [],
      ol: [],
      p: [],
      pre: [],
      s: [],
      small: [],
      span: [],
      sub: [],
      sup: [],
      strong: [],
      u: [],
      ul: []
    },
    aB = new Set([
      "background",
      "cite",
      "href",
      "itemtype",
      "longdesc",
      "poster",
      "src",
      "xlink:href"
    ]),
    aG = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,
    aj = (e, t) => {
      let i = e.nodeName.toLowerCase();
      return t.includes(i)
        ? !aB.has(i) || !!aG.test(e.nodeValue)
        : t.filter((e) => e instanceof RegExp).some((e) => e.test(i));
    },
    a$ = {
      allowList: aW,
      content: {}, // { selector : text ,  selector2 : text2 , }
      extraClass: "",
      html: !1,
      sanitize: !0,
      sanitizeFn: null,
      template: "<div></div>"
    },
    aU = {
      allowList: "object",
      content: "object",
      extraClass: "(string|function)",
      html: "boolean",
      sanitize: "boolean",
      sanitizeFn: "(null|function)",
      template: "string"
    },
    aq = {
      entry: "(string|element|function|null)",
      selector: "(string|element)"
    };
  /**
   * Class definition
   */ class aZ extends tH {
    // Getters
    static get Default() {
      return a$;
    }
    static get DefaultType() {
      return aU;
    }
    static get NAME() {
      return "TemplateFactory";
    } // Public
    getContent() {
      return Object.values(this._config.content)
        .map((e) => this._resolvePossibleFunction(e))
        .filter(Boolean);
    }
    hasContent() {
      return this.getContent().length > 0;
    }
    changeContent(e) {
      return (
        this._checkContent(e),
        (this._config.content = { ...this._config.content, ...e }),
        this
      );
    }
    toHtml() {
      let e = document.createElement("div");
      for (let [t, i] of ((e.innerHTML = this._maybeSanitize(
        this._config.template
      )),
      Object.entries(this._config.content)))
        this._setContent(e, i, t);
      let t = e.children[0],
        i = this._resolvePossibleFunction(this._config.extraClass);
      return i && t.classList.add(...i.split(" ")), t;
    } // Private
    _typeCheckConfig(e) {
      super._typeCheckConfig(e), this._checkContent(e.content);
    }
    _checkContent(e) {
      for (let [t, i] of Object.entries(e))
        super._typeCheckConfig({ selector: t, entry: i }, aq);
    }
    _setContent(e, t, i) {
      let a = tY.findOne(i, e);
      if (a) {
        if (!(t = this._resolvePossibleFunction(t))) {
          a.remove();
          return;
        }
        if (tt(t)) {
          this._putElementInTemplate(ti(t), a);
          return;
        }
        if (this._config.html) {
          a.innerHTML = this._maybeSanitize(t);
          return;
        }
        a.textContent = t;
      }
    }
    _maybeSanitize(e) {
      return this._config.sanitize
        ? (function (e, t, i) {
            if (!e.length) return e;
            if (i && "function" == typeof i) return i(e);
            let a = new window.DOMParser(),
              n = a.parseFromString(e, "text/html"),
              s = [].concat(...n.body.querySelectorAll("*"));
            for (let e of s) {
              let i = e.nodeName.toLowerCase();
              if (!Object.keys(t).includes(i)) {
                e.remove();
                continue;
              }
              let a = [].concat(...e.attributes),
                n = [].concat(t["*"] || [], t[i] || []);
              for (let t of a) aj(t, n) || e.removeAttribute(t.nodeName);
            }
            return n.body.innerHTML;
          })(e, this._config.allowList, this._config.sanitizeFn)
        : e;
    }
    _resolvePossibleFunction(e) {
      return tg(e, [this]);
    }
    _putElementInTemplate(e, t) {
      if (this._config.html) {
        (t.innerHTML = ""), t.append(e);
        return;
      }
      t.textContent = e.textContent;
    }
    constructor(e) {
      super(), (this._config = this._getConfig(e));
    }
  }
  let aJ = new Set(["sanitize", "allowList", "sanitizeFn"]),
    aK = "fade",
    aQ = "show",
    a0 = ".modal",
    a1 = "hide.bs.modal",
    a2 = "hover",
    a4 = "focus",
    a3 = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: td() ? "left" : "right",
      BOTTOM: "bottom",
      LEFT: td() ? "right" : "left"
    },
    a5 = {
      allowList: aW,
      animation: !0,
      boundary: "clippingParents",
      container: !1,
      customClass: "",
      delay: 0,
      fallbackPlacements: ["top", "right", "bottom", "left"],
      html: !1,
      offset: [0, 6],
      placement: "top",
      popperConfig: null,
      sanitize: !0,
      sanitizeFn: null,
      selector: !1,
      template:
        '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
      title: "",
      trigger: "hover focus"
    },
    a6 = {
      allowList: "object",
      animation: "boolean",
      boundary: "(string|element)",
      container: "(string|element|boolean)",
      customClass: "(string|function)",
      delay: "(number|object)",
      fallbackPlacements: "array",
      html: "boolean",
      offset: "(array|string|function)",
      placement: "(string|function)",
      popperConfig: "(null|object|function)",
      sanitize: "boolean",
      sanitizeFn: "(null|function)",
      selector: "(string|boolean)",
      template: "string",
      title: "(string|element|function)",
      trigger: "string"
    };
  /**
   * Class definition
   */ class a9 extends tF {
    // Getters
    static get Default() {
      return a5;
    }
    static get DefaultType() {
      return a6;
    }
    static get NAME() {
      return "tooltip";
    } // Public
    enable() {
      this._isEnabled = !0;
    }
    disable() {
      this._isEnabled = !1;
    }
    toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    }
    toggle() {
      if (this._isEnabled) {
        if (
          ((this._activeTrigger.click = !this._activeTrigger.click),
          this._isShown())
        ) {
          this._leave();
          return;
        }
        this._enter();
      }
    }
    dispose() {
      clearTimeout(this._timeout),
        tM.off(this._element.closest(a0), a1, this._hideModalHandler),
        this._element.getAttribute("data-bs-original-title") &&
          this._element.setAttribute(
            "title",
            this._element.getAttribute("data-bs-original-title")
          ),
        this._disposePopper(),
        super.dispose();
    }
    show() {
      if ("none" === this._element.style.display)
        throw Error("Please use show on visible elements");
      if (!(this._isWithContent() && this._isEnabled)) return;
      let e = tM.trigger(this._element, this.constructor.eventName("show")),
        t = ts(this._element),
        i = (t || this._element.ownerDocument.documentElement).contains(
          this._element
        );
      if (e.defaultPrevented || !i) return; // TODO: v6 remove this or make it optional
      this._disposePopper();
      let a = this._getTipElement();
      this._element.setAttribute("aria-describedby", a.getAttribute("id"));
      let { container: n } = this._config; // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
      if (
        (this._element.ownerDocument.documentElement.contains(this.tip) ||
          (n.append(a),
          tM.trigger(this._element, this.constructor.eventName("inserted"))),
        (this._popper = this._createPopper(a)),
        a.classList.add(aQ),
        "ontouchstart" in document.documentElement)
      )
        for (let e of [].concat(...document.body.children))
          tM.on(e, "mouseover", to);
      this._queueCallback(
        () => {
          tM.trigger(this._element, this.constructor.eventName("shown")),
            !1 === this._isHovered && this._leave(),
            (this._isHovered = !1);
        },
        this.tip,
        this._isAnimated()
      );
    }
    hide() {
      if (!this._isShown()) return;
      let e = tM.trigger(this._element, this.constructor.eventName("hide"));
      if (e.defaultPrevented) return;
      let t = this._getTipElement(); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support
      if ((t.classList.remove(aQ), "ontouchstart" in document.documentElement))
        for (let e of [].concat(...document.body.children))
          tM.off(e, "mouseover", to);
      (this._activeTrigger.click = !1),
        (this._activeTrigger[a4] = !1),
        (this._activeTrigger[a2] = !1),
        (this._isHovered = null),
        this._queueCallback(
          () => {
            this._isWithActiveTrigger() ||
              (this._isHovered || this._disposePopper(),
              this._element.removeAttribute("aria-describedby"),
              tM.trigger(this._element, this.constructor.eventName("hidden")));
          },
          this.tip,
          this._isAnimated()
        );
    }
    update() {
      this._popper && this._popper.update();
    } // Protected
    _isWithContent() {
      return !!this._getTitle();
    }
    _getTipElement() {
      return (
        this.tip ||
          (this.tip = this._createTipElement(
            this._newContent || this._getContentForTemplate()
          )),
        this.tip
      );
    }
    _createTipElement(e) {
      let t = this._getTemplateFactory(e).toHtml(); // TODO: remove this check in v6
      if (!t) return null;
      t.classList.remove(aK, aQ), // TODO: v6 the following can be achieved with CSS only
        t.classList.add(`bs-${this.constructor.NAME}-auto`);
      let i = e8(this.constructor.NAME).toString();
      return (
        t.setAttribute("id", i), this._isAnimated() && t.classList.add(aK), t
      );
    }
    setContent(e) {
      (this._newContent = e),
        this._isShown() && (this._disposePopper(), this.show());
    }
    _getTemplateFactory(e) {
      return (
        this._templateFactory
          ? this._templateFactory.changeContent(e)
          : (this._templateFactory = new aZ({
              ...this._config,
              // to override config.content in case of popover
              content: e,
              extraClass: this._resolvePossibleFunction(
                this._config.customClass
              )
            })),
        this._templateFactory
      );
    }
    _getContentForTemplate() {
      return { ".tooltip-inner": this._getTitle() };
    }
    _getTitle() {
      return (
        this._resolvePossibleFunction(this._config.title) ||
        this._element.getAttribute("data-bs-original-title")
      );
    } // Private
    _initializeOnDelegatedTarget(e) {
      return this.constructor.getOrCreateInstance(
        e.delegateTarget,
        this._getDelegateConfig()
      );
    }
    _isAnimated() {
      return (
        this._config.animation || (this.tip && this.tip.classList.contains(aK))
      );
    }
    _isShown() {
      return this.tip && this.tip.classList.contains(aQ);
    }
    _createPopper(e) {
      let t = tg(this._config.placement, [this, e, this._element]),
        i = a3[t.toUpperCase()];
      return O.createPopper(this._element, e, this._getPopperConfig(i));
    }
    _getOffset() {
      let { offset: e } = this._config;
      return "string" == typeof e
        ? e.split(",").map((e) => Number.parseInt(e, 10))
        : "function" == typeof e
        ? (t) => e(t, this._element)
        : e;
    }
    _resolvePossibleFunction(e) {
      return tg(e, [this._element]);
    }
    _getPopperConfig(e) {
      let t = {
        placement: e,
        modifiers: [
          {
            name: "flip",
            options: { fallbackPlacements: this._config.fallbackPlacements }
          },
          { name: "offset", options: { offset: this._getOffset() } },
          {
            name: "preventOverflow",
            options: { boundary: this._config.boundary }
          },
          {
            name: "arrow",
            options: { element: `.${this.constructor.NAME}-arrow` }
          },
          {
            name: "preSetPlacement",
            enabled: !0,
            phase: "beforeMain",
            fn: (e) => {
              // Pre-set Popper's placement attribute in order to read the arrow sizes properly.
              // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement
              this._getTipElement().setAttribute(
                "data-popper-placement",
                e.state.placement
              );
            }
          }
        ]
      };
      return { ...t, ...tg(this._config.popperConfig, [t]) };
    }
    _setListeners() {
      let e = this._config.trigger.split(" ");
      for (let t of e)
        if ("click" === t)
          tM.on(
            this._element,
            this.constructor.eventName("click"),
            this._config.selector,
            (e) => {
              let t = this._initializeOnDelegatedTarget(e);
              t.toggle();
            }
          );
        else if ("manual" !== t) {
          let e =
              t === a2
                ? this.constructor.eventName("mouseenter")
                : this.constructor.eventName("focusin"),
            i =
              t === a2
                ? this.constructor.eventName("mouseleave")
                : this.constructor.eventName("focusout");
          tM.on(this._element, e, this._config.selector, (e) => {
            let t = this._initializeOnDelegatedTarget(e);
            (t._activeTrigger["focusin" === e.type ? a4 : a2] = !0), t._enter();
          }),
            tM.on(this._element, i, this._config.selector, (e) => {
              let t = this._initializeOnDelegatedTarget(e);
              (t._activeTrigger["focusout" === e.type ? a4 : a2] =
                t._element.contains(e.relatedTarget)),
                t._leave();
            });
        }
      (this._hideModalHandler = () => {
        this._element && this.hide();
      }),
        tM.on(this._element.closest(a0), a1, this._hideModalHandler);
    }
    _fixTitle() {
      let e = this._element.getAttribute("title");
      e &&
        (this._element.getAttribute("aria-label") ||
          this._element.textContent.trim() ||
          this._element.setAttribute("aria-label", e),
        this._element.setAttribute("data-bs-original-title", e),
        this._element.removeAttribute("title"));
    }
    _enter() {
      if (this._isShown() || this._isHovered) {
        this._isHovered = !0;
        return;
      }
      (this._isHovered = !0),
        this._setTimeout(() => {
          this._isHovered && this.show();
        }, this._config.delay.show);
    }
    _leave() {
      this._isWithActiveTrigger() ||
        ((this._isHovered = !1),
        this._setTimeout(() => {
          this._isHovered || this.hide();
        }, this._config.delay.hide));
    }
    _setTimeout(e, t) {
      clearTimeout(this._timeout), (this._timeout = setTimeout(e, t));
    }
    _isWithActiveTrigger() {
      return Object.values(this._activeTrigger).includes(!0);
    }
    _getConfig(e) {
      let t = tI.getDataAttributes(this._element);
      for (let e of Object.keys(t)) aJ.has(e) && delete t[e];
      return (
        (e = { ...t, ...("object" == typeof e && e ? e : {}) }),
        (e = this._mergeConfigObj(e)),
        (e = this._configAfterMerge(e)),
        this._typeCheckConfig(e),
        e
      );
    }
    _configAfterMerge(e) {
      return (
        (e.container = !1 === e.container ? document.body : ti(e.container)),
        "number" == typeof e.delay &&
          (e.delay = { show: e.delay, hide: e.delay }),
        "number" == typeof e.title && (e.title = e.title.toString()),
        "number" == typeof e.content && (e.content = e.content.toString()),
        e
      );
    }
    _getDelegateConfig() {
      let e = {};
      for (let [t, i] of Object.entries(this._config))
        this.constructor.Default[t] !== i && (e[t] = i); // In the future can be replaced with:
      // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])
      // `Object.fromEntries(keysWithDifferentValues)`
      return (e.selector = !1), (e.trigger = "manual"), e;
    }
    _disposePopper() {
      this._popper && (this._popper.destroy(), (this._popper = null)),
        this.tip && (this.tip.remove(), (this.tip = null));
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = a9.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === t[e]) throw TypeError(`No method named "${e}"`);
          t[e]();
        }
      });
    }
    constructor(e, t) {
      if (void 0 === O)
        throw TypeError(
          "Bootstrap's tooltips require Popper (https://popper.js.org)"
        );
      super(e, t), // Private
        (this._isEnabled = !0),
        (this._timeout = 0),
        (this._isHovered = null),
        (this._activeTrigger = {}),
        (this._popper = null),
        (this._templateFactory = null),
        (this._newContent = null), // Protected
        (this.tip = null),
        this._setListeners(),
        this._config.selector || this._fixTitle();
    }
  }
  /**
   * jQuery
   */ tu(a9);
  let a8 = {
      ...a9.Default,
      content: "",
      offset: [0, 8],
      placement: "right",
      template:
        '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
      trigger: "click"
    },
    a7 = { ...a9.DefaultType, content: "(null|string|element|function)" };
  /**
   * Class definition
   */ class ne extends a9 {
    // Getters
    static get Default() {
      return a8;
    }
    static get DefaultType() {
      return a7;
    }
    static get NAME() {
      return "popover";
    } // Overrides
    _isWithContent() {
      return this._getTitle() || this._getContent();
    } // Private
    _getContentForTemplate() {
      return {
        ".popover-header": this._getTitle(),
        ".popover-body": this._getContent()
      };
    }
    _getContent() {
      return this._resolvePossibleFunction(this._config.content);
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = ne.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === t[e]) throw TypeError(`No method named "${e}"`);
          t[e]();
        }
      });
    }
  }
  /**
   * jQuery
   */ tu(ne);
  let nt = ".bs.scrollspy",
    ni = `activate${nt}`,
    na = `click${nt}`,
    nn = `load${nt}.data-api`,
    ns = "active",
    no = "[href]",
    nr = ".nav-link",
    nl = `${nr}, .nav-item > ${nr}, .list-group-item`,
    nc = {
      offset: null, // TODO: v6 @deprecated, keep it for backwards compatibility reasons
      rootMargin: "0px 0px -25%",
      smoothScroll: !1,
      target: null,
      threshold: [0.1, 0.5, 1]
    },
    nh = {
      offset: "(number|null)", // TODO v6 @deprecated, keep it for backwards compatibility reasons
      rootMargin: "string",
      smoothScroll: "boolean",
      target: "element",
      threshold: "array"
    };
  /**
   * Class definition
   */ class nd extends tF {
    // Getters
    static get Default() {
      return nc;
    }
    static get DefaultType() {
      return nh;
    }
    static get NAME() {
      return "scrollspy";
    } // Public
    refresh() {
      for (let e of (this._initializeTargetsAndObservables(),
      this._maybeEnableSmoothScroll(),
      this._observer
        ? this._observer.disconnect()
        : (this._observer = this._getNewObserver()),
      this._observableSections.values()))
        this._observer.observe(e);
    }
    dispose() {
      this._observer.disconnect(), super.dispose();
    } // Private
    _configAfterMerge(e) {
      return (
        // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case
        (e.target = ti(e.target) || document.body), // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only
        (e.rootMargin = e.offset ? `${e.offset}px 0px -30%` : e.rootMargin),
        "string" == typeof e.threshold &&
          (e.threshold = e.threshold
            .split(",")
            .map((e) => Number.parseFloat(e))),
        e
      );
    }
    _maybeEnableSmoothScroll() {
      this._config.smoothScroll && // unregister any previous listeners
        (tM.off(this._config.target, na),
        tM.on(this._config.target, na, no, (e) => {
          let t = this._observableSections.get(e.target.hash);
          if (t) {
            e.preventDefault();
            let i = this._rootElement || window,
              a = t.offsetTop - this._element.offsetTop;
            if (i.scrollTo) {
              i.scrollTo({ top: a, behavior: "smooth" });
              return;
            } // Chrome 60 doesn't support `scrollTo`
            i.scrollTop = a;
          }
        }));
    }
    _getNewObserver() {
      let e = {
        root: this._rootElement,
        threshold: this._config.threshold,
        rootMargin: this._config.rootMargin
      };
      return new IntersectionObserver((e) => this._observerCallback(e), e);
    } // The logic of selection
    _observerCallback(e) {
      let t = (e) => this._targetLinks.get(`#${e.target.id}`),
        i = (e) => {
          (this._previousScrollData.visibleEntryTop = e.target.offsetTop),
            this._process(t(e));
        },
        a = (this._rootElement || document.documentElement).scrollTop,
        n = a >= this._previousScrollData.parentScrollTop;
      for (let s of ((this._previousScrollData.parentScrollTop = a), e)) {
        if (!s.isIntersecting) {
          (this._activeTarget = null), this._clearActiveClass(t(s));
          continue;
        }
        let e = s.target.offsetTop >= this._previousScrollData.visibleEntryTop; // if we are scrolling down, pick the bigger offsetTop
        if (n && e) {
          // if parent isn't scrolled, let's keep the first visible item, breaking the iteration
          if ((i(s), !a)) return;
          continue;
        } // if we are scrolling up, pick the smallest offsetTop
        n || e || i(s);
      }
    }
    _initializeTargetsAndObservables() {
      (this._targetLinks = new Map()), (this._observableSections = new Map());
      let e = tY.find(no, this._config.target);
      for (let t of e) {
        // ensure that the anchor has an id and is not disabled
        if (!t.hash || tn(t)) continue;
        let e = tY.findOne(decodeURI(t.hash), this._element); // ensure that the observableSection exists & is visible
        ta(e) &&
          (this._targetLinks.set(decodeURI(t.hash), t),
          this._observableSections.set(t.hash, e));
      }
    }
    _process(e) {
      this._activeTarget !== e &&
        (this._clearActiveClass(this._config.target),
        (this._activeTarget = e),
        e.classList.add(ns),
        this._activateParents(e),
        tM.trigger(this._element, ni, { relatedTarget: e }));
    }
    _activateParents(e) {
      // Activate dropdown parents
      if (e.classList.contains("dropdown-item")) {
        tY.findOne(".dropdown-toggle", e.closest(".dropdown")).classList.add(
          ns
        );
        return;
      }
      for (let t of tY.parents(e, ".nav, .list-group")) // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor
        for (let e of tY.prev(t, nl)) e.classList.add(ns);
    }
    _clearActiveClass(e) {
      e.classList.remove(ns);
      let t = tY.find(`${no}.${ns}`, e);
      for (let e of t) e.classList.remove(ns);
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = nd.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === t[e] || e.startsWith("_") || "constructor" === e)
            throw TypeError(`No method named "${e}"`);
          t[e]();
        }
      });
    }
    constructor(e, t) {
      super(e, t), // this._element is the observablesContainer and config.target the menu links wrapper
        (this._targetLinks = new Map()),
        (this._observableSections = new Map()),
        (this._rootElement =
          "visible" === getComputedStyle(this._element).overflowY
            ? null
            : this._element),
        (this._activeTarget = null),
        (this._observer = null),
        (this._previousScrollData = { visibleEntryTop: 0, parentScrollTop: 0 }),
        this.refresh();
    }
  }
  /**
   * Data API implementation
   */ tM.on(window, nn, () => {
    for (let e of tY.find('[data-bs-spy="scroll"]')) nd.getOrCreateInstance(e);
  }),
    /**
     * jQuery
     */ tu(nd);
  let nu = ".bs.tab",
    ng = `hide${nu}`,
    np = `hidden${nu}`,
    nf = `show${nu}`,
    nm = `shown${nu}`,
    nx = `click${nu}`,
    nb = `keydown${nu}`,
    nv = `load${nu}`,
    ny = "ArrowRight",
    nw = "ArrowDown",
    nC = "Home",
    nk = "active",
    nA = "fade",
    nS = "show",
    nL = ".dropdown-toggle",
    nO = `:not(${nL})`,
    nT = `.nav-link${nO}, .list-group-item${nO}, [role="tab"]${nO}`,
    nP =
      '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',
    nM = `${nT}, ${nP}`,
    n_ = `.${nk}[data-bs-toggle="tab"], .${nk}[data-bs-toggle="pill"], .${nk}[data-bs-toggle="list"]`;
  /**
   * Class definition
   */ class nD extends tF {
    // Getters
    static get NAME() {
      return "tab";
    } // Public
    show() {
      // Shows this elem and deactivate the active sibling if exists
      let e = this._element;
      if (this._elemIsActive(e)) return; // Search for active tab on same parent to deactivate it
      let t = this._getActiveElem(),
        i = t ? tM.trigger(t, ng, { relatedTarget: e }) : null,
        a = tM.trigger(e, nf, { relatedTarget: t });
      a.defaultPrevented ||
        (i && i.defaultPrevented) ||
        (this._deactivate(t, e), this._activate(e, t));
    } // Private
    _activate(e, t) {
      e &&
        (e.classList.add(nk),
        this._activate(tY.getElementFromSelector(e)),
        this._queueCallback(
          () => {
            if ("tab" !== e.getAttribute("role")) {
              e.classList.add(nS);
              return;
            }
            e.removeAttribute("tabindex"),
              e.setAttribute("aria-selected", !0),
              this._toggleDropDown(e, !0),
              tM.trigger(e, nm, { relatedTarget: t });
          },
          e,
          e.classList.contains(nA)
        ));
    }
    _deactivate(e, t) {
      e &&
        (e.classList.remove(nk),
        e.blur(),
        this._deactivate(tY.getElementFromSelector(e)),
        this._queueCallback(
          () => {
            if ("tab" !== e.getAttribute("role")) {
              e.classList.remove(nS);
              return;
            }
            e.setAttribute("aria-selected", !1),
              e.setAttribute("tabindex", "-1"),
              this._toggleDropDown(e, !1),
              tM.trigger(e, np, { relatedTarget: t });
          },
          e,
          e.classList.contains(nA)
        ));
    }
    _keydown(e) {
      let t;
      if (!["ArrowLeft", ny, "ArrowUp", nw, nC, "End"].includes(e.key)) return;
      e.stopPropagation(), e.preventDefault();
      let i = this._getChildren().filter((e) => !tn(e));
      if ([nC, "End"].includes(e.key)) t = i[e.key === nC ? 0 : i.length - 1];
      else {
        let a = [ny, nw].includes(e.key);
        t = tf(i, e.target, a, !0);
      }
      t && (t.focus({ preventScroll: !0 }), nD.getOrCreateInstance(t).show());
    }
    _getChildren() {
      // collection of inner elements
      return tY.find(nM, this._parent);
    }
    _getActiveElem() {
      return this._getChildren().find((e) => this._elemIsActive(e)) || null;
    }
    _setInitialAttributes(e, t) {
      for (let i of (this._setAttributeIfNotExists(e, "role", "tablist"), t))
        this._setInitialAttributesOnChild(i);
    }
    _setInitialAttributesOnChild(e) {
      e = this._getInnerElement(e);
      let t = this._elemIsActive(e),
        i = this._getOuterElement(e);
      e.setAttribute("aria-selected", t),
        i !== e && this._setAttributeIfNotExists(i, "role", "presentation"),
        t || e.setAttribute("tabindex", "-1"),
        this._setAttributeIfNotExists(e, "role", "tab"), // set attributes to the related panel too
        this._setInitialAttributesOnTargetPanel(e);
    }
    _setInitialAttributesOnTargetPanel(e) {
      let t = tY.getElementFromSelector(e);
      t &&
        (this._setAttributeIfNotExists(t, "role", "tabpanel"),
        e.id && this._setAttributeIfNotExists(t, "aria-labelledby", `${e.id}`));
    }
    _toggleDropDown(e, t) {
      let i = this._getOuterElement(e);
      if (!i.classList.contains("dropdown")) return;
      let a = (e, a) => {
        let n = tY.findOne(e, i);
        n && n.classList.toggle(a, t);
      };
      a(nL, nk), a(".dropdown-menu", nS), i.setAttribute("aria-expanded", t);
    }
    _setAttributeIfNotExists(e, t, i) {
      e.hasAttribute(t) || e.setAttribute(t, i);
    }
    _elemIsActive(e) {
      return e.classList.contains(nk);
    } // Try to get the inner element (usually the .nav-link)
    _getInnerElement(e) {
      return e.matches(nM) ? e : tY.findOne(nM, e);
    } // Try to get the outer element (usually the .nav-item)
    _getOuterElement(e) {
      return e.closest(".nav-item, .list-group-item") || e;
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = nD.getOrCreateInstance(this);
        if ("string" == typeof e) {
          if (void 0 === t[e] || e.startsWith("_") || "constructor" === e)
            throw TypeError(`No method named "${e}"`);
          t[e]();
        }
      });
    }
    constructor(e) {
      if (
        (super(e),
        (this._parent = this._element.closest(
          '.list-group, .nav, [role="tablist"]'
        )),
        !this._parent)
      )
        return; // Set up initial aria attributes
      this._setInitialAttributes(this._parent, this._getChildren()),
        tM.on(this._element, nb, (e) => this._keydown(e));
    }
  }
  /**
   * Data API implementation
   */ tM.on(document, nx, nP, function (e) {
    ["A", "AREA"].includes(this.tagName) && e.preventDefault(),
      tn(this) || nD.getOrCreateInstance(this).show();
  }),
    /**
     * Initialize on focus
     */ tM.on(window, nv, () => {
      for (let e of tY.find(n_)) nD.getOrCreateInstance(e);
    }),
    /**
     * jQuery
     */ tu(nD);
  let nE = ".bs.toast",
    nI = `mouseover${nE}`,
    nH = `mouseout${nE}`,
    nF = `focusin${nE}`,
    nz = `focusout${nE}`,
    nY = `hide${nE}`,
    nX = `hidden${nE}`,
    nN = `show${nE}`,
    nR = `shown${nE}`,
    nV = "hide",
    nW = "show",
    nB = "showing",
    nG = { animation: "boolean", autohide: "boolean", delay: "number" },
    nj = { animation: !0, autohide: !0, delay: 5e3 };
  /**
   * Class definition
   */ class n$ extends tF {
    // Getters
    static get Default() {
      return nj;
    }
    static get DefaultType() {
      return nG;
    }
    static get NAME() {
      return "toast";
    } // Public
    show() {
      let e = tM.trigger(this._element, nN);
      e.defaultPrevented ||
        (this._clearTimeout(),
        this._config.animation && this._element.classList.add("fade"),
        this._element.classList.remove(nV),
        tr(this._element),
        this._element.classList.add(nW, nB),
        this._queueCallback(
          () => {
            this._element.classList.remove(nB),
              tM.trigger(this._element, nR),
              this._maybeScheduleHide();
          },
          this._element,
          this._config.animation
        ));
    }
    hide() {
      if (!this.isShown()) return;
      let e = tM.trigger(this._element, nY);
      e.defaultPrevented ||
        (this._element.classList.add(nB),
        this._queueCallback(
          () => {
            this._element.classList.add(nV),
              this._element.classList.remove(nB, nW),
              tM.trigger(this._element, nX);
          },
          this._element,
          this._config.animation
        ));
    }
    dispose() {
      this._clearTimeout(),
        this.isShown() && this._element.classList.remove(nW),
        super.dispose();
    }
    isShown() {
      return this._element.classList.contains(nW);
    } // Private
    _maybeScheduleHide() {
      this._config.autohide &&
        (this._hasMouseInteraction ||
          this._hasKeyboardInteraction ||
          (this._timeout = setTimeout(() => {
            this.hide();
          }, this._config.delay)));
    }
    _onInteraction(e, t) {
      switch (e.type) {
        case "mouseover":
        case "mouseout":
          this._hasMouseInteraction = t;
          break;
        case "focusin":
        case "focusout":
          this._hasKeyboardInteraction = t;
      }
      if (t) {
        this._clearTimeout();
        return;
      }
      let i = e.relatedTarget;
      this._element === i ||
        this._element.contains(i) ||
        this._maybeScheduleHide();
    }
    _setListeners() {
      tM.on(this._element, nI, (e) => this._onInteraction(e, !0)),
        tM.on(this._element, nH, (e) => this._onInteraction(e, !1)),
        tM.on(this._element, nF, (e) => this._onInteraction(e, !0)),
        tM.on(this._element, nz, (e) => this._onInteraction(e, !1));
    }
    _clearTimeout() {
      clearTimeout(this._timeout), (this._timeout = null);
    } // Static
    static jQueryInterface(e) {
      return this.each(function () {
        let t = n$.getOrCreateInstance(this, e);
        if ("string" == typeof e) {
          if (void 0 === t[e]) throw TypeError(`No method named "${e}"`);
          t[e](this);
        }
      });
    }
    constructor(e, t) {
      super(e, t),
        (this._timeout = null),
        (this._hasMouseInteraction = !1),
        (this._hasKeyboardInteraction = !1),
        this._setListeners();
    }
  }
  /**
   * Data API implementation
   */ tX(n$),
    /**
     * jQuery
     */ tu(n$);
  var nU = {},
    nq = {};
  function nZ(e, t) {
    var i = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var a = Object.getOwnPropertySymbols(e);
      t &&
        (a = a.filter(function (t) {
          return Object.getOwnPropertyDescriptor(e, t).enumerable;
        })),
        i.push.apply(i, a);
    }
    return i;
  }
  function nJ(e) {
    for (var t = 1; t < arguments.length; t++) {
      var i = null != arguments[t] ? arguments[t] : {};
      t % 2
        ? nZ(Object(i), !0).forEach(function (t) {
            n2(e, t, i[t]);
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i))
        : nZ(Object(i)).forEach(function (t) {
            Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t));
          });
    }
    return e;
  }
  function nK(e) {
    return (nK =
      "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
        ? function (e) {
            return typeof e;
          }
        : function (e) {
            return e &&
              "function" == typeof Symbol &&
              e.constructor === Symbol &&
              e !== Symbol.prototype
              ? "symbol"
              : typeof e;
          })(e);
  }
  function nQ(e, t) {
    if (!(e instanceof t)) throw TypeError("Cannot call a class as a function");
  }
  function n0(e, t) {
    for (var i = 0; i < t.length; i++) {
      var a = t[i];
      (a.enumerable = a.enumerable || !1),
        (a.configurable = !0),
        "value" in a && (a.writable = !0),
        Object.defineProperty(e, a.key, a);
    }
  }
  function n1(e, t, i) {
    return t && n0(e.prototype, t), i && n0(e, i), e;
  }
  function n2(e, t, i) {
    return (
      t in e
        ? Object.defineProperty(e, t, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
          })
        : (e[t] = i),
      e
    );
  }
  function n4(e, t) {
    if ("function" != typeof t && null !== t)
      throw TypeError("Super expression must either be null or a function");
    (e.prototype = Object.create(t && t.prototype, {
      constructor: { value: e, writable: !0, configurable: !0 }
    })),
      t && n5(e, t);
  }
  function n3(e) {
    return (n3 = Object.setPrototypeOf
      ? Object.getPrototypeOf
      : function (e) {
          return e.__proto__ || Object.getPrototypeOf(e);
        })(e);
  }
  function n5(e, t) {
    return (n5 =
      Object.setPrototypeOf ||
      function (e, t) {
        return (e.__proto__ = t), e;
      })(e, t);
  }
  function n6(e) {
    var t = (function () {
      if (
        "undefined" == typeof Reflect ||
        !Reflect.construct ||
        Reflect.construct.sham
      )
        return !1;
      if ("function" == typeof Proxy) return !0;
      try {
        return (
          Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {})
          ),
          !0
        );
      } catch (e) {
        return !1;
      }
    })();
    return function () {
      var i,
        a = n3(e);
      if (t) {
        var n = n3(this).constructor;
        i = Reflect.construct(a, arguments, n);
      } else i = a.apply(this, arguments);
      return (function (e, t) {
        if (t && ("object" == typeof t || "function" == typeof t)) return t;
        if (void 0 !== t)
          throw TypeError(
            "Derived constructors may only return object or undefined"
          );
        return (function (e) {
          if (void 0 === e)
            throw ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return e;
        })(e);
      })(this, i);
    };
  }
  function n9(e, t) {
    return (
      (function (e) {
        if (Array.isArray(e)) return e;
      })(e) ||
      (function (e, t) {
        var i =
          null == e
            ? null
            : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
        if (null != i) {
          var a,
            n,
            s = [],
            o = !0,
            r = !1;
          try {
            for (
              i = i.call(e);
              !(o = (a = i.next()).done) &&
              (s.push(a.value), !t || s.length !== t);
              o = !0
            );
          } catch (e) {
            (r = !0), (n = e);
          } finally {
            try {
              o || null == i.return || i.return();
            } finally {
              if (r) throw n;
            }
          }
          return s;
        }
      })(e, t) ||
      n7(e, t) ||
      (function () {
        throw TypeError(
          "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      })()
    );
  }
  function n8(e) {
    return (
      (function (e) {
        if (Array.isArray(e)) return se(e);
      })(e) ||
      (function (e) {
        if (
          ("undefined" != typeof Symbol && null != e[Symbol.iterator]) ||
          null != e["@@iterator"]
        )
          return Array.from(e);
      })(e) ||
      n7(e) ||
      (function () {
        throw TypeError(
          "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      })()
    );
  }
  function n7(e, t) {
    if (e) {
      if ("string" == typeof e) return se(e, t);
      var i = Object.prototype.toString.call(e).slice(8, -1);
      return (
        "Object" === i && e.constructor && (i = e.constructor.name),
        "Map" === i || "Set" === i
          ? Array.from(e)
          : "Arguments" === i ||
            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
          ? se(e, t)
          : void 0
      );
    }
  }
  function se(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for (var i = 0, a = Array(t); i < t; i++) a[i] = e[i];
    return a;
  }
  var st = (function () {
      function e() {
        nQ(this, e);
      }
      return (
        n1(
          e,
          [
            {
              key: "shadeRGBColor",
              value: function (e, t) {
                var i = t.split(","),
                  a = e < 0 ? 0 : 255,
                  n = e < 0 ? -1 * e : e,
                  s = parseInt(i[0].slice(4), 10),
                  o = parseInt(i[1], 10),
                  r = parseInt(i[2], 10);
                return (
                  "rgb(" +
                  (Math.round((a - s) * n) + s) +
                  "," +
                  (Math.round((a - o) * n) + o) +
                  "," +
                  (Math.round((a - r) * n) + r) +
                  ")"
                );
              }
            },
            {
              key: "shadeHexColor",
              value: function (e, t) {
                var i = parseInt(t.slice(1), 16),
                  a = e < 0 ? 0 : 255,
                  n = e < 0 ? -1 * e : e,
                  s = i >> 16,
                  o = (i >> 8) & 255,
                  r = 255 & i;
                return (
                  "#" +
                  (
                    16777216 +
                    65536 * (Math.round((a - s) * n) + s) +
                    256 * (Math.round((a - o) * n) + o) +
                    (Math.round((a - r) * n) + r)
                  )
                    .toString(16)
                    .slice(1)
                );
              }
            },
            {
              key: "shadeColor",
              value: function (t, i) {
                return e.isColorHex(i)
                  ? this.shadeHexColor(t, i)
                  : this.shadeRGBColor(t, i);
              }
            }
          ],
          [
            {
              key: "bind",
              value: function (e, t) {
                return function () {
                  return e.apply(t, arguments);
                };
              }
            },
            {
              key: "isObject",
              value: function (e) {
                return (
                  e && "object" === nK(e) && !Array.isArray(e) && null != e
                );
              }
            },
            {
              key: "is",
              value: function (e, t) {
                return (
                  Object.prototype.toString.call(t) === "[object " + e + "]"
                );
              }
            },
            {
              key: "listToArray",
              value: function (e) {
                var t,
                  i = [];
                for (t = 0; t < e.length; t++) i[t] = e[t];
                return i;
              }
            },
            {
              key: "extend",
              value: function (e, t) {
                var i = this;
                "function" != typeof Object.assign &&
                  (Object.assign = function (e) {
                    if (null == e)
                      throw TypeError(
                        "Cannot convert undefined or null to object"
                      );
                    for (var t = Object(e), i = 1; i < arguments.length; i++) {
                      var a = arguments[i];
                      if (null != a)
                        for (var n in a) a.hasOwnProperty(n) && (t[n] = a[n]);
                    }
                    return t;
                  });
                var a = Object.assign({}, e);
                return (
                  this.isObject(e) &&
                    this.isObject(t) &&
                    Object.keys(t).forEach(function (n) {
                      i.isObject(t[n]) && n in e
                        ? (a[n] = i.extend(e[n], t[n]))
                        : Object.assign(a, n2({}, n, t[n]));
                    }),
                  a
                );
              }
            },
            {
              key: "extendArray",
              value: function (t, i) {
                var a = [];
                return (
                  t.map(function (t) {
                    a.push(e.extend(i, t));
                  }),
                  (t = a)
                );
              }
            },
            {
              key: "monthMod",
              value: function (e) {
                return e % 12;
              }
            },
            {
              key: "clone",
              value: function (t) {
                if (e.is("Array", t)) {
                  for (var i = [], a = 0; a < t.length; a++)
                    i[a] = this.clone(t[a]);
                  return i;
                }
                if (e.is("Null", t)) return null;
                if (e.is("Date", t)) return t;
                if ("object" === nK(t)) {
                  var n = {};
                  for (var s in t)
                    t.hasOwnProperty(s) && (n[s] = this.clone(t[s]));
                  return n;
                }
                return t;
              }
            },
            {
              key: "log10",
              value: function (e) {
                return Math.log(e) / Math.LN10;
              }
            },
            {
              key: "roundToBase10",
              value: function (e) {
                return Math.pow(10, Math.floor(Math.log10(e)));
              }
            },
            {
              key: "roundToBase",
              value: function (e, t) {
                return Math.pow(t, Math.floor(Math.log(e) / Math.log(t)));
              }
            },
            {
              key: "parseNumber",
              value: function (e) {
                return null === e ? e : parseFloat(e);
              }
            },
            {
              key: "stripNumber",
              value: function (e) {
                var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : 2;
                return parseFloat(e.toPrecision(t));
              }
            },
            {
              key: "randomId",
              value: function () {
                return (Math.random() + 1).toString(36).substring(4);
              }
            },
            {
              key: "noExponents",
              value: function (e) {
                var t = String(e).split(/[eE]/);
                if (1 === t.length) return t[0];
                var i = "",
                  a = t[0].replace(".", ""),
                  n = Number(t[1]) + 1;
                if (n < 0) {
                  for (i = (e < 0 ? "-" : "") + "0."; n++; ) i += "0";
                  return i + a.replace(/^-/, "");
                }
                for (n -= a.length; n--; ) i += "0";
                return a + i;
              }
            },
            {
              key: "getDimensions",
              value: function (e) {
                var t = getComputedStyle(e, null),
                  i = e.clientHeight,
                  a = e.clientWidth;
                return (
                  (i -= parseFloat(t.paddingTop) + parseFloat(t.paddingBottom)),
                  [
                    (a -=
                      parseFloat(t.paddingLeft) + parseFloat(t.paddingRight)),
                    i
                  ]
                );
              }
            },
            {
              key: "getBoundingClientRect",
              value: function (e) {
                var t = e.getBoundingClientRect();
                return {
                  top: t.top,
                  right: t.right,
                  bottom: t.bottom,
                  left: t.left,
                  width: e.clientWidth,
                  height: e.clientHeight,
                  x: t.left,
                  y: t.top
                };
              }
            },
            {
              key: "getLargestStringFromArr",
              value: function (e) {
                return e.reduce(function (e, t) {
                  return (
                    Array.isArray(t) &&
                      (t = t.reduce(function (e, t) {
                        return e.length > t.length ? e : t;
                      })),
                    e.length > t.length ? e : t
                  );
                }, 0);
              }
            },
            {
              key: "hexToRgba",
              value: function () {
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : "#999999",
                  t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : 0.6;
                "#" !== e.substring(0, 1) && (e = "#999999");
                var i = e.replace("#", "");
                i = i.match(RegExp("(.{" + i.length / 3 + "})", "g"));
                for (var a = 0; a < i.length; a++)
                  i[a] = parseInt(1 === i[a].length ? i[a] + i[a] : i[a], 16);
                return void 0 !== t && i.push(t), "rgba(" + i.join(",") + ")";
              }
            },
            {
              key: "getOpacityFromRGBA",
              value: function (e) {
                return parseFloat(e.replace(/^.*,(.+)\)/, "$1"));
              }
            },
            {
              key: "rgb2hex",
              value: function (e) {
                return (e = e.match(
                  /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i
                )) && 4 === e.length
                  ? "#" +
                      ("0" + parseInt(e[1], 10).toString(16)).slice(-2) +
                      ("0" + parseInt(e[2], 10).toString(16)).slice(-2) +
                      ("0" + parseInt(e[3], 10).toString(16)).slice(-2)
                  : "";
              }
            },
            {
              key: "isColorHex",
              value: function (e) {
                return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i.test(
                  e
                );
              }
            },
            {
              key: "getPolygonPos",
              value: function (e, t) {
                for (var i = [], a = (2 * Math.PI) / t, n = 0; n < t; n++) {
                  var s = {};
                  (s.x = e * Math.sin(n * a)),
                    (s.y = -e * Math.cos(n * a)),
                    i.push(s);
                }
                return i;
              }
            },
            {
              key: "polarToCartesian",
              value: function (e, t, i, a) {
                var n = ((a - 90) * Math.PI) / 180;
                return { x: e + i * Math.cos(n), y: t + i * Math.sin(n) };
              }
            },
            {
              key: "escapeString",
              value: function (e) {
                var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : "x";
                return e
                  .toString()
                  .slice()
                  .replace(/[` ~!@#$%^&*()|+\=?;:'",.<>{}[\]\\/]/gi, t);
              }
            },
            {
              key: "negToZero",
              value: function (e) {
                return e < 0 ? 0 : e;
              }
            },
            {
              key: "moveIndexInArray",
              value: function (e, t, i) {
                if (i >= e.length)
                  for (var a = i - e.length + 1; a--; ) e.push(void 0);
                return e.splice(i, 0, e.splice(t, 1)[0]), e;
              }
            },
            {
              key: "extractNumber",
              value: function (e) {
                return parseFloat(e.replace(/[^\d.]*/g, ""));
              }
            },
            {
              key: "findAncestor",
              value: function (e, t) {
                for (; (e = e.parentElement) && !e.classList.contains(t); );
                return e;
              }
            },
            {
              key: "setELstyles",
              value: function (e, t) {
                for (var i in t) t.hasOwnProperty(i) && (e.style.key = t[i]);
              }
            },
            {
              key: "isNumber",
              value: function (e) {
                return (
                  !isNaN(e) &&
                  parseFloat(Number(e)) === e &&
                  !isNaN(parseInt(e, 10))
                );
              }
            },
            {
              key: "isFloat",
              value: function (e) {
                return Number(e) === e && e % 1 != 0;
              }
            },
            {
              key: "isSafari",
              value: function () {
                return /^((?!chrome|android).)*safari/i.test(
                  navigator.userAgent
                );
              }
            },
            {
              key: "isFirefox",
              value: function () {
                return (
                  navigator.userAgent.toLowerCase().indexOf("firefox") > -1
                );
              }
            },
            {
              key: "isIE11",
              value: function () {
                if (
                  -1 !== window.navigator.userAgent.indexOf("MSIE") ||
                  window.navigator.appVersion.indexOf("Trident/") > -1
                )
                  return !0;
              }
            },
            {
              key: "isIE",
              value: function () {
                var e = window.navigator.userAgent,
                  t = e.indexOf("MSIE ");
                if (t > 0)
                  return parseInt(e.substring(t + 5, e.indexOf(".", t)), 10);
                if (e.indexOf("Trident/") > 0) {
                  var i = e.indexOf("rv:");
                  return parseInt(e.substring(i + 3, e.indexOf(".", i)), 10);
                }
                var a = e.indexOf("Edge/");
                return (
                  a > 0 && parseInt(e.substring(a + 5, e.indexOf(".", a)), 10)
                );
              }
            }
          ]
        ),
        e
      );
    })(),
    si = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w), this.setEasingFunctions();
      }
      return (
        n1(e, [
          {
            key: "setEasingFunctions",
            value: function () {
              var e;
              if (!this.w.globals.easing) {
                switch (this.w.config.chart.animations.easing) {
                  case "linear":
                    e = "-";
                    break;
                  case "easein":
                    e = "<";
                    break;
                  case "easeout":
                    e = ">";
                    break;
                  case "easeinout":
                  default:
                    e = "<>";
                    break;
                  case "swing":
                    e = function (e) {
                      return (e -= 1) * e * (2.70158 * e + 1.70158) + 1;
                    };
                    break;
                  case "bounce":
                    e = function (e) {
                      return e < 1 / 2.75
                        ? 7.5625 * e * e
                        : e < 2 / 2.75
                        ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75
                        : e < 2.5 / 2.75
                        ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375
                        : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375;
                    };
                    break;
                  case "elastic":
                    e = function (e) {
                      return !!e === e
                        ? e
                        : Math.pow(2, -10 * e) *
                            Math.sin(((e - 0.075) * (2 * Math.PI)) / 0.3) +
                            1;
                    };
                }
                this.w.globals.easing = e;
              }
            }
          },
          {
            key: "animateLine",
            value: function (e, t, i, a) {
              e.attr(t).animate(a).attr(i);
            }
          },
          {
            key: "animateMarker",
            value: function (e, t, i, a, n, s) {
              t || (t = 0),
                e
                  .attr({ r: t, width: t, height: t })
                  .animate(a, n)
                  .attr({ r: i, width: i.width, height: i.height })
                  .afterAll(function () {
                    s();
                  });
            }
          },
          {
            key: "animateCircle",
            value: function (e, t, i, a, n) {
              e.attr({ r: t.r, cx: t.cx, cy: t.cy })
                .animate(a, n)
                .attr({ r: i.r, cx: i.cx, cy: i.cy });
            }
          },
          {
            key: "animateRect",
            value: function (e, t, i, a, n) {
              e.attr(t)
                .animate(a)
                .attr(i)
                .afterAll(function () {
                  return n();
                });
            }
          },
          {
            key: "animatePathsGradually",
            value: function (e) {
              var t = e.el,
                i = e.realIndex,
                a = e.j,
                n = e.fill,
                s = e.pathFrom,
                o = e.pathTo,
                r = e.speed,
                l = e.delay,
                c = this.w,
                h = 0;
              c.config.chart.animations.animateGradually.enabled &&
                (h = c.config.chart.animations.animateGradually.delay),
                c.config.chart.animations.dynamicAnimation.enabled &&
                  c.globals.dataChanged &&
                  "bar" !== c.config.chart.type &&
                  (h = 0),
                this.morphSVG(
                  t,
                  i,
                  a,
                  "line" !== c.config.chart.type || c.globals.comboCharts
                    ? n
                    : "stroke",
                  s,
                  o,
                  r,
                  l * h
                );
            }
          },
          {
            key: "showDelayedElements",
            value: function () {
              this.w.globals.delayedElements.forEach(function (e) {
                var t = e.el;
                t.classList.remove("apexcharts-element-hidden"),
                  t.classList.add("apexcharts-hidden-element-shown");
              });
            }
          },
          {
            key: "animationCompleted",
            value: function (e) {
              var t = this.w;
              t.globals.animationEnded ||
                ((t.globals.animationEnded = !0),
                this.showDelayedElements(),
                "function" == typeof t.config.chart.events.animationEnd &&
                  t.config.chart.events.animationEnd(this.ctx, {
                    el: e,
                    w: t
                  }));
            }
          },
          {
            key: "morphSVG",
            value: function (e, t, i, a, n, s, o, r) {
              var l = this,
                c = this.w;
              n || (n = e.attr("pathFrom")), s || (s = e.attr("pathTo"));
              var h = function (e) {
                return (
                  "radar" === c.config.chart.type && (o = 1),
                  "M 0 ".concat(c.globals.gridHeight)
                );
              };
              (!n || n.indexOf("undefined") > -1 || n.indexOf("NaN") > -1) &&
                (n = h()),
                (!s || s.indexOf("undefined") > -1 || s.indexOf("NaN") > -1) &&
                  (s = h()),
                c.globals.shouldAnimate || (o = 1),
                e
                  .plot(n)
                  .animate(1, c.globals.easing, r)
                  .plot(n)
                  .animate(o, c.globals.easing, r)
                  .plot(s)
                  .afterAll(function () {
                    st.isNumber(i)
                      ? i ===
                          c.globals.series[c.globals.maxValsInArrayIndex]
                            .length -
                            2 &&
                        c.globals.shouldAnimate &&
                        l.animationCompleted(e)
                      : "none" !== a &&
                        c.globals.shouldAnimate &&
                        ((!c.globals.comboCharts &&
                          t === c.globals.series.length - 1) ||
                          c.globals.comboCharts) &&
                        l.animationCompleted(e),
                      l.showDelayedElements();
                  });
            }
          }
        ]),
        e
      );
    })(),
    sa = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "getDefaultFilter",
            value: function (e, t) {
              var i = this.w;
              e.unfilter(!0),
                new window.SVG.Filter().size("120%", "180%", "-5%", "-40%"),
                "none" !== i.config.states.normal.filter
                  ? this.applyFilter(
                      e,
                      t,
                      i.config.states.normal.filter.type,
                      i.config.states.normal.filter.value
                    )
                  : i.config.chart.dropShadow.enabled &&
                    this.dropShadow(e, i.config.chart.dropShadow, t);
            }
          },
          {
            key: "addNormalFilter",
            value: function (e, t) {
              var i = this.w;
              i.config.chart.dropShadow.enabled &&
                !e.node.classList.contains("apexcharts-marker") &&
                this.dropShadow(e, i.config.chart.dropShadow, t);
            }
          },
          {
            key: "addLightenFilter",
            value: function (e, t, i) {
              var a = this,
                n = this.w,
                s = i.intensity;
              e.unfilter(!0),
                new window.SVG.Filter(),
                e.filter(function (e) {
                  var i = n.config.chart.dropShadow;
                  (i.enabled ? a.addShadow(e, t, i) : e).componentTransfer({
                    rgb: { type: "linear", slope: 1.5, intercept: s }
                  });
                }),
                e.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                this._scaleFilterSize(e.filterer.node);
            }
          },
          {
            key: "addDarkenFilter",
            value: function (e, t, i) {
              var a = this,
                n = this.w,
                s = i.intensity;
              e.unfilter(!0),
                new window.SVG.Filter(),
                e.filter(function (e) {
                  var i = n.config.chart.dropShadow;
                  (i.enabled ? a.addShadow(e, t, i) : e).componentTransfer({
                    rgb: { type: "linear", slope: s }
                  });
                }),
                e.filterer.node.setAttribute("filterUnits", "userSpaceOnUse"),
                this._scaleFilterSize(e.filterer.node);
            }
          },
          {
            key: "applyFilter",
            value: function (e, t, i) {
              var a =
                arguments.length > 3 && void 0 !== arguments[3]
                  ? arguments[3]
                  : 0.5;
              switch (i) {
                case "none":
                  this.addNormalFilter(e, t);
                  break;
                case "lighten":
                  this.addLightenFilter(e, t, { intensity: a });
                  break;
                case "darken":
                  this.addDarkenFilter(e, t, { intensity: a });
              }
            }
          },
          {
            key: "addShadow",
            value: function (e, t, i) {
              var a = i.blur,
                n = i.top,
                s = i.left,
                o = i.color,
                r = i.opacity,
                l = e
                  .flood(Array.isArray(o) ? o[t] : o, r)
                  .composite(e.sourceAlpha, "in")
                  .offset(s, n)
                  .gaussianBlur(a)
                  .merge(e.source);
              return e.blend(e.source, l);
            }
          },
          {
            key: "dropShadow",
            value: function (e, t) {
              var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : 0,
                a = t.top,
                n = t.left,
                s = t.blur,
                o = t.color,
                r = t.opacity,
                l = t.noUserSpaceOnUse,
                c = this.w;
              return (
                e.unfilter(!0),
                (st.isIE() && "radialBar" === c.config.chart.type) ||
                  ((o = Array.isArray(o) ? o[i] : o),
                  e.filter(function (e) {
                    var t = null;
                    (t =
                      st.isSafari() || st.isFirefox() || st.isIE()
                        ? e
                            .flood(o, r)
                            .composite(e.sourceAlpha, "in")
                            .offset(n, a)
                            .gaussianBlur(s)
                        : e
                            .flood(o, r)
                            .composite(e.sourceAlpha, "in")
                            .offset(n, a)
                            .gaussianBlur(s)
                            .merge(e.source)),
                      e.blend(e.source, t);
                  }),
                  l ||
                    e.filterer.node.setAttribute(
                      "filterUnits",
                      "userSpaceOnUse"
                    ),
                  this._scaleFilterSize(e.filterer.node)),
                e
              );
            }
          },
          {
            key: "setSelectionFilter",
            value: function (e, t, i) {
              var a = this.w;
              if (
                void 0 !== a.globals.selectedDataPoints[t] &&
                a.globals.selectedDataPoints[t].indexOf(i) > -1
              ) {
                e.node.setAttribute("selected", !0);
                var n = a.config.states.active.filter;
                "none" !== n && this.applyFilter(e, t, n.type, n.value);
              }
            }
          },
          {
            key: "_scaleFilterSize",
            value: function (e) {
              !(function (t) {
                for (var i in t) t.hasOwnProperty(i) && e.setAttribute(i, t[i]);
              })({ width: "200%", height: "200%", x: "-50%", y: "-50%" });
            }
          }
        ]),
        e
      );
    })(),
    sn = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(
          e,
          [
            {
              key: "roundPathCorners",
              value: function (e, t) {
                function i(e, t, i) {
                  var n = t.x - e.x,
                    s = t.y - e.y;
                  return a(e, t, Math.min(1, i / Math.sqrt(n * n + s * s)));
                }
                function a(e, t, i) {
                  return { x: e.x + (t.x - e.x) * i, y: e.y + (t.y - e.y) * i };
                }
                function n(e, t) {
                  e.length > 2 &&
                    ((e[e.length - 2] = t.x), (e[e.length - 1] = t.y));
                }
                function s(e) {
                  return {
                    x: parseFloat(e[e.length - 2]),
                    y: parseFloat(e[e.length - 1])
                  };
                }
                e.indexOf("NaN") > -1 && (e = "");
                var o = e
                    .split(/[,\s]/)
                    .reduce(function (e, t) {
                      var i = t.match("([a-zA-Z])(.+)");
                      return i ? (e.push(i[1]), e.push(i[2])) : e.push(t), e;
                    }, [])
                    .reduce(function (e, t) {
                      return (
                        parseFloat(t) == t && e.length
                          ? e[e.length - 1].push(t)
                          : e.push([t]),
                        e
                      );
                    }, []),
                  r = [];
                if (o.length > 1) {
                  var l = s(o[0]),
                    c = null;
                  "Z" == o[o.length - 1][0] &&
                    o[0].length > 2 &&
                    ((c = ["L", l.x, l.y]), (o[o.length - 1] = c)),
                    r.push(o[0]);
                  for (var h = 1; h < o.length; h++) {
                    var d = r[r.length - 1],
                      u = o[h],
                      g = u == c ? o[1] : o[h + 1];
                    if (
                      g &&
                      d &&
                      d.length > 2 &&
                      "L" == u[0] &&
                      g.length > 2 &&
                      "L" == g[0]
                    ) {
                      var p,
                        f,
                        m = s(d),
                        x = s(u),
                        b = s(g);
                      (p = i(x, m, t)),
                        (f = i(x, b, t)),
                        n(u, p),
                        (u.origPoint = x),
                        r.push(u);
                      var v = a(p, x, 0.5),
                        y = a(x, f, 0.5),
                        w = ["C", v.x, v.y, y.x, y.y, f.x, f.y];
                      (w.origPoint = x), r.push(w);
                    } else r.push(u);
                  }
                  if (c) {
                    var C = s(r[r.length - 1]);
                    r.push(["Z"]), n(r[0], C);
                  }
                } else r = o;
                return r.reduce(function (e, t) {
                  return e + t.join(" ") + " ";
                }, "");
              }
            },
            {
              key: "drawLine",
              value: function (e, t, i, a) {
                var n =
                    arguments.length > 4 && void 0 !== arguments[4]
                      ? arguments[4]
                      : "#a8a8a8",
                  s =
                    arguments.length > 5 && void 0 !== arguments[5]
                      ? arguments[5]
                      : 0,
                  o =
                    arguments.length > 6 && void 0 !== arguments[6]
                      ? arguments[6]
                      : null,
                  r =
                    arguments.length > 7 && void 0 !== arguments[7]
                      ? arguments[7]
                      : "butt";
                return this.w.globals.dom.Paper.line().attr({
                  x1: e,
                  y1: t,
                  x2: i,
                  y2: a,
                  stroke: n,
                  "stroke-dasharray": s,
                  "stroke-width": o,
                  "stroke-linecap": r
                });
              }
            },
            {
              key: "drawRect",
              value: function () {
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : 0,
                  t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : 0,
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : 0,
                  a =
                    arguments.length > 3 && void 0 !== arguments[3]
                      ? arguments[3]
                      : 0,
                  n =
                    arguments.length > 4 && void 0 !== arguments[4]
                      ? arguments[4]
                      : 0,
                  s =
                    arguments.length > 5 && void 0 !== arguments[5]
                      ? arguments[5]
                      : "#fefefe",
                  o =
                    arguments.length > 6 && void 0 !== arguments[6]
                      ? arguments[6]
                      : 1,
                  r =
                    arguments.length > 7 && void 0 !== arguments[7]
                      ? arguments[7]
                      : null,
                  l =
                    arguments.length > 8 && void 0 !== arguments[8]
                      ? arguments[8]
                      : null,
                  c =
                    arguments.length > 9 && void 0 !== arguments[9]
                      ? arguments[9]
                      : 0,
                  h = this.w.globals.dom.Paper.rect();
                return (
                  h.attr({
                    x: e,
                    y: t,
                    width: i > 0 ? i : 0,
                    height: a > 0 ? a : 0,
                    rx: n,
                    ry: n,
                    opacity: o,
                    "stroke-width": null !== r ? r : 0,
                    stroke: null !== l ? l : "none",
                    "stroke-dasharray": c
                  }),
                  h.node.setAttribute("fill", s),
                  h
                );
              }
            },
            {
              key: "drawPolygon",
              value: function (e) {
                var t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : "#e1e1e1",
                  i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : 1,
                  a =
                    arguments.length > 3 && void 0 !== arguments[3]
                      ? arguments[3]
                      : "none";
                return this.w.globals.dom.Paper.polygon(e).attr({
                  fill: a,
                  stroke: t,
                  "stroke-width": i
                });
              }
            },
            {
              key: "drawCircle",
              value: function (e) {
                var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null;
                e < 0 && (e = 0);
                var i = this.w.globals.dom.Paper.circle(2 * e);
                return null !== t && i.attr(t), i;
              }
            },
            {
              key: "drawPath",
              value: function (e) {
                var t = e.d,
                  i = void 0 === t ? "" : t,
                  a = e.stroke,
                  n = e.strokeWidth,
                  s = e.fill,
                  o = e.fillOpacity,
                  r = e.strokeOpacity,
                  l = e.classes,
                  c = e.strokeLinecap,
                  h = void 0 === c ? null : c,
                  d = e.strokeDashArray,
                  u = this.w;
                return (
                  null === h && (h = u.config.stroke.lineCap),
                  (i.indexOf("undefined") > -1 || i.indexOf("NaN") > -1) &&
                    (i = "M 0 ".concat(u.globals.gridHeight)),
                  u.globals.dom.Paper.path(i).attr({
                    fill: s,
                    "fill-opacity": void 0 === o ? 1 : o,
                    stroke: void 0 === a ? "#a8a8a8" : a,
                    "stroke-opacity": void 0 === r ? 1 : r,
                    "stroke-linecap": h,
                    "stroke-width": void 0 === n ? 1 : n,
                    "stroke-dasharray": void 0 === d ? 0 : d,
                    class: l
                  })
                );
              }
            },
            {
              key: "group",
              value: function () {
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : null,
                  t = this.w.globals.dom.Paper.group();
                return null !== e && t.attr(e), t;
              }
            },
            {
              key: "move",
              value: function (e, t) {
                return ["M", e, t].join(" ");
              }
            },
            {
              key: "line",
              value: function (e, t) {
                var i =
                    arguments.length > 2 && void 0 !== arguments[2]
                      ? arguments[2]
                      : null,
                  a = null;
                return (
                  null === i
                    ? (a = [" L", e, t].join(" "))
                    : "H" === i
                    ? (a = [" H", e].join(" "))
                    : "V" === i && (a = [" V", t].join(" ")),
                  a
                );
              }
            },
            {
              key: "curve",
              value: function (e, t, i, a, n, s) {
                return ["C", e, t, i, a, n, s].join(" ");
              }
            },
            {
              key: "quadraticCurve",
              value: function (e, t, i, a) {
                return ["Q", e, t, i, a].join(" ");
              }
            },
            {
              key: "arc",
              value: function (e, t, i, a, n, s, o) {
                var r = "A";
                return (
                  arguments.length > 7 &&
                    void 0 !== arguments[7] &&
                    arguments[7] &&
                    (r = "a"),
                  [r, e, t, i, a, n, s, o].join(" ")
                );
              }
            },
            {
              key: "renderPaths",
              value: function (e) {
                var t,
                  i = e.j,
                  a = e.realIndex,
                  n = e.pathFrom,
                  s = e.pathTo,
                  o = e.stroke,
                  r = e.strokeWidth,
                  l = e.strokeLinecap,
                  c = e.fill,
                  h = e.animationDelay,
                  d = e.initialSpeed,
                  u = e.dataChangeSpeed,
                  g = e.className,
                  p = e.shouldClipToGrid,
                  f = e.bindEventsOnPaths,
                  m = e.drawShadow,
                  x = this.w,
                  b = new sa(this.ctx),
                  v = new si(this.ctx),
                  y = this.w.config.chart.animations.enabled,
                  w =
                    y &&
                    this.w.config.chart.animations.dynamicAnimation.enabled,
                  C = !!(
                    (y && !x.globals.resized) ||
                    (w && x.globals.dataChanged && x.globals.shouldAnimate)
                  );
                C ? (t = n) : ((t = s), (x.globals.animationEnded = !0));
                var k = x.config.stroke.dashArray,
                  A = 0;
                A = Array.isArray(k) ? k[a] : x.config.stroke.dashArray;
                var S = this.drawPath({
                  d: t,
                  stroke: o,
                  strokeWidth: r,
                  fill: c,
                  fillOpacity: 1,
                  classes: g,
                  strokeLinecap: l,
                  strokeDashArray: A
                });
                if (
                  (S.attr("index", a),
                  (void 0 === p || p) &&
                    S.attr({
                      "clip-path": "url(#gridRectMask".concat(
                        x.globals.cuid,
                        ")"
                      )
                    }),
                  "none" !== x.config.states.normal.filter.type)
                )
                  b.getDefaultFilter(S, a);
                else if (
                  x.config.chart.dropShadow.enabled &&
                  (void 0 === m || m) &&
                  (!x.config.chart.dropShadow.enabledOnSeries ||
                    (x.config.chart.dropShadow.enabledOnSeries &&
                      -1 !==
                        x.config.chart.dropShadow.enabledOnSeries.indexOf(a)))
                ) {
                  var L = x.config.chart.dropShadow;
                  b.dropShadow(S, L, a);
                }
                (void 0 === f || f) &&
                  (S.node.addEventListener(
                    "mouseenter",
                    this.pathMouseEnter.bind(this, S)
                  ),
                  S.node.addEventListener(
                    "mouseleave",
                    this.pathMouseLeave.bind(this, S)
                  ),
                  S.node.addEventListener(
                    "mousedown",
                    this.pathMouseDown.bind(this, S)
                  )),
                  S.attr({ pathTo: s, pathFrom: n });
                var O = {
                  el: S,
                  j: i,
                  realIndex: a,
                  pathFrom: n,
                  pathTo: s,
                  fill: c,
                  strokeWidth: r,
                  delay: h
                };
                return (
                  !y || x.globals.resized || x.globals.dataChanged
                    ? (!x.globals.resized && x.globals.dataChanged) ||
                      v.showDelayedElements()
                    : v.animatePathsGradually(nJ(nJ({}, O), {}, { speed: d })),
                  x.globals.dataChanged &&
                    w &&
                    C &&
                    v.animatePathsGradually(nJ(nJ({}, O), {}, { speed: u })),
                  S
                );
              }
            },
            {
              key: "drawPattern",
              value: function (e, t, i) {
                var a =
                    arguments.length > 3 && void 0 !== arguments[3]
                      ? arguments[3]
                      : "#a8a8a8",
                  n =
                    arguments.length > 4 && void 0 !== arguments[4]
                      ? arguments[4]
                      : 0;
                return this.w.globals.dom.Paper.pattern(t, i, function (s) {
                  "horizontalLines" === e
                    ? s.line(0, 0, i, 0).stroke({ color: a, width: n + 1 })
                    : "verticalLines" === e
                    ? s.line(0, 0, 0, t).stroke({ color: a, width: n + 1 })
                    : "slantedLines" === e
                    ? s.line(0, 0, t, i).stroke({ color: a, width: n })
                    : "squares" === e
                    ? s.rect(t, i).fill("none").stroke({ color: a, width: n })
                    : "circles" === e &&
                      s.circle(t).fill("none").stroke({ color: a, width: n });
                });
              }
            },
            {
              key: "drawGradient",
              value: function (e, t, i, a, n) {
                var s,
                  o =
                    arguments.length > 5 && void 0 !== arguments[5]
                      ? arguments[5]
                      : null,
                  r =
                    arguments.length > 6 && void 0 !== arguments[6]
                      ? arguments[6]
                      : null,
                  l =
                    arguments.length > 7 && void 0 !== arguments[7]
                      ? arguments[7]
                      : null,
                  c =
                    arguments.length > 8 && void 0 !== arguments[8]
                      ? arguments[8]
                      : 0,
                  h = this.w;
                t.length < 9 &&
                  0 === t.indexOf("#") &&
                  (t = st.hexToRgba(t, a)),
                  i.length < 9 &&
                    0 === i.indexOf("#") &&
                    (i = st.hexToRgba(i, n));
                var d = 0,
                  u = 1,
                  g = 1,
                  p = null;
                null !== r &&
                  ((d = void 0 !== r[0] ? r[0] / 100 : 0),
                  (u = void 0 !== r[1] ? r[1] / 100 : 1),
                  (g = void 0 !== r[2] ? r[2] / 100 : 1),
                  (p = void 0 !== r[3] ? r[3] / 100 : null));
                var f = !(
                  "donut" !== h.config.chart.type &&
                  "pie" !== h.config.chart.type &&
                  "polarArea" !== h.config.chart.type &&
                  "bubble" !== h.config.chart.type
                );
                if (
                  ((s =
                    null === l || 0 === l.length
                      ? h.globals.dom.Paper.gradient(
                          f ? "radial" : "linear",
                          function (e) {
                            e.at(d, t, a),
                              e.at(u, i, n),
                              e.at(g, i, n),
                              null !== p && e.at(p, t, a);
                          }
                        )
                      : h.globals.dom.Paper.gradient(
                          f ? "radial" : "linear",
                          function (e) {
                            (Array.isArray(l[c]) ? l[c] : l).forEach(function (
                              t
                            ) {
                              e.at(t.offset / 100, t.color, t.opacity);
                            });
                          }
                        )),
                  f)
                ) {
                  var m = h.globals.gridWidth / 2,
                    x = h.globals.gridHeight / 2;
                  "bubble" !== h.config.chart.type
                    ? s.attr({
                        gradientUnits: "userSpaceOnUse",
                        cx: m,
                        cy: x,
                        r: o
                      })
                    : s.attr({ cx: 0.5, cy: 0.5, r: 0.8, fx: 0.2, fy: 0.2 });
                } else
                  "vertical" === e
                    ? s.from(0, 0).to(0, 1)
                    : "diagonal" === e
                    ? s.from(0, 0).to(1, 1)
                    : "horizontal" === e
                    ? s.from(0, 1).to(1, 1)
                    : "diagonal2" === e && s.from(1, 0).to(0, 1);
                return s;
              }
            },
            {
              key: "getTextBasedOnMaxWidth",
              value: function (e) {
                var t = e.text,
                  i = e.maxWidth,
                  a = e.fontSize,
                  n = e.fontFamily,
                  s = this.getTextRects(t, a, n),
                  o = Math.floor(i / (s.width / t.length));
                return i < s.width ? t.slice(0, o - 3) + "..." : t;
              }
            },
            {
              key: "drawText",
              value: function (e) {
                var t = this,
                  i = e.x,
                  a = e.y,
                  n = e.text,
                  s = e.textAnchor,
                  o = e.fontSize,
                  r = e.fontFamily,
                  l = e.fontWeight,
                  c = e.foreColor,
                  h = e.opacity,
                  d = e.maxWidth,
                  u = e.cssClass,
                  g = e.isPlainText,
                  p = this.w;
                void 0 === n && (n = "");
                var f = n;
                s || (s = "start"),
                  (c && c.length) || (c = p.config.chart.foreColor),
                  (r = r || p.config.chart.fontFamily),
                  (l = l || "regular");
                var m,
                  x = {
                    maxWidth: d,
                    fontSize: (o = o || "11px"),
                    fontFamily: r
                  };
                return (
                  Array.isArray(n)
                    ? (m = p.globals.dom.Paper.text(function (e) {
                        for (var i = 0; i < n.length; i++)
                          (f = n[i]),
                            d &&
                              (f = t.getTextBasedOnMaxWidth(
                                nJ({ text: n[i] }, x)
                              )),
                            0 === i ? e.tspan(f) : e.tspan(f).newLine();
                      }))
                    : (d &&
                        (f = this.getTextBasedOnMaxWidth(nJ({ text: n }, x))),
                      (m =
                        void 0 === g || g
                          ? p.globals.dom.Paper.plain(n)
                          : p.globals.dom.Paper.text(function (e) {
                              return e.tspan(f);
                            }))),
                  m.attr({
                    x: i,
                    y: a,
                    "text-anchor": s,
                    "dominant-baseline": "auto",
                    "font-size": o,
                    "font-family": r,
                    "font-weight": l,
                    fill: c,
                    class: "apexcharts-text " + (void 0 === u ? "" : u)
                  }),
                  (m.node.style.fontFamily = r),
                  (m.node.style.opacity = h),
                  m
                );
              }
            },
            {
              key: "drawMarker",
              value: function (e, t, i) {
                e = e || 0;
                var a = i.pSize || 0,
                  n = null;
                if ("square" === i.shape || "rect" === i.shape) {
                  var s = void 0 === i.pRadius ? a / 2 : i.pRadius;
                  (null !== t && a) || ((a = 0), (s = 0));
                  var o = 1.2 * a + s,
                    r = this.drawRect(o, o, o, o, s);
                  r.attr({
                    x: e - o / 2,
                    y: t - o / 2,
                    cx: e,
                    cy: t,
                    class: i.class ? i.class : "",
                    fill: i.pointFillColor,
                    "fill-opacity": i.pointFillOpacity ? i.pointFillOpacity : 1,
                    stroke: i.pointStrokeColor,
                    "stroke-width": i.pointStrokeWidth ? i.pointStrokeWidth : 0,
                    "stroke-opacity": i.pointStrokeOpacity
                      ? i.pointStrokeOpacity
                      : 1
                  }),
                    (n = r);
                } else
                  ("circle" !== i.shape && i.shape) ||
                    (st.isNumber(t) || ((a = 0), (t = 0)),
                    (n = this.drawCircle(a, {
                      cx: e,
                      cy: t,
                      class: i.class ? i.class : "",
                      stroke: i.pointStrokeColor,
                      fill: i.pointFillColor,
                      "fill-opacity": i.pointFillOpacity
                        ? i.pointFillOpacity
                        : 1,
                      "stroke-width": i.pointStrokeWidth
                        ? i.pointStrokeWidth
                        : 0,
                      "stroke-opacity": i.pointStrokeOpacity
                        ? i.pointStrokeOpacity
                        : 1
                    })));
                return n;
              }
            },
            {
              key: "pathMouseEnter",
              value: function (e, t) {
                var i = this.w,
                  a = new sa(this.ctx),
                  n = parseInt(e.node.getAttribute("index"), 10),
                  s = parseInt(e.node.getAttribute("j"), 10);
                if (
                  ("function" ==
                    typeof i.config.chart.events.dataPointMouseEnter &&
                    i.config.chart.events.dataPointMouseEnter(t, this.ctx, {
                      seriesIndex: n,
                      dataPointIndex: s,
                      w: i
                    }),
                  this.ctx.events.fireEvent("dataPointMouseEnter", [
                    t,
                    this.ctx,
                    { seriesIndex: n, dataPointIndex: s, w: i }
                  ]),
                  ("none" === i.config.states.active.filter.type ||
                    "true" !== e.node.getAttribute("selected")) &&
                    "none" !== i.config.states.hover.filter.type &&
                    !i.globals.isTouchDevice)
                ) {
                  var o = i.config.states.hover.filter;
                  a.applyFilter(e, n, o.type, o.value);
                }
              }
            },
            {
              key: "pathMouseLeave",
              value: function (e, t) {
                var i = this.w,
                  a = new sa(this.ctx),
                  n = parseInt(e.node.getAttribute("index"), 10),
                  s = parseInt(e.node.getAttribute("j"), 10);
                "function" ==
                  typeof i.config.chart.events.dataPointMouseLeave &&
                  i.config.chart.events.dataPointMouseLeave(t, this.ctx, {
                    seriesIndex: n,
                    dataPointIndex: s,
                    w: i
                  }),
                  this.ctx.events.fireEvent("dataPointMouseLeave", [
                    t,
                    this.ctx,
                    { seriesIndex: n, dataPointIndex: s, w: i }
                  ]),
                  ("none" !== i.config.states.active.filter.type &&
                    "true" === e.node.getAttribute("selected")) ||
                    ("none" !== i.config.states.hover.filter.type &&
                      a.getDefaultFilter(e, n));
              }
            },
            {
              key: "pathMouseDown",
              value: function (e, t) {
                var i = this.w,
                  a = new sa(this.ctx),
                  n = parseInt(e.node.getAttribute("index"), 10),
                  s = parseInt(e.node.getAttribute("j"), 10),
                  o = "false";
                if ("true" === e.node.getAttribute("selected")) {
                  if (
                    (e.node.setAttribute("selected", "false"),
                    i.globals.selectedDataPoints[n].indexOf(s) > -1)
                  ) {
                    var r = i.globals.selectedDataPoints[n].indexOf(s);
                    i.globals.selectedDataPoints[n].splice(r, 1);
                  }
                } else {
                  if (
                    !i.config.states.active.allowMultipleDataPointsSelection &&
                    i.globals.selectedDataPoints.length > 0
                  ) {
                    i.globals.selectedDataPoints = [];
                    var l = i.globals.dom.Paper.select(
                        ".apexcharts-series path"
                      ).members,
                      c = i.globals.dom.Paper.select(
                        ".apexcharts-series circle, .apexcharts-series rect"
                      ).members,
                      h = function (e) {
                        Array.prototype.forEach.call(e, function (e) {
                          e.node.setAttribute("selected", "false"),
                            a.getDefaultFilter(e, n);
                        });
                      };
                    h(l), h(c);
                  }
                  e.node.setAttribute("selected", "true"),
                    (o = "true"),
                    void 0 === i.globals.selectedDataPoints[n] &&
                      (i.globals.selectedDataPoints[n] = []),
                    i.globals.selectedDataPoints[n].push(s);
                }
                if ("true" === o) {
                  var d = i.config.states.active.filter;
                  if ("none" !== d) a.applyFilter(e, n, d.type, d.value);
                  else if (
                    "none" !== i.config.states.hover.filter &&
                    !i.globals.isTouchDevice
                  ) {
                    var u = i.config.states.hover.filter;
                    a.applyFilter(e, n, u.type, u.value);
                  }
                } else
                  "none" !== i.config.states.active.filter.type &&
                    ("none" === i.config.states.hover.filter.type ||
                    i.globals.isTouchDevice
                      ? a.getDefaultFilter(e, n)
                      : ((u = i.config.states.hover.filter),
                        a.applyFilter(e, n, u.type, u.value)));
                "function" == typeof i.config.chart.events.dataPointSelection &&
                  i.config.chart.events.dataPointSelection(t, this.ctx, {
                    selectedDataPoints: i.globals.selectedDataPoints,
                    seriesIndex: n,
                    dataPointIndex: s,
                    w: i
                  }),
                  t &&
                    this.ctx.events.fireEvent("dataPointSelection", [
                      t,
                      this.ctx,
                      {
                        selectedDataPoints: i.globals.selectedDataPoints,
                        seriesIndex: n,
                        dataPointIndex: s,
                        w: i
                      }
                    ]);
              }
            },
            {
              key: "rotateAroundCenter",
              value: function (e) {
                var t = {};
                return (
                  e && "function" == typeof e.getBBox && (t = e.getBBox()),
                  { x: t.x + t.width / 2, y: t.y + t.height / 2 }
                );
              }
            },
            {
              key: "getTextRects",
              value: function (e, t, i, a) {
                var n =
                    !(arguments.length > 4 && void 0 !== arguments[4]) ||
                    arguments[4],
                  s = this.w,
                  o = this.drawText({
                    x: -200,
                    y: -200,
                    text: e,
                    textAnchor: "start",
                    fontSize: t,
                    fontFamily: i,
                    foreColor: "#fff",
                    opacity: 0
                  });
                a && o.attr("transform", a), s.globals.dom.Paper.add(o);
                var r = o.bbox();
                return (
                  n || (r = o.node.getBoundingClientRect()),
                  o.remove(),
                  { width: r.width, height: r.height }
                );
              }
            },
            {
              key: "placeTextWithEllipsis",
              value: function (e, t, i) {
                if (
                  "function" == typeof e.getComputedTextLength &&
                  ((e.textContent = t),
                  t.length > 0 && e.getComputedTextLength() >= i / 1.1)
                ) {
                  for (var a = t.length - 3; a > 0; a -= 3)
                    if (e.getSubStringLength(0, a) <= i / 1.1)
                      return void (e.textContent = t.substring(0, a) + "...");
                  e.textContent = ".";
                }
              }
            }
          ],
          [
            {
              key: "setAttrs",
              value: function (e, t) {
                for (var i in t) t.hasOwnProperty(i) && e.setAttribute(i, t[i]);
              }
            }
          ]
        ),
        e
      );
    })(),
    ss = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(
          e,
          [
            {
              key: "getStackedSeriesTotals",
              value: function () {
                var e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : [],
                  t = this.w,
                  i = [];
                if (0 === t.globals.series.length) return i;
                for (
                  var a = 0;
                  a < t.globals.series[t.globals.maxValsInArrayIndex].length;
                  a++
                ) {
                  for (var n = 0, s = 0; s < t.globals.series.length; s++)
                    void 0 !== t.globals.series[s][a] &&
                      -1 === e.indexOf(s) &&
                      (n += t.globals.series[s][a]);
                  i.push(n);
                }
                return i;
              }
            },
            {
              key: "getSeriesTotalByIndex",
              value: function () {
                var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : null;
                return null === e
                  ? this.w.config.series.reduce(function (e, t) {
                      return e + t;
                    }, 0)
                  : this.w.globals.series[e].reduce(function (e, t) {
                      return e + t;
                    }, 0);
              }
            },
            {
              key: "isSeriesNull",
              value: function () {
                var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : null;
                return (
                  0 ===
                  (null === e
                    ? this.w.config.series.filter(function (e) {
                        return null !== e;
                      })
                    : this.w.config.series[e].data.filter(function (e) {
                        return null !== e;
                      })
                  ).length
                );
              }
            },
            {
              key: "seriesHaveSameValues",
              value: function (e) {
                return this.w.globals.series[e].every(function (e, t, i) {
                  return e === i[0];
                });
              }
            },
            {
              key: "getCategoryLabels",
              value: function (e) {
                var t = this.w,
                  i = e.slice();
                return (
                  t.config.xaxis.convertedCatToNumeric &&
                    (i = e.map(function (e, i) {
                      return t.config.xaxis.labels.formatter(
                        e - t.globals.minX + 1
                      );
                    })),
                  i
                );
              }
            },
            {
              key: "getLargestSeries",
              value: function () {
                var e = this.w;
                e.globals.maxValsInArrayIndex = e.globals.series
                  .map(function (e) {
                    return e.length;
                  })
                  .indexOf(
                    Math.max.apply(
                      Math,
                      e.globals.series.map(function (e) {
                        return e.length;
                      })
                    )
                  );
              }
            },
            {
              key: "getLargestMarkerSize",
              value: function () {
                var e = this.w,
                  t = 0;
                return (
                  e.globals.markers.size.forEach(function (e) {
                    t = Math.max(t, e);
                  }),
                  e.config.markers.discrete &&
                    e.config.markers.discrete.length &&
                    e.config.markers.discrete.forEach(function (e) {
                      t = Math.max(t, e.size);
                    }),
                  t > 0 && (t += e.config.markers.hover.sizeOffset + 1),
                  (e.globals.markers.largestSize = t),
                  t
                );
              }
            },
            {
              key: "getSeriesTotals",
              value: function () {
                var e = this.w;
                e.globals.seriesTotals = e.globals.series.map(function (e, t) {
                  var i = 0;
                  if (Array.isArray(e))
                    for (var a = 0; a < e.length; a++) i += e[a];
                  else i += e;
                  return i;
                });
              }
            },
            {
              key: "getSeriesTotalsXRange",
              value: function (e, t) {
                var i = this.w;
                return i.globals.series.map(function (a, n) {
                  for (var s = 0, o = 0; o < a.length; o++)
                    i.globals.seriesX[n][o] > e &&
                      i.globals.seriesX[n][o] < t &&
                      (s += a[o]);
                  return s;
                });
              }
            },
            {
              key: "getPercentSeries",
              value: function () {
                var e = this.w;
                e.globals.seriesPercent = e.globals.series.map(function (t, i) {
                  var a = [];
                  if (Array.isArray(t))
                    for (var n = 0; n < t.length; n++) {
                      var s = e.globals.stackedSeriesTotals[n],
                        o = 0;
                      s && (o = (100 * t[n]) / s), a.push(o);
                    }
                  else {
                    var r =
                      (100 * t) /
                      e.globals.seriesTotals.reduce(function (e, t) {
                        return e + t;
                      }, 0);
                    a.push(r);
                  }
                  return a;
                });
              }
            },
            {
              key: "getCalculatedRatios",
              value: function () {
                var e,
                  t,
                  i,
                  a,
                  n = this.w.globals,
                  s = [],
                  o = 0,
                  r = [],
                  l = 0.1,
                  c = 0;
                if (((n.yRange = []), n.isMultipleYAxis))
                  for (var h = 0; h < n.minYArr.length; h++)
                    n.yRange.push(Math.abs(n.minYArr[h] - n.maxYArr[h])),
                      r.push(0);
                else n.yRange.push(Math.abs(n.minY - n.maxY));
                (n.xRange = Math.abs(n.maxX - n.minX)),
                  (n.zRange = Math.abs(n.maxZ - n.minZ));
                for (var d = 0; d < n.yRange.length; d++)
                  s.push(n.yRange[d] / n.gridHeight);
                if (
                  ((t = n.xRange / n.gridWidth),
                  (i = Math.abs(n.initialMaxX - n.initialMinX) / n.gridWidth),
                  (e = n.yRange / n.gridWidth),
                  (a = n.xRange / n.gridHeight),
                  (o = (n.zRange / n.gridHeight) * 16) || (o = 1),
                  n.minY !== Number.MIN_VALUE &&
                    0 !== Math.abs(n.minY) &&
                    (n.hasNegs = !0),
                  n.isMultipleYAxis)
                ) {
                  r = [];
                  for (var u = 0; u < s.length; u++)
                    r.push(-n.minYArr[u] / s[u]);
                } else
                  r.push(-n.minY / s[0]),
                    n.minY !== Number.MIN_VALUE &&
                      0 !== Math.abs(n.minY) &&
                      ((l = -n.minY / e), (c = n.minX / t));
                return {
                  yRatio: s,
                  invertedYRatio: e,
                  zRatio: o,
                  xRatio: t,
                  initialXRatio: i,
                  invertedXRatio: a,
                  baseLineInvertedY: l,
                  baseLineY: r,
                  baseLineX: c
                };
              }
            },
            {
              key: "getLogSeries",
              value: function (e) {
                var t = this,
                  i = this.w;
                return (
                  (i.globals.seriesLog = e.map(function (e, a) {
                    return i.config.yaxis[a] && i.config.yaxis[a].logarithmic
                      ? e.map(function (e) {
                          return null === e
                            ? null
                            : t.getLogVal(i.config.yaxis[a].logBase, e, a);
                        })
                      : e;
                  })),
                  i.globals.invalidLogScale ? e : i.globals.seriesLog
                );
              }
            },
            {
              key: "getBaseLog",
              value: function (e, t) {
                return Math.log(t) / Math.log(e);
              }
            },
            {
              key: "getLogVal",
              value: function (e, t, i) {
                if (0 === t) return 0;
                var a = this.w,
                  n =
                    0 === a.globals.minYArr[i]
                      ? -1
                      : this.getBaseLog(e, a.globals.minYArr[i]),
                  s =
                    (0 === a.globals.maxYArr[i]
                      ? 0
                      : this.getBaseLog(e, a.globals.maxYArr[i])) - n;
                return t < 1 ? t / s : (this.getBaseLog(e, t) - n) / s;
              }
            },
            {
              key: "getLogYRatios",
              value: function (e) {
                var t = this,
                  i = this.w,
                  a = this.w.globals;
                return (
                  (a.yLogRatio = e.slice()),
                  (a.logYRange = a.yRange.map(function (e, n) {
                    if (i.config.yaxis[n] && t.w.config.yaxis[n].logarithmic) {
                      var s,
                        o = -Number.MAX_VALUE,
                        r = Number.MIN_VALUE;
                      return (
                        a.seriesLog.forEach(function (e, t) {
                          e.forEach(function (e) {
                            i.config.yaxis[t] &&
                              i.config.yaxis[t].logarithmic &&
                              ((o = Math.max(e, o)), (r = Math.min(e, r)));
                          });
                        }),
                        (s = Math.pow(
                          a.yRange[n],
                          Math.abs(r - o) / a.yRange[n]
                        )),
                        (a.yLogRatio[n] = s / a.gridHeight),
                        s
                      );
                    }
                  })),
                  a.invalidLogScale ? e.slice() : a.yLogRatio
                );
              }
            }
          ],
          [
            {
              key: "checkComboSeries",
              value: function (e) {
                var t = !1,
                  i = 0,
                  a = 0;
                return (
                  e.length &&
                    void 0 !== e[0].type &&
                    e.forEach(function (e) {
                      ("bar" !== e.type &&
                        "column" !== e.type &&
                        "candlestick" !== e.type &&
                        "boxPlot" !== e.type) ||
                        i++,
                        void 0 !== e.type && a++;
                    }),
                  a > 0 && (t = !0),
                  { comboBarCount: i, comboCharts: t }
                );
              }
            },
            {
              key: "extendArrayProps",
              value: function (e, t, i) {
                return (
                  t.yaxis && (t = e.extendYAxis(t, i)),
                  t.annotations &&
                    (t.annotations.yaxis && (t = e.extendYAxisAnnotations(t)),
                    t.annotations.xaxis && (t = e.extendXAxisAnnotations(t)),
                    t.annotations.points && (t = e.extendPointAnnotations(t))),
                  t
                );
              }
            }
          ]
        ),
        e
      );
    })(),
    so = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.annoCtx = t);
      }
      return (
        n1(e, [
          {
            key: "setOrientations",
            value: function (e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null,
                i = this.w;
              if ("vertical" === e.label.orientation) {
                var a = i.globals.dom.baseEl.querySelector(
                  ".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='".concat(
                    null !== t ? t : 0,
                    "']"
                  )
                );
                if (null !== a) {
                  var n = a.getBoundingClientRect();
                  a.setAttribute(
                    "x",
                    parseFloat(a.getAttribute("x")) - n.height + 4
                  ),
                    "top" === e.label.position
                      ? a.setAttribute(
                          "y",
                          parseFloat(a.getAttribute("y")) + n.width
                        )
                      : a.setAttribute(
                          "y",
                          parseFloat(a.getAttribute("y")) - n.width
                        );
                  var s = this.annoCtx.graphics.rotateAroundCenter(a),
                    o = s.x,
                    r = s.y;
                  a.setAttribute(
                    "transform",
                    "rotate(-90 ".concat(o, " ").concat(r, ")")
                  );
                }
              }
            }
          },
          {
            key: "addBackgroundToAnno",
            value: function (e, t) {
              var i = this.w;
              if (
                !e ||
                void 0 === t.label.text ||
                (void 0 !== t.label.text && !String(t.label.text).trim())
              )
                return null;
              var a = i.globals.dom.baseEl
                  .querySelector(".apexcharts-grid")
                  .getBoundingClientRect(),
                n = e.getBoundingClientRect(),
                s = t.label.style.padding.left,
                o = t.label.style.padding.right,
                r = t.label.style.padding.top,
                l = t.label.style.padding.bottom;
              "vertical" === t.label.orientation &&
                ((r = t.label.style.padding.left),
                (l = t.label.style.padding.right),
                (s = t.label.style.padding.top),
                (o = t.label.style.padding.bottom));
              var c = n.left - a.left - s,
                h = n.top - a.top - r,
                d = this.annoCtx.graphics.drawRect(
                  c - i.globals.barPadForNumericAxis,
                  h,
                  n.width + s + o,
                  n.height + r + l,
                  t.label.borderRadius,
                  t.label.style.background,
                  1,
                  t.label.borderWidth,
                  t.label.borderColor,
                  0
                );
              return t.id && d.node.classList.add(t.id), d;
            }
          },
          {
            key: "annotationsBackground",
            value: function () {
              var e = this,
                t = this.w,
                i = function (i, a, n) {
                  var s = t.globals.dom.baseEl.querySelector(
                    ".apexcharts-"
                      .concat(n, "-annotations .apexcharts-")
                      .concat(n, "-annotation-label[rel='")
                      .concat(a, "']")
                  );
                  if (s) {
                    var o = s.parentNode,
                      r = e.addBackgroundToAnno(s, i);
                    r &&
                      (o.insertBefore(r.node, s),
                      i.label.mouseEnter &&
                        r.node.addEventListener(
                          "mouseenter",
                          i.label.mouseEnter.bind(e, i)
                        ),
                      i.label.mouseLeave &&
                        r.node.addEventListener(
                          "mouseleave",
                          i.label.mouseLeave.bind(e, i)
                        ),
                      i.label.click &&
                        r.node.addEventListener(
                          "click",
                          i.label.click.bind(e, i)
                        ));
                  }
                };
              t.config.annotations.xaxis.map(function (e, t) {
                i(e, t, "xaxis");
              }),
                t.config.annotations.yaxis.map(function (e, t) {
                  i(e, t, "yaxis");
                }),
                t.config.annotations.points.map(function (e, t) {
                  i(e, t, "point");
                });
            }
          },
          {
            key: "getY1Y2",
            value: function (e, t) {
              var i,
                a,
                n = "y1" === e ? t.y : t.y2,
                s = this.w;
              if (this.annoCtx.invertAxis) {
                var o = s.globals.labels.indexOf(n);
                s.config.xaxis.convertedCatToNumeric &&
                  (o = s.globals.categoryLabels.indexOf(n));
                var r = s.globals.dom.baseEl.querySelector(
                  ".apexcharts-yaxis-texts-g text:nth-child(" + (o + 1) + ")"
                );
                r && (a = parseFloat(r.getAttribute("y")));
              } else
                (i = s.config.yaxis[t.yAxisIndex].logarithmic
                  ? (n = new ss(this.annoCtx.ctx).getLogVal(n, t.yAxisIndex)) /
                    s.globals.yLogRatio[t.yAxisIndex]
                  : (n - s.globals.minYArr[t.yAxisIndex]) /
                    (s.globals.yRange[t.yAxisIndex] / s.globals.gridHeight)),
                  (a = s.globals.gridHeight - i),
                  t.marker && (void 0 === t.y || null === t.y) && (a = 0),
                  s.config.yaxis[t.yAxisIndex] &&
                    s.config.yaxis[t.yAxisIndex].reversed &&
                    (a = i);
              return (
                "string" == typeof n &&
                  n.indexOf("px") > -1 &&
                  (a = parseFloat(n)),
                a
              );
            }
          },
          {
            key: "getX1X2",
            value: function (e, t) {
              var i = this.w,
                a = this.annoCtx.invertAxis ? i.globals.minY : i.globals.minX,
                n = this.annoCtx.invertAxis ? i.globals.maxY : i.globals.maxX,
                s = this.annoCtx.invertAxis
                  ? i.globals.yRange[0]
                  : i.globals.xRange,
                o = (t.x - a) / (s / i.globals.gridWidth);
              this.annoCtx.inversedReversedAxis &&
                (o = (n - t.x) / (s / i.globals.gridWidth)),
                ("category" !== i.config.xaxis.type &&
                  !i.config.xaxis.convertedCatToNumeric) ||
                  this.annoCtx.invertAxis ||
                  i.globals.dataFormatXNumeric ||
                  (o = this.getStringX(t.x));
              var r = (t.x2 - a) / (s / i.globals.gridWidth);
              return (
                this.annoCtx.inversedReversedAxis &&
                  (r = (n - t.x2) / (s / i.globals.gridWidth)),
                ("category" !== i.config.xaxis.type &&
                  !i.config.xaxis.convertedCatToNumeric) ||
                  this.annoCtx.invertAxis ||
                  i.globals.dataFormatXNumeric ||
                  (r = this.getStringX(t.x2)),
                (void 0 === t.x || null === t.x) &&
                  t.marker &&
                  (o = i.globals.gridWidth),
                "x1" === e &&
                  "string" == typeof t.x &&
                  t.x.indexOf("px") > -1 &&
                  (o = parseFloat(t.x)),
                "x2" === e &&
                  "string" == typeof t.x2 &&
                  t.x2.indexOf("px") > -1 &&
                  (r = parseFloat(t.x2)),
                "x1" === e ? o : r
              );
            }
          },
          {
            key: "getStringX",
            value: function (e) {
              var t = this.w,
                i = e;
              t.config.xaxis.convertedCatToNumeric &&
                t.globals.categoryLabels.length &&
                (e = t.globals.categoryLabels.indexOf(e) + 1);
              var a = t.globals.labels.indexOf(e),
                n = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-xaxis-texts-g text:nth-child(" + (a + 1) + ")"
                );
              return n && (i = parseFloat(n.getAttribute("x"))), i;
            }
          }
        ]),
        e
      );
    })(),
    sr = (function () {
      function e(t) {
        nQ(this, e),
          (this.w = t.w),
          (this.annoCtx = t),
          (this.invertAxis = this.annoCtx.invertAxis),
          (this.helpers = new so(this.annoCtx));
      }
      return (
        n1(e, [
          {
            key: "addXaxisAnnotation",
            value: function (e, t, i) {
              var a,
                n = this.w,
                s = this.helpers.getX1X2("x1", e),
                o = e.label.text,
                r = e.strokeDashArray;
              if (st.isNumber(s)) {
                if (null === e.x2 || void 0 === e.x2) {
                  var l = this.annoCtx.graphics.drawLine(
                    s + e.offsetX,
                    0 + e.offsetY,
                    s + e.offsetX,
                    n.globals.gridHeight + e.offsetY,
                    e.borderColor,
                    r,
                    e.borderWidth
                  );
                  t.appendChild(l.node), e.id && l.node.classList.add(e.id);
                } else {
                  if ((a = this.helpers.getX1X2("x2", e)) < s) {
                    var c = s;
                    (s = a), (a = c);
                  }
                  var h = this.annoCtx.graphics.drawRect(
                    s + e.offsetX,
                    0 + e.offsetY,
                    a - s,
                    n.globals.gridHeight + e.offsetY,
                    0,
                    e.fillColor,
                    e.opacity,
                    1,
                    e.borderColor,
                    r
                  );
                  h.node.classList.add("apexcharts-annotation-rect"),
                    h.attr(
                      "clip-path",
                      "url(#gridRectMask".concat(n.globals.cuid, ")")
                    ),
                    t.appendChild(h.node),
                    e.id && h.node.classList.add(e.id);
                }
                var d = this.annoCtx.graphics.getTextRects(
                    o,
                    parseFloat(e.label.style.fontSize)
                  ),
                  u =
                    "top" === e.label.position
                      ? 4
                      : "center" === e.label.position
                      ? n.globals.gridHeight / 2 +
                        ("vertical" === e.label.orientation ? d.width / 2 : 0)
                      : n.globals.gridHeight,
                  g = this.annoCtx.graphics.drawText({
                    x: s + e.label.offsetX,
                    y:
                      u +
                      e.label.offsetY -
                      ("vertical" === e.label.orientation
                        ? "top" === e.label.position
                          ? d.width / 2 - 12
                          : -d.width / 2
                        : 0),
                    text: o,
                    textAnchor: e.label.textAnchor,
                    fontSize: e.label.style.fontSize,
                    fontFamily: e.label.style.fontFamily,
                    fontWeight: e.label.style.fontWeight,
                    foreColor: e.label.style.color,
                    cssClass: "apexcharts-xaxis-annotation-label "
                      .concat(e.label.style.cssClass, " ")
                      .concat(e.id ? e.id : "")
                  });
                g.attr({ rel: i }),
                  t.appendChild(g.node),
                  this.annoCtx.helpers.setOrientations(e, i);
              }
            }
          },
          {
            key: "drawXAxisAnnotations",
            value: function () {
              var e = this,
                t = this.w,
                i = this.annoCtx.graphics.group({
                  class: "apexcharts-xaxis-annotations"
                });
              return (
                t.config.annotations.xaxis.map(function (t, a) {
                  e.addXaxisAnnotation(t, i.node, a);
                }),
                i
              );
            }
          }
        ]),
        e
      );
    })(),
    sl = (function () {
      function e(t) {
        nQ(this, e),
          (this.w = t.w),
          (this.annoCtx = t),
          (this.helpers = new so(this.annoCtx));
      }
      return (
        n1(e, [
          {
            key: "addYaxisAnnotation",
            value: function (e, t, i) {
              var a,
                n = this.w,
                s = e.strokeDashArray,
                o = this.helpers.getY1Y2("y1", e),
                r = e.label.text;
              if (null === e.y2 || void 0 === e.y2) {
                var l = this.annoCtx.graphics.drawLine(
                  0 + e.offsetX,
                  o + e.offsetY,
                  this._getYAxisAnnotationWidth(e),
                  o + e.offsetY,
                  e.borderColor,
                  s,
                  e.borderWidth
                );
                t.appendChild(l.node), e.id && l.node.classList.add(e.id);
              } else {
                if ((a = this.helpers.getY1Y2("y2", e)) > o) {
                  var c = o;
                  (o = a), (a = c);
                }
                var h = this.annoCtx.graphics.drawRect(
                  0 + e.offsetX,
                  a + e.offsetY,
                  this._getYAxisAnnotationWidth(e),
                  o - a,
                  0,
                  e.fillColor,
                  e.opacity,
                  1,
                  e.borderColor,
                  s
                );
                h.node.classList.add("apexcharts-annotation-rect"),
                  h.attr(
                    "clip-path",
                    "url(#gridRectMask".concat(n.globals.cuid, ")")
                  ),
                  t.appendChild(h.node),
                  e.id && h.node.classList.add(e.id);
              }
              var d =
                  "right" === e.label.position
                    ? n.globals.gridWidth
                    : "center" === e.label.position
                    ? n.globals.gridWidth / 2
                    : 0,
                u = this.annoCtx.graphics.drawText({
                  x: d + e.label.offsetX,
                  y: (null != a ? a : o) + e.label.offsetY - 3,
                  text: r,
                  textAnchor: e.label.textAnchor,
                  fontSize: e.label.style.fontSize,
                  fontFamily: e.label.style.fontFamily,
                  fontWeight: e.label.style.fontWeight,
                  foreColor: e.label.style.color,
                  cssClass: "apexcharts-yaxis-annotation-label "
                    .concat(e.label.style.cssClass, " ")
                    .concat(e.id ? e.id : "")
                });
              u.attr({ rel: i }), t.appendChild(u.node);
            }
          },
          {
            key: "_getYAxisAnnotationWidth",
            value: function (e) {
              var t = this.w;
              return (
                t.globals.gridWidth,
                (e.width.indexOf("%") > -1
                  ? (t.globals.gridWidth * parseInt(e.width, 10)) / 100
                  : parseInt(e.width, 10)) + e.offsetX
              );
            }
          },
          {
            key: "drawYAxisAnnotations",
            value: function () {
              var e = this,
                t = this.w,
                i = this.annoCtx.graphics.group({
                  class: "apexcharts-yaxis-annotations"
                });
              return (
                t.config.annotations.yaxis.map(function (t, a) {
                  e.addYaxisAnnotation(t, i.node, a);
                }),
                i
              );
            }
          }
        ]),
        e
      );
    })(),
    sc = (function () {
      function e(t) {
        nQ(this, e),
          (this.w = t.w),
          (this.annoCtx = t),
          (this.helpers = new so(this.annoCtx));
      }
      return (
        n1(e, [
          {
            key: "addPointAnnotation",
            value: function (e, t, i) {
              this.w;
              var a = this.helpers.getX1X2("x1", e),
                n = this.helpers.getY1Y2("y1", e);
              if (st.isNumber(a)) {
                var s = {
                    pSize: e.marker.size,
                    pointStrokeWidth: e.marker.strokeWidth,
                    pointFillColor: e.marker.fillColor,
                    pointStrokeColor: e.marker.strokeColor,
                    shape: e.marker.shape,
                    pRadius: e.marker.radius,
                    class: "apexcharts-point-annotation-marker "
                      .concat(e.marker.cssClass, " ")
                      .concat(e.id ? e.id : "")
                  },
                  o = this.annoCtx.graphics.drawMarker(
                    a + e.marker.offsetX,
                    n + e.marker.offsetY,
                    s
                  );
                t.appendChild(o.node);
                var r = e.label.text ? e.label.text : "",
                  l = this.annoCtx.graphics.drawText({
                    x: a + e.label.offsetX,
                    y:
                      n +
                      e.label.offsetY -
                      e.marker.size -
                      parseFloat(e.label.style.fontSize) / 1.6,
                    text: r,
                    textAnchor: e.label.textAnchor,
                    fontSize: e.label.style.fontSize,
                    fontFamily: e.label.style.fontFamily,
                    fontWeight: e.label.style.fontWeight,
                    foreColor: e.label.style.color,
                    cssClass: "apexcharts-point-annotation-label "
                      .concat(e.label.style.cssClass, " ")
                      .concat(e.id ? e.id : "")
                  });
                if (
                  (l.attr({ rel: i }), t.appendChild(l.node), e.customSVG.SVG)
                ) {
                  var c = this.annoCtx.graphics.group({
                    class:
                      "apexcharts-point-annotations-custom-svg " +
                      e.customSVG.cssClass
                  });
                  c.attr({
                    transform: "translate("
                      .concat(a + e.customSVG.offsetX, ", ")
                      .concat(n + e.customSVG.offsetY, ")")
                  }),
                    (c.node.innerHTML = e.customSVG.SVG),
                    t.appendChild(c.node);
                }
                if (e.image.path) {
                  var h = e.image.width ? e.image.width : 20,
                    d = e.image.height ? e.image.height : 20;
                  o = this.annoCtx.addImage({
                    x: a + e.image.offsetX - h / 2,
                    y: n + e.image.offsetY - d / 2,
                    width: h,
                    height: d,
                    path: e.image.path,
                    appendTo: ".apexcharts-point-annotations"
                  });
                }
                e.mouseEnter &&
                  o.node.addEventListener(
                    "mouseenter",
                    e.mouseEnter.bind(this, e)
                  ),
                  e.mouseLeave &&
                    o.node.addEventListener(
                      "mouseleave",
                      e.mouseLeave.bind(this, e)
                    ),
                  e.click &&
                    o.node.addEventListener("click", e.click.bind(this, e));
              }
            }
          },
          {
            key: "drawPointAnnotations",
            value: function () {
              var e = this,
                t = this.w,
                i = this.annoCtx.graphics.group({
                  class: "apexcharts-point-annotations"
                });
              return (
                t.config.annotations.points.map(function (t, a) {
                  e.addPointAnnotation(t, i.node, a);
                }),
                i
              );
            }
          }
        ]),
        e
      );
    })(),
    sh = {
      name: "en",
      options: {
        months: [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December"
        ],
        shortMonths: [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec"
        ],
        days: [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ],
        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        toolbar: {
          exportToSVG: "Download SVG",
          exportToPNG: "Download PNG",
          exportToCSV: "Download CSV",
          menu: "Menu",
          selection: "Selection",
          selectionZoom: "Selection Zoom",
          zoomIn: "Zoom In",
          zoomOut: "Zoom Out",
          pan: "Panning",
          reset: "Reset Zoom"
        }
      }
    },
    sd = (function () {
      function e() {
        nQ(this, e),
          (this.yAxis = {
            show: !0,
            showAlways: !1,
            showForNullSeries: !0,
            seriesName: void 0,
            opposite: !1,
            reversed: !1,
            logarithmic: !1,
            logBase: 10,
            tickAmount: void 0,
            forceNiceScale: !1,
            max: void 0,
            min: void 0,
            floating: !1,
            decimalsInFloat: void 0,
            labels: {
              show: !0,
              minWidth: 0,
              maxWidth: 160,
              offsetX: 0,
              offsetY: 0,
              align: void 0,
              rotate: 0,
              padding: 20,
              style: {
                colors: [],
                fontSize: "11px",
                fontWeight: 400,
                fontFamily: void 0,
                cssClass: ""
              },
              formatter: void 0
            },
            axisBorder: {
              show: !1,
              color: "#e0e0e0",
              width: 1,
              offsetX: 0,
              offsetY: 0
            },
            axisTicks: {
              show: !1,
              color: "#e0e0e0",
              width: 6,
              offsetX: 0,
              offsetY: 0
            },
            title: {
              text: void 0,
              rotate: -90,
              offsetY: 0,
              offsetX: 0,
              style: {
                color: void 0,
                fontSize: "11px",
                fontWeight: 900,
                fontFamily: void 0,
                cssClass: ""
              }
            },
            tooltip: { enabled: !1, offsetX: 0 },
            crosshairs: {
              show: !0,
              position: "front",
              stroke: { color: "#b6b6b6", width: 1, dashArray: 0 }
            }
          }),
          (this.pointAnnotation = {
            id: void 0,
            x: 0,
            y: null,
            yAxisIndex: 0,
            seriesIndex: 0,
            mouseEnter: void 0,
            mouseLeave: void 0,
            click: void 0,
            marker: {
              size: 4,
              fillColor: "#fff",
              strokeWidth: 2,
              strokeColor: "#333",
              shape: "circle",
              offsetX: 0,
              offsetY: 0,
              radius: 2,
              cssClass: ""
            },
            label: {
              borderColor: "#c2c2c2",
              borderWidth: 1,
              borderRadius: 2,
              text: void 0,
              textAnchor: "middle",
              offsetX: 0,
              offsetY: 0,
              mouseEnter: void 0,
              mouseLeave: void 0,
              click: void 0,
              style: {
                background: "#fff",
                color: void 0,
                fontSize: "11px",
                fontFamily: void 0,
                fontWeight: 400,
                cssClass: "",
                padding: { left: 5, right: 5, top: 2, bottom: 2 }
              }
            },
            customSVG: {
              SVG: void 0,
              cssClass: void 0,
              offsetX: 0,
              offsetY: 0
            },
            image: {
              path: void 0,
              width: 20,
              height: 20,
              offsetX: 0,
              offsetY: 0
            }
          }),
          (this.yAxisAnnotation = {
            id: void 0,
            y: 0,
            y2: null,
            strokeDashArray: 1,
            fillColor: "#c2c2c2",
            borderColor: "#c2c2c2",
            borderWidth: 1,
            opacity: 0.3,
            offsetX: 0,
            offsetY: 0,
            width: "100%",
            yAxisIndex: 0,
            label: {
              borderColor: "#c2c2c2",
              borderWidth: 1,
              borderRadius: 2,
              text: void 0,
              textAnchor: "end",
              position: "right",
              offsetX: 0,
              offsetY: -3,
              mouseEnter: void 0,
              mouseLeave: void 0,
              click: void 0,
              style: {
                background: "#fff",
                color: void 0,
                fontSize: "11px",
                fontFamily: void 0,
                fontWeight: 400,
                cssClass: "",
                padding: { left: 5, right: 5, top: 2, bottom: 2 }
              }
            }
          }),
          (this.xAxisAnnotation = {
            id: void 0,
            x: 0,
            x2: null,
            strokeDashArray: 1,
            fillColor: "#c2c2c2",
            borderColor: "#c2c2c2",
            borderWidth: 1,
            opacity: 0.3,
            offsetX: 0,
            offsetY: 0,
            label: {
              borderColor: "#c2c2c2",
              borderWidth: 1,
              borderRadius: 2,
              text: void 0,
              textAnchor: "middle",
              orientation: "vertical",
              position: "top",
              offsetX: 0,
              offsetY: 0,
              mouseEnter: void 0,
              mouseLeave: void 0,
              click: void 0,
              style: {
                background: "#fff",
                color: void 0,
                fontSize: "11px",
                fontFamily: void 0,
                fontWeight: 400,
                cssClass: "",
                padding: { left: 5, right: 5, top: 2, bottom: 2 }
              }
            }
          }),
          (this.text = {
            x: 0,
            y: 0,
            text: "",
            textAnchor: "start",
            foreColor: void 0,
            fontSize: "13px",
            fontFamily: void 0,
            fontWeight: 400,
            appendTo: ".apexcharts-annotations",
            backgroundColor: "transparent",
            borderColor: "#c2c2c2",
            borderRadius: 0,
            borderWidth: 0,
            paddingLeft: 4,
            paddingRight: 4,
            paddingTop: 2,
            paddingBottom: 2
          });
      }
      return (
        n1(e, [
          {
            key: "init",
            value: function () {
              return {
                annotations: {
                  yaxis: [this.yAxisAnnotation],
                  xaxis: [this.xAxisAnnotation],
                  points: [this.pointAnnotation],
                  texts: [],
                  images: [],
                  shapes: []
                },
                chart: {
                  animations: {
                    enabled: !0,
                    easing: "easeinout",
                    speed: 800,
                    animateGradually: { delay: 150, enabled: !0 },
                    dynamicAnimation: { enabled: !0, speed: 350 }
                  },
                  background: "transparent",
                  locales: [sh],
                  defaultLocale: "en",
                  dropShadow: {
                    enabled: !1,
                    enabledOnSeries: void 0,
                    top: 2,
                    left: 2,
                    blur: 4,
                    color: "#000",
                    opacity: 0.35
                  },
                  events: {
                    animationEnd: void 0,
                    beforeMount: void 0,
                    mounted: void 0,
                    updated: void 0,
                    click: void 0,
                    mouseMove: void 0,
                    mouseLeave: void 0,
                    xAxisLabelClick: void 0,
                    legendClick: void 0,
                    markerClick: void 0,
                    selection: void 0,
                    dataPointSelection: void 0,
                    dataPointMouseEnter: void 0,
                    dataPointMouseLeave: void 0,
                    beforeZoom: void 0,
                    beforeResetZoom: void 0,
                    zoomed: void 0,
                    scrolled: void 0,
                    brushScrolled: void 0
                  },
                  foreColor: "#373d3f",
                  fontFamily: "Helvetica, Arial, sans-serif",
                  height: "auto",
                  parentHeightOffset: 15,
                  redrawOnParentResize: !0,
                  redrawOnWindowResize: !0,
                  id: void 0,
                  group: void 0,
                  offsetX: 0,
                  offsetY: 0,
                  selection: {
                    enabled: !1,
                    type: "x",
                    fill: { color: "#24292e", opacity: 0.1 },
                    stroke: {
                      width: 1,
                      color: "#24292e",
                      opacity: 0.4,
                      dashArray: 3
                    },
                    xaxis: { min: void 0, max: void 0 },
                    yaxis: { min: void 0, max: void 0 }
                  },
                  sparkline: { enabled: !1 },
                  brush: {
                    enabled: !1,
                    autoScaleYaxis: !0,
                    target: void 0,
                    targets: void 0
                  },
                  stacked: !1,
                  stackType: "normal",
                  toolbar: {
                    show: !0,
                    offsetX: 0,
                    offsetY: 0,
                    tools: {
                      download: !0,
                      selection: !0,
                      zoom: !0,
                      zoomin: !0,
                      zoomout: !0,
                      pan: !0,
                      reset: !0,
                      customIcons: []
                    },
                    export: {
                      csv: {
                        filename: void 0,
                        columnDelimiter: ",",
                        headerCategory: "category",
                        headerValue: "value",
                        dateFormatter: function (e) {
                          return new Date(e).toDateString();
                        }
                      },
                      png: { filename: void 0 },
                      svg: { filename: void 0 }
                    },
                    autoSelected: "zoom"
                  },
                  type: "line",
                  width: "100%",
                  zoom: {
                    enabled: !0,
                    type: "x",
                    autoScaleYaxis: !1,
                    zoomedArea: {
                      fill: { color: "#90CAF9", opacity: 0.4 },
                      stroke: { color: "#0D47A1", opacity: 0.4, width: 1 }
                    }
                  }
                },
                plotOptions: {
                  area: { fillTo: "origin" },
                  bar: {
                    horizontal: !1,
                    columnWidth: "70%",
                    barHeight: "70%",
                    distributed: !1,
                    borderRadius: 0,
                    borderRadiusApplication: "around",
                    borderRadiusWhenStacked: "last",
                    rangeBarOverlap: !0,
                    rangeBarGroupRows: !1,
                    hideZeroBarsWhenGrouped: !1,
                    isDumbbell: !1,
                    dumbbellColors: void 0,
                    isFunnel: !1,
                    isFunnel3d: !0,
                    colors: {
                      ranges: [],
                      backgroundBarColors: [],
                      backgroundBarOpacity: 1,
                      backgroundBarRadius: 0
                    },
                    dataLabels: {
                      position: "top",
                      maxItems: 100,
                      hideOverflowingLabels: !0,
                      orientation: "horizontal",
                      total: {
                        enabled: !1,
                        formatter: void 0,
                        offsetX: 0,
                        offsetY: 0,
                        style: {
                          color: "#373d3f",
                          fontSize: "12px",
                          fontFamily: void 0,
                          fontWeight: 600
                        }
                      }
                    }
                  },
                  bubble: {
                    zScaling: !0,
                    minBubbleRadius: void 0,
                    maxBubbleRadius: void 0
                  },
                  candlestick: {
                    colors: { upward: "#00B746", downward: "#EF403C" },
                    wick: { useFillColor: !0 }
                  },
                  boxPlot: { colors: { upper: "#00E396", lower: "#008FFB" } },
                  heatmap: {
                    radius: 2,
                    enableShades: !0,
                    shadeIntensity: 0.5,
                    reverseNegativeShade: !1,
                    distributed: !1,
                    useFillColorAsStroke: !1,
                    colorScale: {
                      inverse: !1,
                      ranges: [],
                      min: void 0,
                      max: void 0
                    }
                  },
                  treemap: {
                    enableShades: !0,
                    shadeIntensity: 0.5,
                    distributed: !1,
                    reverseNegativeShade: !1,
                    useFillColorAsStroke: !1,
                    dataLabels: { format: "scale" },
                    colorScale: {
                      inverse: !1,
                      ranges: [],
                      min: void 0,
                      max: void 0
                    }
                  },
                  radialBar: {
                    inverseOrder: !1,
                    startAngle: 0,
                    endAngle: 360,
                    offsetX: 0,
                    offsetY: 0,
                    hollow: {
                      margin: 5,
                      size: "50%",
                      background: "transparent",
                      image: void 0,
                      imageWidth: 150,
                      imageHeight: 150,
                      imageOffsetX: 0,
                      imageOffsetY: 0,
                      imageClipped: !0,
                      position: "front",
                      dropShadow: {
                        enabled: !1,
                        top: 0,
                        left: 0,
                        blur: 3,
                        color: "#000",
                        opacity: 0.5
                      }
                    },
                    track: {
                      show: !0,
                      startAngle: void 0,
                      endAngle: void 0,
                      background: "#f2f2f2",
                      strokeWidth: "97%",
                      opacity: 1,
                      margin: 5,
                      dropShadow: {
                        enabled: !1,
                        top: 0,
                        left: 0,
                        blur: 3,
                        color: "#000",
                        opacity: 0.5
                      }
                    },
                    dataLabels: {
                      show: !0,
                      name: {
                        show: !0,
                        fontSize: "16px",
                        fontFamily: void 0,
                        fontWeight: 600,
                        color: void 0,
                        offsetY: 0,
                        formatter: function (e) {
                          return e;
                        }
                      },
                      value: {
                        show: !0,
                        fontSize: "14px",
                        fontFamily: void 0,
                        fontWeight: 400,
                        color: void 0,
                        offsetY: 16,
                        formatter: function (e) {
                          return e + "%";
                        }
                      },
                      total: {
                        show: !1,
                        label: "Total",
                        fontSize: "16px",
                        fontWeight: 600,
                        fontFamily: void 0,
                        color: void 0,
                        formatter: function (e) {
                          return (
                            e.globals.seriesTotals.reduce(function (e, t) {
                              return e + t;
                            }, 0) /
                              e.globals.series.length +
                            "%"
                          );
                        }
                      }
                    }
                  },
                  pie: {
                    customScale: 1,
                    offsetX: 0,
                    offsetY: 0,
                    startAngle: 0,
                    endAngle: 360,
                    expandOnClick: !0,
                    dataLabels: { offset: 0, minAngleToShowLabel: 10 },
                    donut: {
                      size: "65%",
                      background: "transparent",
                      labels: {
                        show: !1,
                        name: {
                          show: !0,
                          fontSize: "16px",
                          fontFamily: void 0,
                          fontWeight: 600,
                          color: void 0,
                          offsetY: -10,
                          formatter: function (e) {
                            return e;
                          }
                        },
                        value: {
                          show: !0,
                          fontSize: "20px",
                          fontFamily: void 0,
                          fontWeight: 400,
                          color: void 0,
                          offsetY: 10,
                          formatter: function (e) {
                            return e;
                          }
                        },
                        total: {
                          show: !1,
                          showAlways: !1,
                          label: "Total",
                          fontSize: "16px",
                          fontWeight: 400,
                          fontFamily: void 0,
                          color: void 0,
                          formatter: function (e) {
                            return e.globals.seriesTotals.reduce(function (
                              e,
                              t
                            ) {
                              return e + t;
                            },
                            0);
                          }
                        }
                      }
                    }
                  },
                  polarArea: {
                    rings: { strokeWidth: 1, strokeColor: "#e8e8e8" },
                    spokes: { strokeWidth: 1, connectorColors: "#e8e8e8" }
                  },
                  radar: {
                    size: void 0,
                    offsetX: 0,
                    offsetY: 0,
                    polygons: {
                      strokeWidth: 1,
                      strokeColors: "#e8e8e8",
                      connectorColors: "#e8e8e8",
                      fill: { colors: void 0 }
                    }
                  }
                },
                colors: void 0,
                dataLabels: {
                  enabled: !0,
                  enabledOnSeries: void 0,
                  formatter: function (e) {
                    return null !== e ? e : "";
                  },
                  textAnchor: "middle",
                  distributed: !1,
                  offsetX: 0,
                  offsetY: 0,
                  style: {
                    fontSize: "12px",
                    fontFamily: void 0,
                    fontWeight: 600,
                    colors: void 0
                  },
                  background: {
                    enabled: !0,
                    foreColor: "#fff",
                    borderRadius: 2,
                    padding: 4,
                    opacity: 0.9,
                    borderWidth: 1,
                    borderColor: "#fff",
                    dropShadow: {
                      enabled: !1,
                      top: 1,
                      left: 1,
                      blur: 1,
                      color: "#000",
                      opacity: 0.45
                    }
                  },
                  dropShadow: {
                    enabled: !1,
                    top: 1,
                    left: 1,
                    blur: 1,
                    color: "#000",
                    opacity: 0.45
                  }
                },
                fill: {
                  type: "solid",
                  colors: void 0,
                  opacity: 0.85,
                  gradient: {
                    shade: "dark",
                    type: "horizontal",
                    shadeIntensity: 0.5,
                    gradientToColors: void 0,
                    inverseColors: !0,
                    opacityFrom: 1,
                    opacityTo: 1,
                    stops: [0, 50, 100],
                    colorStops: []
                  },
                  image: { src: [], width: void 0, height: void 0 },
                  pattern: {
                    style: "squares",
                    width: 6,
                    height: 6,
                    strokeWidth: 2
                  }
                },
                forecastDataPoints: {
                  count: 0,
                  fillOpacity: 0.5,
                  strokeWidth: void 0,
                  dashArray: 4
                },
                grid: {
                  show: !0,
                  borderColor: "#e0e0e0",
                  strokeDashArray: 0,
                  position: "back",
                  xaxis: { lines: { show: !1 } },
                  yaxis: { lines: { show: !0 } },
                  row: { colors: void 0, opacity: 0.5 },
                  column: { colors: void 0, opacity: 0.5 },
                  padding: { top: 0, right: 10, bottom: 0, left: 12 }
                },
                labels: [],
                legend: {
                  show: !0,
                  showForSingleSeries: !1,
                  showForNullSeries: !0,
                  showForZeroSeries: !0,
                  floating: !1,
                  position: "bottom",
                  horizontalAlign: "center",
                  inverseOrder: !1,
                  fontSize: "12px",
                  fontFamily: void 0,
                  fontWeight: 400,
                  width: void 0,
                  height: void 0,
                  formatter: void 0,
                  tooltipHoverFormatter: void 0,
                  offsetX: -20,
                  offsetY: 4,
                  customLegendItems: [],
                  labels: { colors: void 0, useSeriesColors: !1 },
                  markers: {
                    width: 12,
                    height: 12,
                    strokeWidth: 0,
                    fillColors: void 0,
                    strokeColor: "#fff",
                    radius: 12,
                    customHTML: void 0,
                    offsetX: 0,
                    offsetY: 0,
                    onClick: void 0
                  },
                  itemMargin: { horizontal: 5, vertical: 2 },
                  onItemClick: { toggleDataSeries: !0 },
                  onItemHover: { highlightDataSeries: !0 }
                },
                markers: {
                  discrete: [],
                  size: 0,
                  colors: void 0,
                  strokeColors: "#fff",
                  strokeWidth: 2,
                  strokeOpacity: 0.9,
                  strokeDashArray: 0,
                  fillOpacity: 1,
                  shape: "circle",
                  width: 8,
                  height: 8,
                  radius: 2,
                  offsetX: 0,
                  offsetY: 0,
                  onClick: void 0,
                  onDblClick: void 0,
                  showNullDataPoints: !0,
                  hover: { size: void 0, sizeOffset: 3 }
                },
                noData: {
                  text: void 0,
                  align: "center",
                  verticalAlign: "middle",
                  offsetX: 0,
                  offsetY: 0,
                  style: { color: void 0, fontSize: "14px", fontFamily: void 0 }
                },
                responsive: [],
                series: void 0,
                states: {
                  normal: { filter: { type: "none", value: 0 } },
                  hover: { filter: { type: "lighten", value: 0.1 } },
                  active: {
                    allowMultipleDataPointsSelection: !1,
                    filter: { type: "darken", value: 0.5 }
                  }
                },
                title: {
                  text: void 0,
                  align: "left",
                  margin: 5,
                  offsetX: 0,
                  offsetY: 0,
                  floating: !1,
                  style: {
                    fontSize: "14px",
                    fontWeight: 900,
                    fontFamily: void 0,
                    color: void 0
                  }
                },
                subtitle: {
                  text: void 0,
                  align: "left",
                  margin: 5,
                  offsetX: 0,
                  offsetY: 30,
                  floating: !1,
                  style: {
                    fontSize: "12px",
                    fontWeight: 400,
                    fontFamily: void 0,
                    color: void 0
                  }
                },
                stroke: {
                  show: !0,
                  curve: "smooth",
                  lineCap: "butt",
                  width: 2,
                  colors: void 0,
                  dashArray: 0,
                  fill: {
                    type: "solid",
                    colors: void 0,
                    opacity: 0.85,
                    gradient: {
                      shade: "dark",
                      type: "horizontal",
                      shadeIntensity: 0.5,
                      gradientToColors: void 0,
                      inverseColors: !0,
                      opacityFrom: 1,
                      opacityTo: 1,
                      stops: [0, 50, 100],
                      colorStops: []
                    }
                  }
                },
                tooltip: {
                  enabled: !0,
                  enabledOnSeries: void 0,
                  shared: !0,
                  followCursor: !1,
                  intersect: !1,
                  inverseOrder: !1,
                  custom: void 0,
                  fillSeriesColor: !1,
                  theme: "light",
                  cssClass: "",
                  style: { fontSize: "12px", fontFamily: void 0 },
                  onDatasetHover: { highlightDataSeries: !1 },
                  x: { show: !0, format: "dd MMM", formatter: void 0 },
                  y: {
                    formatter: void 0,
                    title: {
                      formatter: function (e) {
                        return e ? e + ": " : "";
                      }
                    }
                  },
                  z: { formatter: void 0, title: "Size: " },
                  marker: { show: !0, fillColors: void 0 },
                  items: { display: "flex" },
                  fixed: {
                    enabled: !1,
                    position: "topRight",
                    offsetX: 0,
                    offsetY: 0
                  }
                },
                xaxis: {
                  type: "category",
                  categories: [],
                  convertedCatToNumeric: !1,
                  offsetX: 0,
                  offsetY: 0,
                  overwriteCategories: void 0,
                  labels: {
                    show: !0,
                    rotate: -45,
                    rotateAlways: !1,
                    hideOverlappingLabels: !0,
                    trim: !1,
                    minHeight: void 0,
                    maxHeight: 120,
                    showDuplicates: !0,
                    style: {
                      colors: [],
                      fontSize: "12px",
                      fontWeight: 400,
                      fontFamily: void 0,
                      cssClass: ""
                    },
                    offsetX: 0,
                    offsetY: 0,
                    format: void 0,
                    formatter: void 0,
                    datetimeUTC: !0,
                    datetimeFormatter: {
                      year: "yyyy",
                      month: "MMM 'yy",
                      day: "dd MMM",
                      hour: "HH:mm",
                      minute: "HH:mm:ss",
                      second: "HH:mm:ss"
                    }
                  },
                  group: {
                    groups: [],
                    style: {
                      colors: [],
                      fontSize: "12px",
                      fontWeight: 400,
                      fontFamily: void 0,
                      cssClass: ""
                    }
                  },
                  axisBorder: {
                    show: !0,
                    color: "#e0e0e0",
                    width: "100%",
                    height: 1,
                    offsetX: 0,
                    offsetY: 0
                  },
                  axisTicks: {
                    show: !0,
                    color: "#e0e0e0",
                    height: 6,
                    offsetX: 0,
                    offsetY: 0
                  },
                  tickAmount: void 0,
                  tickPlacement: "on",
                  min: void 0,
                  max: void 0,
                  range: void 0,
                  floating: !1,
                  decimalsInFloat: void 0,
                  position: "bottom",
                  title: {
                    text: void 0,
                    offsetX: 0,
                    offsetY: 0,
                    style: {
                      color: void 0,
                      fontSize: "12px",
                      fontWeight: 900,
                      fontFamily: void 0,
                      cssClass: ""
                    }
                  },
                  crosshairs: {
                    show: !0,
                    width: 1,
                    position: "back",
                    opacity: 0.9,
                    stroke: { color: "#b6b6b6", width: 1, dashArray: 3 },
                    fill: {
                      type: "solid",
                      color: "#B1B9C4",
                      gradient: {
                        colorFrom: "#D8E3F0",
                        colorTo: "#BED1E6",
                        stops: [0, 100],
                        opacityFrom: 0.4,
                        opacityTo: 0.5
                      }
                    },
                    dropShadow: {
                      enabled: !1,
                      left: 0,
                      top: 0,
                      blur: 1,
                      opacity: 0.4
                    }
                  },
                  tooltip: {
                    enabled: !0,
                    offsetY: 0,
                    formatter: void 0,
                    style: { fontSize: "12px", fontFamily: void 0 }
                  }
                },
                yaxis: this.yAxis,
                theme: {
                  mode: "light",
                  palette: "palette1",
                  monochrome: {
                    enabled: !1,
                    color: "#008FFB",
                    shadeTo: "light",
                    shadeIntensity: 0.65
                  }
                }
              };
            }
          }
        ]),
        e
      );
    })(),
    su = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.graphics = new sn(this.ctx)),
          this.w.globals.isBarHorizontal && (this.invertAxis = !0),
          (this.helpers = new so(this)),
          (this.xAxisAnnotations = new sr(this)),
          (this.yAxisAnnotations = new sl(this)),
          (this.pointsAnnotations = new sc(this)),
          this.w.globals.isBarHorizontal &&
            this.w.config.yaxis[0].reversed &&
            (this.inversedReversedAxis = !0),
          (this.xDivision =
            this.w.globals.gridWidth / this.w.globals.dataPoints);
      }
      return (
        n1(e, [
          {
            key: "drawAxesAnnotations",
            value: function () {
              var e = this.w;
              if (e.globals.axisCharts) {
                for (
                  var t = this.yAxisAnnotations.drawYAxisAnnotations(),
                    i = this.xAxisAnnotations.drawXAxisAnnotations(),
                    a = this.pointsAnnotations.drawPointAnnotations(),
                    n = e.config.chart.animations.enabled,
                    s = [t, i, a],
                    o = [i.node, t.node, a.node],
                    r = 0;
                  r < 3;
                  r++
                )
                  e.globals.dom.elGraphical.add(s[r]),
                    !n ||
                      e.globals.resized ||
                      e.globals.dataChanged ||
                      ("scatter" !== e.config.chart.type &&
                        "bubble" !== e.config.chart.type &&
                        e.globals.dataPoints > 1 &&
                        o[r].classList.add("apexcharts-element-hidden")),
                    e.globals.delayedElements.push({ el: o[r], index: 0 });
                this.helpers.annotationsBackground();
              }
            }
          },
          {
            key: "drawImageAnnos",
            value: function () {
              var e = this;
              this.w.config.annotations.images.map(function (t, i) {
                e.addImage(t, i);
              });
            }
          },
          {
            key: "drawTextAnnos",
            value: function () {
              var e = this;
              this.w.config.annotations.texts.map(function (t, i) {
                e.addText(t, i);
              });
            }
          },
          {
            key: "addXaxisAnnotation",
            value: function (e, t, i) {
              this.xAxisAnnotations.addXaxisAnnotation(e, t, i);
            }
          },
          {
            key: "addYaxisAnnotation",
            value: function (e, t, i) {
              this.yAxisAnnotations.addYaxisAnnotation(e, t, i);
            }
          },
          {
            key: "addPointAnnotation",
            value: function (e, t, i) {
              this.pointsAnnotations.addPointAnnotation(e, t, i);
            }
          },
          {
            key: "addText",
            value: function (e, t) {
              var i = e.x,
                a = e.y,
                n = e.text,
                s = e.textAnchor,
                o = e.foreColor,
                r = e.fontSize,
                l = e.fontFamily,
                c = e.fontWeight,
                h = e.cssClass,
                d = e.backgroundColor,
                u = e.borderWidth,
                g = e.strokeDashArray,
                p = e.borderRadius,
                f = e.borderColor,
                m = e.appendTo,
                x = e.paddingLeft,
                b = void 0 === x ? 4 : x,
                v = e.paddingRight,
                y = e.paddingBottom,
                w = e.paddingTop,
                C = void 0 === w ? 2 : w,
                k = this.w,
                A = this.graphics.drawText({
                  x: i,
                  y: a,
                  text: n,
                  textAnchor: s || "start",
                  fontSize: r || "12px",
                  fontWeight: c || "regular",
                  fontFamily: l || k.config.chart.fontFamily,
                  foreColor: o || k.config.chart.foreColor,
                  cssClass: h
                }),
                S = k.globals.dom.baseEl.querySelector(
                  void 0 === m ? ".apexcharts-annotations" : m
                );
              S && S.appendChild(A.node);
              var L = A.bbox();
              if (n) {
                var O = this.graphics.drawRect(
                  L.x - b,
                  L.y - C,
                  L.width + b + (void 0 === v ? 4 : v),
                  L.height + (void 0 === y ? 2 : y) + C,
                  p,
                  d || "transparent",
                  1,
                  u,
                  f,
                  g
                );
                S.insertBefore(O.node, A.node);
              }
            }
          },
          {
            key: "addImage",
            value: function (e, t) {
              var i = this.w,
                a = e.path,
                n = e.x,
                s = void 0 === n ? 0 : n,
                o = e.y,
                r = void 0 === o ? 0 : o,
                l = e.width,
                c = void 0 === l ? 20 : l,
                h = e.height,
                d = void 0 === h ? 20 : h,
                u = e.appendTo,
                g = void 0 === u ? ".apexcharts-annotations" : u,
                p = i.globals.dom.Paper.image(a);
              p.size(c, d).move(s, r);
              var f = i.globals.dom.baseEl.querySelector(g);
              return f && f.appendChild(p.node), p;
            }
          },
          {
            key: "addXaxisAnnotationExternal",
            value: function (e, t, i) {
              return (
                this.addAnnotationExternal({
                  params: e,
                  pushToMemory: t,
                  context: i,
                  type: "xaxis",
                  contextMethod: i.addXaxisAnnotation
                }),
                i
              );
            }
          },
          {
            key: "addYaxisAnnotationExternal",
            value: function (e, t, i) {
              return (
                this.addAnnotationExternal({
                  params: e,
                  pushToMemory: t,
                  context: i,
                  type: "yaxis",
                  contextMethod: i.addYaxisAnnotation
                }),
                i
              );
            }
          },
          {
            key: "addPointAnnotationExternal",
            value: function (e, t, i) {
              return (
                void 0 === this.invertAxis &&
                  (this.invertAxis = i.w.globals.isBarHorizontal),
                this.addAnnotationExternal({
                  params: e,
                  pushToMemory: t,
                  context: i,
                  type: "point",
                  contextMethod: i.addPointAnnotation
                }),
                i
              );
            }
          },
          {
            key: "addAnnotationExternal",
            value: function (e) {
              var t = e.params,
                i = e.pushToMemory,
                a = e.context,
                n = e.type,
                s = e.contextMethod,
                o = a.w,
                r = o.globals.dom.baseEl.querySelector(
                  ".apexcharts-".concat(n, "-annotations")
                ),
                l = r.childNodes.length + 1,
                c = new sd(),
                h = Object.assign(
                  {},
                  "xaxis" === n
                    ? c.xAxisAnnotation
                    : "yaxis" === n
                    ? c.yAxisAnnotation
                    : c.pointAnnotation
                ),
                d = st.extend(h, t);
              switch (n) {
                case "xaxis":
                  this.addXaxisAnnotation(d, r, l);
                  break;
                case "yaxis":
                  this.addYaxisAnnotation(d, r, l);
                  break;
                case "point":
                  this.addPointAnnotation(d, r, l);
              }
              var u = o.globals.dom.baseEl.querySelector(
                  ".apexcharts-"
                    .concat(n, "-annotations .apexcharts-")
                    .concat(n, "-annotation-label[rel='")
                    .concat(l, "']")
                ),
                g = this.helpers.addBackgroundToAnno(u, d);
              return (
                g && r.insertBefore(g.node, u),
                i &&
                  o.globals.memory.methodsToExec.push({
                    context: a,
                    id: d.id ? d.id : st.randomId(),
                    method: s,
                    label: "addAnnotation",
                    params: t
                  }),
                a
              );
            }
          },
          {
            key: "clearAnnotations",
            value: function (e) {
              var t = e.w,
                i = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations"
                );
              t.globals.memory.methodsToExec.map(function (e, i) {
                ("addText" !== e.label && "addAnnotation" !== e.label) ||
                  t.globals.memory.methodsToExec.splice(i, 1);
              }),
                (i = st.listToArray(i)),
                Array.prototype.forEach.call(i, function (e) {
                  for (; e.firstChild; ) e.removeChild(e.firstChild);
                });
            }
          },
          {
            key: "removeAnnotation",
            value: function (e, t) {
              var i = e.w,
                a = i.globals.dom.baseEl.querySelectorAll(".".concat(t));
              a &&
                (i.globals.memory.methodsToExec.map(function (e, a) {
                  e.id === t && i.globals.memory.methodsToExec.splice(a, 1);
                }),
                Array.prototype.forEach.call(a, function (e) {
                  e.parentElement.removeChild(e);
                }));
            }
          }
        ]),
        e
      );
    })(),
    sg = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.months31 = [1, 3, 5, 7, 8, 10, 12]),
          (this.months30 = [2, 4, 6, 9, 11]),
          (this.daysCntOfYear = [
            0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334
          ]);
      }
      return (
        n1(e, [
          {
            key: "isValidDate",
            value: function (e) {
              return !isNaN(this.parseDate(e));
            }
          },
          {
            key: "getTimeStamp",
            value: function (e) {
              return Date.parse(e)
                ? this.w.config.xaxis.labels.datetimeUTC
                  ? new Date(new Date(e).toISOString().substr(0, 25)).getTime()
                  : new Date(e).getTime()
                : e;
            }
          },
          {
            key: "getDate",
            value: function (e) {
              return new Date(
                this.w.config.xaxis.labels.datetimeUTC
                  ? new Date(e).toUTCString()
                  : e
              );
            }
          },
          {
            key: "parseDate",
            value: function (e) {
              if (!isNaN(Date.parse(e))) return this.getTimeStamp(e);
              var t = Date.parse(e.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
              return this.getTimeStamp(t);
            }
          },
          {
            key: "parseDateWithTimezone",
            value: function (e) {
              return Date.parse(e.replace(/-/g, "/").replace(/[a-z]+/gi, " "));
            }
          },
          {
            key: "formatDate",
            value: function (e, t) {
              var i = this.w.globals.locale,
                a = this.w.config.xaxis.labels.datetimeUTC,
                n = ["\x00"].concat(n8(i.months)),
                s = ["\x01"].concat(n8(i.shortMonths)),
                o = ["\x02"].concat(n8(i.days)),
                r = ["\x03"].concat(n8(i.shortDays));
              function l(e, t) {
                var i = e + "";
                for (t = t || 2; i.length < t; ) i = "0" + i;
                return i;
              }
              var c = a ? e.getUTCFullYear() : e.getFullYear();
              t = (t = (t = t.replace(/(^|[^\\])yyyy+/g, "$1" + c)).replace(
                /(^|[^\\])yy/g,
                "$1" + c.toString().substr(2, 2)
              )).replace(/(^|[^\\])y/g, "$1" + c);
              var h = (a ? e.getUTCMonth() : e.getMonth()) + 1;
              t = (t = (t = (t = t.replace(
                /(^|[^\\])MMMM+/g,
                "$1" + n[0]
              )).replace(/(^|[^\\])MMM/g, "$1" + s[0])).replace(
                /(^|[^\\])MM/g,
                "$1" + l(h)
              )).replace(/(^|[^\\])M/g, "$1" + h);
              var d = a ? e.getUTCDate() : e.getDate();
              t = (t = (t = (t = t.replace(
                /(^|[^\\])dddd+/g,
                "$1" + o[0]
              )).replace(/(^|[^\\])ddd/g, "$1" + r[0])).replace(
                /(^|[^\\])dd/g,
                "$1" + l(d)
              )).replace(/(^|[^\\])d/g, "$1" + d);
              var u = a ? e.getUTCHours() : e.getHours(),
                g = u > 12 ? u - 12 : 0 === u ? 12 : u;
              t = (t = (t = (t = t.replace(
                /(^|[^\\])HH+/g,
                "$1" + l(u)
              )).replace(/(^|[^\\])H/g, "$1" + u)).replace(
                /(^|[^\\])hh+/g,
                "$1" + l(g)
              )).replace(/(^|[^\\])h/g, "$1" + g);
              var p = a ? e.getUTCMinutes() : e.getMinutes();
              t = (t = t.replace(/(^|[^\\])mm+/g, "$1" + l(p))).replace(
                /(^|[^\\])m/g,
                "$1" + p
              );
              var f = a ? e.getUTCSeconds() : e.getSeconds();
              t = (t = t.replace(/(^|[^\\])ss+/g, "$1" + l(f))).replace(
                /(^|[^\\])s/g,
                "$1" + f
              );
              var m = a ? e.getUTCMilliseconds() : e.getMilliseconds();
              (t = t.replace(/(^|[^\\])fff+/g, "$1" + l(m, 3))),
                (m = Math.round(m / 10)),
                (t = t.replace(/(^|[^\\])ff/g, "$1" + l(m))),
                (m = Math.round(m / 10));
              var x = u < 12 ? "AM" : "PM";
              t = (t = (t = t.replace(/(^|[^\\])f/g, "$1" + m)).replace(
                /(^|[^\\])TT+/g,
                "$1" + x
              )).replace(/(^|[^\\])T/g, "$1" + x.charAt(0));
              var b = x.toLowerCase();
              t = (t = t.replace(/(^|[^\\])tt+/g, "$1" + b)).replace(
                /(^|[^\\])t/g,
                "$1" + b.charAt(0)
              );
              var v = -e.getTimezoneOffset(),
                y = a || !v ? "Z" : v > 0 ? "+" : "-";
              if (!a) {
                var w = (v = Math.abs(v)) % 60;
                y += l(Math.floor(v / 60)) + ":" + l(w);
              }
              t = t.replace(/(^|[^\\])K/g, "$1" + y);
              var C = (a ? e.getUTCDay() : e.getDay()) + 1;
              return (t = (t = (t = (t = (t = t.replace(
                RegExp(o[0], "g"),
                o[C]
              )).replace(RegExp(r[0], "g"), r[C])).replace(
                RegExp(n[0], "g"),
                n[h]
              )).replace(RegExp(s[0], "g"), s[h])).replace(/\\(.)/g, "$1"));
            }
          },
          {
            key: "getTimeUnitsfromTimestamp",
            value: function (e, t, i) {
              var a = this.w;
              void 0 !== a.config.xaxis.min && (e = a.config.xaxis.min),
                void 0 !== a.config.xaxis.max && (t = a.config.xaxis.max);
              var n = this.getDate(e),
                s = this.getDate(t),
                o = this.formatDate(n, "yyyy MM dd HH mm ss fff").split(" "),
                r = this.formatDate(s, "yyyy MM dd HH mm ss fff").split(" ");
              return {
                minMillisecond: parseInt(o[6], 10),
                maxMillisecond: parseInt(r[6], 10),
                minSecond: parseInt(o[5], 10),
                maxSecond: parseInt(r[5], 10),
                minMinute: parseInt(o[4], 10),
                maxMinute: parseInt(r[4], 10),
                minHour: parseInt(o[3], 10),
                maxHour: parseInt(r[3], 10),
                minDate: parseInt(o[2], 10),
                maxDate: parseInt(r[2], 10),
                minMonth: parseInt(o[1], 10) - 1,
                maxMonth: parseInt(r[1], 10) - 1,
                minYear: parseInt(o[0], 10),
                maxYear: parseInt(r[0], 10)
              };
            }
          },
          {
            key: "isLeapYear",
            value: function (e) {
              return (e % 4 == 0 && e % 100 != 0) || e % 400 == 0;
            }
          },
          {
            key: "calculcateLastDaysOfMonth",
            value: function (e, t, i) {
              return this.determineDaysOfMonths(e, t) - i;
            }
          },
          {
            key: "determineDaysOfYear",
            value: function (e) {
              var t = 365;
              return this.isLeapYear(e) && (t = 366), t;
            }
          },
          {
            key: "determineRemainingDaysOfYear",
            value: function (e, t, i) {
              var a = this.daysCntOfYear[t] + i;
              return t > 1 && this.isLeapYear() && a++, a;
            }
          },
          {
            key: "determineDaysOfMonths",
            value: function (e, t) {
              var i = 30;
              switch (((e = st.monthMod(e)), !0)) {
                case this.months30.indexOf(e) > -1:
                  2 === e && (i = this.isLeapYear(t) ? 29 : 28);
                  break;
                case this.months31.indexOf(e) > -1:
                default:
                  i = 31;
              }
              return i;
            }
          }
        ]),
        e
      );
    })(),
    sp = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.tooltipKeyFormat = "dd MMM");
      }
      return (
        n1(e, [
          {
            key: "xLabelFormat",
            value: function (e, t, i, a) {
              var n = this.w;
              if (
                "datetime" === n.config.xaxis.type &&
                void 0 === n.config.xaxis.labels.formatter &&
                void 0 === n.config.tooltip.x.formatter
              ) {
                var s = new sg(this.ctx);
                return s.formatDate(s.getDate(t), n.config.tooltip.x.format);
              }
              return e(t, i, a);
            }
          },
          {
            key: "defaultGeneralFormatter",
            value: function (e) {
              return Array.isArray(e)
                ? e.map(function (e) {
                    return e;
                  })
                : e;
            }
          },
          {
            key: "defaultYFormatter",
            value: function (e, t, i) {
              var a = this.w;
              return (
                st.isNumber(e) &&
                  (e =
                    0 !== a.globals.yValueDecimal
                      ? e.toFixed(
                          void 0 !== t.decimalsInFloat
                            ? t.decimalsInFloat
                            : a.globals.yValueDecimal
                        )
                      : a.globals.maxYArr[i] - a.globals.minYArr[i] < 5
                      ? e.toFixed(1)
                      : e.toFixed(0)),
                e
              );
            }
          },
          {
            key: "setLabelFormatters",
            value: function () {
              var e = this,
                t = this.w;
              return (
                (t.globals.xaxisTooltipFormatter = function (t) {
                  return e.defaultGeneralFormatter(t);
                }),
                (t.globals.ttKeyFormatter = function (t) {
                  return e.defaultGeneralFormatter(t);
                }),
                (t.globals.ttZFormatter = function (e) {
                  return e;
                }),
                (t.globals.legendFormatter = function (t) {
                  return e.defaultGeneralFormatter(t);
                }),
                void 0 !== t.config.xaxis.labels.formatter
                  ? (t.globals.xLabelFormatter =
                      t.config.xaxis.labels.formatter)
                  : (t.globals.xLabelFormatter = function (e) {
                      if (st.isNumber(e)) {
                        if (
                          !t.config.xaxis.convertedCatToNumeric &&
                          "numeric" === t.config.xaxis.type
                        ) {
                          if (st.isNumber(t.config.xaxis.decimalsInFloat))
                            return e.toFixed(t.config.xaxis.decimalsInFloat);
                          var i = t.globals.maxX - t.globals.minX;
                          return i > 0 && i < 100 ? e.toFixed(1) : e.toFixed(0);
                        }
                        return t.globals.isBarHorizontal &&
                          t.globals.maxY - t.globals.minYArr < 4
                          ? e.toFixed(1)
                          : e.toFixed(0);
                      }
                      return e;
                    }),
                "function" == typeof t.config.tooltip.x.formatter
                  ? (t.globals.ttKeyFormatter = t.config.tooltip.x.formatter)
                  : (t.globals.ttKeyFormatter = t.globals.xLabelFormatter),
                "function" == typeof t.config.xaxis.tooltip.formatter &&
                  (t.globals.xaxisTooltipFormatter =
                    t.config.xaxis.tooltip.formatter),
                (Array.isArray(t.config.tooltip.y) ||
                  void 0 !== t.config.tooltip.y.formatter) &&
                  (t.globals.ttVal = t.config.tooltip.y),
                void 0 !== t.config.tooltip.z.formatter &&
                  (t.globals.ttZFormatter = t.config.tooltip.z.formatter),
                void 0 !== t.config.legend.formatter &&
                  (t.globals.legendFormatter = t.config.legend.formatter),
                t.config.yaxis.forEach(function (i, a) {
                  void 0 !== i.labels.formatter
                    ? (t.globals.yLabelFormatters[a] = i.labels.formatter)
                    : (t.globals.yLabelFormatters[a] = function (n) {
                        return t.globals.xyCharts
                          ? Array.isArray(n)
                            ? n.map(function (t) {
                                return e.defaultYFormatter(t, i, a);
                              })
                            : e.defaultYFormatter(n, i, a)
                          : n;
                      });
                }),
                t.globals
              );
            }
          },
          {
            key: "heatmapLabelFormatters",
            value: function () {
              var e = this.w;
              if ("heatmap" === e.config.chart.type) {
                e.globals.yAxisScale[0].result = e.globals.seriesNames.slice();
                var t = e.globals.seriesNames.reduce(function (e, t) {
                  return e.length > t.length ? e : t;
                }, 0);
                (e.globals.yAxisScale[0].niceMax = t),
                  (e.globals.yAxisScale[0].niceMin = t);
              }
            }
          }
        ]),
        e
      );
    })(),
    sf = function (e) {
      var t,
        i = e.isTimeline,
        a = e.ctx,
        n = e.seriesIndex,
        s = e.dataPointIndex,
        o = e.y1,
        r = e.y2,
        l = e.w,
        c = l.globals.seriesRangeStart[n][s],
        h = l.globals.seriesRangeEnd[n][s],
        d = l.globals.labels[s],
        u = l.config.series[n].name ? l.config.series[n].name : "",
        g = l.globals.ttKeyFormatter,
        p = l.config.tooltip.y.title.formatter,
        f = { w: l, seriesIndex: n, dataPointIndex: s, start: c, end: h };
      "function" == typeof p && (u = p(u, f)),
        null !== (t = l.config.series[n].data[s]) &&
          void 0 !== t &&
          t.x &&
          (d = l.config.series[n].data[s].x),
        i ||
          ("datetime" === l.config.xaxis.type &&
            (d = new sp(a).xLabelFormat(l.globals.ttKeyFormatter, d, d, {
              i: void 0,
              dateFormatter: new sg(a).formatDate,
              w: l
            }))),
        "function" == typeof g && (d = g(d, f)),
        Number.isFinite(o) && Number.isFinite(r) && ((c = o), (h = r));
      var m = "",
        x = "",
        b = l.globals.colors[n];
      if (void 0 === l.config.tooltip.x.formatter) {
        if ("datetime" === l.config.xaxis.type) {
          var v = new sg(a);
          (m = v.formatDate(v.getDate(c), l.config.tooltip.x.format)),
            (x = v.formatDate(v.getDate(h), l.config.tooltip.x.format));
        } else (m = c), (x = h);
      } else
        (m = l.config.tooltip.x.formatter(c)),
          (x = l.config.tooltip.x.formatter(h));
      return {
        start: c,
        end: h,
        startVal: m,
        endVal: x,
        ylabel: d,
        color: b,
        seriesName: u
      };
    },
    sm = function (e) {
      var t = e.color,
        i = e.seriesName,
        a = e.ylabel,
        n = e.start,
        s = e.end,
        o = e.seriesIndex,
        r = e.dataPointIndex,
        l = e.ctx.tooltip.tooltipLabels.getFormatters(o);
      (n = l.yLbFormatter(n)), (s = l.yLbFormatter(s));
      var c = l.yLbFormatter(e.w.globals.series[o][r]),
        h = '<span class="value start-value">\n  '
          .concat(
            n,
            '\n  </span> <span class="separator">-</span> <span class="value end-value">\n  '
          )
          .concat(s, "\n  </span>");
      return (
        '<div class="apexcharts-tooltip-rangebar"><div> <span class="series-name" style="color: ' +
        t +
        '">' +
        (i || "") +
        '</span></div><div> <span class="category">' +
        a +
        ": </span> " +
        (e.w.globals.comboCharts
          ? "rangeArea" === e.w.config.series[o].type ||
            "rangeBar" === e.w.config.series[o].type
            ? h
            : "<span>".concat(c, "</span>")
          : h) +
        " </div></div>"
      );
    },
    sx = (function () {
      function e(t) {
        nQ(this, e), (this.opts = t);
      }
      return (
        n1(e, [
          {
            key: "hideYAxis",
            value: function () {
              (this.opts.yaxis[0].show = !1),
                (this.opts.yaxis[0].title.text = ""),
                (this.opts.yaxis[0].axisBorder.show = !1),
                (this.opts.yaxis[0].axisTicks.show = !1),
                (this.opts.yaxis[0].floating = !0);
            }
          },
          {
            key: "line",
            value: function () {
              return {
                chart: { animations: { easing: "swing" } },
                dataLabels: { enabled: !1 },
                stroke: { width: 5, curve: "straight" },
                markers: { size: 0, hover: { sizeOffset: 6 } },
                xaxis: { crosshairs: { width: 1 } }
              };
            }
          },
          {
            key: "sparkline",
            value: function (e) {
              return (
                this.hideYAxis(),
                st.extend(e, {
                  grid: {
                    show: !1,
                    padding: { left: 0, right: 0, top: 0, bottom: 0 }
                  },
                  legend: { show: !1 },
                  xaxis: {
                    labels: { show: !1 },
                    tooltip: { enabled: !1 },
                    axisBorder: { show: !1 },
                    axisTicks: { show: !1 }
                  },
                  chart: { toolbar: { show: !1 }, zoom: { enabled: !1 } },
                  dataLabels: { enabled: !1 }
                })
              );
            }
          },
          {
            key: "bar",
            value: function () {
              return {
                chart: { stacked: !1, animations: { easing: "swing" } },
                plotOptions: { bar: { dataLabels: { position: "center" } } },
                dataLabels: {
                  style: { colors: ["#fff"] },
                  background: { enabled: !1 }
                },
                stroke: { width: 0, lineCap: "round" },
                fill: { opacity: 0.85 },
                legend: { markers: { shape: "square", radius: 2, size: 8 } },
                tooltip: { shared: !1, intersect: !0 },
                xaxis: {
                  tooltip: { enabled: !1 },
                  tickPlacement: "between",
                  crosshairs: {
                    width: "barWidth",
                    position: "back",
                    fill: { type: "gradient" },
                    dropShadow: { enabled: !1 },
                    stroke: { width: 0 }
                  }
                }
              };
            }
          },
          {
            key: "funnel",
            value: function () {
              return (
                this.hideYAxis(),
                nJ(
                  nJ({}, this.bar()),
                  {},
                  {
                    chart: {
                      animations: {
                        easing: "linear",
                        speed: 800,
                        animateGradually: { enabled: !1 }
                      }
                    },
                    plotOptions: {
                      bar: {
                        horizontal: !0,
                        borderRadiusApplication: "around",
                        borderRadius: 0,
                        dataLabels: { position: "center" }
                      }
                    },
                    grid: { show: !1, padding: { left: 0, right: 0 } },
                    xaxis: {
                      labels: { show: !1 },
                      tooltip: { enabled: !1 },
                      axisBorder: { show: !1 },
                      axisTicks: { show: !1 }
                    }
                  }
                )
              );
            }
          },
          {
            key: "candlestick",
            value: function () {
              var e = this;
              return {
                stroke: { width: 1, colors: ["#333"] },
                fill: { opacity: 1 },
                dataLabels: { enabled: !1 },
                tooltip: {
                  shared: !0,
                  custom: function (t) {
                    var i = t.seriesIndex,
                      a = t.dataPointIndex,
                      n = t.w;
                    return e._getBoxTooltip(
                      n,
                      i,
                      a,
                      ["Open", "High", "", "Low", "Close"],
                      "candlestick"
                    );
                  }
                },
                states: { active: { filter: { type: "none" } } },
                xaxis: { crosshairs: { width: 1 } }
              };
            }
          },
          {
            key: "boxPlot",
            value: function () {
              var e = this;
              return {
                chart: { animations: { dynamicAnimation: { enabled: !1 } } },
                stroke: { width: 1, colors: ["#24292e"] },
                dataLabels: { enabled: !1 },
                tooltip: {
                  shared: !0,
                  custom: function (t) {
                    var i = t.seriesIndex,
                      a = t.dataPointIndex,
                      n = t.w;
                    return e._getBoxTooltip(
                      n,
                      i,
                      a,
                      ["Minimum", "Q1", "Median", "Q3", "Maximum"],
                      "boxPlot"
                    );
                  }
                },
                markers: { size: 5, strokeWidth: 1, strokeColors: "#111" },
                xaxis: { crosshairs: { width: 1 } }
              };
            }
          },
          {
            key: "rangeBar",
            value: function () {
              return {
                chart: { animations: { animateGradually: !1 } },
                stroke: { width: 0, lineCap: "square" },
                plotOptions: {
                  bar: { borderRadius: 0, dataLabels: { position: "center" } }
                },
                dataLabels: {
                  enabled: !1,
                  formatter: function (e, t) {
                    t.ctx;
                    var i = t.seriesIndex,
                      a = t.dataPointIndex,
                      n = t.w,
                      s = function () {
                        var e = n.globals.seriesRangeStart[i][a];
                        return n.globals.seriesRangeEnd[i][a] - e;
                      };
                    return n.globals.comboCharts
                      ? "rangeBar" === n.config.series[i].type ||
                        "rangeArea" === n.config.series[i].type
                        ? s()
                        : e
                      : s();
                  },
                  background: { enabled: !1 },
                  style: { colors: ["#fff"] }
                },
                markers: { size: 10 },
                tooltip: {
                  shared: !1,
                  followCursor: !0,
                  custom: function (e) {
                    var t, i, a, n, s, o, r, l, c, h, d, u;
                    return e.w.config.plotOptions &&
                      e.w.config.plotOptions.bar &&
                      e.w.config.plotOptions.bar.horizontal
                      ? ((i = (t = sf(nJ(nJ({}, e), {}, { isTimeline: !0 })))
                          .color),
                        (a = t.seriesName),
                        (n = t.ylabel),
                        (s = t.startVal),
                        (o = t.endVal),
                        sm(
                          nJ(
                            nJ({}, e),
                            {},
                            {
                              color: i,
                              seriesName: a,
                              ylabel: n,
                              start: s,
                              end: o
                            }
                          )
                        ))
                      : ((l = (r = sf(e)).color),
                        (c = r.seriesName),
                        (h = r.ylabel),
                        (d = r.start),
                        (u = r.end),
                        sm(
                          nJ(
                            nJ({}, e),
                            {},
                            {
                              color: l,
                              seriesName: c,
                              ylabel: h,
                              start: d,
                              end: u
                            }
                          )
                        ));
                  }
                },
                xaxis: {
                  tickPlacement: "between",
                  tooltip: { enabled: !1 },
                  crosshairs: { stroke: { width: 0 } }
                }
              };
            }
          },
          {
            key: "dumbbell",
            value: function (e) {
              var t, i;
              return (
                (null !== (t = e.plotOptions.bar) &&
                  void 0 !== t &&
                  t.barHeight) ||
                  (e.plotOptions.bar.barHeight = 2),
                (null !== (i = e.plotOptions.bar) &&
                  void 0 !== i &&
                  i.columnWidth) ||
                  (e.plotOptions.bar.columnWidth = 2),
                e
              );
            }
          },
          {
            key: "area",
            value: function () {
              return {
                stroke: {
                  width: 4,
                  fill: {
                    type: "solid",
                    gradient: {
                      inverseColors: !1,
                      shade: "light",
                      type: "vertical",
                      opacityFrom: 0.65,
                      opacityTo: 0.5,
                      stops: [0, 100, 100]
                    }
                  }
                },
                fill: {
                  type: "gradient",
                  gradient: {
                    inverseColors: !1,
                    shade: "light",
                    type: "vertical",
                    opacityFrom: 0.65,
                    opacityTo: 0.5,
                    stops: [0, 100, 100]
                  }
                },
                markers: { size: 0, hover: { sizeOffset: 6 } },
                tooltip: { followCursor: !1 }
              };
            }
          },
          {
            key: "rangeArea",
            value: function () {
              return {
                stroke: { curve: "straight", width: 0 },
                fill: { type: "solid", opacity: 0.6 },
                markers: { size: 0 },
                states: {
                  hover: { filter: { type: "none" } },
                  active: { filter: { type: "none" } }
                },
                tooltip: {
                  intersect: !1,
                  shared: !0,
                  followCursor: !0,
                  custom: function (e) {
                    var t, i, a, n, s, o;
                    return (
                      (i = (t = sf(e)).color),
                      (a = t.seriesName),
                      (n = t.ylabel),
                      (s = t.start),
                      (o = t.end),
                      sm(
                        nJ(
                          nJ({}, e),
                          {},
                          {
                            color: i,
                            seriesName: a,
                            ylabel: n,
                            start: s,
                            end: o
                          }
                        )
                      )
                    );
                  }
                }
              };
            }
          },
          {
            key: "brush",
            value: function (e) {
              return st.extend(e, {
                chart: {
                  toolbar: { autoSelected: "selection", show: !1 },
                  zoom: { enabled: !1 }
                },
                dataLabels: { enabled: !1 },
                stroke: { width: 1 },
                tooltip: { enabled: !1 },
                xaxis: { tooltip: { enabled: !1 } }
              });
            }
          },
          {
            key: "stacked100",
            value: function (e) {
              (e.dataLabels = e.dataLabels || {}),
                (e.dataLabels.formatter = e.dataLabels.formatter || void 0);
              var t = e.dataLabels.formatter;
              return (
                e.yaxis.forEach(function (t, i) {
                  (e.yaxis[i].min = 0), (e.yaxis[i].max = 100);
                }),
                "bar" === e.chart.type &&
                  (e.dataLabels.formatter =
                    t ||
                    function (e) {
                      return "number" == typeof e && e ? e.toFixed(0) + "%" : e;
                    }),
                e
              );
            }
          },
          {
            key: "stackedBars",
            value: function () {
              var e = this.bar();
              return nJ(
                nJ({}, e),
                {},
                {
                  plotOptions: nJ(
                    nJ({}, e.plotOptions),
                    {},
                    {
                      bar: nJ(
                        nJ({}, e.plotOptions.bar),
                        {},
                        {
                          borderRadiusApplication: "end",
                          borderRadiusWhenStacked: "last"
                        }
                      )
                    }
                  )
                }
              );
            }
          },
          {
            key: "convertCatToNumeric",
            value: function (e) {
              return (e.xaxis.convertedCatToNumeric = !0), e;
            }
          },
          {
            key: "convertCatToNumericXaxis",
            value: function (e, t, i) {
              (e.xaxis.type = "numeric"),
                (e.xaxis.labels = e.xaxis.labels || {}),
                (e.xaxis.labels.formatter =
                  e.xaxis.labels.formatter ||
                  function (e) {
                    return st.isNumber(e) ? Math.floor(e) : e;
                  });
              var a = e.xaxis.labels.formatter,
                n =
                  e.xaxis.categories && e.xaxis.categories.length
                    ? e.xaxis.categories
                    : e.labels;
              return (
                i &&
                  i.length &&
                  (n = i.map(function (e) {
                    return Array.isArray(e) ? e : String(e);
                  })),
                n &&
                  n.length &&
                  (e.xaxis.labels.formatter = function (e) {
                    return st.isNumber(e) ? a(n[Math.floor(e) - 1]) : a(e);
                  }),
                (e.xaxis.categories = []),
                (e.labels = []),
                (e.xaxis.tickAmount = e.xaxis.tickAmount || "dataPoints"),
                e
              );
            }
          },
          {
            key: "bubble",
            value: function () {
              return {
                dataLabels: { style: { colors: ["#fff"] } },
                tooltip: { shared: !1, intersect: !0 },
                xaxis: { crosshairs: { width: 0 } },
                fill: {
                  type: "solid",
                  gradient: {
                    shade: "light",
                    inverse: !0,
                    shadeIntensity: 0.55,
                    opacityFrom: 0.4,
                    opacityTo: 0.8
                  }
                }
              };
            }
          },
          {
            key: "scatter",
            value: function () {
              return {
                dataLabels: { enabled: !1 },
                tooltip: { shared: !1, intersect: !0 },
                markers: { size: 6, strokeWidth: 1, hover: { sizeOffset: 2 } }
              };
            }
          },
          {
            key: "heatmap",
            value: function () {
              return {
                chart: { stacked: !1 },
                fill: { opacity: 1 },
                dataLabels: { style: { colors: ["#fff"] } },
                stroke: { colors: ["#fff"] },
                tooltip: {
                  followCursor: !0,
                  marker: { show: !1 },
                  x: { show: !1 }
                },
                legend: {
                  position: "top",
                  markers: { shape: "square", size: 10, offsetY: 2 }
                },
                grid: { padding: { right: 20 } }
              };
            }
          },
          {
            key: "treemap",
            value: function () {
              return {
                chart: { zoom: { enabled: !1 } },
                dataLabels: {
                  style: { fontSize: 14, fontWeight: 600, colors: ["#fff"] }
                },
                stroke: { show: !0, width: 2, colors: ["#fff"] },
                legend: { show: !1 },
                fill: { gradient: { stops: [0, 100] } },
                tooltip: { followCursor: !0, x: { show: !1 } },
                grid: { padding: { left: 0, right: 0 } },
                xaxis: { crosshairs: { show: !1 }, tooltip: { enabled: !1 } }
              };
            }
          },
          {
            key: "pie",
            value: function () {
              return {
                chart: { toolbar: { show: !1 } },
                plotOptions: { pie: { donut: { labels: { show: !1 } } } },
                dataLabels: {
                  formatter: function (e) {
                    return e.toFixed(1) + "%";
                  },
                  style: { colors: ["#fff"] },
                  background: { enabled: !1 },
                  dropShadow: { enabled: !0 }
                },
                stroke: { colors: ["#fff"] },
                fill: {
                  opacity: 1,
                  gradient: { shade: "light", stops: [0, 100] }
                },
                tooltip: { theme: "dark", fillSeriesColor: !0 },
                legend: { position: "right" }
              };
            }
          },
          {
            key: "donut",
            value: function () {
              return {
                chart: { toolbar: { show: !1 } },
                dataLabels: {
                  formatter: function (e) {
                    return e.toFixed(1) + "%";
                  },
                  style: { colors: ["#fff"] },
                  background: { enabled: !1 },
                  dropShadow: { enabled: !0 }
                },
                stroke: { colors: ["#fff"] },
                fill: {
                  opacity: 1,
                  gradient: {
                    shade: "light",
                    shadeIntensity: 0.35,
                    stops: [80, 100],
                    opacityFrom: 1,
                    opacityTo: 1
                  }
                },
                tooltip: { theme: "dark", fillSeriesColor: !0 },
                legend: { position: "right" }
              };
            }
          },
          {
            key: "polarArea",
            value: function () {
              return (
                (this.opts.yaxis[0].tickAmount = this.opts.yaxis[0].tickAmount
                  ? this.opts.yaxis[0].tickAmount
                  : 6),
                {
                  chart: { toolbar: { show: !1 } },
                  dataLabels: {
                    formatter: function (e) {
                      return e.toFixed(1) + "%";
                    },
                    enabled: !1
                  },
                  stroke: { show: !0, width: 2 },
                  fill: { opacity: 0.7 },
                  tooltip: { theme: "dark", fillSeriesColor: !0 },
                  legend: { position: "right" }
                }
              );
            }
          },
          {
            key: "radar",
            value: function () {
              return (
                (this.opts.yaxis[0].labels.offsetY = this.opts.yaxis[0].labels
                  .offsetY
                  ? this.opts.yaxis[0].labels.offsetY
                  : 6),
                {
                  dataLabels: { enabled: !1, style: { fontSize: "11px" } },
                  stroke: { width: 2 },
                  markers: { size: 3, strokeWidth: 1, strokeOpacity: 1 },
                  fill: { opacity: 0.2 },
                  tooltip: { shared: !1, intersect: !0, followCursor: !0 },
                  grid: { show: !1 },
                  xaxis: {
                    labels: {
                      formatter: function (e) {
                        return e;
                      },
                      style: { colors: ["#a8a8a8"], fontSize: "11px" }
                    },
                    tooltip: { enabled: !1 },
                    crosshairs: { show: !1 }
                  }
                }
              );
            }
          },
          {
            key: "radialBar",
            value: function () {
              return {
                chart: {
                  animations: { dynamicAnimation: { enabled: !0, speed: 800 } },
                  toolbar: { show: !1 }
                },
                fill: {
                  gradient: {
                    shade: "dark",
                    shadeIntensity: 0.4,
                    inverseColors: !1,
                    type: "diagonal2",
                    opacityFrom: 1,
                    opacityTo: 1,
                    stops: [70, 98, 100]
                  }
                },
                legend: { show: !1, position: "right" },
                tooltip: { enabled: !1, fillSeriesColor: !0 }
              };
            }
          },
          {
            key: "_getBoxTooltip",
            value: function (e, t, i, a, n) {
              var s = e.globals.seriesCandleO[t][i],
                o = e.globals.seriesCandleH[t][i],
                r = e.globals.seriesCandleM[t][i],
                l = e.globals.seriesCandleL[t][i],
                c = e.globals.seriesCandleC[t][i];
              return e.config.series[t].type && e.config.series[t].type !== n
                ? '<div class="apexcharts-custom-tooltip">\n          '
                    .concat(
                      e.config.series[t].name
                        ? e.config.series[t].name
                        : "series-" + (t + 1),
                      ": <strong>"
                    )
                    .concat(e.globals.series[t][i], "</strong>\n        </div>")
                : '<div class="apexcharts-tooltip-box apexcharts-tooltip-'.concat(
                    e.config.chart.type,
                    '">'
                  ) +
                    "<div>".concat(a[0], ': <span class="value">') +
                    s +
                    "</span></div>" +
                    "<div>".concat(a[1], ': <span class="value">') +
                    o +
                    "</span></div>" +
                    (r
                      ? "<div>".concat(a[2], ': <span class="value">') +
                        r +
                        "</span></div>"
                      : "") +
                    "<div>".concat(a[3], ': <span class="value">') +
                    l +
                    "</span></div>" +
                    "<div>".concat(a[4], ': <span class="value">') +
                    c +
                    "</span></div></div>";
            }
          }
        ]),
        e
      );
    })(),
    sb = (function () {
      function e(t) {
        nQ(this, e), (this.opts = t);
      }
      return (
        n1(e, [
          {
            key: "init",
            value: function (e) {
              var t = e.responsiveOverride,
                i = this.opts,
                a = new sd(),
                n = new sx(i);
              (this.chartType = i.chart.type),
                (i = this.extendYAxis(i)),
                (i = this.extendAnnotations(i));
              var s = a.init(),
                o = {};
              if (i && "object" === nK(i)) {
                var r,
                  l,
                  c,
                  h,
                  d,
                  u,
                  g,
                  p,
                  f = {};
                (f =
                  -1 !==
                  [
                    "line",
                    "area",
                    "bar",
                    "candlestick",
                    "boxPlot",
                    "rangeBar",
                    "rangeArea",
                    "bubble",
                    "scatter",
                    "heatmap",
                    "treemap",
                    "pie",
                    "polarArea",
                    "donut",
                    "radar",
                    "radialBar"
                  ].indexOf(i.chart.type)
                    ? n[i.chart.type]()
                    : n.line()),
                  null !== (r = i.plotOptions) &&
                    void 0 !== r &&
                    null !== (l = r.bar) &&
                    void 0 !== l &&
                    l.isFunnel &&
                    (f = n.funnel()),
                  i.chart.stacked &&
                    "bar" === i.chart.type &&
                    (f = n.stackedBars()),
                  null !== (c = i.chart.brush) &&
                    void 0 !== c &&
                    c.enabled &&
                    (f = n.brush(f)),
                  i.chart.stacked &&
                    "100%" === i.chart.stackType &&
                    (i = n.stacked100(i)),
                  null !== (h = i.plotOptions) &&
                    void 0 !== h &&
                    null !== (d = h.bar) &&
                    void 0 !== d &&
                    d.isDumbbell &&
                    (i = n.dumbbell(i)),
                  this.checkForDarkTheme(window.Apex),
                  this.checkForDarkTheme(i),
                  (i.xaxis = i.xaxis || window.Apex.xaxis || {}),
                  t || (i.xaxis.convertedCatToNumeric = !1),
                  ((null !==
                    (u = (i = this.checkForCatToNumericXAxis(
                      this.chartType,
                      f,
                      i
                    )).chart.sparkline) &&
                    void 0 !== u &&
                    u.enabled) ||
                    (null !== (g = window.Apex.chart) &&
                      void 0 !== g &&
                      null !== (p = g.sparkline) &&
                      void 0 !== p &&
                      p.enabled)) &&
                    (f = n.sparkline(f)),
                  (o = st.extend(s, f));
              }
              var m = st.extend(o, window.Apex);
              return (s = st.extend(m, i)), (s = this.handleUserInputErrors(s));
            }
          },
          {
            key: "checkForCatToNumericXAxis",
            value: function (e, t, i) {
              var a,
                n,
                s = new sx(i),
                o =
                  ("bar" === e || "boxPlot" === e) &&
                  (null === (a = i.plotOptions) ||
                  void 0 === a ||
                  null === (n = a.bar) ||
                  void 0 === n
                    ? void 0
                    : n.horizontal),
                r = "datetime" !== i.xaxis.type && "numeric" !== i.xaxis.type,
                l = i.xaxis.tickPlacement
                  ? i.xaxis.tickPlacement
                  : t.xaxis && t.xaxis.tickPlacement;
              return (
                o ||
                  "pie" === e ||
                  "polarArea" === e ||
                  "donut" === e ||
                  "radar" === e ||
                  "radialBar" === e ||
                  "heatmap" === e ||
                  !r ||
                  "between" === l ||
                  (i = s.convertCatToNumeric(i)),
                i
              );
            }
          },
          {
            key: "extendYAxis",
            value: function (e, t) {
              var i = new sd();
              (void 0 === e.yaxis ||
                !e.yaxis ||
                (Array.isArray(e.yaxis) && 0 === e.yaxis.length)) &&
                (e.yaxis = {}),
                e.yaxis.constructor !== Array &&
                  window.Apex.yaxis &&
                  window.Apex.yaxis.constructor !== Array &&
                  (e.yaxis = st.extend(e.yaxis, window.Apex.yaxis)),
                e.yaxis.constructor !== Array
                  ? (e.yaxis = [st.extend(i.yAxis, e.yaxis)])
                  : (e.yaxis = st.extendArray(e.yaxis, i.yAxis));
              var a = !1;
              e.yaxis.forEach(function (e) {
                e.logarithmic && (a = !0);
              });
              var n = e.series;
              return (
                t && !n && (n = t.config.series),
                a &&
                  n.length !== e.yaxis.length &&
                  n.length &&
                  (e.yaxis = n.map(function (t, a) {
                    if (
                      (t.name || (n[a].name = "series-".concat(a + 1)),
                      e.yaxis[a])
                    )
                      return (e.yaxis[a].seriesName = n[a].name), e.yaxis[a];
                    var s = st.extend(i.yAxis, e.yaxis[0]);
                    return (s.show = !1), s;
                  })),
                a &&
                  n.length > 1 &&
                  n.length !== e.yaxis.length &&
                  console.warn(
                    "A multi-series logarithmic chart should have equal number of series and y-axes. Please make sure to equalize both."
                  ),
                e
              );
            }
          },
          {
            key: "extendAnnotations",
            value: function (e) {
              return (
                void 0 === e.annotations &&
                  ((e.annotations = {}),
                  (e.annotations.yaxis = []),
                  (e.annotations.xaxis = []),
                  (e.annotations.points = [])),
                (e = this.extendYAxisAnnotations(e)),
                (e = this.extendXAxisAnnotations(e)),
                (e = this.extendPointAnnotations(e))
              );
            }
          },
          {
            key: "extendYAxisAnnotations",
            value: function (e) {
              var t = new sd();
              return (
                (e.annotations.yaxis = st.extendArray(
                  void 0 !== e.annotations.yaxis ? e.annotations.yaxis : [],
                  t.yAxisAnnotation
                )),
                e
              );
            }
          },
          {
            key: "extendXAxisAnnotations",
            value: function (e) {
              var t = new sd();
              return (
                (e.annotations.xaxis = st.extendArray(
                  void 0 !== e.annotations.xaxis ? e.annotations.xaxis : [],
                  t.xAxisAnnotation
                )),
                e
              );
            }
          },
          {
            key: "extendPointAnnotations",
            value: function (e) {
              var t = new sd();
              return (
                (e.annotations.points = st.extendArray(
                  void 0 !== e.annotations.points ? e.annotations.points : [],
                  t.pointAnnotation
                )),
                e
              );
            }
          },
          {
            key: "checkForDarkTheme",
            value: function (e) {
              e.theme &&
                "dark" === e.theme.mode &&
                (e.tooltip || (e.tooltip = {}),
                "light" !== e.tooltip.theme && (e.tooltip.theme = "dark"),
                e.chart.foreColor || (e.chart.foreColor = "#f6f7f8"),
                e.chart.background || (e.chart.background = "#424242"),
                e.theme.palette || (e.theme.palette = "palette4"));
            }
          },
          {
            key: "handleUserInputErrors",
            value: function (e) {
              if (e.tooltip.shared && e.tooltip.intersect)
                throw Error(
                  "tooltip.shared cannot be enabled when tooltip.intersect is true. Turn off any other option by setting it to false."
                );
              if ("bar" === e.chart.type && e.plotOptions.bar.horizontal) {
                if (e.yaxis.length > 1)
                  throw Error(
                    "Multiple Y Axis for bars are not supported. Switch to column chart by setting plotOptions.bar.horizontal=false"
                  );
                e.yaxis[0].reversed && (e.yaxis[0].opposite = !0),
                  (e.xaxis.tooltip.enabled = !1),
                  (e.yaxis[0].tooltip.enabled = !1),
                  (e.chart.zoom.enabled = !1);
              }
              return (
                ("bar" !== e.chart.type && "rangeBar" !== e.chart.type) ||
                  (e.tooltip.shared &&
                    "barWidth" === e.xaxis.crosshairs.width &&
                    e.series.length > 1 &&
                    (e.xaxis.crosshairs.width = "tickWidth")),
                ("candlestick" !== e.chart.type &&
                  "boxPlot" !== e.chart.type) ||
                  (e.yaxis[0].reversed &&
                    (console.warn(
                      "Reversed y-axis in ".concat(
                        e.chart.type,
                        " chart is not supported."
                      )
                    ),
                    (e.yaxis[0].reversed = !1))),
                e
              );
            }
          }
        ]),
        e
      );
    })(),
    sv = (function () {
      function e() {
        nQ(this, e);
      }
      return (
        n1(e, [
          {
            key: "initGlobalVars",
            value: function (e) {
              (e.series = []),
                (e.seriesCandleO = []),
                (e.seriesCandleH = []),
                (e.seriesCandleM = []),
                (e.seriesCandleL = []),
                (e.seriesCandleC = []),
                (e.seriesRangeStart = []),
                (e.seriesRangeEnd = []),
                (e.seriesRange = []),
                (e.seriesPercent = []),
                (e.seriesGoals = []),
                (e.seriesX = []),
                (e.seriesZ = []),
                (e.seriesNames = []),
                (e.seriesTotals = []),
                (e.seriesLog = []),
                (e.seriesColors = []),
                (e.stackedSeriesTotals = []),
                (e.seriesXvalues = []),
                (e.seriesYvalues = []),
                (e.labels = []),
                (e.hasXaxisGroups = !1),
                (e.groups = []),
                (e.hasSeriesGroups = !1),
                (e.seriesGroups = []),
                (e.categoryLabels = []),
                (e.timescaleLabels = []),
                (e.noLabelsProvided = !1),
                (e.resizeTimer = null),
                (e.selectionResizeTimer = null),
                (e.delayedElements = []),
                (e.pointsArray = []),
                (e.dataLabelsRects = []),
                (e.isXNumeric = !1),
                (e.skipLastTimelinelabel = !1),
                (e.skipFirstTimelinelabel = !1),
                (e.isDataXYZ = !1),
                (e.isMultiLineX = !1),
                (e.isMultipleYAxis = !1),
                (e.maxY = -Number.MAX_VALUE),
                (e.minY = Number.MIN_VALUE),
                (e.minYArr = []),
                (e.maxYArr = []),
                (e.maxX = -Number.MAX_VALUE),
                (e.minX = Number.MAX_VALUE),
                (e.initialMaxX = -Number.MAX_VALUE),
                (e.initialMinX = Number.MAX_VALUE),
                (e.maxDate = 0),
                (e.minDate = Number.MAX_VALUE),
                (e.minZ = Number.MAX_VALUE),
                (e.maxZ = -Number.MAX_VALUE),
                (e.minXDiff = Number.MAX_VALUE),
                (e.yAxisScale = []),
                (e.xAxisScale = null),
                (e.xAxisTicksPositions = []),
                (e.yLabelsCoords = []),
                (e.yTitleCoords = []),
                (e.barPadForNumericAxis = 0),
                (e.padHorizontal = 0),
                (e.xRange = 0),
                (e.yRange = []),
                (e.zRange = 0),
                (e.dataPoints = 0),
                (e.xTickAmount = 0);
            }
          },
          {
            key: "globalVars",
            value: function (e) {
              return {
                chartID: null,
                cuid: null,
                events: {
                  beforeMount: [],
                  mounted: [],
                  updated: [],
                  clicked: [],
                  selection: [],
                  dataPointSelection: [],
                  zoomed: [],
                  scrolled: []
                },
                colors: [],
                clientX: null,
                clientY: null,
                fill: { colors: [] },
                stroke: { colors: [] },
                dataLabels: { style: { colors: [] } },
                radarPolygons: { fill: { colors: [] } },
                markers: { colors: [], size: e.markers.size, largestSize: 0 },
                animationEnded: !1,
                isTouchDevice:
                  "ontouchstart" in window || navigator.msMaxTouchPoints,
                isDirty: !1,
                isExecCalled: !1,
                initialConfig: null,
                initialSeries: [],
                lastXAxis: [],
                lastYAxis: [],
                columnSeries: null,
                labels: [],
                timescaleLabels: [],
                noLabelsProvided: !1,
                allSeriesCollapsed: !1,
                collapsedSeries: [],
                collapsedSeriesIndices: [],
                ancillaryCollapsedSeries: [],
                ancillaryCollapsedSeriesIndices: [],
                risingSeries: [],
                dataFormatXNumeric: !1,
                capturedSeriesIndex: -1,
                capturedDataPointIndex: -1,
                selectedDataPoints: [],
                goldenPadding: 35,
                invalidLogScale: !1,
                ignoreYAxisIndexes: [],
                yAxisSameScaleIndices: [],
                maxValsInArrayIndex: 0,
                radialSize: 0,
                selection: void 0,
                zoomEnabled:
                  "zoom" === e.chart.toolbar.autoSelected &&
                  e.chart.toolbar.tools.zoom &&
                  e.chart.zoom.enabled,
                panEnabled:
                  "pan" === e.chart.toolbar.autoSelected &&
                  e.chart.toolbar.tools.pan,
                selectionEnabled:
                  "selection" === e.chart.toolbar.autoSelected &&
                  e.chart.toolbar.tools.selection,
                yaxis: null,
                mousedown: !1,
                lastClientPosition: {},
                visibleXRange: void 0,
                yValueDecimal: 0,
                total: 0,
                SVGNS: "http://www.w3.org/2000/svg",
                svgWidth: 0,
                svgHeight: 0,
                noData: !1,
                locale: {},
                dom: {},
                memory: { methodsToExec: [] },
                shouldAnimate: !0,
                skipLastTimelinelabel: !1,
                skipFirstTimelinelabel: !1,
                delayedElements: [],
                axisCharts: !0,
                isDataXYZ: !1,
                resized: !1,
                resizeTimer: null,
                comboCharts: !1,
                dataChanged: !1,
                previousPaths: [],
                allSeriesHasEqualX: !0,
                pointsArray: [],
                dataLabelsRects: [],
                lastDrawnDataLabelsIndexes: [],
                hasNullValues: !1,
                easing: null,
                zoomed: !1,
                gridWidth: 0,
                gridHeight: 0,
                rotateXLabels: !1,
                defaultLabels: !1,
                xLabelFormatter: void 0,
                yLabelFormatters: [],
                xaxisTooltipFormatter: void 0,
                ttKeyFormatter: void 0,
                ttVal: void 0,
                ttZFormatter: void 0,
                LINE_HEIGHT_RATIO: 1.618,
                xAxisLabelsHeight: 0,
                xAxisGroupLabelsHeight: 0,
                xAxisLabelsWidth: 0,
                yAxisLabelsWidth: 0,
                scaleX: 1,
                scaleY: 1,
                translateX: 0,
                translateY: 0,
                translateYAxisX: [],
                yAxisWidths: [],
                translateXAxisY: 0,
                translateXAxisX: 0,
                tooltip: null
              };
            }
          },
          {
            key: "init",
            value: function (e) {
              var t = this.globalVars(e);
              return (
                this.initGlobalVars(t),
                (t.initialConfig = st.extend({}, e)),
                (t.initialSeries = st.clone(e.series)),
                (t.lastXAxis = st.clone(t.initialConfig.xaxis)),
                (t.lastYAxis = st.clone(t.initialConfig.yaxis)),
                t
              );
            }
          }
        ]),
        e
      );
    })(),
    sy = (function () {
      function e(t) {
        nQ(this, e), (this.opts = t);
      }
      return (
        n1(e, [
          {
            key: "init",
            value: function () {
              var e = new sb(this.opts).init({ responsiveOverride: !1 });
              return { config: e, globals: new sv().init(e) };
            }
          }
        ]),
        e
      );
    })(),
    sw = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.opts = null),
          (this.seriesIndex = 0);
      }
      return (
        n1(e, [
          {
            key: "clippedImgArea",
            value: function (e) {
              var t = this.w,
                i = t.config,
                a = parseInt(t.globals.gridWidth, 10),
                n = parseInt(t.globals.gridHeight, 10),
                s = a > n ? a : n,
                o = e.image,
                r = 0,
                l = 0;
              void 0 === e.width && void 0 === e.height
                ? void 0 !== i.fill.image.width &&
                  void 0 !== i.fill.image.height
                  ? ((r = i.fill.image.width + 1), (l = i.fill.image.height))
                  : ((r = s + 1), (l = s))
                : ((r = e.width), (l = e.height));
              var c = document.createElementNS(t.globals.SVGNS, "pattern");
              sn.setAttrs(c, {
                id: e.patternID,
                patternUnits: e.patternUnits
                  ? e.patternUnits
                  : "userSpaceOnUse",
                width: r + "px",
                height: l + "px"
              });
              var h = document.createElementNS(t.globals.SVGNS, "image");
              c.appendChild(h),
                h.setAttributeNS(window.SVG.xlink, "href", o),
                sn.setAttrs(h, {
                  x: 0,
                  y: 0,
                  preserveAspectRatio: "none",
                  width: r + "px",
                  height: l + "px"
                }),
                (h.style.opacity = e.opacity),
                t.globals.dom.elDefs.node.appendChild(c);
            }
          },
          {
            key: "getSeriesIndex",
            value: function (e) {
              var t = this.w,
                i = t.config.chart.type;
              return (
                (("bar" === i || "rangeBar" === i) &&
                  t.config.plotOptions.bar.distributed) ||
                "heatmap" === i ||
                "treemap" === i
                  ? (this.seriesIndex = e.seriesNumber)
                  : (this.seriesIndex =
                      e.seriesNumber % t.globals.series.length),
                this.seriesIndex
              );
            }
          },
          {
            key: "fillPath",
            value: function (e) {
              var t = this.w;
              this.opts = e;
              var i,
                a,
                n,
                s = this.w.config;
              this.seriesIndex = this.getSeriesIndex(e);
              var o = this.getFillColors()[this.seriesIndex];
              void 0 !== t.globals.seriesColors[this.seriesIndex] &&
                (o = t.globals.seriesColors[this.seriesIndex]),
                "function" == typeof o &&
                  (o = o({
                    seriesIndex: this.seriesIndex,
                    dataPointIndex: e.dataPointIndex,
                    value: e.value,
                    w: t
                  }));
              var r = e.fillType
                  ? e.fillType
                  : this.getFillType(this.seriesIndex),
                l = Array.isArray(s.fill.opacity)
                  ? s.fill.opacity[this.seriesIndex]
                  : s.fill.opacity;
              e.color && (o = e.color);
              var c = o;
              if (
                (-1 === o.indexOf("rgb")
                  ? o.length < 9 && (c = st.hexToRgba(o, l))
                  : o.indexOf("rgba") > -1 && (l = st.getOpacityFromRGBA(o)),
                e.opacity && (l = e.opacity),
                "pattern" === r &&
                  (a = this.handlePatternFill({
                    fillConfig: e.fillConfig,
                    patternFill: a,
                    fillColor: o,
                    fillOpacity: l,
                    defaultColor: c
                  })),
                "gradient" === r &&
                  (n = this.handleGradientFill({
                    fillConfig: e.fillConfig,
                    fillColor: o,
                    fillOpacity: l,
                    i: this.seriesIndex
                  })),
                "image" === r)
              ) {
                var h = s.fill.image.src,
                  d = e.patternID ? e.patternID : "";
                this.clippedImgArea({
                  opacity: l,
                  image: Array.isArray(h)
                    ? e.seriesNumber < h.length
                      ? h[e.seriesNumber]
                      : h[0]
                    : h,
                  width: e.width ? e.width : void 0,
                  height: e.height ? e.height : void 0,
                  patternUnits: e.patternUnits,
                  patternID: "pattern"
                    .concat(t.globals.cuid)
                    .concat(e.seriesNumber + 1)
                    .concat(d)
                }),
                  (i = "url(#pattern"
                    .concat(t.globals.cuid)
                    .concat(e.seriesNumber + 1)
                    .concat(d, ")"));
              } else i = "gradient" === r ? n : "pattern" === r ? a : c;
              return e.solid && (i = c), i;
            }
          },
          {
            key: "getFillType",
            value: function (e) {
              var t = this.w;
              return Array.isArray(t.config.fill.type)
                ? t.config.fill.type[e]
                : t.config.fill.type;
            }
          },
          {
            key: "getFillColors",
            value: function () {
              var e = this.w,
                t = e.config,
                i = this.opts,
                a = [];
              return (
                e.globals.comboCharts
                  ? "line" === e.config.series[this.seriesIndex].type
                    ? Array.isArray(e.globals.stroke.colors)
                      ? (a = e.globals.stroke.colors)
                      : a.push(e.globals.stroke.colors)
                    : Array.isArray(e.globals.fill.colors)
                    ? (a = e.globals.fill.colors)
                    : a.push(e.globals.fill.colors)
                  : "line" === t.chart.type
                  ? Array.isArray(e.globals.stroke.colors)
                    ? (a = e.globals.stroke.colors)
                    : a.push(e.globals.stroke.colors)
                  : Array.isArray(e.globals.fill.colors)
                  ? (a = e.globals.fill.colors)
                  : a.push(e.globals.fill.colors),
                void 0 !== i.fillColors &&
                  ((a = []),
                  Array.isArray(i.fillColors)
                    ? (a = i.fillColors.slice())
                    : a.push(i.fillColors)),
                a
              );
            }
          },
          {
            key: "handlePatternFill",
            value: function (e) {
              var t = e.fillConfig,
                i = (e.patternFill, e.fillColor),
                a = e.fillOpacity,
                n = e.defaultColor,
                s = this.w.config.fill;
              t && (s = t);
              var o = this.opts,
                r = new sn(this.ctx),
                l = Array.isArray(s.pattern.strokeWidth)
                  ? s.pattern.strokeWidth[this.seriesIndex]
                  : s.pattern.strokeWidth;
              return Array.isArray(s.pattern.style)
                ? void 0 !== s.pattern.style[o.seriesNumber]
                  ? r.drawPattern(
                      s.pattern.style[o.seriesNumber],
                      s.pattern.width,
                      s.pattern.height,
                      i,
                      l,
                      a
                    )
                  : n
                : r.drawPattern(
                    s.pattern.style,
                    s.pattern.width,
                    s.pattern.height,
                    i,
                    l,
                    a
                  );
            }
          },
          {
            key: "handleGradientFill",
            value: function (e) {
              var t = e.fillColor,
                i = e.fillOpacity,
                a = e.fillConfig,
                n = e.i,
                s = this.w.config.fill;
              a && (s = nJ(nJ({}, s), a));
              var o,
                r = this.opts,
                l = new sn(this.ctx),
                c = new st(),
                h = s.gradient.type,
                d = t,
                u =
                  void 0 === s.gradient.opacityFrom
                    ? i
                    : Array.isArray(s.gradient.opacityFrom)
                    ? s.gradient.opacityFrom[n]
                    : s.gradient.opacityFrom;
              d.indexOf("rgba") > -1 && (u = st.getOpacityFromRGBA(d));
              var g =
                void 0 === s.gradient.opacityTo
                  ? i
                  : Array.isArray(s.gradient.opacityTo)
                  ? s.gradient.opacityTo[n]
                  : s.gradient.opacityTo;
              if (
                void 0 === s.gradient.gradientToColors ||
                0 === s.gradient.gradientToColors.length
              )
                o =
                  "dark" === s.gradient.shade
                    ? c.shadeColor(
                        -1 * parseFloat(s.gradient.shadeIntensity),
                        t.indexOf("rgb") > -1 ? st.rgb2hex(t) : t
                      )
                    : c.shadeColor(
                        parseFloat(s.gradient.shadeIntensity),
                        t.indexOf("rgb") > -1 ? st.rgb2hex(t) : t
                      );
              else if (s.gradient.gradientToColors[r.seriesNumber]) {
                var p = s.gradient.gradientToColors[r.seriesNumber];
                (o = p),
                  p.indexOf("rgba") > -1 && (g = st.getOpacityFromRGBA(p));
              } else o = t;
              if (
                (s.gradient.gradientFrom && (d = s.gradient.gradientFrom),
                s.gradient.gradientTo && (o = s.gradient.gradientTo),
                s.gradient.inverseColors)
              ) {
                var f = d;
                (d = o), (o = f);
              }
              return (
                d.indexOf("rgb") > -1 && (d = st.rgb2hex(d)),
                o.indexOf("rgb") > -1 && (o = st.rgb2hex(o)),
                l.drawGradient(
                  h,
                  d,
                  o,
                  u,
                  g,
                  r.size,
                  s.gradient.stops,
                  s.gradient.colorStops,
                  n
                )
              );
            }
          }
        ]),
        e
      );
    })(),
    sC = (function () {
      function e(t, i) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "setGlobalMarkerSize",
            value: function () {
              var e = this.w;
              if (
                ((e.globals.markers.size = Array.isArray(e.config.markers.size)
                  ? e.config.markers.size
                  : [e.config.markers.size]),
                e.globals.markers.size.length > 0)
              ) {
                if (e.globals.markers.size.length < e.globals.series.length + 1)
                  for (var t = 0; t <= e.globals.series.length; t++)
                    void 0 === e.globals.markers.size[t] &&
                      e.globals.markers.size.push(e.globals.markers.size[0]);
              } else
                e.globals.markers.size = e.config.series.map(function (t) {
                  return e.config.markers.size;
                });
            }
          },
          {
            key: "plotChartMarkers",
            value: function (e, t, i, a) {
              var n,
                s =
                  arguments.length > 4 &&
                  void 0 !== arguments[4] &&
                  arguments[4],
                o = this.w,
                r = null,
                l = new sn(this.ctx),
                c =
                  o.config.markers.discrete && o.config.markers.discrete.length;
              if (
                ((o.globals.markers.size[t] > 0 || s || c) &&
                  (r = l.group({
                    class: s || c ? "" : "apexcharts-series-markers"
                  })).attr(
                    "clip-path",
                    "url(#gridRectMarkerMask".concat(o.globals.cuid, ")")
                  ),
                Array.isArray(e.x))
              )
                for (var h = 0; h < e.x.length; h++) {
                  var d = i;
                  1 === i && 0 === h && (d = 0), 1 === i && 1 === h && (d = 1);
                  var u = "apexcharts-marker";
                  if (
                    (("line" !== o.config.chart.type &&
                      "area" !== o.config.chart.type) ||
                      o.globals.comboCharts ||
                      o.config.tooltip.intersect ||
                      (u += " no-pointer-events"),
                    (Array.isArray(o.config.markers.size)
                      ? o.globals.markers.size[t] > 0
                      : o.config.markers.size > 0) ||
                      s ||
                      c)
                  ) {
                    st.isNumber(e.y[h])
                      ? (u += " w".concat(st.randomId()))
                      : (u = "apexcharts-nullpoint");
                    var g = this.getMarkerConfig({
                      cssClass: u,
                      seriesIndex: t,
                      dataPointIndex: d
                    });
                    o.config.series[t].data[d] &&
                      (o.config.series[t].data[d].fillColor &&
                        (g.pointFillColor =
                          o.config.series[t].data[d].fillColor),
                      o.config.series[t].data[d].strokeColor &&
                        (g.pointStrokeColor =
                          o.config.series[t].data[d].strokeColor)),
                      a && (g.pSize = a),
                      (e.x[h] < 0 ||
                        e.x[h] > o.globals.gridWidth ||
                        e.y[h] < 0 ||
                        e.y[h] > o.globals.gridHeight) &&
                        (g.pSize = 0),
                      (n = l.drawMarker(e.x[h], e.y[h], g)).attr("rel", d),
                      n.attr("j", d),
                      n.attr("index", t),
                      n.node.setAttribute("default-marker-size", g.pSize),
                      new sa(this.ctx).setSelectionFilter(n, t, d),
                      this.addEvents(n),
                      r && r.add(n);
                  } else
                    void 0 === o.globals.pointsArray[t] &&
                      (o.globals.pointsArray[t] = []),
                      o.globals.pointsArray[t].push([e.x[h], e.y[h]]);
                }
              return r;
            }
          },
          {
            key: "getMarkerConfig",
            value: function (e) {
              var t = e.cssClass,
                i = e.seriesIndex,
                a = e.dataPointIndex,
                n = void 0 === a ? null : a,
                s = e.finishRadius,
                o = void 0 === s ? null : s,
                r = this.w,
                l = this.getMarkerStyle(i),
                c = r.globals.markers.size[i],
                h = r.config.markers;
              return (
                null !== n &&
                  h.discrete.length &&
                  h.discrete.map(function (e) {
                    e.seriesIndex === i &&
                      e.dataPointIndex === n &&
                      ((l.pointStrokeColor = e.strokeColor),
                      (l.pointFillColor = e.fillColor),
                      (c = e.size),
                      (l.pointShape = e.shape));
                  }),
                {
                  pSize: null === o ? c : o,
                  pRadius: h.radius,
                  width: Array.isArray(h.width) ? h.width[i] : h.width,
                  height: Array.isArray(h.height) ? h.height[i] : h.height,
                  pointStrokeWidth: Array.isArray(h.strokeWidth)
                    ? h.strokeWidth[i]
                    : h.strokeWidth,
                  pointStrokeColor: l.pointStrokeColor,
                  pointFillColor: l.pointFillColor,
                  shape:
                    l.pointShape ||
                    (Array.isArray(h.shape) ? h.shape[i] : h.shape),
                  class: t,
                  pointStrokeOpacity: Array.isArray(h.strokeOpacity)
                    ? h.strokeOpacity[i]
                    : h.strokeOpacity,
                  pointStrokeDashArray: Array.isArray(h.strokeDashArray)
                    ? h.strokeDashArray[i]
                    : h.strokeDashArray,
                  pointFillOpacity: Array.isArray(h.fillOpacity)
                    ? h.fillOpacity[i]
                    : h.fillOpacity,
                  seriesIndex: i
                }
              );
            }
          },
          {
            key: "addEvents",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx);
              e.node.addEventListener(
                "mouseenter",
                i.pathMouseEnter.bind(this.ctx, e)
              ),
                e.node.addEventListener(
                  "mouseleave",
                  i.pathMouseLeave.bind(this.ctx, e)
                ),
                e.node.addEventListener(
                  "mousedown",
                  i.pathMouseDown.bind(this.ctx, e)
                ),
                e.node.addEventListener("click", t.config.markers.onClick),
                e.node.addEventListener(
                  "dblclick",
                  t.config.markers.onDblClick
                ),
                e.node.addEventListener(
                  "touchstart",
                  i.pathMouseDown.bind(this.ctx, e),
                  { passive: !0 }
                );
            }
          },
          {
            key: "getMarkerStyle",
            value: function (e) {
              var t = this.w,
                i = t.globals.markers.colors,
                a =
                  t.config.markers.strokeColor || t.config.markers.strokeColors;
              return {
                pointStrokeColor: Array.isArray(a) ? a[e] : a,
                pointFillColor: Array.isArray(i) ? i[e] : i
              };
            }
          }
        ]),
        e
      );
    })(),
    sk = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.initialAnim = this.w.config.chart.animations.enabled),
          (this.dynamicAnim =
            this.initialAnim &&
            this.w.config.chart.animations.dynamicAnimation.enabled);
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function (e, t, i) {
              var a = this.w,
                n = new sn(this.ctx),
                s = i.realIndex,
                o = i.pointsPos,
                r = i.zRatio,
                l = i.elParent,
                c = n.group({
                  class: "apexcharts-series-markers apexcharts-series-".concat(
                    a.config.chart.type
                  )
                });
              if (
                (c.attr(
                  "clip-path",
                  "url(#gridRectMarkerMask".concat(a.globals.cuid, ")")
                ),
                Array.isArray(o.x))
              )
                for (var h = 0; h < o.x.length; h++) {
                  var d = t + 1,
                    u = !0;
                  0 === t && 0 === h && (d = 0), 0 === t && 1 === h && (d = 1);
                  var g = 0,
                    p = a.globals.markers.size[s];
                  if (r !== 1 / 0) {
                    var f = a.config.plotOptions.bubble;
                    (p = a.globals.seriesZ[s][d]),
                      f.zScaling && (p /= r),
                      f.minBubbleRadius &&
                        p < f.minBubbleRadius &&
                        (p = f.minBubbleRadius),
                      f.maxBubbleRadius &&
                        p > f.maxBubbleRadius &&
                        (p = f.maxBubbleRadius);
                  }
                  a.config.chart.animations.enabled || (g = p);
                  var m = o.x[h],
                    x = o.y[h];
                  if (
                    ((g = g || 0),
                    (null !== x && void 0 !== a.globals.series[s][d]) ||
                      (u = !1),
                    u)
                  ) {
                    var b = this.drawPoint(m, x, g, p, s, d, t);
                    c.add(b);
                  }
                  l.add(c);
                }
            }
          },
          {
            key: "drawPoint",
            value: function (e, t, i, a, n, s, o) {
              var r = this.w,
                l = new si(this.ctx),
                c = new sa(this.ctx),
                h = new sw(this.ctx),
                d = new sC(this.ctx),
                u = new sn(this.ctx),
                g = d.getMarkerConfig({
                  cssClass: "apexcharts-marker",
                  seriesIndex: n,
                  dataPointIndex: s,
                  finishRadius:
                    "bubble" === r.config.chart.type ||
                    (r.globals.comboCharts &&
                      r.config.series[n] &&
                      "bubble" === r.config.series[n].type)
                      ? a
                      : null
                });
              a = g.pSize;
              var p,
                f = h.fillPath({
                  seriesNumber: n,
                  dataPointIndex: s,
                  color: g.pointFillColor,
                  patternUnits: "objectBoundingBox",
                  value: r.globals.series[n][o]
                });
              if (
                ("circle" === g.shape
                  ? (p = u.drawCircle(i))
                  : ("square" !== g.shape && "rect" !== g.shape) ||
                    (p = u.drawRect(
                      0,
                      0,
                      g.width - g.pointStrokeWidth / 2,
                      g.height - g.pointStrokeWidth / 2,
                      g.pRadius
                    )),
                r.config.series[n].data[s] &&
                  r.config.series[n].data[s].fillColor &&
                  (f = r.config.series[n].data[s].fillColor),
                p.attr({
                  x: e - g.width / 2 - g.pointStrokeWidth / 2,
                  y: t - g.height / 2 - g.pointStrokeWidth / 2,
                  cx: e,
                  cy: t,
                  fill: f,
                  "fill-opacity": g.pointFillOpacity,
                  stroke: g.pointStrokeColor,
                  r: a,
                  "stroke-width": g.pointStrokeWidth,
                  "stroke-dasharray": g.pointStrokeDashArray,
                  "stroke-opacity": g.pointStrokeOpacity
                }),
                r.config.chart.dropShadow.enabled)
              ) {
                var m = r.config.chart.dropShadow;
                c.dropShadow(p, m, n);
              }
              if (
                !this.initialAnim ||
                r.globals.dataChanged ||
                r.globals.resized
              )
                r.globals.animationEnded = !0;
              else {
                var x = r.config.chart.animations.speed;
                l.animateMarker(
                  p,
                  0,
                  "circle" === g.shape
                    ? a
                    : { width: g.width, height: g.height },
                  x,
                  r.globals.easing,
                  function () {
                    window.setTimeout(function () {
                      l.animationCompleted(p);
                    }, 100);
                  }
                );
              }
              if (r.globals.dataChanged && "circle" === g.shape) {
                if (this.dynamicAnim) {
                  var b,
                    v,
                    y,
                    w,
                    C = r.config.chart.animations.dynamicAnimation.speed;
                  null !=
                    (w =
                      r.globals.previousPaths[n] &&
                      r.globals.previousPaths[n][o]) &&
                    ((b = w.x), (v = w.y), (y = void 0 !== w.r ? w.r : a));
                  for (var k = 0; k < r.globals.collapsedSeries.length; k++)
                    r.globals.collapsedSeries[k].index === n &&
                      ((C = 1), (a = 0));
                  0 === e && 0 === t && (a = 0),
                    l.animateCircle(
                      p,
                      { cx: b, cy: v, r: y },
                      { cx: e, cy: t, r: a },
                      C,
                      r.globals.easing
                    );
                } else p.attr({ r: a });
              }
              return (
                p.attr({ rel: s, j: s, index: n, "default-marker-size": a }),
                c.setSelectionFilter(p, n, s),
                d.addEvents(p),
                p.node.classList.add("apexcharts-marker"),
                p
              );
            }
          },
          {
            key: "centerTextInBubble",
            value: function (e) {
              return {
                y: (e +=
                  parseInt(this.w.config.dataLabels.style.fontSize, 10) / 4)
              };
            }
          }
        ]),
        e
      );
    })(),
    sA = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "dataLabelsCorrection",
            value: function (e, t, i, a, n, s, o) {
              var r = this.w,
                l = !1,
                c = new sn(this.ctx).getTextRects(i, o),
                h = c.width,
                d = c.height;
              t < 0 && (t = 0),
                t > r.globals.gridHeight + d &&
                  (t = r.globals.gridHeight + d / 2),
                void 0 === r.globals.dataLabelsRects[a] &&
                  (r.globals.dataLabelsRects[a] = []),
                r.globals.dataLabelsRects[a].push({
                  x: e,
                  y: t,
                  width: h,
                  height: d
                });
              var u = r.globals.dataLabelsRects[a].length - 2,
                g =
                  void 0 !== r.globals.lastDrawnDataLabelsIndexes[a]
                    ? r.globals.lastDrawnDataLabelsIndexes[a][
                        r.globals.lastDrawnDataLabelsIndexes[a].length - 1
                      ]
                    : 0;
              if (void 0 !== r.globals.dataLabelsRects[a][u]) {
                var p = r.globals.dataLabelsRects[a][g];
                (e > p.x + p.width + 2 ||
                  t > p.y + p.height + 2 ||
                  e + h < p.x) &&
                  (l = !0);
              }
              return (
                (0 === n || s) && (l = !0),
                { x: e, y: t, textRects: c, drawnextLabel: l }
              );
            }
          },
          {
            key: "drawDataLabel",
            value: function (e) {
              var t = this,
                i = e.type,
                a = e.pos,
                n = e.i,
                s = e.j,
                o = e.isRangeStart,
                r = e.strokeWidth,
                l = void 0 === r ? 2 : r,
                c = this.w,
                h = new sn(this.ctx),
                d = c.config.dataLabels,
                u = 0,
                g = 0,
                p = s,
                f = null;
              if (!d.enabled || !Array.isArray(a.x)) return f;
              f = h.group({ class: "apexcharts-data-labels" });
              for (var m = 0; m < a.x.length; m++)
                if (
                  ((u = a.x[m] + d.offsetX),
                  (g = a.y[m] + d.offsetY + l),
                  !isNaN(u))
                ) {
                  1 === s && 0 === m && (p = 0), 1 === s && 1 === m && (p = 1);
                  var x = c.globals.series[n][p];
                  "rangeArea" === i &&
                    (x = o
                      ? c.globals.seriesRangeStart[n][p]
                      : c.globals.seriesRangeEnd[n][p]);
                  var b = "",
                    v = function (e) {
                      return c.config.dataLabels.formatter(e, {
                        ctx: t.ctx,
                        seriesIndex: n,
                        dataPointIndex: p,
                        w: c
                      });
                    };
                  "bubble" === c.config.chart.type
                    ? ((b = v((x = c.globals.seriesZ[n][p]))),
                      (g = a.y[m]),
                      (g = new sk(this.ctx).centerTextInBubble(g, n, p).y))
                    : void 0 !== x && (b = v(x)),
                    this.plotDataLabelsText({
                      x: u,
                      y: g,
                      text: b,
                      i: n,
                      j: p,
                      parent: f,
                      offsetCorrection: !0,
                      dataLabelsConfig: c.config.dataLabels
                    });
                }
              return f;
            }
          },
          {
            key: "plotDataLabelsText",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = e.x,
                n = e.y,
                s = e.i,
                o = e.j,
                r = e.text,
                l = e.textAnchor,
                c = e.fontSize,
                h = e.parent,
                d = e.dataLabelsConfig,
                u = e.color,
                g = e.alwaysDrawDataLabel,
                p = e.offsetCorrection;
              if (
                !(
                  Array.isArray(t.config.dataLabels.enabledOnSeries) &&
                  0 > t.config.dataLabels.enabledOnSeries.indexOf(s)
                )
              ) {
                var f = { x: a, y: n, drawnextLabel: !0, textRects: null };
                p &&
                  (f = this.dataLabelsCorrection(
                    a,
                    n,
                    r,
                    s,
                    o,
                    g,
                    parseInt(d.style.fontSize, 10)
                  )),
                  t.globals.zoomed || ((a = f.x), (n = f.y)),
                  f.textRects &&
                    (a < -10 - f.textRects.width ||
                      a > t.globals.gridWidth + f.textRects.width + 10) &&
                    (r = "");
                var m = t.globals.dataLabels.style.colors[s];
                ((("bar" === t.config.chart.type ||
                  "rangeBar" === t.config.chart.type) &&
                  t.config.plotOptions.bar.distributed) ||
                  t.config.dataLabels.distributed) &&
                  (m = t.globals.dataLabels.style.colors[o]),
                  "function" == typeof m &&
                    (m = m({
                      series: t.globals.series,
                      seriesIndex: s,
                      dataPointIndex: o,
                      w: t
                    })),
                  u && (m = u);
                var x = d.offsetX,
                  b = d.offsetY;
                if (
                  (("bar" !== t.config.chart.type &&
                    "rangeBar" !== t.config.chart.type) ||
                    ((x = 0), (b = 0)),
                  f.drawnextLabel)
                ) {
                  var v = i.drawText({
                    width: 100,
                    height: parseInt(d.style.fontSize, 10),
                    x: a + x,
                    y: n + b,
                    foreColor: m,
                    textAnchor: l || d.textAnchor,
                    text: r,
                    fontSize: c || d.style.fontSize,
                    fontFamily: d.style.fontFamily,
                    fontWeight: d.style.fontWeight || "normal"
                  });
                  if (
                    (v.attr({ class: "apexcharts-datalabel", cx: a, cy: n }),
                    d.dropShadow.enabled)
                  ) {
                    var y = d.dropShadow;
                    new sa(this.ctx).dropShadow(v, y);
                  }
                  h.add(v),
                    void 0 === t.globals.lastDrawnDataLabelsIndexes[s] &&
                      (t.globals.lastDrawnDataLabelsIndexes[s] = []),
                    t.globals.lastDrawnDataLabelsIndexes[s].push(o);
                }
              }
            }
          },
          {
            key: "addBackgroundToDataLabel",
            value: function (e, t) {
              var i = this.w,
                a = i.config.dataLabels.background,
                n = a.padding,
                s = a.padding / 2,
                o = t.width,
                r = t.height,
                l = new sn(this.ctx).drawRect(
                  t.x - n,
                  t.y - s / 2,
                  o + 2 * n,
                  r + s,
                  a.borderRadius,
                  "transparent" === i.config.chart.background
                    ? "#fff"
                    : i.config.chart.background,
                  a.opacity,
                  a.borderWidth,
                  a.borderColor
                );
              return (
                a.dropShadow.enabled &&
                  new sa(this.ctx).dropShadow(l, a.dropShadow),
                l
              );
            }
          },
          {
            key: "dataLabelsBackground",
            value: function () {
              var e = this.w;
              if ("bubble" !== e.config.chart.type)
                for (
                  var t = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-datalabels text"
                    ),
                    i = 0;
                  i < t.length;
                  i++
                ) {
                  var a = t[i],
                    n = a.getBBox(),
                    s = null;
                  if (
                    (n.width &&
                      n.height &&
                      (s = this.addBackgroundToDataLabel(a, n)),
                    s)
                  ) {
                    a.parentNode.insertBefore(s.node, a);
                    var o = a.getAttribute("fill");
                    !e.config.chart.animations.enabled ||
                    e.globals.resized ||
                    e.globals.dataChanged
                      ? s.attr({ fill: o })
                      : s.animate().attr({ fill: o }),
                      a.setAttribute(
                        "fill",
                        e.config.dataLabels.background.foreColor
                      );
                  }
                }
            }
          },
          {
            key: "bringForward",
            value: function () {
              for (
                var e = this.w,
                  t = e.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-datalabels"
                  ),
                  i = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-plot-series:last-child"
                  ),
                  a = 0;
                a < t.length;
                a++
              )
                i && i.insertBefore(t[a], i.nextSibling);
            }
          }
        ]),
        e
      );
    })(),
    sS = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.legendInactiveClass = "legend-mouseover-inactive");
      }
      return (
        n1(e, [
          {
            key: "getAllSeriesEls",
            value: function () {
              return this.w.globals.dom.baseEl.getElementsByClassName(
                "apexcharts-series"
              );
            }
          },
          {
            key: "getSeriesByName",
            value: function (e) {
              return this.w.globals.dom.baseEl.querySelector(
                ".apexcharts-inner .apexcharts-series[seriesName='".concat(
                  st.escapeString(e),
                  "']"
                )
              );
            }
          },
          {
            key: "isSeriesHidden",
            value: function (e) {
              var t = this.getSeriesByName(e),
                i = parseInt(t.getAttribute("data:realIndex"), 10);
              return {
                isHidden: t.classList.contains("apexcharts-series-collapsed"),
                realIndex: i
              };
            }
          },
          {
            key: "addCollapsedClassToSeries",
            value: function (e, t) {
              var i = this.w;
              function a(i) {
                for (var a = 0; a < i.length; a++)
                  i[a].index === t &&
                    e.node.classList.add("apexcharts-series-collapsed");
              }
              a(i.globals.collapsedSeries),
                a(i.globals.ancillaryCollapsedSeries);
            }
          },
          {
            key: "toggleSeries",
            value: function (e) {
              var t = this.isSeriesHidden(e);
              return (
                this.ctx.legend.legendHelpers.toggleDataSeries(
                  t.realIndex,
                  t.isHidden
                ),
                t.isHidden
              );
            }
          },
          {
            key: "showSeries",
            value: function (e) {
              var t = this.isSeriesHidden(e);
              t.isHidden &&
                this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex, !0);
            }
          },
          {
            key: "hideSeries",
            value: function (e) {
              var t = this.isSeriesHidden(e);
              t.isHidden ||
                this.ctx.legend.legendHelpers.toggleDataSeries(t.realIndex, !1);
            }
          },
          {
            key: "resetSeries",
            value: function () {
              var e =
                  !(arguments.length > 0 && void 0 !== arguments[0]) ||
                  arguments[0],
                t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1],
                i =
                  !(arguments.length > 2 && void 0 !== arguments[2]) ||
                  arguments[2],
                a = this.w,
                n = st.clone(a.globals.initialSeries);
              (a.globals.previousPaths = []),
                i
                  ? ((a.globals.collapsedSeries = []),
                    (a.globals.ancillaryCollapsedSeries = []),
                    (a.globals.collapsedSeriesIndices = []),
                    (a.globals.ancillaryCollapsedSeriesIndices = []))
                  : (n = this.emptyCollapsedSeries(n)),
                (a.config.series = n),
                e &&
                  (t &&
                    ((a.globals.zoomed = !1),
                    this.ctx.updateHelpers.revertDefaultAxisMinMax()),
                  this.ctx.updateHelpers._updateSeries(
                    n,
                    a.config.chart.animations.dynamicAnimation.enabled
                  ));
            }
          },
          {
            key: "emptyCollapsedSeries",
            value: function (e) {
              for (var t = this.w, i = 0; i < e.length; i++)
                t.globals.collapsedSeriesIndices.indexOf(i) > -1 &&
                  (e[i].data = []);
              return e;
            }
          },
          {
            key: "toggleSeriesOnHover",
            value: function (e, t) {
              var i = this.w;
              t || (t = e.target);
              var a = i.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-series, .apexcharts-datalabels"
              );
              if ("mousemove" === e.type) {
                var n = parseInt(t.getAttribute("rel"), 10) - 1,
                  s = null,
                  o = null;
                i.globals.axisCharts || "radialBar" === i.config.chart.type
                  ? i.globals.axisCharts
                    ? ((s = i.globals.dom.baseEl.querySelector(
                        ".apexcharts-series[data\\:realIndex='".concat(n, "']")
                      )),
                      (o = i.globals.dom.baseEl.querySelector(
                        ".apexcharts-datalabels[data\\:realIndex='".concat(
                          n,
                          "']"
                        )
                      )))
                    : (s = i.globals.dom.baseEl.querySelector(
                        ".apexcharts-series[rel='".concat(n + 1, "']")
                      ))
                  : (s = i.globals.dom.baseEl.querySelector(
                      ".apexcharts-series[rel='".concat(n + 1, "'] path")
                    ));
                for (var r = 0; r < a.length; r++)
                  a[r].classList.add(this.legendInactiveClass);
                null !== s &&
                  (i.globals.axisCharts ||
                    s.parentNode.classList.remove(this.legendInactiveClass),
                  s.classList.remove(this.legendInactiveClass),
                  null !== o && o.classList.remove(this.legendInactiveClass));
              } else if ("mouseout" === e.type)
                for (var l = 0; l < a.length; l++)
                  a[l].classList.remove(this.legendInactiveClass);
            }
          },
          {
            key: "highlightRangeInSeries",
            value: function (e, t) {
              var i = this,
                a = this.w,
                n = a.globals.dom.baseEl.getElementsByClassName(
                  "apexcharts-heatmap-rect"
                ),
                s = function (e) {
                  for (var t = 0; t < n.length; t++)
                    n[t].classList[e](i.legendInactiveClass);
                };
              if ("mousemove" === e.type) {
                var o = parseInt(t.getAttribute("rel"), 10) - 1;
                s("add"),
                  (function (e) {
                    for (var t = 0; t < n.length; t++) {
                      var a = parseInt(n[t].getAttribute("val"), 10);
                      a >= e.from &&
                        a <= e.to &&
                        n[t].classList.remove(i.legendInactiveClass);
                    }
                  })(a.config.plotOptions.heatmap.colorScale.ranges[o]);
              } else "mouseout" === e.type && s("remove");
            }
          },
          {
            key: "getActiveConfigSeriesIndex",
            value: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : "asc",
                t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : [],
                i = this.w,
                a = 0;
              if (i.config.series.length > 1) {
                for (
                  var n = i.config.series.map(function (e, a) {
                      return e.data &&
                        e.data.length > 0 &&
                        -1 === i.globals.collapsedSeriesIndices.indexOf(a) &&
                        (!i.globals.comboCharts ||
                          0 === t.length ||
                          (t.length && t.indexOf(i.config.series[a].type) > -1))
                        ? a
                        : -1;
                    }),
                    s = "asc" === e ? 0 : n.length - 1;
                  "asc" === e ? s < n.length : s >= 0;
                  "asc" === e ? s++ : s--
                )
                  if (-1 !== n[s]) {
                    a = n[s];
                    break;
                  }
              }
              return a;
            }
          },
          {
            key: "getBarSeriesIndices",
            value: function () {
              return this.w.globals.comboCharts
                ? this.w.config.series
                    .map(function (e, t) {
                      return "bar" === e.type || "column" === e.type ? t : -1;
                    })
                    .filter(function (e) {
                      return -1 !== e;
                    })
                : this.w.config.series.map(function (e, t) {
                    return t;
                  });
            }
          },
          {
            key: "getPreviousPaths",
            value: function () {
              var e = this.w;
              (e.globals.previousPaths = []),
                [
                  "line",
                  "area",
                  "bar",
                  "rangebar",
                  "rangeArea",
                  "candlestick",
                  "radar"
                ].forEach(function (t) {
                  for (
                    var i = e.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-".concat(t, "-series .apexcharts-series")
                      ),
                      a = 0;
                    a < i.length;
                    a++
                  )
                    (function (t, i, a) {
                      for (
                        var n = t[i].childNodes,
                          s = {
                            type: a,
                            paths: [],
                            realIndex: t[i].getAttribute("data:realIndex")
                          },
                          o = 0;
                        o < n.length;
                        o++
                      )
                        if (n[o].hasAttribute("pathTo")) {
                          var r = n[o].getAttribute("pathTo");
                          s.paths.push({ d: r });
                        }
                      e.globals.previousPaths.push(s);
                    })(i, a, t);
                }),
                this.handlePrevBubbleScatterPaths("bubble"),
                this.handlePrevBubbleScatterPaths("scatter");
              var t = e.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-".concat(
                  e.config.chart.type,
                  " .apexcharts-series"
                )
              );
              if (t.length > 0)
                for (var i = 0; i < t.length; i++)
                  (function (t) {
                    for (
                      var i = e.globals.dom.baseEl.querySelectorAll(
                          ".apexcharts-"
                            .concat(
                              e.config.chart.type,
                              " .apexcharts-series[data\\:realIndex='"
                            )
                            .concat(t, "'] rect")
                        ),
                        a = [],
                        n = function (e) {
                          var t = function (t) {
                              return i[e].getAttribute(t);
                            },
                            n = {
                              x: parseFloat(t("x")),
                              y: parseFloat(t("y")),
                              width: parseFloat(t("width")),
                              height: parseFloat(t("height"))
                            };
                          a.push({
                            rect: n,
                            color: i[e].getAttribute("color")
                          });
                        },
                        s = 0;
                      s < i.length;
                      s++
                    )
                      n(s);
                    e.globals.previousPaths.push(a);
                  })(i);
              e.globals.axisCharts ||
                (e.globals.previousPaths = e.globals.series);
            }
          },
          {
            key: "handlePrevBubbleScatterPaths",
            value: function (e) {
              var t = this.w,
                i = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-".concat(e, "-series .apexcharts-series")
                );
              if (i.length > 0)
                for (var a = 0; a < i.length; a++) {
                  for (
                    var n = t.globals.dom.baseEl.querySelectorAll(
                        ".apexcharts-"
                          .concat(
                            e,
                            "-series .apexcharts-series[data\\:realIndex='"
                          )
                          .concat(a, "'] circle")
                      ),
                      s = [],
                      o = 0;
                    o < n.length;
                    o++
                  )
                    s.push({
                      x: n[o].getAttribute("cx"),
                      y: n[o].getAttribute("cy"),
                      r: n[o].getAttribute("r")
                    });
                  t.globals.previousPaths.push(s);
                }
            }
          },
          {
            key: "clearPreviousPaths",
            value: function () {
              var e = this.w;
              (e.globals.previousPaths = []),
                (e.globals.allSeriesCollapsed = !1);
            }
          },
          {
            key: "handleNoData",
            value: function () {
              var e = this.w,
                t = e.config.noData,
                i = new sn(this.ctx),
                a = e.globals.svgWidth / 2,
                n = e.globals.svgHeight / 2,
                s = "middle";
              if (
                ((e.globals.noData = !0),
                (e.globals.animationEnded = !0),
                "left" === t.align
                  ? ((a = 10), (s = "start"))
                  : "right" === t.align &&
                    ((a = e.globals.svgWidth - 10), (s = "end")),
                "top" === t.verticalAlign
                  ? (n = 50)
                  : "bottom" === t.verticalAlign &&
                    (n = e.globals.svgHeight - 50),
                (a += t.offsetX),
                (n = n + parseInt(t.style.fontSize, 10) + 2 + t.offsetY),
                void 0 !== t.text && "" !== t.text)
              ) {
                var o = i.drawText({
                  x: a,
                  y: n,
                  text: t.text,
                  textAnchor: s,
                  fontSize: t.style.fontSize,
                  fontFamily: t.style.fontFamily,
                  foreColor: t.style.color,
                  opacity: 1,
                  class: "apexcharts-text-nodata"
                });
                e.globals.dom.Paper.add(o);
              }
            }
          },
          {
            key: "setNullSeriesToZeroValues",
            value: function (e) {
              for (var t = this.w, i = 0; i < e.length; i++)
                if (0 === e[i].length)
                  for (
                    var a = 0;
                    a < e[t.globals.maxValsInArrayIndex].length;
                    a++
                  )
                    e[i].push(0);
              return e;
            }
          },
          {
            key: "hasAllSeriesEqualX",
            value: function () {
              for (
                var e = !0, t = this.w, i = this.filteredSeriesX(), a = 0;
                a < i.length - 1;
                a++
              )
                if (i[a][0] !== i[a + 1][0]) {
                  e = !1;
                  break;
                }
              return (t.globals.allSeriesHasEqualX = e), e;
            }
          },
          {
            key: "filteredSeriesX",
            value: function () {
              return this.w.globals.seriesX.map(function (e) {
                return e.length > 0 ? e : [];
              });
            }
          }
        ]),
        e
      );
    })(),
    sL = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.twoDSeries = []),
          (this.threeDSeries = []),
          (this.twoDSeriesX = []),
          (this.seriesGoals = []),
          (this.coreUtils = new ss(this.ctx));
      }
      return (
        n1(e, [
          {
            key: "isMultiFormat",
            value: function () {
              return this.isFormatXY() || this.isFormat2DArray();
            }
          },
          {
            key: "isFormatXY",
            value: function () {
              var e = this.w.config.series.slice(),
                t = new sS(this.ctx);
              if (
                ((this.activeSeriesIndex = t.getActiveConfigSeriesIndex()),
                void 0 !== e[this.activeSeriesIndex].data &&
                  e[this.activeSeriesIndex].data.length > 0 &&
                  null !== e[this.activeSeriesIndex].data[0] &&
                  void 0 !== e[this.activeSeriesIndex].data[0].x &&
                  null !== e[this.activeSeriesIndex].data[0])
              )
                return !0;
            }
          },
          {
            key: "isFormat2DArray",
            value: function () {
              var e = this.w.config.series.slice(),
                t = new sS(this.ctx);
              if (
                ((this.activeSeriesIndex = t.getActiveConfigSeriesIndex()),
                void 0 !== e[this.activeSeriesIndex].data &&
                  e[this.activeSeriesIndex].data.length > 0 &&
                  void 0 !== e[this.activeSeriesIndex].data[0] &&
                  null !== e[this.activeSeriesIndex].data[0] &&
                  e[this.activeSeriesIndex].data[0].constructor === Array)
              )
                return !0;
            }
          },
          {
            key: "handleFormat2DArray",
            value: function (e, t) {
              for (
                var i = this.w.config,
                  a = this.w.globals,
                  n =
                    "boxPlot" === i.chart.type ||
                    "boxPlot" === i.series[t].type,
                  s = 0;
                s < e[t].data.length;
                s++
              )
                if (
                  (void 0 !== e[t].data[s][1] &&
                    (Array.isArray(e[t].data[s][1]) &&
                    4 === e[t].data[s][1].length &&
                    !n
                      ? this.twoDSeries.push(st.parseNumber(e[t].data[s][1][3]))
                      : e[t].data[s].length >= 5
                      ? this.twoDSeries.push(st.parseNumber(e[t].data[s][4]))
                      : this.twoDSeries.push(st.parseNumber(e[t].data[s][1])),
                    (a.dataFormatXNumeric = !0)),
                  "datetime" === i.xaxis.type)
                ) {
                  var o = new Date(e[t].data[s][0]);
                  (o = new Date(o).getTime()), this.twoDSeriesX.push(o);
                } else this.twoDSeriesX.push(e[t].data[s][0]);
              for (var r = 0; r < e[t].data.length; r++)
                void 0 !== e[t].data[r][2] &&
                  (this.threeDSeries.push(e[t].data[r][2]), (a.isDataXYZ = !0));
            }
          },
          {
            key: "handleFormatXY",
            value: function (e, t) {
              var i = this.w.config,
                a = this.w.globals,
                n = new sg(this.ctx),
                s = t;
              a.collapsedSeriesIndices.indexOf(t) > -1 &&
                (s = this.activeSeriesIndex);
              for (var o = 0; o < e[t].data.length; o++)
                void 0 !== e[t].data[o].y &&
                  (Array.isArray(e[t].data[o].y)
                    ? this.twoDSeries.push(
                        st.parseNumber(
                          e[t].data[o].y[e[t].data[o].y.length - 1]
                        )
                      )
                    : this.twoDSeries.push(st.parseNumber(e[t].data[o].y))),
                  void 0 !== e[t].data[o].goals &&
                  Array.isArray(e[t].data[o].goals)
                    ? (void 0 === this.seriesGoals[t] &&
                        (this.seriesGoals[t] = []),
                      this.seriesGoals[t].push(e[t].data[o].goals))
                    : (void 0 === this.seriesGoals[t] &&
                        (this.seriesGoals[t] = []),
                      this.seriesGoals[t].push(null));
              for (var r = 0; r < e[s].data.length; r++) {
                var l = "string" == typeof e[s].data[r].x,
                  c = Array.isArray(e[s].data[r].x),
                  h = !c && !!n.isValidDate(e[s].data[r].x.toString());
                if (l || h) {
                  if (l || i.xaxis.convertedCatToNumeric) {
                    var d = a.isBarHorizontal && a.isRangeData;
                    "datetime" !== i.xaxis.type || d
                      ? ((this.fallbackToCategory = !0),
                        this.twoDSeriesX.push(e[s].data[r].x))
                      : this.twoDSeriesX.push(n.parseDate(e[s].data[r].x));
                  } else
                    "datetime" === i.xaxis.type
                      ? this.twoDSeriesX.push(
                          n.parseDate(e[s].data[r].x.toString())
                        )
                      : ((a.dataFormatXNumeric = !0),
                        (a.isXNumeric = !0),
                        this.twoDSeriesX.push(parseFloat(e[s].data[r].x)));
                } else
                  c
                    ? (this.fallbackToCategory = !0)
                    : ((a.isXNumeric = !0), (a.dataFormatXNumeric = !0)),
                    this.twoDSeriesX.push(e[s].data[r].x);
              }
              if (e[t].data[0] && void 0 !== e[t].data[0].z) {
                for (var u = 0; u < e[t].data.length; u++)
                  this.threeDSeries.push(e[t].data[u].z);
                a.isDataXYZ = !0;
              }
            }
          },
          {
            key: "handleRangeData",
            value: function (e, t) {
              var i = this.w.globals,
                a = {};
              return (
                this.isFormat2DArray()
                  ? (a = this.handleRangeDataFormat("array", e, t))
                  : this.isFormatXY() &&
                    (a = this.handleRangeDataFormat("xy", e, t)),
                i.seriesRangeStart.push(a.start),
                i.seriesRangeEnd.push(a.end),
                i.seriesRange.push(a.rangeUniques),
                i.seriesRange.forEach(function (e, t) {
                  e &&
                    e.forEach(function (e, t) {
                      e.y.forEach(function (t, i) {
                        for (var a = 0; a < e.y.length; a++)
                          if (i !== a) {
                            var n = t.y1,
                              s = t.y2,
                              o = e.y[a].y1;
                            n <= e.y[a].y2 &&
                              o <= s &&
                              (0 > e.overlaps.indexOf(t.rangeName) &&
                                e.overlaps.push(t.rangeName),
                              0 > e.overlaps.indexOf(e.y[a].rangeName) &&
                                e.overlaps.push(e.y[a].rangeName));
                          }
                      });
                    });
                }),
                a
              );
            }
          },
          {
            key: "handleCandleStickBoxData",
            value: function (e, t) {
              var i = this.w.globals,
                a = {};
              return (
                this.isFormat2DArray()
                  ? (a = this.handleCandleStickBoxDataFormat("array", e, t))
                  : this.isFormatXY() &&
                    (a = this.handleCandleStickBoxDataFormat("xy", e, t)),
                (i.seriesCandleO[t] = a.o),
                (i.seriesCandleH[t] = a.h),
                (i.seriesCandleM[t] = a.m),
                (i.seriesCandleL[t] = a.l),
                (i.seriesCandleC[t] = a.c),
                a
              );
            }
          },
          {
            key: "handleRangeDataFormat",
            value: function (e, t, i) {
              var a = [],
                n = [],
                s = t[i].data
                  .filter(function (e, t, i) {
                    return (
                      t ===
                      i.findIndex(function (t) {
                        return t.x === e.x;
                      })
                    );
                  })
                  .map(function (e, t) {
                    return { x: e.x, overlaps: [], y: [] };
                  });
              if ("array" === e)
                for (var o = 0; o < t[i].data.length; o++)
                  Array.isArray(t[i].data[o])
                    ? (a.push(t[i].data[o][1][0]), n.push(t[i].data[o][1][1]))
                    : (a.push(t[i].data[o]), n.push(t[i].data[o]));
              else if ("xy" === e)
                for (var r = 0; r < t[i].data.length; r++)
                  (function (e) {
                    var o = Array.isArray(t[i].data[e].y),
                      r = st.randomId(),
                      l = t[i].data[e].x,
                      c = {
                        y1: o ? t[i].data[e].y[0] : t[i].data[e].y,
                        y2: o ? t[i].data[e].y[1] : t[i].data[e].y,
                        rangeName: r
                      };
                    t[i].data[e].rangeName = r;
                    var h = s.findIndex(function (e) {
                      return e.x === l;
                    });
                    s[h].y.push(c), a.push(c.y1), n.push(c.y2);
                  })(r);
              return { start: a, end: n, rangeUniques: s };
            }
          },
          {
            key: "handleCandleStickBoxDataFormat",
            value: function (e, t, i) {
              var a = this.w,
                n =
                  "boxPlot" === a.config.chart.type ||
                  "boxPlot" === a.config.series[i].type,
                s = [],
                o = [],
                r = [],
                l = [],
                c = [];
              if ("array" === e) {
                if (
                  (n && 6 === t[i].data[0].length) ||
                  (!n && 5 === t[i].data[0].length)
                )
                  for (var h = 0; h < t[i].data.length; h++)
                    s.push(t[i].data[h][1]),
                      o.push(t[i].data[h][2]),
                      n
                        ? (r.push(t[i].data[h][3]),
                          l.push(t[i].data[h][4]),
                          c.push(t[i].data[h][5]))
                        : (l.push(t[i].data[h][3]), c.push(t[i].data[h][4]));
                else
                  for (var d = 0; d < t[i].data.length; d++)
                    Array.isArray(t[i].data[d][1]) &&
                      (s.push(t[i].data[d][1][0]),
                      o.push(t[i].data[d][1][1]),
                      n
                        ? (r.push(t[i].data[d][1][2]),
                          l.push(t[i].data[d][1][3]),
                          c.push(t[i].data[d][1][4]))
                        : (l.push(t[i].data[d][1][2]),
                          c.push(t[i].data[d][1][3])));
              } else if ("xy" === e)
                for (var u = 0; u < t[i].data.length; u++)
                  Array.isArray(t[i].data[u].y) &&
                    (s.push(t[i].data[u].y[0]),
                    o.push(t[i].data[u].y[1]),
                    n
                      ? (r.push(t[i].data[u].y[2]),
                        l.push(t[i].data[u].y[3]),
                        c.push(t[i].data[u].y[4]))
                      : (l.push(t[i].data[u].y[2]), c.push(t[i].data[u].y[3])));
              return { o: s, h: o, m: r, l: l, c: c };
            }
          },
          {
            key: "parseDataAxisCharts",
            value: function (e) {
              var t,
                i = this,
                a =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : this.ctx,
                n = this.w.config,
                s = this.w.globals,
                o = new sg(a),
                r =
                  n.labels.length > 0
                    ? n.labels.slice()
                    : n.xaxis.categories.slice();
              if (
                ((s.isRangeBar =
                  "rangeBar" === n.chart.type && s.isBarHorizontal),
                (s.hasXaxisGroups =
                  "category" === n.xaxis.type &&
                  n.xaxis.group.groups.length > 0),
                s.hasXaxisGroups && (s.groups = n.xaxis.group.groups),
                (s.hasSeriesGroups =
                  null === (t = e[0]) || void 0 === t ? void 0 : t.group),
                s.hasSeriesGroups)
              ) {
                var l = [],
                  c = n8(
                    new Set(
                      e.map(function (e) {
                        return e.group;
                      })
                    )
                  );
                e.forEach(function (e, t) {
                  var i = c.indexOf(e.group);
                  l[i] || (l[i] = []), l[i].push(e.name);
                }),
                  (s.seriesGroups = l);
              }
              for (var h = 0; h < e.length; h++) {
                if (
                  ((this.twoDSeries = []),
                  (this.twoDSeriesX = []),
                  (this.threeDSeries = []),
                  void 0 === e[h].data)
                )
                  return void console.error(
                    "It is a possibility that you may have not included 'data' property in series."
                  );
                if (
                  (("rangeBar" !== n.chart.type &&
                    "rangeArea" !== n.chart.type &&
                    "rangeBar" !== e[h].type &&
                    "rangeArea" !== e[h].type) ||
                    ((s.isRangeData = !0),
                    s.isComboCharts
                      ? ("rangeBar" !== e[h].type &&
                          "rangeArea" !== e[h].type) ||
                        this.handleRangeData(e, h)
                      : ("rangeBar" !== n.chart.type &&
                          "rangeArea" !== n.chart.type) ||
                        this.handleRangeData(e, h)),
                  this.isMultiFormat())
                )
                  this.isFormat2DArray()
                    ? this.handleFormat2DArray(e, h)
                    : this.isFormatXY() && this.handleFormatXY(e, h),
                    ("candlestick" !== n.chart.type &&
                      "candlestick" !== e[h].type &&
                      "boxPlot" !== n.chart.type &&
                      "boxPlot" !== e[h].type) ||
                      this.handleCandleStickBoxData(e, h),
                    s.series.push(this.twoDSeries),
                    s.labels.push(this.twoDSeriesX),
                    s.seriesX.push(this.twoDSeriesX),
                    (s.seriesGoals = this.seriesGoals),
                    h !== this.activeSeriesIndex ||
                      this.fallbackToCategory ||
                      (s.isXNumeric = !0);
                else {
                  "datetime" === n.xaxis.type
                    ? ((s.isXNumeric = !0),
                      (function () {
                        for (var e = 0; e < r.length; e++)
                          if ("string" == typeof r[e]) {
                            if (!o.isValidDate(r[e]))
                              throw Error(
                                "You have provided invalid Date format. Please provide a valid JavaScript Date"
                              );
                            i.twoDSeriesX.push(o.parseDate(r[e]));
                          } else i.twoDSeriesX.push(r[e]);
                      })(),
                      s.seriesX.push(this.twoDSeriesX))
                    : "numeric" === n.xaxis.type &&
                      ((s.isXNumeric = !0),
                      r.length > 0 &&
                        ((this.twoDSeriesX = r),
                        s.seriesX.push(this.twoDSeriesX))),
                    s.labels.push(this.twoDSeriesX);
                  var d = e[h].data.map(function (e) {
                    return st.parseNumber(e);
                  });
                  s.series.push(d);
                }
                s.seriesZ.push(this.threeDSeries),
                  void 0 !== e[h].name
                    ? s.seriesNames.push(e[h].name)
                    : s.seriesNames.push("series-" + parseInt(h + 1, 10)),
                  void 0 !== e[h].color
                    ? s.seriesColors.push(e[h].color)
                    : s.seriesColors.push(void 0);
              }
              return this.w;
            }
          },
          {
            key: "parseDataNonAxisCharts",
            value: function (e) {
              var t = this.w.globals,
                i = this.w.config;
              (t.series = e.slice()), (t.seriesNames = i.labels.slice());
              for (var a = 0; a < t.series.length; a++)
                void 0 === t.seriesNames[a] &&
                  t.seriesNames.push("series-" + (a + 1));
              return this.w;
            }
          },
          {
            key: "handleExternalLabelsData",
            value: function (e) {
              var t = this.w.config,
                i = this.w.globals;
              t.xaxis.categories.length > 0
                ? (i.labels = t.xaxis.categories)
                : t.labels.length > 0
                ? (i.labels = t.labels.slice())
                : this.fallbackToCategory
                ? ((i.labels = i.labels[0]),
                  i.seriesRange.length &&
                    (i.seriesRange.map(function (e) {
                      e.forEach(function (e) {
                        0 > i.labels.indexOf(e.x) && e.x && i.labels.push(e.x);
                      });
                    }),
                    (i.labels = Array.from(
                      new Set(i.labels.map(JSON.stringify)),
                      JSON.parse
                    ))),
                  t.xaxis.convertedCatToNumeric &&
                    (new sx(t).convertCatToNumericXaxis(
                      t,
                      this.ctx,
                      i.seriesX[0]
                    ),
                    this._generateExternalLabels(e)))
                : this._generateExternalLabels(e);
            }
          },
          {
            key: "_generateExternalLabels",
            value: function (e) {
              var t = this.w.globals,
                i = this.w.config,
                a = [];
              if (t.axisCharts) {
                if (t.series.length > 0) {
                  if (this.isFormatXY())
                    for (
                      var n = i.series.map(function (e, t) {
                          return e.data.filter(function (e, t, i) {
                            return (
                              i.findIndex(function (t) {
                                return t.x === e.x;
                              }) === t
                            );
                          });
                        }),
                        s = n.reduce(function (e, t, i, a) {
                          return a[e].length > t.length ? e : i;
                        }, 0),
                        o = 0;
                      o < n[s].length;
                      o++
                    )
                      a.push(o + 1);
                  else
                    for (
                      var r = 0;
                      r < t.series[t.maxValsInArrayIndex].length;
                      r++
                    )
                      a.push(r + 1);
                }
                t.seriesX = [];
                for (var l = 0; l < e.length; l++) t.seriesX.push(a);
                this.w.globals.isBarHorizontal || (t.isXNumeric = !0);
              }
              if (0 === a.length) {
                a = t.axisCharts
                  ? []
                  : t.series.map(function (e, t) {
                      return t + 1;
                    });
                for (var c = 0; c < e.length; c++) t.seriesX.push(a);
              }
              (t.labels = a),
                i.xaxis.convertedCatToNumeric &&
                  (t.categoryLabels = a.map(function (e) {
                    return i.xaxis.labels.formatter(e);
                  })),
                (t.noLabelsProvided = !0);
            }
          },
          {
            key: "parseData",
            value: function (e) {
              var t = this.w,
                i = t.config,
                a = t.globals;
              if (
                (this.excludeCollapsedSeriesInYAxis(),
                (this.fallbackToCategory = !1),
                this.ctx.core.resetGlobals(),
                this.ctx.core.isMultipleY(),
                a.axisCharts
                  ? (this.parseDataAxisCharts(e),
                    this.coreUtils.getLargestSeries())
                  : this.parseDataNonAxisCharts(e),
                i.chart.stacked)
              ) {
                var n = new sS(this.ctx);
                a.series = n.setNullSeriesToZeroValues(a.series);
              }
              this.coreUtils.getSeriesTotals(),
                a.axisCharts &&
                  (a.stackedSeriesTotals =
                    this.coreUtils.getStackedSeriesTotals()),
                this.coreUtils.getPercentSeries(),
                a.dataFormatXNumeric ||
                  (a.isXNumeric &&
                    ("numeric" !== i.xaxis.type ||
                      0 !== i.labels.length ||
                      0 !== i.xaxis.categories.length)) ||
                  this.handleExternalLabelsData(e);
              for (
                var s = this.coreUtils.getCategoryLabels(a.labels), o = 0;
                o < s.length;
                o++
              )
                if (Array.isArray(s[o])) {
                  a.isMultiLineX = !0;
                  break;
                }
            }
          },
          {
            key: "excludeCollapsedSeriesInYAxis",
            value: function () {
              var e = this,
                t = this.w;
              t.globals.ignoreYAxisIndexes = t.globals.collapsedSeries.map(
                function (i, a) {
                  if (e.w.globals.isMultipleYAxis && !t.config.chart.stacked)
                    return i.index;
                }
              );
            }
          }
        ]),
        e
      );
    })(),
    sO = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "getLabel",
            value: function (e, t, i, a) {
              var n,
                s,
                o =
                  arguments.length > 4 && void 0 !== arguments[4]
                    ? arguments[4]
                    : [],
                r =
                  arguments.length > 5 && void 0 !== arguments[5]
                    ? arguments[5]
                    : "12px",
                l =
                  !(arguments.length > 6 && void 0 !== arguments[6]) ||
                  arguments[6],
                c = this.w,
                h = void 0 === e[a] ? "" : e[a],
                d = h,
                u = c.globals.xLabelFormatter,
                g = c.config.xaxis.labels.formatter,
                p = !1,
                f = new sp(this.ctx);
              l &&
                ((d = f.xLabelFormat(u, h, h, {
                  i: a,
                  dateFormatter: new sg(this.ctx).formatDate,
                  w: c
                })),
                void 0 !== g &&
                  (d = g(h, e[a], {
                    i: a,
                    dateFormatter: new sg(this.ctx).formatDate,
                    w: c
                  }))),
                t.length > 0
                  ? ((n = t[a].unit),
                    (s = null),
                    t.forEach(function (e) {
                      "month" === e.unit
                        ? (s = "year")
                        : "day" === e.unit
                        ? (s = "month")
                        : "hour" === e.unit
                        ? (s = "day")
                        : "minute" === e.unit && (s = "hour");
                    }),
                    (p = s === n),
                    (i = t[a].position),
                    (d = t[a].value))
                  : "datetime" === c.config.xaxis.type &&
                    void 0 === g &&
                    (d = ""),
                void 0 === d && (d = ""),
                (d = Array.isArray(d) ? d : d.toString());
              var m = new sn(this.ctx),
                x = {};
              x =
                c.globals.rotateXLabels && l
                  ? m.getTextRects(
                      d,
                      parseInt(r, 10),
                      null,
                      "rotate(".concat(c.config.xaxis.labels.rotate, " 0 0)"),
                      !1
                    )
                  : m.getTextRects(d, parseInt(r, 10));
              var b =
                !c.config.xaxis.labels.showDuplicates && this.ctx.timeScale;
              return (
                !Array.isArray(d) &&
                  (0 === d.indexOf("NaN") ||
                    0 === d.toLowerCase().indexOf("invalid") ||
                    d.toLowerCase().indexOf("infinity") >= 0 ||
                    (o.indexOf(d) >= 0 && b)) &&
                  (d = ""),
                { x: i, text: d, textRect: x, isBold: p }
              );
            }
          },
          {
            key: "checkLabelBasedOnTickamount",
            value: function (e, t, i) {
              var a = this.w,
                n = a.config.xaxis.tickAmount;
              return (
                "dataPoints" === n &&
                  (n = Math.round(a.globals.gridWidth / 120)),
                n > i || e % Math.round(i / (n + 1)) == 0 || (t.text = ""),
                t
              );
            }
          },
          {
            key: "checkForOverflowingLabels",
            value: function (e, t, i, a, n) {
              var s = this.w;
              if (
                (0 === e && s.globals.skipFirstTimelinelabel && (t.text = ""),
                e === i - 1 && s.globals.skipLastTimelinelabel && (t.text = ""),
                s.config.xaxis.labels.hideOverlappingLabels && a.length > 0)
              ) {
                var o = n[n.length - 1];
                t.x <
                  o.textRect.width /
                    (s.globals.rotateXLabels
                      ? Math.abs(s.config.xaxis.labels.rotate) / 12
                      : 1.01) +
                    o.x && (t.text = "");
              }
              return t;
            }
          },
          {
            key: "checkForReversedLabels",
            value: function (e, t) {
              var i = this.w;
              return (
                i.config.yaxis[e] && i.config.yaxis[e].reversed && t.reverse(),
                t
              );
            }
          },
          {
            key: "isYAxisHidden",
            value: function (e) {
              var t = this.w,
                i = new ss(this.ctx);
              return (
                !t.config.yaxis[e].show ||
                (!t.config.yaxis[e].showForNullSeries &&
                  i.isSeriesNull(e) &&
                  -1 === t.globals.collapsedSeriesIndices.indexOf(e))
              );
            }
          },
          {
            key: "getYAxisForeColor",
            value: function (e, t) {
              var i = this.w;
              return (
                Array.isArray(e) &&
                  i.globals.yAxisScale[t] &&
                  this.ctx.theme.pushExtraColors(
                    e,
                    i.globals.yAxisScale[t].result.length,
                    !1
                  ),
                e
              );
            }
          },
          {
            key: "drawYAxisTicks",
            value: function (e, t, i, a, n, s, o) {
              var r = this.w,
                l = new sn(this.ctx),
                c = r.globals.translateY;
              if (a.show && t > 0) {
                !0 === r.config.yaxis[n].opposite && (e += a.width);
                for (var h = t; h >= 0; h--) {
                  var d = c + t / 10 + r.config.yaxis[n].labels.offsetY - 1;
                  r.globals.isBarHorizontal && (d = s * h),
                    "heatmap" === r.config.chart.type && (d += s / 2);
                  var u = l.drawLine(
                    e + i.offsetX - a.width + a.offsetX,
                    d + a.offsetY,
                    e + i.offsetX + a.offsetX,
                    d + a.offsetY,
                    a.color
                  );
                  o.add(u), (c += s);
                }
              }
            }
          }
        ]),
        e
      );
    })(),
    sT = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "scaleSvgNode",
            value: function (e, t) {
              var i = parseFloat(e.getAttributeNS(null, "width")),
                a = parseFloat(e.getAttributeNS(null, "height"));
              e.setAttributeNS(null, "width", i * t),
                e.setAttributeNS(null, "height", a * t),
                e.setAttributeNS(null, "viewBox", "0 0 " + i + " " + a);
            }
          },
          {
            key: "fixSvgStringForIe11",
            value: function (e) {
              if (!st.isIE11()) return e.replace(/&nbsp;/g, "&#160;");
              var t = 0,
                i = e.replace(
                  /xmlns="http:\/\/www.w3.org\/2000\/svg"/g,
                  function (e) {
                    return 2 == ++t
                      ? 'xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.dev"'
                      : e;
                  }
                );
              return (i = i.replace(/xmlns:NS\d+=""/g, "")).replace(
                /NS\d+:(\w+:\w+=")/g,
                "$1"
              );
            }
          },
          {
            key: "getSvgString",
            value: function (e) {
              null == e && (e = 1);
              var t = this.w.globals.dom.Paper.svg();
              if (1 !== e) {
                var i = this.w.globals.dom.Paper.node.cloneNode(!0);
                this.scaleSvgNode(i, e),
                  (t = new XMLSerializer().serializeToString(i));
              }
              return this.fixSvgStringForIe11(t);
            }
          },
          {
            key: "cleanup",
            value: function () {
              var e = this.w,
                t = e.globals.dom.baseEl.getElementsByClassName(
                  "apexcharts-xcrosshairs"
                ),
                i = e.globals.dom.baseEl.getElementsByClassName(
                  "apexcharts-ycrosshairs"
                ),
                a = e.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-zoom-rect, .apexcharts-selection-rect"
                );
              Array.prototype.forEach.call(a, function (e) {
                e.setAttribute("width", 0);
              }),
                t &&
                  t[0] &&
                  (t[0].setAttribute("x", -500),
                  t[0].setAttribute("x1", -500),
                  t[0].setAttribute("x2", -500)),
                i &&
                  i[0] &&
                  (i[0].setAttribute("y", -100),
                  i[0].setAttribute("y1", -100),
                  i[0].setAttribute("y2", -100));
            }
          },
          {
            key: "svgUrl",
            value: function () {
              this.cleanup();
              var e = this.getSvgString(),
                t = new Blob([e], { type: "image/svg+xml;charset=utf-8" });
              return URL.createObjectURL(t);
            }
          },
          {
            key: "dataURI",
            value: function (e) {
              var t = this;
              return new Promise(function (i) {
                var a = t.w,
                  n = e ? e.scale || e.width / a.globals.svgWidth : 1;
                t.cleanup();
                var s = document.createElement("canvas");
                (s.width = a.globals.svgWidth * n),
                  (s.height =
                    parseInt(a.globals.dom.elWrap.style.height, 10) * n);
                var o =
                    "transparent" === a.config.chart.background
                      ? "#fff"
                      : a.config.chart.background,
                  r = s.getContext("2d");
                (r.fillStyle = o), r.fillRect(0, 0, s.width * n, s.height * n);
                var l = t.getSvgString(n);
                if (window.canvg && st.isIE11()) {
                  var c = window.canvg.Canvg.fromString(r, l, {
                    ignoreClear: !0,
                    ignoreDimensions: !0
                  });
                  c.start();
                  var h = s.msToBlob();
                  c.stop(), i({ blob: h });
                } else {
                  var d = "data:image/svg+xml," + encodeURIComponent(l),
                    u = new Image();
                  (u.crossOrigin = "anonymous"),
                    (u.onload = function () {
                      (r.drawImage(u, 0, 0), s.msToBlob)
                        ? i({ blob: s.msToBlob() })
                        : i({ imgURI: s.toDataURL("image/png") });
                    }),
                    (u.src = d);
                }
              });
            }
          },
          {
            key: "exportToSVG",
            value: function () {
              this.triggerDownload(
                this.svgUrl(),
                this.w.config.chart.toolbar.export.svg.filename,
                ".svg"
              );
            }
          },
          {
            key: "exportToPng",
            value: function () {
              var e = this;
              this.dataURI().then(function (t) {
                var i = t.imgURI,
                  a = t.blob;
                a
                  ? navigator.msSaveOrOpenBlob(a, e.w.globals.chartID + ".png")
                  : e.triggerDownload(
                      i,
                      e.w.config.chart.toolbar.export.png.filename,
                      ".png"
                    );
              });
            }
          },
          {
            key: "exportToCSV",
            value: function (e) {
              var t = this,
                i = e.series,
                a = e.fileName,
                n = e.columnDelimiter,
                s = void 0 === n ? "," : n,
                o = e.lineDelimiter,
                r = void 0 === o ? "\n" : o,
                l = this.w;
              i || (i = l.config.series);
              var c = [],
                h = [],
                d = "",
                u = l.globals.series.map(function (e, t) {
                  return -1 === l.globals.collapsedSeriesIndices.indexOf(t)
                    ? e
                    : [];
                }),
                g = Math.max.apply(
                  Math,
                  n8(
                    i.map(function (e) {
                      return e.data ? e.data.length : 0;
                    })
                  )
                ),
                p = new sL(this.ctx),
                f = new sO(this.ctx),
                m = function (e) {
                  var i = "";
                  if (l.globals.axisCharts) {
                    if (
                      "category" === l.config.xaxis.type ||
                      l.config.xaxis.convertedCatToNumeric
                    ) {
                      if (l.globals.isBarHorizontal) {
                        var a = l.globals.yLabelFormatters[0],
                          n = new sS(t.ctx).getActiveConfigSeriesIndex();
                        i = a(l.globals.labels[e], {
                          seriesIndex: n,
                          dataPointIndex: e,
                          w: l
                        });
                      } else
                        i = f.getLabel(
                          l.globals.labels,
                          l.globals.timescaleLabels,
                          0,
                          e
                        ).text;
                    }
                    "datetime" === l.config.xaxis.type &&
                      (l.config.xaxis.categories.length
                        ? (i = l.config.xaxis.categories[e])
                        : l.config.labels.length && (i = l.config.labels[e]));
                  } else i = l.config.labels[e];
                  return (
                    Array.isArray(i) && (i = i.join(" ")),
                    st.isNumber(i) ? i : i.split(s).join("")
                  );
                },
                x = function (e, t) {
                  if ((c.length && 0 === t && h.push(c.join(s)), e.data)) {
                    e.data =
                      (e.data.length && e.data) ||
                      n8(Array(g)).map(function () {
                        return "";
                      });
                    for (var a, n = 0; n < e.data.length; n++) {
                      c = [];
                      var o = m(n);
                      if (
                        (o ||
                          (p.isFormatXY()
                            ? (o = i[t].data[n].x)
                            : p.isFormat2DArray() &&
                              (o = i[t].data[n] ? i[t].data[n][0] : "")),
                        0 === t)
                      ) {
                        c.push(
                          ((a = o),
                          "datetime" === l.config.xaxis.type &&
                          String(a).length >= 10
                            ? l.config.chart.toolbar.export.csv.dateFormatter(o)
                            : st.isNumber(o)
                            ? o
                            : o.split(s).join(""))
                        );
                        for (var r, d = 0; d < l.globals.series.length; d++)
                          p.isFormatXY()
                            ? c.push(
                                null === (r = i[d].data[n]) || void 0 === r
                                  ? void 0
                                  : r.y
                              )
                            : c.push(u[d][n]);
                      }
                      ("candlestick" === l.config.chart.type ||
                        (e.type && "candlestick" === e.type)) &&
                        (c.pop(),
                        c.push(l.globals.seriesCandleO[t][n]),
                        c.push(l.globals.seriesCandleH[t][n]),
                        c.push(l.globals.seriesCandleL[t][n]),
                        c.push(l.globals.seriesCandleC[t][n])),
                        ("boxPlot" === l.config.chart.type ||
                          (e.type && "boxPlot" === e.type)) &&
                          (c.pop(),
                          c.push(l.globals.seriesCandleO[t][n]),
                          c.push(l.globals.seriesCandleH[t][n]),
                          c.push(l.globals.seriesCandleM[t][n]),
                          c.push(l.globals.seriesCandleL[t][n]),
                          c.push(l.globals.seriesCandleC[t][n])),
                        "rangeBar" === l.config.chart.type &&
                          (c.pop(),
                          c.push(l.globals.seriesRangeStart[t][n]),
                          c.push(l.globals.seriesRangeEnd[t][n])),
                        c.length && h.push(c.join(s));
                    }
                  }
                };
              c.push(l.config.chart.toolbar.export.csv.headerCategory),
                "boxPlot" === l.config.chart.type
                  ? (c.push("minimum"),
                    c.push("q1"),
                    c.push("median"),
                    c.push("q3"),
                    c.push("maximum"))
                  : "candlestick" === l.config.chart.type
                  ? (c.push("open"),
                    c.push("high"),
                    c.push("low"),
                    c.push("close"))
                  : "rangeBar" === l.config.chart.type
                  ? (c.push("minimum"), c.push("maximum"))
                  : i.map(function (e, t) {
                      var i = (e.name ? e.name : "series-".concat(t)) + "";
                      l.globals.axisCharts &&
                        c.push(
                          i.split(s).join("")
                            ? i.split(s).join("")
                            : "series-".concat(t)
                        );
                    }),
                l.globals.axisCharts ||
                  (c.push(l.config.chart.toolbar.export.csv.headerValue),
                  h.push(c.join(s))),
                i.map(function (e, t) {
                  l.globals.axisCharts
                    ? x(e, t)
                    : ((c = []).push(l.globals.labels[t].split(s).join("")),
                      c.push(u[t]),
                      h.push(c.join(s)));
                }),
                (d += h.join(r)),
                this.triggerDownload(
                  "data:text/csv; charset=utf-8," +
                    encodeURIComponent("\uFEFF" + d),
                  a || l.config.chart.toolbar.export.csv.filename,
                  ".csv"
                );
            }
          },
          {
            key: "triggerDownload",
            value: function (e, t, i) {
              var a = document.createElement("a");
              (a.href = e),
                (a.download = (t || this.w.globals.chartID) + i),
                document.body.appendChild(a),
                a.click(),
                document.body.removeChild(a);
            }
          }
        ]),
        e
      );
    })(),
    sP = (function () {
      function e(t, i) {
        nQ(this, e), (this.ctx = t), (this.elgrid = i), (this.w = t.w);
        var a = this.w;
        (this.axesUtils = new sO(t)),
          (this.xaxisLabels = a.globals.labels.slice()),
          a.globals.timescaleLabels.length > 0 &&
            !a.globals.isBarHorizontal &&
            (this.xaxisLabels = a.globals.timescaleLabels.slice()),
          a.config.xaxis.overwriteCategories &&
            (this.xaxisLabels = a.config.xaxis.overwriteCategories),
          (this.drawnLabels = []),
          (this.drawnLabelsRects = []),
          "top" === a.config.xaxis.position
            ? (this.offY = 0)
            : (this.offY = a.globals.gridHeight + 1),
          (this.offY = this.offY + a.config.xaxis.axisBorder.offsetY),
          (this.isCategoryBarHorizontal =
            "bar" === a.config.chart.type &&
            a.config.plotOptions.bar.horizontal),
          (this.xaxisFontSize = a.config.xaxis.labels.style.fontSize),
          (this.xaxisFontFamily = a.config.xaxis.labels.style.fontFamily),
          (this.xaxisForeColors = a.config.xaxis.labels.style.colors),
          (this.xaxisBorderWidth = a.config.xaxis.axisBorder.width),
          this.isCategoryBarHorizontal &&
            (this.xaxisBorderWidth =
              a.config.yaxis[0].axisBorder.width.toString()),
          this.xaxisBorderWidth.indexOf("%") > -1
            ? (this.xaxisBorderWidth =
                (a.globals.gridWidth * parseInt(this.xaxisBorderWidth, 10)) /
                100)
            : (this.xaxisBorderWidth = parseInt(this.xaxisBorderWidth, 10)),
          (this.xaxisBorderHeight = a.config.xaxis.axisBorder.height),
          (this.yaxis = a.config.yaxis[0]);
      }
      return (
        n1(e, [
          {
            key: "drawXaxis",
            value: function () {
              var e = this.w,
                t = new sn(this.ctx),
                i = t.group({
                  class: "apexcharts-xaxis",
                  transform: "translate("
                    .concat(e.config.xaxis.offsetX, ", ")
                    .concat(e.config.xaxis.offsetY, ")")
                }),
                a = t.group({
                  class: "apexcharts-xaxis-texts-g",
                  transform: "translate("
                    .concat(e.globals.translateXAxisX, ", ")
                    .concat(e.globals.translateXAxisY, ")")
                });
              i.add(a);
              for (var n = [], s = 0; s < this.xaxisLabels.length; s++)
                n.push(this.xaxisLabels[s]);
              if (
                (this.drawXAxisLabelAndGroup(
                  !0,
                  t,
                  a,
                  n,
                  e.globals.isXNumeric,
                  function (e, t) {
                    return t;
                  }
                ),
                e.globals.hasXaxisGroups)
              ) {
                var o = e.globals.groups;
                n = [];
                for (var r = 0; r < o.length; r++) n.push(o[r].title);
                var l = {};
                e.config.xaxis.group.style &&
                  ((l.xaxisFontSize = e.config.xaxis.group.style.fontSize),
                  (l.xaxisFontFamily = e.config.xaxis.group.style.fontFamily),
                  (l.xaxisForeColors = e.config.xaxis.group.style.colors),
                  (l.fontWeight = e.config.xaxis.group.style.fontWeight),
                  (l.cssClass = e.config.xaxis.group.style.cssClass)),
                  this.drawXAxisLabelAndGroup(
                    !1,
                    t,
                    a,
                    n,
                    !1,
                    function (e, t) {
                      return o[e].cols * t;
                    },
                    l
                  );
              }
              if (void 0 !== e.config.xaxis.title.text) {
                var c = t.group({ class: "apexcharts-xaxis-title" }),
                  h = t.drawText({
                    x: e.globals.gridWidth / 2 + e.config.xaxis.title.offsetX,
                    y:
                      this.offY +
                      parseFloat(this.xaxisFontSize) +
                      ("bottom" === e.config.xaxis.position
                        ? e.globals.xAxisLabelsHeight
                        : -e.globals.xAxisLabelsHeight - 10) +
                      e.config.xaxis.title.offsetY,
                    text: e.config.xaxis.title.text,
                    textAnchor: "middle",
                    fontSize: e.config.xaxis.title.style.fontSize,
                    fontFamily: e.config.xaxis.title.style.fontFamily,
                    fontWeight: e.config.xaxis.title.style.fontWeight,
                    foreColor: e.config.xaxis.title.style.color,
                    cssClass:
                      "apexcharts-xaxis-title-text " +
                      e.config.xaxis.title.style.cssClass
                  });
                c.add(h), i.add(c);
              }
              if (e.config.xaxis.axisBorder.show) {
                var d = e.globals.barPadForNumericAxis,
                  u = t.drawLine(
                    e.globals.padHorizontal +
                      e.config.xaxis.axisBorder.offsetX -
                      d,
                    this.offY,
                    this.xaxisBorderWidth + d,
                    this.offY,
                    e.config.xaxis.axisBorder.color,
                    0,
                    this.xaxisBorderHeight
                  );
                this.elgrid && this.elgrid.elGridBorders && e.config.grid.show
                  ? this.elgrid.elGridBorders.add(u)
                  : i.add(u);
              }
              return i;
            }
          },
          {
            key: "drawXAxisLabelAndGroup",
            value: function (e, t, i, a, n, s) {
              var o,
                r = this,
                l =
                  arguments.length > 6 && void 0 !== arguments[6]
                    ? arguments[6]
                    : {},
                c = [],
                h = [],
                d = this.w,
                u = l.xaxisFontSize || this.xaxisFontSize,
                g = l.xaxisFontFamily || this.xaxisFontFamily,
                p = l.xaxisForeColors || this.xaxisForeColors,
                f = l.fontWeight || d.config.xaxis.labels.style.fontWeight,
                m = l.cssClass || d.config.xaxis.labels.style.cssClass,
                x = d.globals.padHorizontal,
                b = a.length,
                v =
                  "category" === d.config.xaxis.type ? d.globals.dataPoints : b;
              if ((0 === v && b > v && (v = b), n)) {
                var y = v > 1 ? v - 1 : v;
                (o = d.globals.gridWidth / y),
                  (x = x + s(0, o) / 2 + d.config.xaxis.labels.offsetX);
              } else
                (o = d.globals.gridWidth / v),
                  (x = x + s(0, o) + d.config.xaxis.labels.offsetX);
              for (
                var w = function (n) {
                    var l = x - s(n, o) / 2 + d.config.xaxis.labels.offsetX;
                    0 === n &&
                      1 === b &&
                      o / 2 === x &&
                      1 === v &&
                      (l = d.globals.gridWidth / 2);
                    var y = r.axesUtils.getLabel(
                        a,
                        d.globals.timescaleLabels,
                        l,
                        n,
                        c,
                        u,
                        e
                      ),
                      w = 28;
                    if (
                      (d.globals.rotateXLabels && e && (w = 22),
                      d.config.xaxis.title.text &&
                        "top" === d.config.xaxis.position &&
                        (w +=
                          parseFloat(d.config.xaxis.title.style.fontSize) + 2),
                      e ||
                        (w =
                          w +
                          parseFloat(u) +
                          (d.globals.xAxisLabelsHeight -
                            d.globals.xAxisGroupLabelsHeight) +
                          (d.globals.rotateXLabels ? 10 : 0)),
                      (y =
                        void 0 !== d.config.xaxis.tickAmount &&
                        "dataPoints" !== d.config.xaxis.tickAmount &&
                        "datetime" !== d.config.xaxis.type
                          ? r.axesUtils.checkLabelBasedOnTickamount(n, y, b)
                          : r.axesUtils.checkForOverflowingLabels(
                              n,
                              y,
                              b,
                              c,
                              h
                            )),
                      d.config.xaxis.labels.show)
                    ) {
                      var C = t.drawText({
                        x: y.x,
                        y:
                          r.offY +
                          d.config.xaxis.labels.offsetY +
                          w -
                          ("top" === d.config.xaxis.position
                            ? d.globals.xAxisHeight +
                              d.config.xaxis.axisTicks.height -
                              2
                            : 0),
                        text: y.text,
                        textAnchor: "middle",
                        fontWeight: y.isBold ? 600 : f,
                        fontSize: u,
                        fontFamily: g,
                        foreColor: Array.isArray(p)
                          ? e && d.config.xaxis.convertedCatToNumeric
                            ? p[d.globals.minX + n - 1]
                            : p[n]
                          : p,
                        isPlainText: !1,
                        cssClass:
                          (e
                            ? "apexcharts-xaxis-label "
                            : "apexcharts-xaxis-group-label ") + m
                      });
                      if (
                        (i.add(C),
                        C.on("click", function (e) {
                          if (
                            "function" ==
                            typeof d.config.chart.events.xAxisLabelClick
                          ) {
                            var t = Object.assign({}, d, { labelIndex: n });
                            d.config.chart.events.xAxisLabelClick(e, r.ctx, t);
                          }
                        }),
                        e)
                      ) {
                        var k = document.createElementNS(
                          d.globals.SVGNS,
                          "title"
                        );
                        (k.textContent = Array.isArray(y.text)
                          ? y.text.join(" ")
                          : y.text),
                          C.node.appendChild(k),
                          "" !== y.text && (c.push(y.text), h.push(y));
                      }
                    }
                    n < b - 1 && (x += s(n + 1, o));
                  },
                  C = 0;
                C <= b - 1;
                C++
              )
                w(C);
            }
          },
          {
            key: "drawXaxisInversed",
            value: function (e) {
              var t,
                i,
                a = this,
                n = this.w,
                s = new sn(this.ctx),
                o = n.config.yaxis[0].opposite
                  ? n.globals.translateYAxisX[e]
                  : 0,
                r = s.group({
                  class: "apexcharts-yaxis apexcharts-xaxis-inversed",
                  rel: e
                }),
                l = s.group({
                  class:
                    "apexcharts-yaxis-texts-g apexcharts-xaxis-inversed-texts-g",
                  transform: "translate(" + o + ", 0)"
                });
              r.add(l);
              var c = [];
              if (n.config.yaxis[e].show)
                for (var h = 0; h < this.xaxisLabels.length; h++)
                  c.push(this.xaxisLabels[h]);
              i = -(t = n.globals.gridHeight / c.length) / 2.2;
              var d = n.globals.yLabelFormatters[0],
                u = n.config.yaxis[0].labels;
              if (u.show)
                for (
                  var g = function (o) {
                      var r = void 0 === c[o] ? "" : c[o];
                      r = d(r, { seriesIndex: e, dataPointIndex: o, w: n });
                      var h = a.axesUtils.getYAxisForeColor(u.style.colors, e),
                        g = 0;
                      Array.isArray(r) &&
                        (g = (r.length / 2) * parseInt(u.style.fontSize, 10));
                      var p = u.offsetX - 15,
                        f = "end";
                      a.yaxis.opposite && (f = "start"),
                        "left" === n.config.yaxis[0].labels.align
                          ? ((p = u.offsetX), (f = "start"))
                          : "center" === n.config.yaxis[0].labels.align
                          ? ((p = u.offsetX), (f = "middle"))
                          : "right" === n.config.yaxis[0].labels.align &&
                            (f = "end");
                      var m = s.drawText({
                        x: p,
                        y: i + t + u.offsetY - g,
                        text: r,
                        textAnchor: f,
                        foreColor: Array.isArray(h) ? h[o] : h,
                        fontSize: u.style.fontSize,
                        fontFamily: u.style.fontFamily,
                        fontWeight: u.style.fontWeight,
                        isPlainText: !1,
                        cssClass: "apexcharts-yaxis-label " + u.style.cssClass,
                        maxWidth: u.maxWidth
                      });
                      l.add(m),
                        m.on("click", function (e) {
                          if (
                            "function" ==
                            typeof n.config.chart.events.xAxisLabelClick
                          ) {
                            var t = Object.assign({}, n, { labelIndex: o });
                            n.config.chart.events.xAxisLabelClick(e, a.ctx, t);
                          }
                        });
                      var x = document.createElementNS(
                        n.globals.SVGNS,
                        "title"
                      );
                      if (
                        ((x.textContent = Array.isArray(r) ? r.join(" ") : r),
                        m.node.appendChild(x),
                        0 !== n.config.yaxis[e].labels.rotate)
                      ) {
                        var b = s.rotateAroundCenter(m.node);
                        m.node.setAttribute(
                          "transform",
                          "rotate("
                            .concat(n.config.yaxis[e].labels.rotate, " 0 ")
                            .concat(b.y, ")")
                        );
                      }
                      i += t;
                    },
                    p = 0;
                  p <= c.length - 1;
                  p++
                )
                  g(p);
              if (void 0 !== n.config.yaxis[0].title.text) {
                var f = s.group({
                    class:
                      "apexcharts-yaxis-title apexcharts-xaxis-title-inversed",
                    transform: "translate(" + o + ", 0)"
                  }),
                  m = s.drawText({
                    x: n.config.yaxis[0].title.offsetX,
                    y:
                      n.globals.gridHeight / 2 +
                      n.config.yaxis[0].title.offsetY,
                    text: n.config.yaxis[0].title.text,
                    textAnchor: "middle",
                    foreColor: n.config.yaxis[0].title.style.color,
                    fontSize: n.config.yaxis[0].title.style.fontSize,
                    fontWeight: n.config.yaxis[0].title.style.fontWeight,
                    fontFamily: n.config.yaxis[0].title.style.fontFamily,
                    cssClass:
                      "apexcharts-yaxis-title-text " +
                      n.config.yaxis[0].title.style.cssClass
                  });
                f.add(m), r.add(f);
              }
              var x = 0;
              this.isCategoryBarHorizontal &&
                n.config.yaxis[0].opposite &&
                (x = n.globals.gridWidth);
              var b = n.config.xaxis.axisBorder;
              if (b.show) {
                var v = s.drawLine(
                  n.globals.padHorizontal + b.offsetX + x,
                  1 + b.offsetY,
                  n.globals.padHorizontal + b.offsetX + x,
                  n.globals.gridHeight + b.offsetY,
                  b.color,
                  0
                );
                this.elgrid && this.elgrid.elGridBorders && n.config.grid.show
                  ? this.elgrid.elGridBorders.add(v)
                  : r.add(v);
              }
              return (
                n.config.yaxis[0].axisTicks.show &&
                  this.axesUtils.drawYAxisTicks(
                    x,
                    c.length,
                    n.config.yaxis[0].axisBorder,
                    n.config.yaxis[0].axisTicks,
                    0,
                    t,
                    r
                  ),
                r
              );
            }
          },
          {
            key: "drawXaxisTicks",
            value: function (e, t, i) {
              var a = this.w;
              if (!(e < 0 || e - 2 > a.globals.gridWidth)) {
                var n = this.offY + a.config.xaxis.axisTicks.offsetY;
                if (
                  ((t = t + n + a.config.xaxis.axisTicks.height),
                  "top" === a.config.xaxis.position &&
                    (t = n - a.config.xaxis.axisTicks.height),
                  a.config.xaxis.axisTicks.show)
                ) {
                  var s = new sn(this.ctx).drawLine(
                    e + a.config.xaxis.axisTicks.offsetX,
                    n + a.config.xaxis.offsetY,
                    e + a.config.xaxis.axisTicks.offsetX,
                    t + a.config.xaxis.offsetY,
                    a.config.xaxis.axisTicks.color
                  );
                  i.add(s), s.node.classList.add("apexcharts-xaxis-tick");
                }
              }
            }
          },
          {
            key: "getXAxisTicksPositions",
            value: function () {
              var e = this.w,
                t = [],
                i = this.xaxisLabels.length,
                a = e.globals.padHorizontal;
              if (e.globals.timescaleLabels.length > 0)
                for (var n = 0; n < i; n++)
                  (a = this.xaxisLabels[n].position), t.push(a);
              else
                for (var s = 0; s < i; s++) {
                  var o = i;
                  e.globals.isXNumeric &&
                    "bar" !== e.config.chart.type &&
                    (o -= 1),
                    (a += e.globals.gridWidth / o),
                    t.push(a);
                }
              return t;
            }
          },
          {
            key: "xAxisLabelCorrections",
            value: function () {
              var e = this.w,
                t = new sn(this.ctx),
                i = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-xaxis-texts-g"
                ),
                a = e.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-xaxis-texts-g text:not(.apexcharts-xaxis-group-label)"
                ),
                n = e.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-yaxis-inversed text"
                ),
                s = e.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-xaxis-inversed-texts-g text tspan"
                );
              if (e.globals.rotateXLabels || e.config.xaxis.labels.rotateAlways)
                for (var o = 0; o < a.length; o++) {
                  var r = t.rotateAroundCenter(a[o]);
                  (r.y = r.y - 1),
                    (r.x = r.x + 1),
                    a[o].setAttribute(
                      "transform",
                      "rotate("
                        .concat(e.config.xaxis.labels.rotate, " ")
                        .concat(r.x, " ")
                        .concat(r.y, ")")
                    ),
                    a[o].setAttribute("text-anchor", "end"),
                    i.setAttribute(
                      "transform",
                      "translate(0, ".concat(-10, ")")
                    );
                  var l = a[o].childNodes;
                  e.config.xaxis.labels.trim &&
                    Array.prototype.forEach.call(l, function (i) {
                      t.placeTextWithEllipsis(
                        i,
                        i.textContent,
                        e.globals.xAxisLabelsHeight -
                          ("bottom" === e.config.legend.position ? 20 : 10)
                      );
                    });
                }
              else
                !(function () {
                  for (
                    var i = e.globals.gridWidth / (e.globals.labels.length + 1),
                      n = 0;
                    n < a.length;
                    n++
                  ) {
                    var s = a[n].childNodes;
                    e.config.xaxis.labels.trim &&
                      "datetime" !== e.config.xaxis.type &&
                      Array.prototype.forEach.call(s, function (e) {
                        t.placeTextWithEllipsis(e, e.textContent, i);
                      });
                  }
                })();
              if (n.length > 0) {
                var c = n[n.length - 1].getBBox(),
                  h = n[0].getBBox();
                c.x < -20 &&
                  n[n.length - 1].parentNode.removeChild(n[n.length - 1]),
                  h.x + h.width > e.globals.gridWidth &&
                    !e.globals.isBarHorizontal &&
                    n[0].parentNode.removeChild(n[0]);
                for (var d = 0; d < s.length; d++)
                  t.placeTextWithEllipsis(
                    s[d],
                    s[d].textContent,
                    e.config.yaxis[0].labels.maxWidth -
                      (e.config.yaxis[0].title.text
                        ? 2 * parseFloat(e.config.yaxis[0].title.style.fontSize)
                        : 0) -
                      15
                  );
              }
            }
          }
        ]),
        e
      );
    })(),
    sM = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
        var i = this.w;
        (this.xaxisLabels = i.globals.labels.slice()),
          (this.axesUtils = new sO(t)),
          (this.isRangeBar =
            i.globals.seriesRange.length && i.globals.isBarHorizontal),
          i.globals.timescaleLabels.length > 0 &&
            (this.xaxisLabels = i.globals.timescaleLabels.slice());
      }
      return (
        n1(e, [
          {
            key: "drawGridArea",
            value: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : null,
                t = this.w,
                i = new sn(this.ctx);
              null === e && (e = i.group({ class: "apexcharts-grid" }));
              var a = i.drawLine(
                  t.globals.padHorizontal,
                  1,
                  t.globals.padHorizontal,
                  t.globals.gridHeight,
                  "transparent"
                ),
                n = i.drawLine(
                  t.globals.padHorizontal,
                  t.globals.gridHeight,
                  t.globals.gridWidth,
                  t.globals.gridHeight,
                  "transparent"
                );
              return e.add(n), e.add(a), e;
            }
          },
          {
            key: "drawGrid",
            value: function () {
              var e = null;
              return (
                this.w.globals.axisCharts &&
                  ((e = this.renderGrid()), this.drawGridArea(e.el)),
                e
              );
            }
          },
          {
            key: "createGridMask",
            value: function () {
              var e = this.w,
                t = e.globals,
                i = new sn(this.ctx),
                a = Array.isArray(e.config.stroke.width)
                  ? 0
                  : e.config.stroke.width;
              if (Array.isArray(e.config.stroke.width)) {
                var n = 0;
                e.config.stroke.width.forEach(function (e) {
                  n = Math.max(n, e);
                }),
                  (a = n);
              }
              (t.dom.elGridRectMask = document.createElementNS(
                t.SVGNS,
                "clipPath"
              )),
                t.dom.elGridRectMask.setAttribute(
                  "id",
                  "gridRectMask".concat(t.cuid)
                ),
                (t.dom.elGridRectMarkerMask = document.createElementNS(
                  t.SVGNS,
                  "clipPath"
                )),
                t.dom.elGridRectMarkerMask.setAttribute(
                  "id",
                  "gridRectMarkerMask".concat(t.cuid)
                ),
                (t.dom.elForecastMask = document.createElementNS(
                  t.SVGNS,
                  "clipPath"
                )),
                t.dom.elForecastMask.setAttribute(
                  "id",
                  "forecastMask".concat(t.cuid)
                ),
                (t.dom.elNonForecastMask = document.createElementNS(
                  t.SVGNS,
                  "clipPath"
                )),
                t.dom.elNonForecastMask.setAttribute(
                  "id",
                  "nonForecastMask".concat(t.cuid)
                );
              var s = e.config.chart.type,
                o = 0,
                r = 0;
              ("bar" === s ||
                "rangeBar" === s ||
                "candlestick" === s ||
                "boxPlot" === s ||
                e.globals.comboBarCount > 0) &&
                e.globals.isXNumeric &&
                !e.globals.isBarHorizontal &&
                ((o = e.config.grid.padding.left),
                (r = e.config.grid.padding.right),
                t.barPadForNumericAxis > o &&
                  ((o = t.barPadForNumericAxis), (r = t.barPadForNumericAxis))),
                (t.dom.elGridRect = i.drawRect(
                  -a / 2 - o - 2,
                  -a / 2,
                  t.gridWidth + a + r + o + 4,
                  t.gridHeight + a,
                  0,
                  "#fff"
                ));
              var l = e.globals.markers.largestSize + 1;
              (t.dom.elGridRectMarker = i.drawRect(
                -(2 * l),
                -(2 * l),
                t.gridWidth + 4 * l,
                t.gridHeight + 4 * l,
                0,
                "#fff"
              )),
                t.dom.elGridRectMask.appendChild(t.dom.elGridRect.node),
                t.dom.elGridRectMarkerMask.appendChild(
                  t.dom.elGridRectMarker.node
                );
              var c = t.dom.baseEl.querySelector("defs");
              c.appendChild(t.dom.elGridRectMask),
                c.appendChild(t.dom.elForecastMask),
                c.appendChild(t.dom.elNonForecastMask),
                c.appendChild(t.dom.elGridRectMarkerMask);
            }
          },
          {
            key: "_drawGridLines",
            value: function (e) {
              var t = e.i,
                i = e.x1,
                a = e.y1,
                n = e.x2,
                s = e.y2,
                o = e.xCount,
                r = e.parent,
                l = this.w;
              if (
                !(
                  (0 === t && l.globals.skipFirstTimelinelabel) ||
                  (t === o - 1 &&
                    l.globals.skipLastTimelinelabel &&
                    !l.config.xaxis.labels.formatter) ||
                  "radar" === l.config.chart.type
                )
              ) {
                l.config.grid.xaxis.lines.show &&
                  this._drawGridLine({
                    i: t,
                    x1: i,
                    y1: a,
                    x2: n,
                    y2: s,
                    xCount: o,
                    parent: r
                  });
                var c = 0;
                if (
                  l.globals.hasXaxisGroups &&
                  "between" === l.config.xaxis.tickPlacement
                ) {
                  var h = l.globals.groups;
                  if (h) {
                    for (var d = 0, u = 0; d < t && u < h.length; u++)
                      d += h[u].cols;
                    d === t && (c = 0.6 * l.globals.xAxisLabelsHeight);
                  }
                }
                new sP(this.ctx).drawXaxisTicks(
                  i,
                  c,
                  l.globals.dom.elGraphical
                );
              }
            }
          },
          {
            key: "_drawGridLine",
            value: function (e) {
              var t = e.i,
                i = e.x1,
                a = e.y1,
                n = e.x2,
                s = e.y2,
                o = e.xCount,
                r = e.parent,
                l = this.w,
                c = !1,
                h = r.node.classList.contains(
                  "apexcharts-gridlines-horizontal"
                ),
                d = l.config.grid.strokeDashArray,
                u = l.globals.barPadForNumericAxis;
              ((0 === a && 0 === s) || (0 === i && 0 === n)) && (c = !0),
                a === l.globals.gridHeight &&
                  s === l.globals.gridHeight &&
                  (c = !0),
                l.globals.isBarHorizontal &&
                  (0 === t || t === o - 1) &&
                  (c = !0);
              var g = new sn(this).drawLine(
                i - (h ? u : 0),
                a,
                n + (h ? u : 0),
                s,
                l.config.grid.borderColor,
                d
              );
              g.node.classList.add("apexcharts-gridline"),
                c && l.config.grid.show ? this.elGridBorders.add(g) : r.add(g);
            }
          },
          {
            key: "_drawGridBandRect",
            value: function (e) {
              var t = e.c,
                i = e.x1,
                a = e.y1,
                n = e.x2,
                s = e.y2,
                o = e.type,
                r = this.w,
                l = new sn(this.ctx),
                c = r.globals.barPadForNumericAxis;
              if ("column" !== o || "datetime" !== r.config.xaxis.type) {
                var h = r.config.grid[o].colors[t],
                  d = l.drawRect(
                    i - ("row" === o ? c : 0),
                    a,
                    n + ("row" === o ? 2 * c : 0),
                    s,
                    0,
                    h,
                    r.config.grid[o].opacity
                  );
                this.elg.add(d),
                  d.attr(
                    "clip-path",
                    "url(#gridRectMask".concat(r.globals.cuid, ")")
                  ),
                  d.node.classList.add("apexcharts-grid-".concat(o));
              }
            }
          },
          {
            key: "_drawXYLines",
            value: function (e) {
              var t = this,
                i = e.xCount,
                a = e.tickAmount,
                n = this.w;
              if (
                n.config.grid.xaxis.lines.show ||
                n.config.xaxis.axisTicks.show
              ) {
                var s,
                  o = n.globals.padHorizontal,
                  r = n.globals.gridHeight;
                n.globals.timescaleLabels.length
                  ? (function (e) {
                      for (
                        var a = e.xC,
                          n = e.x1,
                          s = e.y1,
                          o = e.x2,
                          r = e.y2,
                          l = 0;
                        l < a;
                        l++
                      )
                        (n = t.xaxisLabels[l].position),
                          (o = t.xaxisLabels[l].position),
                          t._drawGridLines({
                            i: l,
                            x1: n,
                            y1: s,
                            x2: o,
                            y2: r,
                            xCount: i,
                            parent: t.elgridLinesV
                          });
                    })({ xC: i, x1: o, y1: 0, x2: s, y2: r })
                  : (n.globals.isXNumeric &&
                      (i = n.globals.xAxisScale.result.length),
                    (function (e) {
                      for (
                        var a = e.xC,
                          s = e.x1,
                          o = e.y1,
                          r = e.x2,
                          l = e.y2,
                          c = 0;
                        c < a + (n.globals.isXNumeric ? 0 : 1);
                        c++
                      )
                        0 === c &&
                          1 === a &&
                          1 === n.globals.dataPoints &&
                          (r = s = n.globals.gridWidth / 2),
                          t._drawGridLines({
                            i: c,
                            x1: s,
                            y1: o,
                            x2: r,
                            y2: l,
                            xCount: i,
                            parent: t.elgridLinesV
                          }),
                          (r = s +=
                            n.globals.gridWidth /
                            (n.globals.isXNumeric ? a - 1 : a));
                    })({ xC: i, x1: o, y1: 0, x2: s, y2: r }));
              }
              if (n.config.grid.yaxis.lines.show) {
                var l = 0,
                  c = 0,
                  h = n.globals.gridWidth,
                  d = a + 1;
                this.isRangeBar && (d = n.globals.labels.length);
                for (var u = 0; u < d + (this.isRangeBar ? 1 : 0); u++)
                  this._drawGridLine({
                    i: u,
                    xCount: d + (this.isRangeBar ? 1 : 0),
                    x1: 0,
                    y1: l,
                    x2: h,
                    y2: c,
                    parent: this.elgridLinesH
                  }),
                    (c = l += n.globals.gridHeight / (this.isRangeBar ? d : a));
              }
            }
          },
          {
            key: "_drawInvertedXYLines",
            value: function (e) {
              var t = e.xCount,
                i = this.w;
              if (
                i.config.grid.xaxis.lines.show ||
                i.config.xaxis.axisTicks.show
              )
                for (
                  var a,
                    n = i.globals.padHorizontal,
                    s = i.globals.gridHeight,
                    o = 0;
                  o < t + 1;
                  o++
                )
                  i.config.grid.xaxis.lines.show &&
                    this._drawGridLine({
                      i: o,
                      xCount: t + 1,
                      x1: n,
                      y1: 0,
                      x2: a,
                      y2: s,
                      parent: this.elgridLinesV
                    }),
                    new sP(this.ctx).drawXaxisTicks(
                      n,
                      0,
                      i.globals.dom.elGraphical
                    ),
                    (a = n = n + i.globals.gridWidth / t + 0.3);
              if (i.config.grid.yaxis.lines.show)
                for (
                  var r = 0, l = 0, c = i.globals.gridWidth, h = 0;
                  h < i.globals.dataPoints + 1;
                  h++
                )
                  this._drawGridLine({
                    i: h,
                    xCount: i.globals.dataPoints + 1,
                    x1: 0,
                    y1: r,
                    x2: c,
                    y2: l,
                    parent: this.elgridLinesH
                  }),
                    (l = r += i.globals.gridHeight / i.globals.dataPoints);
            }
          },
          {
            key: "renderGrid",
            value: function () {
              var e = this.w,
                t = new sn(this.ctx);
              (this.elg = t.group({ class: "apexcharts-grid" })),
                (this.elgridLinesH = t.group({
                  class: "apexcharts-gridlines-horizontal"
                })),
                (this.elgridLinesV = t.group({
                  class: "apexcharts-gridlines-vertical"
                })),
                (this.elGridBorders = t.group({
                  class: "apexcharts-grid-borders"
                })),
                this.elg.add(this.elgridLinesH),
                this.elg.add(this.elgridLinesV),
                e.config.grid.show ||
                  (this.elgridLinesV.hide(),
                  this.elgridLinesH.hide(),
                  this.elGridBorders.hide());
              for (
                var i,
                  a = e.globals.yAxisScale.length
                    ? e.globals.yAxisScale[0].result.length - 1
                    : 5,
                  n = 0;
                n < e.globals.series.length &&
                (void 0 !== e.globals.yAxisScale[n] &&
                  (a = e.globals.yAxisScale[n].result.length - 1),
                !(a > 2));
                n++
              );
              return (
                !e.globals.isBarHorizontal || this.isRangeBar
                  ? ((i = this.xaxisLabels.length),
                    this.isRangeBar &&
                      (i--,
                      (a = e.globals.labels.length),
                      e.config.xaxis.tickAmount &&
                        e.config.xaxis.labels.formatter &&
                        (i = e.config.xaxis.tickAmount)),
                    this._drawXYLines({ xCount: i, tickAmount: a }))
                  : ((i = a),
                    (a = e.globals.xTickAmount),
                    this._drawInvertedXYLines({ xCount: i, tickAmount: a })),
                this.drawGridBands(i, a),
                {
                  el: this.elg,
                  elGridBorders: this.elGridBorders,
                  xAxisTickWidth: e.globals.gridWidth / i
                }
              );
            }
          },
          {
            key: "drawGridBands",
            value: function (e, t) {
              var i = this.w;
              if (
                void 0 !== i.config.grid.row.colors &&
                i.config.grid.row.colors.length > 0
              )
                for (
                  var a = 0,
                    n = i.globals.gridHeight / t,
                    s = i.globals.gridWidth,
                    o = 0,
                    r = 0;
                  o < t;
                  o++, r++
                )
                  r >= i.config.grid.row.colors.length && (r = 0),
                    this._drawGridBandRect({
                      c: r,
                      x1: 0,
                      y1: a,
                      x2: s,
                      y2: n,
                      type: "row"
                    }),
                    (a += i.globals.gridHeight / t);
              if (
                void 0 !== i.config.grid.column.colors &&
                i.config.grid.column.colors.length > 0
              )
                for (
                  var l =
                      i.globals.isBarHorizontal ||
                      ("category" !== i.config.xaxis.type &&
                        !i.config.xaxis.convertedCatToNumeric)
                        ? e
                        : e - 1,
                    c = i.globals.padHorizontal,
                    h = i.globals.padHorizontal + i.globals.gridWidth / l,
                    d = i.globals.gridHeight,
                    u = 0,
                    g = 0;
                  u < e;
                  u++, g++
                )
                  g >= i.config.grid.column.colors.length && (g = 0),
                    this._drawGridBandRect({
                      c: g,
                      x1: c,
                      y1: 0,
                      x2: h,
                      y2: d,
                      type: "column"
                    }),
                    (c += i.globals.gridWidth / l);
            }
          }
        ]),
        e
      );
    })(),
    s_ = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "niceScale",
            value: function (e, t) {
              var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : 10,
                a =
                  arguments.length > 3 && void 0 !== arguments[3]
                    ? arguments[3]
                    : 0,
                n = arguments.length > 4 ? arguments[4] : void 0,
                s = this.w,
                o = Math.abs(t - e);
              if (
                ("dataPoints" ===
                  (i = this._adjustTicksForSmallRange(i, a, o)) &&
                  (i = s.globals.dataPoints - 1),
                (e === Number.MIN_VALUE && 0 === t) ||
                  (!st.isNumber(e) && !st.isNumber(t)) ||
                  (e === Number.MIN_VALUE && t === -Number.MAX_VALUE))
              )
                return (e = 0), (t = i), this.linearScale(e, t, i);
              e > t
                ? (console.warn("axis.min cannot be greater than axis.max"),
                  (t = e + 0.1))
                : e === t &&
                  ((e = 0 === e ? 0 : e - 0.5), (t = 0 === t ? 2 : t + 0.5));
              var r = [];
              o < 1 &&
                n &&
                ("candlestick" === s.config.chart.type ||
                  "candlestick" === s.config.series[a].type ||
                  "boxPlot" === s.config.chart.type ||
                  "boxPlot" === s.config.series[a].type ||
                  s.globals.isRangeData) &&
                (t *= 1.01);
              var l = i + 1;
              l < 2 ? (l = 2) : l > 2 && (l -= 2);
              var c = o / l,
                h = Math.pow(10, Math.floor(st.log10(c))),
                d = Math.round(c / h);
              d < 1 && (d = 1);
              var u = d * h,
                g = u * Math.floor(e / u),
                p = u * Math.ceil(t / u),
                f = g;
              if (n && o > 2) {
                for (; r.push(st.stripNumber(f, 7)), !((f += u) > p); );
                return { result: r, niceMin: r[0], niceMax: r[r.length - 1] };
              }
              var m = e;
              (r = []).push(st.stripNumber(m, 7));
              for (var x = Math.abs(t - e) / i, b = 0; b <= i; b++)
                (m += x), r.push(m);
              return (
                r[r.length - 2] >= t && r.pop(),
                { result: r, niceMin: r[0], niceMax: r[r.length - 1] }
              );
            }
          },
          {
            key: "linearScale",
            value: function (e, t) {
              var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : 10,
                a = arguments.length > 3 ? arguments[3] : void 0,
                n = Math.abs(t - e);
              "dataPoints" === (i = this._adjustTicksForSmallRange(i, a, n)) &&
                (i = this.w.globals.dataPoints - 1);
              var s = n / i;
              i === Number.MAX_VALUE && ((i = 10), (s = 1));
              for (var o = [], r = e; i >= 0; ) o.push(r), (r += s), (i -= 1);
              return { result: o, niceMin: o[0], niceMax: o[o.length - 1] };
            }
          },
          {
            key: "logarithmicScaleNice",
            value: function (e, t, i) {
              t <= 0 && (t = Math.max(e, i)), e <= 0 && (e = Math.min(t, i));
              for (
                var a = [],
                  n = Math.ceil(Math.log(t) / Math.log(i) + 1),
                  s = Math.floor(Math.log(e) / Math.log(i));
                s < n;
                s++
              )
                a.push(Math.pow(i, s));
              return { result: a, niceMin: a[0], niceMax: a[a.length - 1] };
            }
          },
          {
            key: "logarithmicScale",
            value: function (e, t, i) {
              t <= 0 && (t = Math.max(e, i)), e <= 0 && (e = Math.min(t, i));
              for (
                var a = [],
                  n = Math.log(t) / Math.log(i),
                  s = Math.log(e) / Math.log(i),
                  o = n - s,
                  r = Math.round(o),
                  l = o / r,
                  c = 0,
                  h = s;
                c < r;
                c++, h += l
              )
                a.push(Math.pow(i, h));
              return (
                a.push(Math.pow(i, n)), { result: a, niceMin: e, niceMax: t }
              );
            }
          },
          {
            key: "_adjustTicksForSmallRange",
            value: function (e, t, i) {
              var a = e;
              if (
                void 0 !== t &&
                this.w.config.yaxis[t].labels.formatter &&
                void 0 === this.w.config.yaxis[t].tickAmount
              ) {
                var n = Number(this.w.config.yaxis[t].labels.formatter(1));
                st.isNumber(n) &&
                  0 === this.w.globals.yValueDecimal &&
                  (a = Math.ceil(i));
              }
              return a < e ? a : e;
            }
          },
          {
            key: "setYScaleForIndex",
            value: function (e, t, i) {
              var a = this.w.globals,
                n = this.w.config,
                s = a.isBarHorizontal ? n.xaxis : n.yaxis[e];
              void 0 === a.yAxisScale[e] && (a.yAxisScale[e] = []);
              var o = Math.abs(i - t);
              if (
                (s.logarithmic && o <= 5 && (a.invalidLogScale = !0),
                s.logarithmic && o > 5)
              )
                (a.allSeriesCollapsed = !1),
                  (a.yAxisScale[e] = this.logarithmicScale(t, i, s.logBase)),
                  (a.yAxisScale[e] = s.forceNiceScale
                    ? this.logarithmicScaleNice(t, i, s.logBase)
                    : this.logarithmicScale(t, i, s.logBase));
              else if (i !== -Number.MAX_VALUE && st.isNumber(i)) {
                if (
                  ((a.allSeriesCollapsed = !1),
                  (void 0 === s.min && void 0 === s.max) || s.forceNiceScale)
                ) {
                  var r =
                    (void 0 === n.yaxis[e].max && void 0 === n.yaxis[e].min) ||
                    n.yaxis[e].forceNiceScale;
                  a.yAxisScale[e] = this.niceScale(
                    t,
                    i,
                    s.tickAmount ? s.tickAmount : o < 5 && o > 1 ? o + 1 : 5,
                    e,
                    r
                  );
                } else
                  a.yAxisScale[e] = this.linearScale(t, i, s.tickAmount, e);
              } else a.yAxisScale[e] = this.linearScale(0, 5, 5);
            }
          },
          {
            key: "setXScale",
            value: function (e, t) {
              var i = this.w,
                a = i.globals,
                n = i.config.xaxis,
                s = Math.abs(t - e);
              return (
                t !== -Number.MAX_VALUE && st.isNumber(t)
                  ? (a.xAxisScale = this.linearScale(
                      e,
                      t,
                      n.tickAmount ? n.tickAmount : s < 5 && s > 1 ? s + 1 : 5,
                      0
                    ))
                  : (a.xAxisScale = this.linearScale(0, 5, 5)),
                a.xAxisScale
              );
            }
          },
          {
            key: "setMultipleYScales",
            value: function () {
              var e = this,
                t = this.w.globals,
                i = this.w.config,
                a = t.minYArr.concat([]),
                n = t.maxYArr.concat([]),
                s = [];
              i.yaxis.forEach(function (t, o) {
                var r = o;
                i.series.forEach(function (e, i) {
                  e.name === t.seriesName &&
                    ((r = i),
                    o !== i
                      ? s.push({ index: i, similarIndex: o, alreadyExists: !0 })
                      : s.push({ index: i }));
                });
                var l = a[r],
                  c = n[r];
                e.setYScaleForIndex(o, l, c);
              }),
                this.sameScaleInMultipleAxes(a, n, s);
            }
          },
          {
            key: "sameScaleInMultipleAxes",
            value: function (e, t, i) {
              var a = this,
                n = this.w.config,
                s = this.w.globals,
                o = [];
              i.forEach(function (e) {
                e.alreadyExists &&
                  (void 0 === o[e.index] && (o[e.index] = []),
                  o[e.index].push(e.index),
                  o[e.index].push(e.similarIndex));
              }),
                (s.yAxisSameScaleIndices = o),
                o.forEach(function (e, t) {
                  o.forEach(function (i, a) {
                    t !== a &&
                      e.filter(function (e) {
                        return -1 !== i.indexOf(e);
                      }).length > 0 &&
                      (o[t] = o[t].concat(o[a]));
                  });
                });
              var r = o
                .map(function (e) {
                  return e.filter(function (t, i) {
                    return e.indexOf(t) === i;
                  });
                })
                .map(function (e) {
                  return e.sort();
                });
              o = o.filter(function (e) {
                return !!e;
              });
              var l = r.slice(),
                c = l.map(function (e) {
                  return JSON.stringify(e);
                });
              l = l.filter(function (e, t) {
                return c.indexOf(JSON.stringify(e)) === t;
              });
              var h = [],
                d = [];
              e.forEach(function (e, i) {
                l.forEach(function (a, n) {
                  a.indexOf(i) > -1 &&
                    (void 0 === h[n] && ((h[n] = []), (d[n] = [])),
                    h[n].push({ key: i, value: e }),
                    d[n].push({ key: i, value: t[i] }));
                });
              });
              var u = Array.apply(null, Array(l.length)).map(
                  Number.prototype.valueOf,
                  Number.MIN_VALUE
                ),
                g = Array.apply(null, Array(l.length)).map(
                  Number.prototype.valueOf,
                  -Number.MAX_VALUE
                );
              h.forEach(function (e, t) {
                e.forEach(function (e, i) {
                  u[t] = Math.min(e.value, u[t]);
                });
              }),
                d.forEach(function (e, t) {
                  e.forEach(function (e, i) {
                    g[t] = Math.max(e.value, g[t]);
                  });
                }),
                e.forEach(function (e, t) {
                  d.forEach(function (e, i) {
                    var o = u[i],
                      r = g[i];
                    n.chart.stacked &&
                      ((r = 0),
                      e.forEach(function (e, t) {
                        e.value !== -Number.MAX_VALUE && (r += e.value),
                          o !== Number.MIN_VALUE && (o += h[i][t].value);
                      })),
                      e.forEach(function (i, l) {
                        e[l].key === t &&
                          (void 0 !== n.yaxis[t].min &&
                            (o =
                              "function" == typeof n.yaxis[t].min
                                ? n.yaxis[t].min(s.minY)
                                : n.yaxis[t].min),
                          void 0 !== n.yaxis[t].max &&
                            (r =
                              "function" == typeof n.yaxis[t].max
                                ? n.yaxis[t].max(s.maxY)
                                : n.yaxis[t].max),
                          a.setYScaleForIndex(t, o, r));
                      });
                  });
                });
            }
          },
          {
            key: "autoScaleY",
            value: function (e, t, i) {
              e || (e = this);
              var a = e.w;
              if (a.globals.isMultipleYAxis || a.globals.collapsedSeries.length)
                return (
                  console.warn(
                    "autoScaleYaxis is not supported in a multi-yaxis chart."
                  ),
                  t
                );
              var n = a.globals.seriesX[0],
                s = a.config.chart.stacked;
              return (
                t.forEach(function (e, o) {
                  for (var r = 0, l = 0; l < n.length; l++)
                    if (n[l] >= i.xaxis.min) {
                      r = l;
                      break;
                    }
                  var c,
                    h,
                    d = a.globals.minYArr[o],
                    u = a.globals.maxYArr[o],
                    g = a.globals.stackedSeriesTotals;
                  a.globals.series.forEach(function (o, l) {
                    var p = o[r];
                    s
                      ? ((c = h = p = g[r]),
                        g.forEach(function (e, t) {
                          n[t] <= i.xaxis.max &&
                            n[t] >= i.xaxis.min &&
                            (e > h && null !== e && (h = e),
                            o[t] < c && null !== o[t] && (c = o[t]));
                        }))
                      : ((c = h = p),
                        o.forEach(function (e, t) {
                          if (n[t] <= i.xaxis.max && n[t] >= i.xaxis.min) {
                            var s = e,
                              o = e;
                            a.globals.series.forEach(function (i, a) {
                              null !== e &&
                                ((s = Math.min(i[t], s)),
                                (o = Math.max(i[t], o)));
                            }),
                              o > h && null !== o && (h = o),
                              s < c && null !== s && (c = s);
                          }
                        })),
                      void 0 === c && void 0 === h && ((c = d), (h = u)),
                      (h *= h < 0 ? 0.9 : 1.1),
                      0 == (c *= c < 0 ? 1.1 : 0.9) &&
                        0 === h &&
                        ((c = -1), (h = 1)),
                      h < 0 && h < u && (h = u),
                      c < 0 && c > d && (c = d),
                      t.length > 1
                        ? ((t[l].min = void 0 === e.min ? c : e.min),
                          (t[l].max = void 0 === e.max ? h : e.max))
                        : ((t[0].min = void 0 === e.min ? c : e.min),
                          (t[0].max = void 0 === e.max ? h : e.max));
                  });
                }),
                t
              );
            }
          }
        ]),
        e
      );
    })(),
    sD = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w), (this.scales = new s_(t));
      }
      return (
        n1(e, [
          {
            key: "init",
            value: function () {
              this.setYRange(), this.setXRange(), this.setZRange();
            }
          },
          {
            key: "getMinYMaxY",
            value: function (e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : Number.MAX_VALUE,
                i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : -Number.MAX_VALUE,
                a =
                  arguments.length > 3 && void 0 !== arguments[3]
                    ? arguments[3]
                    : null,
                n = this.w.config,
                s = this.w.globals,
                o = -Number.MAX_VALUE,
                r = Number.MIN_VALUE;
              null === a && (a = e + 1);
              var l = s.series,
                c = l,
                h = l;
              "candlestick" === n.chart.type
                ? ((c = s.seriesCandleL), (h = s.seriesCandleH))
                : "boxPlot" === n.chart.type
                ? ((c = s.seriesCandleO), (h = s.seriesCandleC))
                : s.isRangeData &&
                  ((c = s.seriesRangeStart), (h = s.seriesRangeEnd));
              for (var d = e; d < a; d++) {
                (s.dataPoints = Math.max(s.dataPoints, l[d].length)),
                  s.categoryLabels.length &&
                    (s.dataPoints = s.categoryLabels.filter(function (e) {
                      return void 0 !== e;
                    }).length),
                  s.labels.length &&
                    "datetime" !== n.xaxis.type &&
                    0 !==
                      s.series.reduce(function (e, t) {
                        return e + t.length;
                      }, 0) &&
                    (s.dataPoints = Math.max(s.dataPoints, s.labels.length));
                for (var u = 0; u < s.series[d].length; u++) {
                  var g = l[d][u];
                  null !== g && st.isNumber(g)
                    ? (void 0 !== h[d][u] &&
                        ((o = Math.max(o, h[d][u])),
                        (t = Math.min(t, h[d][u]))),
                      void 0 !== c[d][u] &&
                        ((t = Math.min(t, c[d][u])),
                        (i = Math.max(i, c[d][u]))),
                      ("candlestick" !== this.w.config.chart.type &&
                        "boxPlot" !== this.w.config.chart.type &&
                        "rangeArea" === this.w.config.chart.type &&
                        "rangeBar" === this.w.config.chart.type) ||
                        (("candlestick" !== this.w.config.chart.type &&
                          "boxPlot" !== this.w.config.chart.type) ||
                          (void 0 !== s.seriesCandleC[d][u] &&
                            ((o = Math.max(
                              (o = Math.max(
                                (o = Math.max(
                                  (o = Math.max(o, s.seriesCandleO[d][u])),
                                  s.seriesCandleH[d][u]
                                )),
                                s.seriesCandleL[d][u]
                              )),
                              s.seriesCandleC[d][u]
                            )),
                            "boxPlot" === this.w.config.chart.type &&
                              (o = Math.max(o, s.seriesCandleM[d][u])))),
                        n.series[d].type &&
                          ("candlestick" !== n.series[d].type ||
                            "boxPlot" !== n.series[d].type ||
                            "rangeArea" !== n.series[d].type ||
                            "rangeBar" !== n.series[d].type) &&
                          ((o = Math.max(o, s.series[d][u])),
                          (t = Math.min(t, s.series[d][u]))),
                        (i = o)),
                      s.seriesGoals[d] &&
                        s.seriesGoals[d][u] &&
                        Array.isArray(s.seriesGoals[d][u]) &&
                        s.seriesGoals[d][u].forEach(function (e) {
                          r !== Number.MIN_VALUE &&
                            (t = r = Math.min(r, e.value)),
                            (i = o = Math.max(o, e.value));
                        }),
                      st.isFloat(g) &&
                        ((g = st.noExponents(g)),
                        (s.yValueDecimal = Math.max(
                          s.yValueDecimal,
                          g.toString().split(".")[1].length
                        ))),
                      r > c[d][u] && c[d][u] < 0 && (r = c[d][u]))
                    : (s.hasNullValues = !0);
                }
              }
              return (
                "rangeBar" === n.chart.type &&
                  s.seriesRangeStart.length &&
                  s.isBarHorizontal &&
                  (r = t),
                "bar" === n.chart.type &&
                  (r < 0 && o < 0 && (o = 0),
                  r === Number.MIN_VALUE && (r = 0)),
                { minY: r, maxY: o, lowestY: t, highestY: i }
              );
            }
          },
          {
            key: "setYRange",
            value: function () {
              var e = this.w.globals,
                t = this.w.config;
              (e.maxY = -Number.MAX_VALUE), (e.minY = Number.MIN_VALUE);
              var i = Number.MAX_VALUE;
              if (e.isMultipleYAxis)
                for (var a = 0; a < e.series.length; a++) {
                  var n = this.getMinYMaxY(a, i, null, a + 1);
                  e.minYArr.push(n.minY),
                    e.maxYArr.push(n.maxY),
                    (i = n.lowestY);
                }
              var s = this.getMinYMaxY(0, i, null, e.series.length);
              if (
                ((e.minY = s.minY),
                (e.maxY = s.maxY),
                (i = s.lowestY),
                t.chart.stacked && this._setStackedMinMax(),
                ("line" === t.chart.type ||
                  "area" === t.chart.type ||
                  "candlestick" === t.chart.type ||
                  "boxPlot" === t.chart.type ||
                  ("rangeBar" === t.chart.type && !e.isBarHorizontal)) &&
                  e.minY === Number.MIN_VALUE &&
                  i !== -Number.MAX_VALUE &&
                  i !== e.maxY)
              ) {
                var o = e.maxY - i;
                ((i >= 0 && i <= 10) ||
                  void 0 !== t.yaxis[0].min ||
                  void 0 !== t.yaxis[0].max) &&
                  (o = 0),
                  (e.minY = i - (5 * o) / 100),
                  i > 0 && e.minY < 0 && (e.minY = 0),
                  (e.maxY = e.maxY + (5 * o) / 100);
              }
              return (
                t.yaxis.forEach(function (t, i) {
                  void 0 !== t.max &&
                    ("number" == typeof t.max
                      ? (e.maxYArr[i] = t.max)
                      : "function" == typeof t.max &&
                        (e.maxYArr[i] = t.max(
                          e.isMultipleYAxis ? e.maxYArr[i] : e.maxY
                        )),
                    (e.maxY = e.maxYArr[i])),
                    void 0 !== t.min &&
                      ("number" == typeof t.min
                        ? (e.minYArr[i] = t.min)
                        : "function" == typeof t.min &&
                          (e.minYArr[i] = t.min(
                            e.isMultipleYAxis
                              ? e.minYArr[i] === Number.MIN_VALUE
                                ? 0
                                : e.minYArr[i]
                              : e.minY
                          )),
                      (e.minY = e.minYArr[i]));
                }),
                e.isBarHorizontal &&
                  ["min", "max"].forEach(function (i) {
                    void 0 !== t.xaxis[i] &&
                      "number" == typeof t.xaxis[i] &&
                      ("min" === i
                        ? (e.minY = t.xaxis[i])
                        : (e.maxY = t.xaxis[i]));
                  }),
                e.isMultipleYAxis
                  ? (this.scales.setMultipleYScales(),
                    (e.minY = i),
                    e.yAxisScale.forEach(function (t, i) {
                      (e.minYArr[i] = t.niceMin), (e.maxYArr[i] = t.niceMax);
                    }))
                  : (this.scales.setYScaleForIndex(0, e.minY, e.maxY),
                    (e.minY = e.yAxisScale[0].niceMin),
                    (e.maxY = e.yAxisScale[0].niceMax),
                    (e.minYArr[0] = e.yAxisScale[0].niceMin),
                    (e.maxYArr[0] = e.yAxisScale[0].niceMax)),
                {
                  minY: e.minY,
                  maxY: e.maxY,
                  minYArr: e.minYArr,
                  maxYArr: e.maxYArr,
                  yAxisScale: e.yAxisScale
                }
              );
            }
          },
          {
            key: "setXRange",
            value: function () {
              var e,
                t = this.w.globals,
                i = this.w.config,
                a =
                  "numeric" === i.xaxis.type ||
                  "datetime" === i.xaxis.type ||
                  ("category" === i.xaxis.type && !t.noLabelsProvided) ||
                  t.noLabelsProvided ||
                  t.isXNumeric;
              if (
                (t.isXNumeric &&
                  (function () {
                    for (var e = 0; e < t.series.length; e++)
                      if (t.labels[e])
                        for (var i = 0; i < t.labels[e].length; i++)
                          null !== t.labels[e][i] &&
                            st.isNumber(t.labels[e][i]) &&
                            ((t.maxX = Math.max(t.maxX, t.labels[e][i])),
                            (t.initialMaxX = Math.max(t.maxX, t.labels[e][i])),
                            (t.minX = Math.min(t.minX, t.labels[e][i])),
                            (t.initialMinX = Math.min(t.minX, t.labels[e][i])));
                  })(),
                t.noLabelsProvided &&
                  0 === i.xaxis.categories.length &&
                  ((t.maxX = t.labels[t.labels.length - 1]),
                  (t.initialMaxX = t.labels[t.labels.length - 1]),
                  (t.minX = 1),
                  (t.initialMinX = 1)),
                t.isXNumeric || t.noLabelsProvided || t.dataFormatXNumeric)
              ) {
                if (
                  (void 0 === i.xaxis.tickAmount
                    ? ((e = Math.round(t.svgWidth / 150)),
                      "numeric" === i.xaxis.type &&
                        t.dataPoints < 30 &&
                        (e = t.dataPoints - 1),
                      e > t.dataPoints &&
                        0 !== t.dataPoints &&
                        (e = t.dataPoints - 1))
                    : "dataPoints" === i.xaxis.tickAmount
                    ? (t.series.length > 1 &&
                        (e = t.series[t.maxValsInArrayIndex].length - 1),
                      t.isXNumeric && (e = t.maxX - t.minX - 1))
                    : (e = i.xaxis.tickAmount),
                  (t.xTickAmount = e),
                  void 0 !== i.xaxis.max &&
                    "number" == typeof i.xaxis.max &&
                    (t.maxX = i.xaxis.max),
                  void 0 !== i.xaxis.min &&
                    "number" == typeof i.xaxis.min &&
                    (t.minX = i.xaxis.min),
                  void 0 !== i.xaxis.range && (t.minX = t.maxX - i.xaxis.range),
                  t.minX !== Number.MAX_VALUE && t.maxX !== -Number.MAX_VALUE)
                ) {
                  if (i.xaxis.convertedCatToNumeric && !t.dataFormatXNumeric) {
                    for (var n = [], s = t.minX - 1; s < t.maxX; s++)
                      n.push(s + 1);
                    t.xAxisScale = {
                      result: n,
                      niceMin: n[0],
                      niceMax: n[n.length - 1]
                    };
                  } else t.xAxisScale = this.scales.setXScale(t.minX, t.maxX);
                } else
                  (t.xAxisScale = this.scales.linearScale(1, e, e)),
                    t.noLabelsProvided &&
                      t.labels.length > 0 &&
                      ((t.xAxisScale = this.scales.linearScale(
                        1,
                        t.labels.length,
                        e - 1
                      )),
                      (t.seriesX = t.labels.slice()));
                a && (t.labels = t.xAxisScale.result.slice());
              }
              return (
                t.isBarHorizontal &&
                  t.labels.length &&
                  (t.xTickAmount = t.labels.length),
                this._handleSingleDataPoint(),
                this._getMinXDiff(),
                { minX: t.minX, maxX: t.maxX }
              );
            }
          },
          {
            key: "setZRange",
            value: function () {
              var e = this.w.globals;
              if (e.isDataXYZ) {
                for (var t = 0; t < e.series.length; t++)
                  if (void 0 !== e.seriesZ[t])
                    for (var i = 0; i < e.seriesZ[t].length; i++)
                      null !== e.seriesZ[t][i] &&
                        st.isNumber(e.seriesZ[t][i]) &&
                        ((e.maxZ = Math.max(e.maxZ, e.seriesZ[t][i])),
                        (e.minZ = Math.min(e.minZ, e.seriesZ[t][i])));
              }
            }
          },
          {
            key: "_handleSingleDataPoint",
            value: function () {
              var e = this.w.globals,
                t = this.w.config;
              if (e.minX === e.maxX) {
                var i = new sg(this.ctx);
                if ("datetime" === t.xaxis.type) {
                  var a = i.getDate(e.minX);
                  t.xaxis.labels.datetimeUTC
                    ? a.setUTCDate(a.getUTCDate() - 2)
                    : a.setDate(a.getDate() - 2),
                    (e.minX = new Date(a).getTime());
                  var n = i.getDate(e.maxX);
                  t.xaxis.labels.datetimeUTC
                    ? n.setUTCDate(n.getUTCDate() + 2)
                    : n.setDate(n.getDate() + 2),
                    (e.maxX = new Date(n).getTime());
                } else
                  ("numeric" !== t.xaxis.type &&
                    ("category" !== t.xaxis.type || e.noLabelsProvided)) ||
                    ((e.minX = e.minX - 2),
                    (e.initialMinX = e.minX),
                    (e.maxX = e.maxX + 2),
                    (e.initialMaxX = e.maxX));
              }
            }
          },
          {
            key: "_getMinXDiff",
            value: function () {
              var e = this.w.globals;
              e.isXNumeric &&
                e.seriesX.forEach(function (t, i) {
                  1 === t.length &&
                    t.push(
                      e.seriesX[e.maxValsInArrayIndex][
                        e.seriesX[e.maxValsInArrayIndex].length - 1
                      ]
                    );
                  var a = t.slice();
                  a.sort(function (e, t) {
                    return e - t;
                  }),
                    a.forEach(function (t, i) {
                      if (i > 0) {
                        var n = t - a[i - 1];
                        n > 0 && (e.minXDiff = Math.min(n, e.minXDiff));
                      }
                    }),
                    (1 !== e.dataPoints && e.minXDiff !== Number.MAX_VALUE) ||
                      (e.minXDiff = 0.5);
                });
            }
          },
          {
            key: "_setStackedMinMax",
            value: function () {
              var e = this,
                t = this.w.globals;
              if (t.series.length) {
                var i = t.seriesGroups;
                i.length ||
                  (i = [
                    this.w.config.series.map(function (e) {
                      return e.name;
                    })
                  ]);
                var a = {},
                  n = {};
                i.forEach(function (i) {
                  (a[i] = []),
                    (n[i] = []),
                    e.w.config.series
                      .map(function (e, t) {
                        return i.indexOf(e.name) > -1 ? t : null;
                      })
                      .filter(function (e) {
                        return null !== e;
                      })
                      .forEach(function (e) {
                        for (
                          var s = 0;
                          s < t.series[t.maxValsInArrayIndex].length;
                          s++
                        )
                          void 0 === a[i][s] && ((a[i][s] = 0), (n[i][s] = 0)),
                            null !== t.series[e][s] &&
                              st.isNumber(t.series[e][s]) &&
                              (t.series[e][s] > 0
                                ? (a[i][s] += parseFloat(t.series[e][s]) + 1e-4)
                                : (n[i][s] += parseFloat(t.series[e][s])));
                      });
                }),
                  Object.entries(a).forEach(function (e) {
                    var i = n9(e, 1)[0];
                    a[i].forEach(function (e, s) {
                      (t.maxY = Math.max(t.maxY, a[i][s])),
                        (t.minY = Math.min(t.minY, n[i][s]));
                    });
                  });
              }
            }
          }
        ]),
        e
      );
    })(),
    sE = (function () {
      function e(t, i) {
        nQ(this, e), (this.ctx = t), (this.elgrid = i), (this.w = t.w);
        var a = this.w;
        (this.xaxisFontSize = a.config.xaxis.labels.style.fontSize),
          (this.axisFontFamily = a.config.xaxis.labels.style.fontFamily),
          (this.xaxisForeColors = a.config.xaxis.labels.style.colors),
          (this.isCategoryBarHorizontal =
            "bar" === a.config.chart.type &&
            a.config.plotOptions.bar.horizontal),
          (this.xAxisoffX = 0),
          "bottom" === a.config.xaxis.position &&
            (this.xAxisoffX = a.globals.gridHeight),
          (this.drawnLabels = []),
          (this.axesUtils = new sO(t));
      }
      return (
        n1(e, [
          {
            key: "drawYaxis",
            value: function (e) {
              var t = this,
                i = this.w,
                a = new sn(this.ctx),
                n = i.config.yaxis[e].labels.style,
                s = n.fontSize,
                o = n.fontFamily,
                r = n.fontWeight,
                l = a.group({
                  class: "apexcharts-yaxis",
                  rel: e,
                  transform:
                    "translate(" + i.globals.translateYAxisX[e] + ", 0)"
                });
              if (this.axesUtils.isYAxisHidden(e)) return l;
              var c = a.group({ class: "apexcharts-yaxis-texts-g" });
              l.add(c);
              var h = i.globals.yAxisScale[e].result.length - 1,
                d = i.globals.gridHeight / h,
                u = i.globals.translateY,
                g = i.globals.yLabelFormatters[e],
                p = i.globals.yAxisScale[e].result.slice();
              p = this.axesUtils.checkForReversedLabels(e, p);
              var f = "";
              if (i.config.yaxis[e].labels.show)
                for (var m = h; m >= 0; m--)
                  (function (l) {
                    var m = p[l];
                    m = g(m, l, i);
                    var x = i.config.yaxis[e].labels.padding;
                    i.config.yaxis[e].opposite &&
                      0 !== i.config.yaxis.length &&
                      (x *= -1);
                    var b = "end";
                    i.config.yaxis[e].opposite && (b = "start"),
                      "left" === i.config.yaxis[e].labels.align
                        ? (b = "start")
                        : "center" === i.config.yaxis[e].labels.align
                        ? (b = "middle")
                        : "right" === i.config.yaxis[e].labels.align &&
                          (b = "end");
                    var v = t.axesUtils.getYAxisForeColor(n.colors, e),
                      y = a.drawText({
                        x: x,
                        y: u + h / 10 + i.config.yaxis[e].labels.offsetY + 1,
                        text: m,
                        textAnchor: b,
                        fontSize: s,
                        fontFamily: o,
                        fontWeight: r,
                        maxWidth: i.config.yaxis[e].labels.maxWidth,
                        foreColor: Array.isArray(v) ? v[l] : v,
                        isPlainText: !1,
                        cssClass: "apexcharts-yaxis-label " + n.cssClass
                      });
                    l === h && (f = y), c.add(y);
                    var w = document.createElementNS(i.globals.SVGNS, "title");
                    if (
                      ((w.textContent = Array.isArray(m) ? m.join(" ") : m),
                      y.node.appendChild(w),
                      0 !== i.config.yaxis[e].labels.rotate)
                    ) {
                      var C = a.rotateAroundCenter(f.node),
                        k = a.rotateAroundCenter(y.node);
                      y.node.setAttribute(
                        "transform",
                        "rotate("
                          .concat(i.config.yaxis[e].labels.rotate, " ")
                          .concat(C.x, " ")
                          .concat(k.y, ")")
                      );
                    }
                    u += d;
                  })(m);
              if (void 0 !== i.config.yaxis[e].title.text) {
                var x = a.group({ class: "apexcharts-yaxis-title" }),
                  b = 0;
                i.config.yaxis[e].opposite &&
                  (b = i.globals.translateYAxisX[e]);
                var v = a.drawText({
                  x: b,
                  y:
                    i.globals.gridHeight / 2 +
                    i.globals.translateY +
                    i.config.yaxis[e].title.offsetY,
                  text: i.config.yaxis[e].title.text,
                  textAnchor: "end",
                  foreColor: i.config.yaxis[e].title.style.color,
                  fontSize: i.config.yaxis[e].title.style.fontSize,
                  fontWeight: i.config.yaxis[e].title.style.fontWeight,
                  fontFamily: i.config.yaxis[e].title.style.fontFamily,
                  cssClass:
                    "apexcharts-yaxis-title-text " +
                    i.config.yaxis[e].title.style.cssClass
                });
                x.add(v), l.add(x);
              }
              var y = i.config.yaxis[e].axisBorder,
                w = 31 + y.offsetX;
              if (
                (i.config.yaxis[e].opposite && (w = -31 - y.offsetX), y.show)
              ) {
                var C = a.drawLine(
                  w,
                  i.globals.translateY + y.offsetY - 2,
                  w,
                  i.globals.gridHeight + i.globals.translateY + y.offsetY + 2,
                  y.color,
                  0,
                  y.width
                );
                l.add(C);
              }
              return (
                i.config.yaxis[e].axisTicks.show &&
                  this.axesUtils.drawYAxisTicks(
                    w,
                    h,
                    y,
                    i.config.yaxis[e].axisTicks,
                    e,
                    d,
                    l
                  ),
                l
              );
            }
          },
          {
            key: "drawYaxisInversed",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = i.group({
                  class: "apexcharts-xaxis apexcharts-yaxis-inversed"
                }),
                n = i.group({
                  class: "apexcharts-xaxis-texts-g",
                  transform: "translate("
                    .concat(t.globals.translateXAxisX, ", ")
                    .concat(t.globals.translateXAxisY, ")")
                });
              a.add(n);
              var s = t.globals.yAxisScale[e].result.length - 1,
                o = t.globals.gridWidth / s + 0.1,
                r = o + t.config.xaxis.labels.offsetX,
                l = t.globals.xLabelFormatter,
                c = t.globals.yAxisScale[e].result.slice(),
                h = t.globals.timescaleLabels;
              h.length > 0 &&
                ((this.xaxisLabels = h.slice()), (s = (c = h.slice()).length)),
                (c = this.axesUtils.checkForReversedLabels(e, c));
              var d = h.length;
              if (t.config.xaxis.labels.show)
                for (var u = d ? 0 : s; d ? u < d : u >= 0; d ? u++ : u--) {
                  var g = c[u];
                  g = l(g, u, t);
                  var p =
                    t.globals.gridWidth +
                    t.globals.padHorizontal -
                    (r - o + t.config.xaxis.labels.offsetX);
                  if (h.length) {
                    var f = this.axesUtils.getLabel(
                      c,
                      h,
                      p,
                      u,
                      this.drawnLabels,
                      this.xaxisFontSize
                    );
                    (p = f.x),
                      (g = f.text),
                      this.drawnLabels.push(f.text),
                      0 === u && t.globals.skipFirstTimelinelabel && (g = ""),
                      u === c.length - 1 &&
                        t.globals.skipLastTimelinelabel &&
                        (g = "");
                  }
                  var m = i.drawText({
                    x: p,
                    y:
                      this.xAxisoffX +
                      t.config.xaxis.labels.offsetY +
                      30 -
                      ("top" === t.config.xaxis.position
                        ? t.globals.xAxisHeight +
                          t.config.xaxis.axisTicks.height -
                          2
                        : 0),
                    text: g,
                    textAnchor: "middle",
                    foreColor: Array.isArray(this.xaxisForeColors)
                      ? this.xaxisForeColors[e]
                      : this.xaxisForeColors,
                    fontSize: this.xaxisFontSize,
                    fontFamily: this.xaxisFontFamily,
                    fontWeight: t.config.xaxis.labels.style.fontWeight,
                    isPlainText: !1,
                    cssClass:
                      "apexcharts-xaxis-label " +
                      t.config.xaxis.labels.style.cssClass
                  });
                  n.add(m), m.tspan(g);
                  var x = document.createElementNS(t.globals.SVGNS, "title");
                  (x.textContent = g), m.node.appendChild(x), (r += o);
                }
              return (
                this.inversedYAxisTitleText(a), this.inversedYAxisBorder(a), a
              );
            }
          },
          {
            key: "inversedYAxisBorder",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = t.config.xaxis.axisBorder;
              if (a.show) {
                var n = 0;
                "bar" === t.config.chart.type &&
                  t.globals.isXNumeric &&
                  (n -= 15);
                var s = i.drawLine(
                  t.globals.padHorizontal + n + a.offsetX,
                  this.xAxisoffX,
                  t.globals.gridWidth,
                  this.xAxisoffX,
                  a.color,
                  0,
                  a.height
                );
                this.elgrid && this.elgrid.elGridBorders && t.config.grid.show
                  ? this.elgrid.elGridBorders.add(s)
                  : e.add(s);
              }
            }
          },
          {
            key: "inversedYAxisTitleText",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx);
              if (void 0 !== t.config.xaxis.title.text) {
                var a = i.group({
                    class:
                      "apexcharts-xaxis-title apexcharts-yaxis-title-inversed"
                  }),
                  n = i.drawText({
                    x: t.globals.gridWidth / 2 + t.config.xaxis.title.offsetX,
                    y:
                      this.xAxisoffX +
                      parseFloat(this.xaxisFontSize) +
                      parseFloat(t.config.xaxis.title.style.fontSize) +
                      t.config.xaxis.title.offsetY +
                      20,
                    text: t.config.xaxis.title.text,
                    textAnchor: "middle",
                    fontSize: t.config.xaxis.title.style.fontSize,
                    fontFamily: t.config.xaxis.title.style.fontFamily,
                    fontWeight: t.config.xaxis.title.style.fontWeight,
                    foreColor: t.config.xaxis.title.style.color,
                    cssClass:
                      "apexcharts-xaxis-title-text " +
                      t.config.xaxis.title.style.cssClass
                  });
                a.add(n), e.add(a);
              }
            }
          },
          {
            key: "yAxisTitleRotate",
            value: function (e, t) {
              var i = this.w,
                a = new sn(this.ctx),
                n = { width: 0, height: 0 },
                s = { width: 0, height: 0 },
                o = i.globals.dom.baseEl.querySelector(
                  " .apexcharts-yaxis[rel='".concat(
                    e,
                    "'] .apexcharts-yaxis-texts-g"
                  )
                );
              null !== o && (n = o.getBoundingClientRect());
              var r = i.globals.dom.baseEl.querySelector(
                ".apexcharts-yaxis[rel='".concat(
                  e,
                  "'] .apexcharts-yaxis-title text"
                )
              );
              if ((null !== r && (s = r.getBoundingClientRect()), null !== r)) {
                var l = this.xPaddingForYAxisTitle(e, n, s, t);
                r.setAttribute("x", l.xPos - (t ? 10 : 0));
              }
              if (null !== r) {
                var c = a.rotateAroundCenter(r);
                r.setAttribute(
                  "transform",
                  "rotate("
                    .concat(
                      t
                        ? -1 * i.config.yaxis[e].title.rotate
                        : i.config.yaxis[e].title.rotate,
                      " "
                    )
                    .concat(c.x, " ")
                    .concat(c.y, ")")
                );
              }
            }
          },
          {
            key: "xPaddingForYAxisTitle",
            value: function (e, t, i, a) {
              var n = this.w,
                s = 0,
                o = 0,
                r = 10;
              return void 0 === n.config.yaxis[e].title.text || e < 0
                ? { xPos: o, padd: 0 }
                : (a
                    ? ((o =
                        t.width +
                        n.config.yaxis[e].title.offsetX +
                        i.width / 2 +
                        r / 2),
                      0 === (s += 1) && (o -= r / 2))
                    : ((o =
                        -1 * t.width +
                        n.config.yaxis[e].title.offsetX +
                        r / 2 +
                        i.width / 2),
                      n.globals.isBarHorizontal &&
                        ((r = 25),
                        (o =
                          -1 * t.width - n.config.yaxis[e].title.offsetX - r))),
                  { xPos: o, padd: r });
            }
          },
          {
            key: "setYAxisXPosition",
            value: function (e, t) {
              var i = this.w,
                a = 0,
                n = 0,
                s = 18,
                o = 1;
              i.config.yaxis.length > 1 && (this.multipleYs = !0),
                i.config.yaxis.map(function (r, l) {
                  var c =
                      i.globals.ignoreYAxisIndexes.indexOf(l) > -1 ||
                      !r.show ||
                      r.floating ||
                      0 === e[l].width,
                    h = e[l].width + t[l].width;
                  r.opposite
                    ? i.globals.isBarHorizontal
                      ? ((n = i.globals.gridWidth + i.globals.translateX - 1),
                        (i.globals.translateYAxisX[l] = n - r.labels.offsetX))
                      : ((n = i.globals.gridWidth + i.globals.translateX + o),
                        c || (o = o + h + 20),
                        (i.globals.translateYAxisX[l] =
                          n - r.labels.offsetX + 20))
                    : ((a = i.globals.translateX - s),
                      c || (s = s + h + 20),
                      (i.globals.translateYAxisX[l] = a + r.labels.offsetX));
                });
            }
          },
          {
            key: "setYAxisTextAlignments",
            value: function () {
              var e = this.w,
                t =
                  e.globals.dom.baseEl.getElementsByClassName(
                    "apexcharts-yaxis"
                  );
              (t = st.listToArray(t)).forEach(function (t, i) {
                var a = e.config.yaxis[i];
                if (a && !a.floating && void 0 !== a.labels.align) {
                  var n = e.globals.dom.baseEl.querySelector(
                      ".apexcharts-yaxis[rel='".concat(
                        i,
                        "'] .apexcharts-yaxis-texts-g"
                      )
                    ),
                    s = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-yaxis[rel='".concat(
                        i,
                        "'] .apexcharts-yaxis-label"
                      )
                    );
                  s = st.listToArray(s);
                  var o = n.getBoundingClientRect();
                  "left" === a.labels.align
                    ? (s.forEach(function (e, t) {
                        e.setAttribute("text-anchor", "start");
                      }),
                      a.opposite ||
                        n.setAttribute(
                          "transform",
                          "translate(-".concat(o.width, ", 0)")
                        ))
                    : "center" === a.labels.align
                    ? (s.forEach(function (e, t) {
                        e.setAttribute("text-anchor", "middle");
                      }),
                      n.setAttribute(
                        "transform",
                        "translate(".concat(
                          (o.width / 2) * (a.opposite ? 1 : -1),
                          ", 0)"
                        )
                      ))
                    : "right" === a.labels.align &&
                      (s.forEach(function (e, t) {
                        e.setAttribute("text-anchor", "end");
                      }),
                      a.opposite &&
                        n.setAttribute(
                          "transform",
                          "translate(".concat(o.width, ", 0)")
                        ));
                }
              });
            }
          }
        ]),
        e
      );
    })(),
    sI = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.documentEvent = st.bind(this.documentEvent, this));
      }
      return (
        n1(e, [
          {
            key: "addEventListener",
            value: function (e, t) {
              var i = this.w;
              i.globals.events.hasOwnProperty(e)
                ? i.globals.events[e].push(t)
                : (i.globals.events[e] = [t]);
            }
          },
          {
            key: "removeEventListener",
            value: function (e, t) {
              var i = this.w;
              if (i.globals.events.hasOwnProperty(e)) {
                var a = i.globals.events[e].indexOf(t);
                -1 !== a && i.globals.events[e].splice(a, 1);
              }
            }
          },
          {
            key: "fireEvent",
            value: function (e, t) {
              var i = this.w;
              if (i.globals.events.hasOwnProperty(e)) {
                (t && t.length) || (t = []);
                for (
                  var a = i.globals.events[e], n = a.length, s = 0;
                  s < n;
                  s++
                )
                  a[s].apply(null, t);
              }
            }
          },
          {
            key: "setupEventHandlers",
            value: function () {
              var e = this,
                t = this.w,
                i = this.ctx,
                a = t.globals.dom.baseEl.querySelector(t.globals.chartClass);
              this.ctx.eventList.forEach(function (e) {
                a.addEventListener(
                  e,
                  function (e) {
                    var a = Object.assign({}, t, {
                      seriesIndex: t.globals.capturedSeriesIndex,
                      dataPointIndex: t.globals.capturedDataPointIndex
                    });
                    "mousemove" === e.type || "touchmove" === e.type
                      ? "function" == typeof t.config.chart.events.mouseMove &&
                        t.config.chart.events.mouseMove(e, i, a)
                      : "mouseleave" === e.type || "touchleave" === e.type
                      ? "function" == typeof t.config.chart.events.mouseLeave &&
                        t.config.chart.events.mouseLeave(e, i, a)
                      : (("mouseup" === e.type && 1 === e.which) ||
                          "touchend" === e.type) &&
                        ("function" == typeof t.config.chart.events.click &&
                          t.config.chart.events.click(e, i, a),
                        i.ctx.events.fireEvent("click", [e, i, a]));
                  },
                  { capture: !1, passive: !0 }
                );
              }),
                this.ctx.eventList.forEach(function (i) {
                  t.globals.dom.baseEl.addEventListener(i, e.documentEvent, {
                    passive: !0
                  });
                }),
                this.ctx.core.setupBrushHandler();
            }
          },
          {
            key: "documentEvent",
            value: function (e) {
              var t = this.w,
                i = e.target.className;
              if ("click" === e.type) {
                var a = t.globals.dom.baseEl.querySelector(".apexcharts-menu");
                a &&
                  a.classList.contains("apexcharts-menu-open") &&
                  "apexcharts-menu-icon" !== i &&
                  a.classList.remove("apexcharts-menu-open");
              }
              (t.globals.clientX =
                "touchmove" === e.type ? e.touches[0].clientX : e.clientX),
                (t.globals.clientY =
                  "touchmove" === e.type ? e.touches[0].clientY : e.clientY);
            }
          }
        ]),
        e
      );
    })(),
    sH = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "setCurrentLocaleValues",
            value: function (e) {
              var t = this.w.config.chart.locales;
              window.Apex.chart &&
                window.Apex.chart.locales &&
                window.Apex.chart.locales.length > 0 &&
                (t = this.w.config.chart.locales.concat(
                  window.Apex.chart.locales
                ));
              var i = t.filter(function (t) {
                return t.name === e;
              })[0];
              if (!i)
                throw Error(
                  "Wrong locale name provided. Please make sure you set the correct locale name in options"
                );
              var a = st.extend(sh, i);
              this.w.globals.locale = a.options;
            }
          }
        ]),
        e
      );
    })(),
    sF = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "drawAxis",
            value: function (e, t) {
              var i,
                a,
                n = this,
                s = this.w.globals,
                o = this.w.config,
                r = new sP(this.ctx, t),
                l = new sE(this.ctx, t);
              s.axisCharts &&
                "radar" !== e &&
                (s.isBarHorizontal
                  ? ((a = l.drawYaxisInversed(0)),
                    (i = r.drawXaxisInversed(0)),
                    s.dom.elGraphical.add(i),
                    s.dom.elGraphical.add(a))
                  : ((i = r.drawXaxis()),
                    s.dom.elGraphical.add(i),
                    o.yaxis.map(function (e, t) {
                      if (
                        -1 === s.ignoreYAxisIndexes.indexOf(t) &&
                        ((a = l.drawYaxis(t)),
                        s.dom.Paper.add(a),
                        "back" === n.w.config.grid.position)
                      ) {
                        var i = s.dom.Paper.children()[1];
                        i.remove(), s.dom.Paper.add(i);
                      }
                    })));
            }
          }
        ]),
        e
      );
    })(),
    sz = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "drawXCrosshairs",
            value: function () {
              var e = this.w,
                t = new sn(this.ctx),
                i = new sa(this.ctx),
                a = e.config.xaxis.crosshairs.fill.gradient,
                n = e.config.xaxis.crosshairs.dropShadow,
                s = e.config.xaxis.crosshairs.fill.type,
                o = a.colorFrom,
                r = a.colorTo,
                l = a.opacityFrom,
                c = a.opacityTo,
                h = a.stops,
                d = n.enabled,
                u = n.left,
                g = n.top,
                p = n.blur,
                f = n.color,
                m = n.opacity,
                x = e.config.xaxis.crosshairs.fill.color;
              if (e.config.xaxis.crosshairs.show) {
                "gradient" === s &&
                  (x = t.drawGradient("vertical", o, r, l, c, null, h, null));
                var b = t.drawRect();
                1 === e.config.xaxis.crosshairs.width && (b = t.drawLine());
                var v = e.globals.gridHeight;
                (!st.isNumber(v) || v < 0) && (v = 0);
                var y = e.config.xaxis.crosshairs.width;
                (!st.isNumber(y) || y < 0) && (y = 0),
                  b.attr({
                    class: "apexcharts-xcrosshairs",
                    x: 0,
                    y: 0,
                    y2: v,
                    width: y,
                    height: v,
                    fill: x,
                    filter: "none",
                    "fill-opacity": e.config.xaxis.crosshairs.opacity,
                    stroke: e.config.xaxis.crosshairs.stroke.color,
                    "stroke-width": e.config.xaxis.crosshairs.stroke.width,
                    "stroke-dasharray":
                      e.config.xaxis.crosshairs.stroke.dashArray
                  }),
                  d &&
                    (b = i.dropShadow(b, {
                      left: u,
                      top: g,
                      blur: p,
                      color: f,
                      opacity: m
                    })),
                  e.globals.dom.elGraphical.add(b);
              }
            }
          },
          {
            key: "drawYCrosshairs",
            value: function () {
              var e = this.w,
                t = new sn(this.ctx),
                i = e.config.yaxis[0].crosshairs,
                a = e.globals.barPadForNumericAxis;
              if (e.config.yaxis[0].crosshairs.show) {
                var n = t.drawLine(
                  -a,
                  0,
                  e.globals.gridWidth + a,
                  0,
                  i.stroke.color,
                  i.stroke.dashArray,
                  i.stroke.width
                );
                n.attr({ class: "apexcharts-ycrosshairs" }),
                  e.globals.dom.elGraphical.add(n);
              }
              var s = t.drawLine(
                -a,
                0,
                e.globals.gridWidth + a,
                0,
                i.stroke.color,
                0,
                0
              );
              s.attr({ class: "apexcharts-ycrosshairs-hidden" }),
                e.globals.dom.elGraphical.add(s);
            }
          }
        ]),
        e
      );
    })(),
    sY = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "checkResponsiveConfig",
            value: function (e) {
              var t = this,
                i = this.w,
                a = i.config;
              if (0 !== a.responsive.length) {
                var n = a.responsive.slice();
                n.sort(function (e, t) {
                  return e.breakpoint > t.breakpoint
                    ? 1
                    : t.breakpoint > e.breakpoint
                    ? -1
                    : 0;
                }).reverse();
                var s = new sb({}),
                  o = function () {
                    var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {},
                      a = n[0].breakpoint,
                      o =
                        window.innerWidth > 0
                          ? window.innerWidth
                          : screen.width;
                    if (o > a) {
                      var r = ss.extendArrayProps(
                        s,
                        i.globals.initialConfig,
                        i
                      );
                      (e = st.extend(r, e)),
                        (e = st.extend(i.config, e)),
                        t.overrideResponsiveOptions(e);
                    } else
                      for (var l = 0; l < n.length; l++)
                        o < n[l].breakpoint &&
                          ((e = ss.extendArrayProps(s, n[l].options, i)),
                          (e = st.extend(i.config, e)),
                          t.overrideResponsiveOptions(e));
                  };
                if (e) {
                  var r = ss.extendArrayProps(s, e, i);
                  (r = st.extend(i.config, r)), o((r = st.extend(r, e)));
                } else o({});
              }
            }
          },
          {
            key: "overrideResponsiveOptions",
            value: function (e) {
              var t = new sb(e).init({ responsiveOverride: !0 });
              this.w.config = t;
            }
          }
        ]),
        e
      );
    })(),
    sX = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.colors = []), (this.w = t.w);
        var i = this.w;
        (this.isColorFn = !1),
          (this.isHeatmapDistributed =
            ("treemap" === i.config.chart.type &&
              i.config.plotOptions.treemap.distributed) ||
            ("heatmap" === i.config.chart.type &&
              i.config.plotOptions.heatmap.distributed)),
          (this.isBarDistributed =
            i.config.plotOptions.bar.distributed &&
            ("bar" === i.config.chart.type ||
              "rangeBar" === i.config.chart.type));
      }
      return (
        n1(e, [
          {
            key: "init",
            value: function () {
              this.setDefaultColors();
            }
          },
          {
            key: "setDefaultColors",
            value: function () {
              var e,
                t = this,
                i = this.w,
                a = new st();
              if (
                (i.globals.dom.elWrap.classList.add(
                  "apexcharts-theme-".concat(i.config.theme.mode)
                ),
                void 0 === i.config.colors ||
                0 ===
                  (null === (e = i.config.colors) || void 0 === e
                    ? void 0
                    : e.length)
                  ? (i.globals.colors = this.predefined())
                  : ((i.globals.colors = i.config.colors),
                    Array.isArray(i.config.colors) &&
                      i.config.colors.length > 0 &&
                      "function" == typeof i.config.colors[0] &&
                      (i.globals.colors = i.config.series.map(function (e, a) {
                        var n = i.config.colors[a];
                        return (
                          n || (n = i.config.colors[0]),
                          "function" == typeof n
                            ? ((t.isColorFn = !0),
                              n({
                                value: i.globals.axisCharts
                                  ? i.globals.series[a][0]
                                    ? i.globals.series[a][0]
                                    : 0
                                  : i.globals.series[a],
                                seriesIndex: a,
                                dataPointIndex: a,
                                w: i
                              }))
                            : n
                        );
                      }))),
                i.globals.seriesColors.map(function (e, t) {
                  e && (i.globals.colors[t] = e);
                }),
                i.config.theme.monochrome.enabled)
              ) {
                var n = [],
                  s = i.globals.series.length;
                (this.isBarDistributed || this.isHeatmapDistributed) &&
                  (s = i.globals.series[0].length * i.globals.series.length);
                for (
                  var o = i.config.theme.monochrome.color,
                    r = 1 / (s / i.config.theme.monochrome.shadeIntensity),
                    l = i.config.theme.monochrome.shadeTo,
                    c = 0,
                    h = 0;
                  h < s;
                  h++
                ) {
                  var d = void 0;
                  (d =
                    "dark" === l
                      ? a.shadeColor(-1 * c, o)
                      : a.shadeColor(c, o)),
                    (c += r),
                    n.push(d);
                }
                i.globals.colors = n.slice();
              }
              var u = i.globals.colors.slice();
              this.pushExtraColors(i.globals.colors),
                ["fill", "stroke"].forEach(function (e) {
                  void 0 === i.config[e].colors
                    ? (i.globals[e].colors = t.isColorFn ? i.config.colors : u)
                    : (i.globals[e].colors = i.config[e].colors.slice()),
                    t.pushExtraColors(i.globals[e].colors);
                }),
                void 0 === i.config.dataLabels.style.colors
                  ? (i.globals.dataLabels.style.colors = u)
                  : (i.globals.dataLabels.style.colors =
                      i.config.dataLabels.style.colors.slice()),
                this.pushExtraColors(i.globals.dataLabels.style.colors, 50),
                void 0 === i.config.plotOptions.radar.polygons.fill.colors
                  ? (i.globals.radarPolygons.fill.colors = [
                      "dark" === i.config.theme.mode ? "#424242" : "none"
                    ])
                  : (i.globals.radarPolygons.fill.colors =
                      i.config.plotOptions.radar.polygons.fill.colors.slice()),
                this.pushExtraColors(i.globals.radarPolygons.fill.colors, 20),
                void 0 === i.config.markers.colors
                  ? (i.globals.markers.colors = u)
                  : (i.globals.markers.colors =
                      i.config.markers.colors.slice()),
                this.pushExtraColors(i.globals.markers.colors);
            }
          },
          {
            key: "pushExtraColors",
            value: function (e, t) {
              var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : null,
                a = this.w,
                n = t || a.globals.series.length;
              if (
                (null === i &&
                  (i =
                    this.isBarDistributed ||
                    this.isHeatmapDistributed ||
                    ("heatmap" === a.config.chart.type &&
                      a.config.plotOptions.heatmap.colorScale.inverse)),
                i &&
                  a.globals.series.length &&
                  (n =
                    a.globals.series[a.globals.maxValsInArrayIndex].length *
                    a.globals.series.length),
                e.length < n)
              )
                for (var s = n - e.length, o = 0; o < s; o++) e.push(e[o]);
            }
          },
          {
            key: "updateThemeOptions",
            value: function (e) {
              (e.chart = e.chart || {}), (e.tooltip = e.tooltip || {});
              var t = e.theme.mode || "light",
                i = e.theme.palette
                  ? e.theme.palette
                  : "dark" === t
                  ? "palette4"
                  : "palette1",
                a = e.chart.foreColor
                  ? e.chart.foreColor
                  : "dark" === t
                  ? "#f6f7f8"
                  : "#373d3f";
              return (
                (e.tooltip.theme = t),
                (e.chart.foreColor = a),
                (e.theme.palette = i),
                e
              );
            }
          },
          {
            key: "predefined",
            value: function () {
              switch (this.w.config.theme.palette) {
                case "palette1":
                default:
                  this.colors = [
                    "#008FFB",
                    "#00E396",
                    "#FEB019",
                    "#FF4560",
                    "#775DD0"
                  ];
                  break;
                case "palette2":
                  this.colors = [
                    "#3f51b5",
                    "#03a9f4",
                    "#4caf50",
                    "#f9ce1d",
                    "#FF9800"
                  ];
                  break;
                case "palette3":
                  this.colors = [
                    "#33b2df",
                    "#546E7A",
                    "#d4526e",
                    "#13d8aa",
                    "#A5978B"
                  ];
                  break;
                case "palette4":
                  this.colors = [
                    "#4ecdc4",
                    "#c7f464",
                    "#81D4FA",
                    "#fd6a6a",
                    "#546E7A"
                  ];
                  break;
                case "palette5":
                  this.colors = [
                    "#2b908f",
                    "#f9a3a4",
                    "#90ee7e",
                    "#fa4443",
                    "#69d2e7"
                  ];
                  break;
                case "palette6":
                  this.colors = [
                    "#449DD1",
                    "#F86624",
                    "#EA3546",
                    "#662E9B",
                    "#C5D86D"
                  ];
                  break;
                case "palette7":
                  this.colors = [
                    "#D7263D",
                    "#1B998B",
                    "#2E294E",
                    "#F46036",
                    "#E2C044"
                  ];
                  break;
                case "palette8":
                  this.colors = [
                    "#662E9B",
                    "#F86624",
                    "#F9C80E",
                    "#EA3546",
                    "#43BCCD"
                  ];
                  break;
                case "palette9":
                  this.colors = [
                    "#5C4742",
                    "#A5978B",
                    "#8D5B4C",
                    "#5A2A27",
                    "#C4BBAF"
                  ];
                  break;
                case "palette10":
                  this.colors = [
                    "#A300D6",
                    "#7D02EB",
                    "#5653FE",
                    "#2983FF",
                    "#00B1F2"
                  ];
              }
              return this.colors;
            }
          }
        ]),
        e
      );
    })(),
    sN = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function () {
              this.drawTitleSubtitle("title"),
                this.drawTitleSubtitle("subtitle");
            }
          },
          {
            key: "drawTitleSubtitle",
            value: function (e) {
              var t = this.w,
                i = "title" === e ? t.config.title : t.config.subtitle,
                a = t.globals.svgWidth / 2,
                n = i.offsetY,
                s = "middle";
              if (
                ("left" === i.align
                  ? ((a = 10), (s = "start"))
                  : "right" === i.align &&
                    ((a = t.globals.svgWidth - 10), (s = "end")),
                (a += i.offsetX),
                (n = n + parseInt(i.style.fontSize, 10) + i.margin / 2),
                void 0 !== i.text)
              ) {
                var o = new sn(this.ctx).drawText({
                  x: a,
                  y: n,
                  text: i.text,
                  textAnchor: s,
                  fontSize: i.style.fontSize,
                  fontFamily: i.style.fontFamily,
                  fontWeight: i.style.fontWeight,
                  foreColor: i.style.color,
                  opacity: 1
                });
                o.node.setAttribute("class", "apexcharts-".concat(e, "-text")),
                  t.globals.dom.Paper.add(o);
              }
            }
          }
        ]),
        e
      );
    })(),
    sR = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.dCtx = t);
      }
      return (
        n1(e, [
          {
            key: "getTitleSubtitleCoords",
            value: function (e) {
              var t = this.w,
                i = 0,
                a = 0,
                n =
                  "title" === e
                    ? t.config.title.floating
                    : t.config.subtitle.floating,
                s = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-".concat(e, "-text")
                );
              if (null !== s && !n) {
                var o = s.getBoundingClientRect();
                (i = o.width),
                  (a = t.globals.axisCharts ? o.height + 5 : o.height);
              }
              return { width: i, height: a };
            }
          },
          {
            key: "getLegendsRect",
            value: function () {
              var e = this.w,
                t = e.globals.dom.elLegendWrap;
              e.config.legend.height ||
                ("top" !== e.config.legend.position &&
                  "bottom" !== e.config.legend.position) ||
                (t.style.maxHeight = e.globals.svgHeight / 2 + "px");
              var i = Object.assign({}, st.getBoundingClientRect(t));
              return (
                null !== t && !e.config.legend.floating && e.config.legend.show
                  ? (this.dCtx.lgRect = {
                      x: i.x,
                      y: i.y,
                      height: i.height,
                      width: 0 === i.height ? 0 : i.width
                    })
                  : (this.dCtx.lgRect = { x: 0, y: 0, height: 0, width: 0 }),
                ("left" !== e.config.legend.position &&
                  "right" !== e.config.legend.position) ||
                  (1.5 * this.dCtx.lgRect.width > e.globals.svgWidth &&
                    (this.dCtx.lgRect.width = e.globals.svgWidth / 1.5)),
                this.dCtx.lgRect
              );
            }
          },
          {
            key: "getLargestStringFromMultiArr",
            value: function (e, t) {
              var i = e;
              if (this.w.globals.isMultiLineX) {
                var a = t.map(function (e, t) {
                    return Array.isArray(e) ? e.length : 1;
                  }),
                  n = Math.max.apply(Math, n8(a));
                i = t[a.indexOf(n)];
              }
              return i;
            }
          }
        ]),
        e
      );
    })(),
    sV = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.dCtx = t);
      }
      return (
        n1(e, [
          {
            key: "getxAxisLabelsCoords",
            value: function () {
              var e,
                t = this.w,
                i = t.globals.labels.slice();
              if (
                (t.config.xaxis.convertedCatToNumeric &&
                  0 === i.length &&
                  (i = t.globals.categoryLabels),
                t.globals.timescaleLabels.length > 0)
              ) {
                var a = this.getxAxisTimeScaleLabelsCoords();
                (e = { width: a.width, height: a.height }),
                  (t.globals.rotateXLabels = !1);
              } else {
                this.dCtx.lgWidthForSideLegends =
                  ("left" !== t.config.legend.position &&
                    "right" !== t.config.legend.position) ||
                  t.config.legend.floating
                    ? 0
                    : this.dCtx.lgRect.width;
                var n = t.globals.xLabelFormatter,
                  s = st.getLargestStringFromArr(i),
                  o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(s, i);
                t.globals.isBarHorizontal &&
                  (o = s =
                    t.globals.yAxisScale[0].result.reduce(function (e, t) {
                      return e.length > t.length ? e : t;
                    }, 0));
                var r = new sp(this.dCtx.ctx),
                  l = s;
                (s = r.xLabelFormat(n, s, l, {
                  i: void 0,
                  dateFormatter: new sg(this.dCtx.ctx).formatDate,
                  w: t
                })),
                  (o = r.xLabelFormat(n, o, l, {
                    i: void 0,
                    dateFormatter: new sg(this.dCtx.ctx).formatDate,
                    w: t
                  })),
                  ((t.config.xaxis.convertedCatToNumeric && void 0 === s) ||
                    "" === String(s).trim()) &&
                    (o = s = "1");
                var c = new sn(this.dCtx.ctx),
                  h = c.getTextRects(s, t.config.xaxis.labels.style.fontSize),
                  d = h;
                if (
                  (s !== o &&
                    (d = c.getTextRects(
                      o,
                      t.config.xaxis.labels.style.fontSize
                    )),
                  ((e = {
                    width: h.width >= d.width ? h.width : d.width,
                    height: h.height >= d.height ? h.height : d.height
                  }).width *
                    i.length >
                    t.globals.svgWidth -
                      this.dCtx.lgWidthForSideLegends -
                      this.dCtx.yAxisWidth -
                      this.dCtx.gridPad.left -
                      this.dCtx.gridPad.right &&
                    0 !== t.config.xaxis.labels.rotate) ||
                    t.config.xaxis.labels.rotateAlways)
                ) {
                  if (!t.globals.isBarHorizontal) {
                    t.globals.rotateXLabels = !0;
                    var u = function (e) {
                      return c.getTextRects(
                        e,
                        t.config.xaxis.labels.style.fontSize,
                        t.config.xaxis.labels.style.fontFamily,
                        "rotate(".concat(t.config.xaxis.labels.rotate, " 0 0)"),
                        !1
                      );
                    };
                    (h = u(s)),
                      s !== o && (d = u(o)),
                      (e.height =
                        (h.height > d.height ? h.height : d.height) / 1.5),
                      (e.width = h.width > d.width ? h.width : d.width);
                  }
                } else t.globals.rotateXLabels = !1;
              }
              return (
                t.config.xaxis.labels.show || (e = { width: 0, height: 0 }),
                { width: e.width, height: e.height }
              );
            }
          },
          {
            key: "getxAxisGroupLabelsCoords",
            value: function () {
              var e,
                t = this.w;
              if (!t.globals.hasXaxisGroups) return { width: 0, height: 0 };
              var i,
                a =
                  (null === (e = t.config.xaxis.group.style) || void 0 === e
                    ? void 0
                    : e.fontSize) || t.config.xaxis.labels.style.fontSize,
                n = t.globals.groups.map(function (e) {
                  return e.title;
                }),
                s = st.getLargestStringFromArr(n),
                o = this.dCtx.dimHelpers.getLargestStringFromMultiArr(s, n),
                r = new sn(this.dCtx.ctx),
                l = r.getTextRects(s, a),
                c = l;
              return (
                s !== o && (c = r.getTextRects(o, a)),
                (i = {
                  width: l.width >= c.width ? l.width : c.width,
                  height: l.height >= c.height ? l.height : c.height
                }),
                t.config.xaxis.labels.show || (i = { width: 0, height: 0 }),
                { width: i.width, height: i.height }
              );
            }
          },
          {
            key: "getxAxisTitleCoords",
            value: function () {
              var e = this.w,
                t = 0,
                i = 0;
              if (void 0 !== e.config.xaxis.title.text) {
                var a = new sn(this.dCtx.ctx).getTextRects(
                  e.config.xaxis.title.text,
                  e.config.xaxis.title.style.fontSize
                );
                (t = a.width), (i = a.height);
              }
              return { width: t, height: i };
            }
          },
          {
            key: "getxAxisTimeScaleLabelsCoords",
            value: function () {
              var e,
                t = this.w;
              this.dCtx.timescaleLabels = t.globals.timescaleLabels.slice();
              var i = this.dCtx.timescaleLabels.map(function (e) {
                  return e.value;
                }),
                a = i.reduce(function (e, t) {
                  return void 0 === e
                    ? (console.error(
                        "You have possibly supplied invalid Date format. Please supply a valid JavaScript Date"
                      ),
                      0)
                    : e.length > t.length
                    ? e
                    : t;
                }, 0);
              return (
                1.05 *
                  (e = new sn(this.dCtx.ctx).getTextRects(
                    a,
                    t.config.xaxis.labels.style.fontSize
                  )).width *
                  i.length >
                  t.globals.gridWidth &&
                  0 !== t.config.xaxis.labels.rotate &&
                  (t.globals.overlappingXLabels = !0),
                e
              );
            }
          },
          {
            key: "additionalPaddingXLabels",
            value: function (e) {
              var t = this,
                i = this.w,
                a = i.globals,
                n = i.config,
                s = n.xaxis.type,
                o = e.width;
              (a.skipLastTimelinelabel = !1), (a.skipFirstTimelinelabel = !1);
              var r = i.config.yaxis[0].opposite && i.globals.isBarHorizontal,
                l = function (e, r) {
                  (n.yaxis.length > 1 &&
                    -1 !== a.collapsedSeriesIndices.indexOf(r)) ||
                    (function (e) {
                      if (
                        t.dCtx.timescaleLabels &&
                        t.dCtx.timescaleLabels.length
                      ) {
                        var r = t.dCtx.timescaleLabels[0],
                          l =
                            t.dCtx.timescaleLabels[
                              t.dCtx.timescaleLabels.length - 1
                            ].position +
                            o / 1.75 -
                            t.dCtx.yAxisWidthRight,
                          c = r.position - o / 1.75 + t.dCtx.yAxisWidthLeft,
                          h =
                            "right" === i.config.legend.position &&
                            t.dCtx.lgRect.width > 0
                              ? t.dCtx.lgRect.width
                              : 0;
                        l > a.svgWidth - a.translateX - h &&
                          (a.skipLastTimelinelabel = !0),
                          c <
                            -((e.show && !e.floating) ||
                            ("bar" !== n.chart.type &&
                              "candlestick" !== n.chart.type &&
                              "rangeBar" !== n.chart.type &&
                              "boxPlot" !== n.chart.type)
                              ? 10
                              : o / 1.75) && (a.skipFirstTimelinelabel = !0);
                      } else
                        "datetime" === s
                          ? t.dCtx.gridPad.right < o &&
                            !a.rotateXLabels &&
                            (a.skipLastTimelinelabel = !0)
                          : "datetime" !== s &&
                            t.dCtx.gridPad.right <
                              o / 2 - t.dCtx.yAxisWidthRight &&
                            !a.rotateXLabels &&
                            !i.config.xaxis.labels.trim &&
                            ("between" !== i.config.xaxis.tickPlacement ||
                              i.globals.isBarHorizontal) &&
                            (t.dCtx.xPadRight = o / 2 + 1);
                    })(e);
                };
              n.yaxis.forEach(function (e, i) {
                r
                  ? (t.dCtx.gridPad.left < o && (t.dCtx.xPadLeft = o / 2 + 1),
                    (t.dCtx.xPadRight = o / 2 + 1))
                  : l(e, i);
              });
            }
          }
        ]),
        e
      );
    })(),
    sW = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.dCtx = t);
      }
      return (
        n1(e, [
          {
            key: "getyAxisLabelsCoords",
            value: function () {
              var e = this,
                t = this.w,
                i = [],
                a = 10,
                n = new sO(this.dCtx.ctx);
              return (
                t.config.yaxis.map(function (s, o) {
                  var r = t.globals.yAxisScale[o],
                    l = 0;
                  if (
                    (!n.isYAxisHidden(o) &&
                      s.labels.show &&
                      void 0 !== s.labels.minWidth &&
                      (l = s.labels.minWidth),
                    !n.isYAxisHidden(o) && s.labels.show && r.result.length)
                  ) {
                    var c = t.globals.yLabelFormatters[o],
                      h = r.niceMin === Number.MIN_VALUE ? 0 : r.niceMin,
                      d =
                        String(h).length > String(r.niceMax).length
                          ? h
                          : r.niceMax,
                      u = c(d, { seriesIndex: o, dataPointIndex: -1, w: t }),
                      g = u;
                    if (
                      ((void 0 !== u && 0 !== u.length) || (u = d),
                      t.globals.isBarHorizontal)
                    ) {
                      a = 0;
                      var p = t.globals.labels.slice();
                      (u = c((u = st.getLargestStringFromArr(p)), {
                        seriesIndex: o,
                        dataPointIndex: -1,
                        w: t
                      })),
                        (g = e.dCtx.dimHelpers.getLargestStringFromMultiArr(
                          u,
                          p
                        ));
                    }
                    var f = new sn(e.dCtx.ctx),
                      m = "rotate(".concat(s.labels.rotate, " 0 0)"),
                      x = f.getTextRects(
                        u,
                        s.labels.style.fontSize,
                        s.labels.style.fontFamily,
                        m,
                        !1
                      ),
                      b = x;
                    u !== g &&
                      (b = f.getTextRects(
                        g,
                        s.labels.style.fontSize,
                        s.labels.style.fontFamily,
                        m,
                        !1
                      )),
                      i.push({
                        width:
                          (l > b.width || l > x.width
                            ? l
                            : b.width > x.width
                            ? b.width
                            : x.width) + a,
                        height: b.height > x.height ? b.height : x.height
                      });
                  } else i.push({ width: 0, height: 0 });
                }),
                i
              );
            }
          },
          {
            key: "getyAxisTitleCoords",
            value: function () {
              var e = this,
                t = this.w,
                i = [];
              return (
                t.config.yaxis.map(function (t, a) {
                  if (t.show && void 0 !== t.title.text) {
                    var n = new sn(e.dCtx.ctx),
                      s = "rotate(".concat(t.title.rotate, " 0 0)"),
                      o = n.getTextRects(
                        t.title.text,
                        t.title.style.fontSize,
                        t.title.style.fontFamily,
                        s,
                        !1
                      );
                    i.push({ width: o.width, height: o.height });
                  } else i.push({ width: 0, height: 0 });
                }),
                i
              );
            }
          },
          {
            key: "getTotalYAxisWidth",
            value: function () {
              var e = this.w,
                t = 0,
                i = 0,
                a = 0,
                n = e.globals.yAxisScale.length > 1 ? 10 : 0,
                s = new sO(this.dCtx.ctx),
                o = function (o, r) {
                  var l = e.config.yaxis[r].floating,
                    c = 0;
                  o.width > 0 && !l
                    ? ((c = o.width + n),
                      e.globals.ignoreYAxisIndexes.indexOf(r) > -1 &&
                        (c = c - o.width - n))
                    : (c = l || s.isYAxisHidden(r) ? 0 : 5),
                    e.config.yaxis[r].opposite ? (a += c) : (i += c),
                    (t += c);
                };
              return (
                e.globals.yLabelsCoords.map(function (e, t) {
                  o(e, t);
                }),
                e.globals.yTitleCoords.map(function (e, t) {
                  o(e, t);
                }),
                e.globals.isBarHorizontal &&
                  !e.config.yaxis[0].floating &&
                  (t =
                    e.globals.yLabelsCoords[0].width +
                    e.globals.yTitleCoords[0].width +
                    15),
                (this.dCtx.yAxisWidthLeft = i),
                (this.dCtx.yAxisWidthRight = a),
                t
              );
            }
          }
        ]),
        e
      );
    })(),
    sB = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.dCtx = t);
      }
      return (
        n1(e, [
          {
            key: "gridPadForColumnsInNumericAxis",
            value: function (e) {
              var t = this.w;
              if (t.globals.noData || t.globals.allSeriesCollapsed) return 0;
              var i = function (e) {
                  return (
                    "bar" === e ||
                    "rangeBar" === e ||
                    "candlestick" === e ||
                    "boxPlot" === e
                  );
                },
                a = t.config.chart.type,
                n = 0,
                s = i(a) ? t.config.series.length : 1;
              if (
                (t.globals.comboBarCount > 0 && (s = t.globals.comboBarCount),
                t.globals.collapsedSeries.forEach(function (e) {
                  i(e.type) && (s -= 1);
                }),
                t.config.chart.stacked && (s = 1),
                (i(a) || t.globals.comboBarCount > 0) &&
                  t.globals.isXNumeric &&
                  !t.globals.isBarHorizontal &&
                  s > 0)
              ) {
                var o,
                  r,
                  l = Math.abs(t.globals.initialMaxX - t.globals.initialMinX);
                l <= 3 && (l = t.globals.dataPoints),
                  (o = l / e),
                  t.globals.minXDiff &&
                    t.globals.minXDiff / o > 0 &&
                    (r = t.globals.minXDiff / o),
                  r > e / 2 && (r /= 2),
                  (n =
                    ((r / s) *
                      parseInt(t.config.plotOptions.bar.columnWidth, 10)) /
                    100) < 1 && (n = 1),
                  (n = n / (s > 1 ? 1 : 1.5) + 5),
                  (t.globals.barPadForNumericAxis = n);
              }
              return n;
            }
          },
          {
            key: "gridPadFortitleSubtitle",
            value: function () {
              var e = this,
                t = this.w,
                i = t.globals,
                a = this.dCtx.isSparkline || !t.globals.axisCharts ? 0 : 10;
              ["title", "subtitle"].forEach(function (i) {
                void 0 !== t.config[i].text
                  ? (a += t.config[i].margin)
                  : (a += e.dCtx.isSparkline || !t.globals.axisCharts ? 0 : 5);
              }),
                !t.config.legend.show ||
                  "bottom" !== t.config.legend.position ||
                  t.config.legend.floating ||
                  t.globals.axisCharts ||
                  (a += 10);
              var n = this.dCtx.dimHelpers.getTitleSubtitleCoords("title"),
                s = this.dCtx.dimHelpers.getTitleSubtitleCoords("subtitle");
              (i.gridHeight = i.gridHeight - n.height - s.height - a),
                (i.translateY = i.translateY + n.height + s.height + a);
            }
          },
          {
            key: "setGridXPosForDualYAxis",
            value: function (e, t) {
              var i = this.w,
                a = new sO(this.dCtx.ctx);
              i.config.yaxis.map(function (n, s) {
                -1 !== i.globals.ignoreYAxisIndexes.indexOf(s) ||
                  n.floating ||
                  a.isYAxisHidden(s) ||
                  (n.opposite &&
                    (i.globals.translateX =
                      i.globals.translateX -
                      (t[s].width + e[s].width) -
                      parseInt(i.config.yaxis[s].labels.style.fontSize, 10) /
                        1.2 -
                      12),
                  i.globals.translateX < 2 && (i.globals.translateX = 2));
              });
            }
          }
        ]),
        e
      );
    })(),
    sG = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.lgRect = {}),
          (this.yAxisWidth = 0),
          (this.yAxisWidthLeft = 0),
          (this.yAxisWidthRight = 0),
          (this.xAxisHeight = 0),
          (this.isSparkline = this.w.config.chart.sparkline.enabled),
          (this.dimHelpers = new sR(this)),
          (this.dimYAxis = new sW(this)),
          (this.dimXAxis = new sV(this)),
          (this.dimGrid = new sB(this)),
          (this.lgWidthForSideLegends = 0),
          (this.gridPad = this.w.config.grid.padding),
          (this.xPadRight = 0),
          (this.xPadLeft = 0);
      }
      return (
        n1(e, [
          {
            key: "plotCoords",
            value: function () {
              var e = this,
                t = this.w,
                i = t.globals;
              (this.lgRect = this.dimHelpers.getLegendsRect()),
                this.isSparkline &&
                  (t.config.markers.discrete.length > 0 ||
                    t.config.markers.size > 0) &&
                  Object.entries(this.gridPad).forEach(function (t) {
                    var i = n9(t, 2),
                      a = i[0],
                      n = i[1];
                    e.gridPad[a] = Math.max(
                      n,
                      e.w.globals.markers.largestSize / 1.5
                    );
                  }),
                i.axisCharts
                  ? this.setDimensionsForAxisCharts()
                  : this.setDimensionsForNonAxisCharts(),
                this.dimGrid.gridPadFortitleSubtitle(),
                (i.gridHeight =
                  i.gridHeight - this.gridPad.top - this.gridPad.bottom),
                (i.gridWidth =
                  i.gridWidth -
                  this.gridPad.left -
                  this.gridPad.right -
                  this.xPadRight -
                  this.xPadLeft);
              var a = this.dimGrid.gridPadForColumnsInNumericAxis(i.gridWidth);
              (i.gridWidth = i.gridWidth - 2 * a),
                (i.translateX =
                  i.translateX +
                  this.gridPad.left +
                  this.xPadLeft +
                  (a > 0 ? a + 4 : 0)),
                (i.translateY = i.translateY + this.gridPad.top);
            }
          },
          {
            key: "setDimensionsForAxisCharts",
            value: function () {
              var e = this,
                t = this.w,
                i = t.globals,
                a = this.dimYAxis.getyAxisLabelsCoords(),
                n = this.dimYAxis.getyAxisTitleCoords();
              (t.globals.yLabelsCoords = []),
                (t.globals.yTitleCoords = []),
                t.config.yaxis.map(function (e, i) {
                  t.globals.yLabelsCoords.push({ width: a[i].width, index: i }),
                    t.globals.yTitleCoords.push({
                      width: n[i].width,
                      index: i
                    });
                }),
                (this.yAxisWidth = this.dimYAxis.getTotalYAxisWidth());
              var s = this.dimXAxis.getxAxisLabelsCoords(),
                o = this.dimXAxis.getxAxisGroupLabelsCoords(),
                r = this.dimXAxis.getxAxisTitleCoords();
              this.conditionalChecksForAxisCoords(s, r, o),
                (i.translateXAxisY = t.globals.rotateXLabels
                  ? this.xAxisHeight / 8
                  : -4),
                (i.translateXAxisX =
                  t.globals.rotateXLabels &&
                  t.globals.isXNumeric &&
                  t.config.xaxis.labels.rotate <= -45
                    ? -this.xAxisWidth / 4
                    : 0),
                t.globals.isBarHorizontal &&
                  ((i.rotateXLabels = !1),
                  (i.translateXAxisY = -(
                    (parseInt(t.config.xaxis.labels.style.fontSize, 10) / 1.5) *
                    1
                  ))),
                (i.translateXAxisY =
                  i.translateXAxisY + t.config.xaxis.labels.offsetY),
                (i.translateXAxisX =
                  i.translateXAxisX + t.config.xaxis.labels.offsetX);
              var l = this.yAxisWidth,
                c = this.xAxisHeight;
              (i.xAxisLabelsHeight = this.xAxisHeight - r.height),
                (i.xAxisGroupLabelsHeight = i.xAxisLabelsHeight - s.height),
                (i.xAxisLabelsWidth = this.xAxisWidth),
                (i.xAxisHeight = this.xAxisHeight);
              var h = 10;
              ("radar" === t.config.chart.type || this.isSparkline) &&
                ((l = 0), (c = i.goldenPadding)),
                this.isSparkline && (this.lgRect = { height: 0, width: 0 }),
                (this.isSparkline || "treemap" === t.config.chart.type) &&
                  ((l = 0), (c = 0), (h = 0)),
                this.isSparkline || this.dimXAxis.additionalPaddingXLabels(s);
              var d = function () {
                (i.translateX = l),
                  (i.gridHeight =
                    i.svgHeight -
                    e.lgRect.height -
                    c -
                    (e.isSparkline || "treemap" === t.config.chart.type
                      ? 0
                      : t.globals.rotateXLabels
                      ? 10
                      : 15)),
                  (i.gridWidth = i.svgWidth - l);
              };
              switch (
                ("top" === t.config.xaxis.position &&
                  (h = i.xAxisHeight - t.config.xaxis.axisTicks.height - 5),
                t.config.legend.position)
              ) {
                case "bottom":
                  (i.translateY = h), d();
                  break;
                case "top":
                  (i.translateY = this.lgRect.height + h), d();
                  break;
                case "left":
                  (i.translateY = h),
                    (i.translateX = this.lgRect.width + l),
                    (i.gridHeight = i.svgHeight - c - 12),
                    (i.gridWidth = i.svgWidth - this.lgRect.width - l);
                  break;
                case "right":
                  (i.translateY = h),
                    (i.translateX = l),
                    (i.gridHeight = i.svgHeight - c - 12),
                    (i.gridWidth = i.svgWidth - this.lgRect.width - l - 5);
                  break;
                default:
                  throw Error("Legend position not supported");
              }
              this.dimGrid.setGridXPosForDualYAxis(n, a),
                new sE(this.ctx).setYAxisXPosition(a, n);
            }
          },
          {
            key: "setDimensionsForNonAxisCharts",
            value: function () {
              var e = this.w,
                t = e.globals,
                i = e.config,
                a = 0;
              e.config.legend.show && !e.config.legend.floating && (a = 20);
              var n =
                  "pie" === i.chart.type ||
                  "polarArea" === i.chart.type ||
                  "donut" === i.chart.type
                    ? "pie"
                    : "radialBar",
                s = i.plotOptions[n].offsetY,
                o = i.plotOptions[n].offsetX;
              if (!i.legend.show || i.legend.floating)
                return (
                  (t.gridHeight =
                    t.svgHeight - i.grid.padding.left + i.grid.padding.right),
                  (t.gridWidth = t.gridHeight),
                  (t.translateY = s),
                  void (t.translateX = o + (t.svgWidth - t.gridWidth) / 2)
                );
              switch (i.legend.position) {
                case "bottom":
                  (t.gridHeight =
                    t.svgHeight - this.lgRect.height - t.goldenPadding),
                    (t.gridWidth = t.svgWidth),
                    (t.translateY = s - 10),
                    (t.translateX = o + (t.svgWidth - t.gridWidth) / 2);
                  break;
                case "top":
                  (t.gridHeight =
                    t.svgHeight - this.lgRect.height - t.goldenPadding),
                    (t.gridWidth = t.svgWidth),
                    (t.translateY = this.lgRect.height + s + 10),
                    (t.translateX = o + (t.svgWidth - t.gridWidth) / 2);
                  break;
                case "left":
                  (t.gridWidth = t.svgWidth - this.lgRect.width - a),
                    (t.gridHeight =
                      "auto" !== i.chart.height ? t.svgHeight : t.gridWidth),
                    (t.translateY = s),
                    (t.translateX = o + this.lgRect.width + a);
                  break;
                case "right":
                  (t.gridWidth = t.svgWidth - this.lgRect.width - a - 5),
                    (t.gridHeight =
                      "auto" !== i.chart.height ? t.svgHeight : t.gridWidth),
                    (t.translateY = s),
                    (t.translateX = o + 10);
                  break;
                default:
                  throw Error("Legend position not supported");
              }
            }
          },
          {
            key: "conditionalChecksForAxisCoords",
            value: function (e, t, i) {
              var a = this.w,
                n = a.globals.hasXaxisGroups ? 2 : 1,
                s = i.height + e.height + t.height,
                o = a.globals.isMultiLineX ? 1.2 : a.globals.LINE_HEIGHT_RATIO,
                r = a.globals.rotateXLabels ? 22 : 10,
                l =
                  a.globals.rotateXLabels &&
                  "bottom" === a.config.legend.position
                    ? 10
                    : 0;
              (this.xAxisHeight = s * o + n * r + l),
                (this.xAxisWidth = e.width),
                this.xAxisHeight - t.height > a.config.xaxis.labels.maxHeight &&
                  (this.xAxisHeight = a.config.xaxis.labels.maxHeight),
                a.config.xaxis.labels.minHeight &&
                  this.xAxisHeight < a.config.xaxis.labels.minHeight &&
                  (this.xAxisHeight = a.config.xaxis.labels.minHeight),
                a.config.xaxis.floating && (this.xAxisHeight = 0);
              var c = 0,
                h = 0;
              a.config.yaxis.forEach(function (e) {
                (c += e.labels.minWidth), (h += e.labels.maxWidth);
              }),
                this.yAxisWidth < c && (this.yAxisWidth = c),
                this.yAxisWidth > h && (this.yAxisWidth = h);
            }
          }
        ]),
        e
      );
    })(),
    sj = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.lgCtx = t);
      }
      return (
        n1(e, [
          {
            key: "getLegendStyles",
            value: function () {
              var e = document.createElement("style");
              e.setAttribute("type", "text/css");
              var t = document.createTextNode(
                "	\n    	\n      .apexcharts-legend {	\n        display: flex;	\n        overflow: auto;	\n        padding: 0 10px;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {	\n        flex-wrap: wrap	\n      }	\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n        flex-direction: column;	\n        bottom: 0;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {	\n        justify-content: flex-start;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {	\n        justify-content: center;  	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {	\n        justify-content: flex-end;	\n      }	\n      .apexcharts-legend-series {	\n        cursor: pointer;	\n        line-height: normal;	\n      }	\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{	\n        display: flex;	\n        align-items: center;	\n      }	\n      .apexcharts-legend-text {	\n        position: relative;	\n        font-size: 14px;	\n      }	\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {	\n        pointer-events: none;	\n      }	\n      .apexcharts-legend-marker {	\n        position: relative;	\n        display: inline-block;	\n        cursor: pointer;	\n        margin-right: 3px;	\n        border-style: solid;\n      }	\n      	\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{	\n        display: inline-block;	\n      }	\n      .apexcharts-legend-series.apexcharts-no-click {	\n        cursor: auto;	\n      }	\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {	\n        display: none !important;	\n      }	\n      .apexcharts-inactive-legend {	\n        opacity: 0.45;	\n      }"
              );
              return e.appendChild(t), e;
            }
          },
          {
            key: "getLegendBBox",
            value: function () {
              var e = this.w.globals.dom.baseEl
                  .querySelector(".apexcharts-legend")
                  .getBoundingClientRect(),
                t = e.width;
              return { clwh: e.height, clww: t };
            }
          },
          {
            key: "appendToForeignObject",
            value: function () {
              this.w.globals.dom.elLegendForeign.appendChild(
                this.getLegendStyles()
              );
            }
          },
          {
            key: "toggleDataSeries",
            value: function (e, t) {
              var i = this,
                a = this.w;
              if (a.globals.axisCharts || "radialBar" === a.config.chart.type) {
                a.globals.resized = !0;
                var n = null,
                  s = null;
                ((a.globals.risingSeries = []),
                (s = a.globals.axisCharts
                  ? parseInt(
                      (n = a.globals.dom.baseEl.querySelector(
                        ".apexcharts-series[data\\:realIndex='".concat(e, "']")
                      )).getAttribute("data:realIndex"),
                      10
                    )
                  : parseInt(
                      (n = a.globals.dom.baseEl.querySelector(
                        ".apexcharts-series[rel='".concat(e + 1, "']")
                      )).getAttribute("rel"),
                      10
                    ) - 1),
                t)
                  ? [
                      {
                        cs: a.globals.collapsedSeries,
                        csi: a.globals.collapsedSeriesIndices
                      },
                      {
                        cs: a.globals.ancillaryCollapsedSeries,
                        csi: a.globals.ancillaryCollapsedSeriesIndices
                      }
                    ].forEach(function (e) {
                      i.riseCollapsedSeries(e.cs, e.csi, s);
                    })
                  : this.hideSeries({ seriesEl: n, realIndex: s });
              } else {
                var o = a.globals.dom.Paper.select(
                    " .apexcharts-series[rel='".concat(e + 1, "'] path")
                  ),
                  r = a.config.chart.type;
                if ("pie" === r || "polarArea" === r || "donut" === r) {
                  var l = a.config.plotOptions.pie.donut.labels;
                  new sn(this.lgCtx.ctx).pathMouseDown(o.members[0], null),
                    this.lgCtx.ctx.pie.printDataLabelsInner(
                      o.members[0].node,
                      l
                    );
                }
                o.fire("click");
              }
            }
          },
          {
            key: "hideSeries",
            value: function (e) {
              var t = e.seriesEl,
                i = e.realIndex,
                a = this.w,
                n = st.clone(a.config.series);
              if (a.globals.axisCharts) {
                var s = !1;
                if (
                  (a.config.yaxis[i] &&
                    a.config.yaxis[i].show &&
                    a.config.yaxis[i].showAlways &&
                    ((s = !0),
                    0 > a.globals.ancillaryCollapsedSeriesIndices.indexOf(i) &&
                      (a.globals.ancillaryCollapsedSeries.push({
                        index: i,
                        data: n[i].data.slice(),
                        type: t.parentNode.className.baseVal.split("-")[1]
                      }),
                      a.globals.ancillaryCollapsedSeriesIndices.push(i))),
                  !s)
                ) {
                  a.globals.collapsedSeries.push({
                    index: i,
                    data: n[i].data.slice(),
                    type: t.parentNode.className.baseVal.split("-")[1]
                  }),
                    a.globals.collapsedSeriesIndices.push(i);
                  var o = a.globals.risingSeries.indexOf(i);
                  a.globals.risingSeries.splice(o, 1);
                }
              } else
                a.globals.collapsedSeries.push({ index: i, data: n[i] }),
                  a.globals.collapsedSeriesIndices.push(i);
              for (var r = t.childNodes, l = 0; l < r.length; l++)
                r[l].classList.contains("apexcharts-series-markers-wrap") &&
                  (r[l].classList.contains("apexcharts-hide")
                    ? r[l].classList.remove("apexcharts-hide")
                    : r[l].classList.add("apexcharts-hide"));
              (a.globals.allSeriesCollapsed =
                a.globals.collapsedSeries.length === a.config.series.length),
                (n = this._getSeriesBasedOnCollapsedState(n)),
                this.lgCtx.ctx.updateHelpers._updateSeries(
                  n,
                  a.config.chart.animations.dynamicAnimation.enabled
                );
            }
          },
          {
            key: "riseCollapsedSeries",
            value: function (e, t, i) {
              var a = this.w,
                n = st.clone(a.config.series);
              if (e.length > 0) {
                for (var s = 0; s < e.length; s++)
                  e[s].index === i &&
                    (a.globals.axisCharts
                      ? (n[i].data = e[s].data.slice())
                      : (n[i] = e[s].data),
                    e.splice(s, 1),
                    t.splice(s, 1),
                    a.globals.risingSeries.push(i));
                (n = this._getSeriesBasedOnCollapsedState(n)),
                  this.lgCtx.ctx.updateHelpers._updateSeries(
                    n,
                    a.config.chart.animations.dynamicAnimation.enabled
                  );
              }
            }
          },
          {
            key: "_getSeriesBasedOnCollapsedState",
            value: function (e) {
              var t = this.w;
              return (
                t.globals.axisCharts
                  ? e.forEach(function (i, a) {
                      t.globals.collapsedSeriesIndices.indexOf(a) > -1 &&
                        (e[a].data = []);
                    })
                  : e.forEach(function (i, a) {
                      t.globals.collapsedSeriesIndices.indexOf(a) > -1 &&
                        (e[a] = 0);
                    }),
                e
              );
            }
          }
        ]),
        e
      );
    })(),
    s$ = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.onLegendClick = this.onLegendClick.bind(this)),
          (this.onLegendHovered = this.onLegendHovered.bind(this)),
          (this.isBarsDistributed =
            "bar" === this.w.config.chart.type &&
            this.w.config.plotOptions.bar.distributed &&
            1 === this.w.config.series.length),
          (this.legendHelpers = new sj(this));
      }
      return (
        n1(e, [
          {
            key: "init",
            value: function () {
              var e = this.w,
                t = e.globals,
                i = e.config;
              if (
                ((i.legend.showForSingleSeries && 1 === t.series.length) ||
                  this.isBarsDistributed ||
                  t.series.length > 1 ||
                  !t.axisCharts) &&
                i.legend.show
              ) {
                for (; t.dom.elLegendWrap.firstChild; )
                  t.dom.elLegendWrap.removeChild(t.dom.elLegendWrap.firstChild);
                this.drawLegends(),
                  st.isIE11()
                    ? document
                        .getElementsByTagName("head")[0]
                        .appendChild(this.legendHelpers.getLegendStyles())
                    : this.legendHelpers.appendToForeignObject(),
                  "bottom" === i.legend.position || "top" === i.legend.position
                    ? this.legendAlignHorizontal()
                    : ("right" !== i.legend.position &&
                        "left" !== i.legend.position) ||
                      this.legendAlignVertical();
              }
            }
          },
          {
            key: "drawLegends",
            value: function () {
              var e = this.w,
                t = e.config.legend.fontFamily,
                i = e.globals.seriesNames,
                a = e.globals.colors.slice();
              if ("heatmap" === e.config.chart.type) {
                var n = e.config.plotOptions.heatmap.colorScale.ranges;
                (i = n.map(function (e) {
                  return e.name ? e.name : e.from + " - " + e.to;
                })),
                  (a = n.map(function (e) {
                    return e.color;
                  }));
              } else this.isBarsDistributed && (i = e.globals.labels.slice());
              e.config.legend.customLegendItems.length &&
                (i = e.config.legend.customLegendItems);
              for (
                var s = e.globals.legendFormatter,
                  o = e.config.legend.inverseOrder,
                  r = o ? i.length - 1 : 0;
                o ? r >= 0 : r <= i.length - 1;
                o ? r-- : r++
              ) {
                var l,
                  c = s(i[r], { seriesIndex: r, w: e }),
                  h = !1,
                  d = !1;
                if (e.globals.collapsedSeries.length > 0)
                  for (var u = 0; u < e.globals.collapsedSeries.length; u++)
                    e.globals.collapsedSeries[u].index === r && (h = !0);
                if (e.globals.ancillaryCollapsedSeriesIndices.length > 0)
                  for (
                    var g = 0;
                    g < e.globals.ancillaryCollapsedSeriesIndices.length;
                    g++
                  )
                    e.globals.ancillaryCollapsedSeriesIndices[g] === r &&
                      (d = !0);
                var p = document.createElement("span");
                p.classList.add("apexcharts-legend-marker");
                var f = e.config.legend.markers.offsetX,
                  m = e.config.legend.markers.offsetY,
                  x = e.config.legend.markers.height,
                  b = e.config.legend.markers.width,
                  v = e.config.legend.markers.strokeWidth,
                  y = e.config.legend.markers.strokeColor,
                  w = e.config.legend.markers.radius,
                  C = p.style;
                (C.background = a[r]),
                  (C.color = a[r]),
                  C.setProperty("background", a[r], "important"),
                  e.config.legend.markers.fillColors &&
                    e.config.legend.markers.fillColors[r] &&
                    (C.background = e.config.legend.markers.fillColors[r]),
                  void 0 !== e.globals.seriesColors[r] &&
                    ((C.background = e.globals.seriesColors[r]),
                    (C.color = e.globals.seriesColors[r])),
                  (C.height = Array.isArray(x)
                    ? parseFloat(x[r]) + "px"
                    : parseFloat(x) + "px"),
                  (C.width = Array.isArray(b)
                    ? parseFloat(b[r]) + "px"
                    : parseFloat(b) + "px"),
                  (C.left =
                    (Array.isArray(f) ? parseFloat(f[r]) : parseFloat(f)) +
                    "px"),
                  (C.top =
                    (Array.isArray(m) ? parseFloat(m[r]) : parseFloat(m)) +
                    "px"),
                  (C.borderWidth = Array.isArray(v) ? v[r] : v),
                  (C.borderColor = Array.isArray(y) ? y[r] : y),
                  (C.borderRadius = Array.isArray(w)
                    ? parseFloat(w[r]) + "px"
                    : parseFloat(w) + "px"),
                  e.config.legend.markers.customHTML &&
                    (Array.isArray(e.config.legend.markers.customHTML)
                      ? e.config.legend.markers.customHTML[r] &&
                        (p.innerHTML = e.config.legend.markers.customHTML[r]())
                      : (p.innerHTML = e.config.legend.markers.customHTML())),
                  sn.setAttrs(p, { rel: r + 1, "data:collapsed": h || d }),
                  (h || d) && p.classList.add("apexcharts-inactive-legend");
                var k = document.createElement("div"),
                  A = document.createElement("span");
                A.classList.add("apexcharts-legend-text"),
                  (A.innerHTML = Array.isArray(c) ? c.join(" ") : c);
                var S = e.config.legend.labels.useSeriesColors
                  ? e.globals.colors[r]
                  : Array.isArray(e.config.legend.labels.colors)
                  ? null === (l = e.config.legend.labels.colors) || void 0 === l
                    ? void 0
                    : l[r]
                  : e.config.legend.labels.colors;
                S || (S = e.config.chart.foreColor),
                  (A.style.color = S),
                  (A.style.fontSize =
                    parseFloat(e.config.legend.fontSize) + "px"),
                  (A.style.fontWeight = e.config.legend.fontWeight),
                  (A.style.fontFamily = t || e.config.chart.fontFamily),
                  sn.setAttrs(A, {
                    rel: r + 1,
                    i: r,
                    "data:default-text": encodeURIComponent(c),
                    "data:collapsed": h || d
                  }),
                  k.appendChild(p),
                  k.appendChild(A);
                var L = new ss(this.ctx);
                !e.config.legend.showForZeroSeries &&
                  0 === L.getSeriesTotalByIndex(r) &&
                  L.seriesHaveSameValues(r) &&
                  !L.isSeriesNull(r) &&
                  -1 === e.globals.collapsedSeriesIndices.indexOf(r) &&
                  -1 === e.globals.ancillaryCollapsedSeriesIndices.indexOf(r) &&
                  k.classList.add("apexcharts-hidden-zero-series"),
                  e.config.legend.showForNullSeries ||
                    (L.isSeriesNull(r) &&
                      -1 === e.globals.collapsedSeriesIndices.indexOf(r) &&
                      -1 ===
                        e.globals.ancillaryCollapsedSeriesIndices.indexOf(r) &&
                      k.classList.add("apexcharts-hidden-null-series")),
                  e.globals.dom.elLegendWrap.appendChild(k),
                  e.globals.dom.elLegendWrap.classList.add(
                    "apexcharts-align-".concat(e.config.legend.horizontalAlign)
                  ),
                  e.globals.dom.elLegendWrap.classList.add(
                    "apx-legend-position-" + e.config.legend.position
                  ),
                  k.classList.add("apexcharts-legend-series"),
                  (k.style.margin = ""
                    .concat(e.config.legend.itemMargin.vertical, "px ")
                    .concat(e.config.legend.itemMargin.horizontal, "px")),
                  (e.globals.dom.elLegendWrap.style.width = e.config.legend
                    .width
                    ? e.config.legend.width + "px"
                    : ""),
                  (e.globals.dom.elLegendWrap.style.height = e.config.legend
                    .height
                    ? e.config.legend.height + "px"
                    : ""),
                  sn.setAttrs(k, {
                    rel: r + 1,
                    seriesName: st.escapeString(i[r]),
                    "data:collapsed": h || d
                  }),
                  (h || d) && k.classList.add("apexcharts-inactive-legend"),
                  e.config.legend.onItemClick.toggleDataSeries ||
                    k.classList.add("apexcharts-no-click");
              }
              e.globals.dom.elWrap.addEventListener(
                "click",
                this.onLegendClick,
                !0
              ),
                e.config.legend.onItemHover.highlightDataSeries &&
                  0 === e.config.legend.customLegendItems.length &&
                  (e.globals.dom.elWrap.addEventListener(
                    "mousemove",
                    this.onLegendHovered,
                    !0
                  ),
                  e.globals.dom.elWrap.addEventListener(
                    "mouseout",
                    this.onLegendHovered,
                    !0
                  ));
            }
          },
          {
            key: "setLegendWrapXY",
            value: function (e, t) {
              var i = this.w,
                a = i.globals.dom.elLegendWrap,
                n = a.getBoundingClientRect(),
                s = 0,
                o = 0;
              if ("bottom" === i.config.legend.position)
                o += i.globals.svgHeight - n.height / 2;
              else if ("top" === i.config.legend.position) {
                var r = new sG(this.ctx),
                  l = r.dimHelpers.getTitleSubtitleCoords("title").height,
                  c = r.dimHelpers.getTitleSubtitleCoords("subtitle").height;
                o = o + (l > 0 ? l - 10 : 0) + (c > 0 ? c - 10 : 0);
              }
              (a.style.position = "absolute"),
                (s = s + e + i.config.legend.offsetX),
                (o = o + t + i.config.legend.offsetY),
                (a.style.left = s + "px"),
                (a.style.top = o + "px"),
                "bottom" === i.config.legend.position
                  ? ((a.style.top = "auto"),
                    (a.style.bottom = 5 - i.config.legend.offsetY + "px"))
                  : "right" === i.config.legend.position &&
                    ((a.style.left = "auto"),
                    (a.style.right = 25 + i.config.legend.offsetX + "px")),
                ["width", "height"].forEach(function (e) {
                  a.style[e] &&
                    (a.style[e] = parseInt(i.config.legend[e], 10) + "px");
                });
            }
          },
          {
            key: "legendAlignHorizontal",
            value: function () {
              var e = this.w;
              e.globals.dom.elLegendWrap.style.right = 0;
              var t = this.legendHelpers.getLegendBBox(),
                i = new sG(this.ctx),
                a = i.dimHelpers.getTitleSubtitleCoords("title"),
                n = i.dimHelpers.getTitleSubtitleCoords("subtitle"),
                s = 0;
              "bottom" === e.config.legend.position
                ? (s = -t.clwh / 1.8)
                : "top" === e.config.legend.position &&
                  (s =
                    a.height +
                    n.height +
                    e.config.title.margin +
                    e.config.subtitle.margin -
                    10),
                this.setLegendWrapXY(20, s);
            }
          },
          {
            key: "legendAlignVertical",
            value: function () {
              var e = this.w,
                t = this.legendHelpers.getLegendBBox(),
                i = 0;
              "left" === e.config.legend.position && (i = 20),
                "right" === e.config.legend.position &&
                  (i = e.globals.svgWidth - t.clww - 10),
                this.setLegendWrapXY(i, 20);
            }
          },
          {
            key: "onLegendHovered",
            value: function (e) {
              var t = this.w,
                i =
                  e.target.classList.contains("apexcharts-legend-text") ||
                  e.target.classList.contains("apexcharts-legend-marker");
              if ("heatmap" === t.config.chart.type || this.isBarsDistributed) {
                if (i) {
                  var a = parseInt(e.target.getAttribute("rel"), 10) - 1;
                  this.ctx.events.fireEvent("legendHover", [
                    this.ctx,
                    a,
                    this.w
                  ]),
                    new sS(this.ctx).highlightRangeInSeries(e, e.target);
                }
              } else
                !e.target.classList.contains("apexcharts-inactive-legend") &&
                  i &&
                  new sS(this.ctx).toggleSeriesOnHover(e, e.target);
            }
          },
          {
            key: "onLegendClick",
            value: function (e) {
              var t = this.w;
              if (
                !t.config.legend.customLegendItems.length &&
                (e.target.classList.contains("apexcharts-legend-text") ||
                  e.target.classList.contains("apexcharts-legend-marker"))
              ) {
                var i = parseInt(e.target.getAttribute("rel"), 10) - 1,
                  a = "true" === e.target.getAttribute("data:collapsed"),
                  n = this.w.config.chart.events.legendClick;
                "function" == typeof n && n(this.ctx, i, this.w),
                  this.ctx.events.fireEvent("legendClick", [
                    this.ctx,
                    i,
                    this.w
                  ]);
                var s = this.w.config.legend.markers.onClick;
                "function" == typeof s &&
                  e.target.classList.contains("apexcharts-legend-marker") &&
                  (s(this.ctx, i, this.w),
                  this.ctx.events.fireEvent("legendMarkerClick", [
                    this.ctx,
                    i,
                    this.w
                  ])),
                  "treemap" !== t.config.chart.type &&
                    "heatmap" !== t.config.chart.type &&
                    !this.isBarsDistributed &&
                    t.config.legend.onItemClick.toggleDataSeries &&
                    this.legendHelpers.toggleDataSeries(i, a);
              }
            }
          }
        ]),
        e
      );
    })(),
    sU = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
        var i = this.w;
        (this.ev = this.w.config.chart.events),
          (this.selectedClass = "apexcharts-selected"),
          (this.localeValues = this.w.globals.locale.toolbar),
          (this.minX = i.globals.minX),
          (this.maxX = i.globals.maxX);
      }
      return (
        n1(e, [
          {
            key: "createToolbar",
            value: function () {
              var e = this,
                t = this.w,
                i = function () {
                  return document.createElement("div");
                },
                a = i();
              if (
                (a.setAttribute("class", "apexcharts-toolbar"),
                (a.style.top = t.config.chart.toolbar.offsetY + "px"),
                (a.style.right = 3 - t.config.chart.toolbar.offsetX + "px"),
                t.globals.dom.elWrap.appendChild(a),
                (this.elZoom = i()),
                (this.elZoomIn = i()),
                (this.elZoomOut = i()),
                (this.elPan = i()),
                (this.elSelection = i()),
                (this.elZoomReset = i()),
                (this.elMenuIcon = i()),
                (this.elMenu = i()),
                (this.elCustomIcons = []),
                (this.t = t.config.chart.toolbar.tools),
                Array.isArray(this.t.customIcons))
              )
                for (var n = 0; n < this.t.customIcons.length; n++)
                  this.elCustomIcons.push(i());
              var s = [],
                o = function (i, a, n) {
                  var o = i.toLowerCase();
                  e.t[o] &&
                    t.config.chart.zoom.enabled &&
                    s.push({
                      el: a,
                      icon: "string" == typeof e.t[o] ? e.t[o] : n,
                      title: e.localeValues[i],
                      class: "apexcharts-".concat(o, "-icon")
                    });
                };
              o(
                "zoomIn",
                this.elZoomIn,
                '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
              ),
                o(
                  "zoomOut",
                  this.elZoomOut,
                  '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n</svg>\n'
                );
              var r = function (i) {
                e.t[i] &&
                  t.config.chart[i].enabled &&
                  s.push({
                    el: "zoom" === i ? e.elZoom : e.elSelection,
                    icon:
                      "string" == typeof e.t[i]
                        ? e.t[i]
                        : "zoom" === i
                        ? '<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"/>\n</svg>'
                        : '<svg fill="#6E8192" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M0 0h24v24H0z" fill="none"/>\n    <path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z"/>\n</svg>',
                    title:
                      e.localeValues[
                        "zoom" === i ? "selectionZoom" : "selection"
                      ],
                    class: t.globals.isTouchDevice
                      ? "apexcharts-element-hidden"
                      : "apexcharts-".concat(i, "-icon")
                  });
              };
              r("zoom"),
                r("selection"),
                this.t.pan &&
                  t.config.chart.zoom.enabled &&
                  s.push({
                    el: this.elPan,
                    icon:
                      "string" == typeof this.t.pan
                        ? this.t.pan
                        : '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" fill="#000000" height="24" viewBox="0 0 24 24" width="24">\n    <defs>\n        <path d="M0 0h24v24H0z" id="a"/>\n    </defs>\n    <clipPath id="b">\n        <use overflow="visible" xlink:href="#a"/>\n    </clipPath>\n    <path clip-path="url(#b)" d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"/>\n</svg>',
                    title: this.localeValues.pan,
                    class: t.globals.isTouchDevice
                      ? "apexcharts-element-hidden"
                      : "apexcharts-pan-icon"
                  }),
                o(
                  "reset",
                  this.elZoomReset,
                  '<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n    <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"/>\n    <path d="M0 0h24v24H0z" fill="none"/>\n</svg>'
                ),
                this.t.download &&
                  s.push({
                    el: this.elMenuIcon,
                    icon:
                      "string" == typeof this.t.download
                        ? this.t.download
                        : '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                    title: this.localeValues.menu,
                    class: "apexcharts-menu-icon"
                  });
              for (var l = 0; l < this.elCustomIcons.length; l++)
                s.push({
                  el: this.elCustomIcons[l],
                  icon: this.t.customIcons[l].icon,
                  title: this.t.customIcons[l].title,
                  index: this.t.customIcons[l].index,
                  class:
                    "apexcharts-toolbar-custom-icon " +
                    this.t.customIcons[l].class
                });
              s.forEach(function (e, t) {
                e.index && st.moveIndexInArray(s, t, e.index);
              });
              for (var c = 0; c < s.length; c++)
                sn.setAttrs(s[c].el, { class: s[c].class, title: s[c].title }),
                  (s[c].el.innerHTML = s[c].icon),
                  a.appendChild(s[c].el);
              this._createHamburgerMenu(a),
                t.globals.zoomEnabled
                  ? this.elZoom.classList.add(this.selectedClass)
                  : t.globals.panEnabled
                  ? this.elPan.classList.add(this.selectedClass)
                  : t.globals.selectionEnabled &&
                    this.elSelection.classList.add(this.selectedClass),
                this.addToolbarEventListeners();
            }
          },
          {
            key: "_createHamburgerMenu",
            value: function (e) {
              (this.elMenuItems = []),
                e.appendChild(this.elMenu),
                sn.setAttrs(this.elMenu, { class: "apexcharts-menu" });
              var t = [
                { name: "exportSVG", title: this.localeValues.exportToSVG },
                { name: "exportPNG", title: this.localeValues.exportToPNG },
                { name: "exportCSV", title: this.localeValues.exportToCSV }
              ];
              this.w.globals.allSeriesHasEqualX || t.splice(2, 1);
              for (var i = 0; i < t.length; i++)
                this.elMenuItems.push(document.createElement("div")),
                  (this.elMenuItems[i].innerHTML = t[i].title),
                  sn.setAttrs(this.elMenuItems[i], {
                    class: "apexcharts-menu-item ".concat(t[i].name),
                    title: t[i].title
                  }),
                  this.elMenu.appendChild(this.elMenuItems[i]);
            }
          },
          {
            key: "addToolbarEventListeners",
            value: function () {
              var e = this;
              this.elZoomReset.addEventListener(
                "click",
                this.handleZoomReset.bind(this)
              ),
                this.elSelection.addEventListener(
                  "click",
                  this.toggleZoomSelection.bind(this, "selection")
                ),
                this.elZoom.addEventListener(
                  "click",
                  this.toggleZoomSelection.bind(this, "zoom")
                ),
                this.elZoomIn.addEventListener(
                  "click",
                  this.handleZoomIn.bind(this)
                ),
                this.elZoomOut.addEventListener(
                  "click",
                  this.handleZoomOut.bind(this)
                ),
                this.elPan.addEventListener(
                  "click",
                  this.togglePanning.bind(this)
                ),
                this.elMenuIcon.addEventListener(
                  "click",
                  this.toggleMenu.bind(this)
                ),
                this.elMenuItems.forEach(function (t) {
                  t.classList.contains("exportSVG")
                    ? t.addEventListener(
                        "click",
                        e.handleDownload.bind(e, "svg")
                      )
                    : t.classList.contains("exportPNG")
                    ? t.addEventListener(
                        "click",
                        e.handleDownload.bind(e, "png")
                      )
                    : t.classList.contains("exportCSV") &&
                      t.addEventListener(
                        "click",
                        e.handleDownload.bind(e, "csv")
                      );
                });
              for (var t = 0; t < this.t.customIcons.length; t++)
                this.elCustomIcons[t].addEventListener(
                  "click",
                  this.t.customIcons[t].click.bind(this, this.ctx, this.ctx.w)
                );
            }
          },
          {
            key: "toggleZoomSelection",
            value: function (e) {
              this.ctx.getSyncedCharts().forEach(function (t) {
                t.ctx.toolbar.toggleOtherControls();
                var i =
                    "selection" === e
                      ? t.ctx.toolbar.elSelection
                      : t.ctx.toolbar.elZoom,
                  a = "selection" === e ? "selectionEnabled" : "zoomEnabled";
                (t.w.globals[a] = !t.w.globals[a]),
                  i.classList.contains(t.ctx.toolbar.selectedClass)
                    ? i.classList.remove(t.ctx.toolbar.selectedClass)
                    : i.classList.add(t.ctx.toolbar.selectedClass);
              });
            }
          },
          {
            key: "getToolbarIconsReference",
            value: function () {
              var e = this.w;
              this.elZoom ||
                (this.elZoom = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-zoom-icon"
                )),
                this.elPan ||
                  (this.elPan = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-pan-icon"
                  )),
                this.elSelection ||
                  (this.elSelection = e.globals.dom.baseEl.querySelector(
                    ".apexcharts-selection-icon"
                  ));
            }
          },
          {
            key: "enableZoomPanFromToolbar",
            value: function (e) {
              this.toggleOtherControls(),
                "pan" === e
                  ? (this.w.globals.panEnabled = !0)
                  : (this.w.globals.zoomEnabled = !0);
              var t = "pan" === e ? this.elPan : this.elZoom,
                i = "pan" === e ? this.elZoom : this.elPan;
              t && t.classList.add(this.selectedClass),
                i && i.classList.remove(this.selectedClass);
            }
          },
          {
            key: "togglePanning",
            value: function () {
              this.ctx.getSyncedCharts().forEach(function (e) {
                e.ctx.toolbar.toggleOtherControls(),
                  (e.w.globals.panEnabled = !e.w.globals.panEnabled),
                  e.ctx.toolbar.elPan.classList.contains(
                    e.ctx.toolbar.selectedClass
                  )
                    ? e.ctx.toolbar.elPan.classList.remove(
                        e.ctx.toolbar.selectedClass
                      )
                    : e.ctx.toolbar.elPan.classList.add(
                        e.ctx.toolbar.selectedClass
                      );
              });
            }
          },
          {
            key: "toggleOtherControls",
            value: function () {
              var e = this,
                t = this.w;
              (t.globals.panEnabled = !1),
                (t.globals.zoomEnabled = !1),
                (t.globals.selectionEnabled = !1),
                this.getToolbarIconsReference(),
                [this.elPan, this.elSelection, this.elZoom].forEach(function (
                  t
                ) {
                  t && t.classList.remove(e.selectedClass);
                });
            }
          },
          {
            key: "handleZoomIn",
            value: function () {
              var e = this.w;
              e.globals.isRangeBar &&
                ((this.minX = e.globals.minY), (this.maxX = e.globals.maxY));
              var t = (this.minX + this.maxX) / 2,
                i = (this.minX + t) / 2,
                a = (this.maxX + t) / 2,
                n = this._getNewMinXMaxX(i, a);
              e.globals.disableZoomIn || this.zoomUpdateOptions(n.minX, n.maxX);
            }
          },
          {
            key: "handleZoomOut",
            value: function () {
              var e = this.w;
              if (
                (e.globals.isRangeBar &&
                  ((this.minX = e.globals.minY), (this.maxX = e.globals.maxY)),
                !(
                  "datetime" === e.config.xaxis.type &&
                  1e3 > new Date(this.minX).getUTCFullYear()
                ))
              ) {
                var t = (this.minX + this.maxX) / 2,
                  i = this.minX - (t - this.minX),
                  a = this.maxX - (t - this.maxX),
                  n = this._getNewMinXMaxX(i, a);
                e.globals.disableZoomOut ||
                  this.zoomUpdateOptions(n.minX, n.maxX);
              }
            }
          },
          {
            key: "_getNewMinXMaxX",
            value: function (e, t) {
              var i = this.w.config.xaxis.convertedCatToNumeric;
              return {
                minX: i ? Math.floor(e) : e,
                maxX: i ? Math.floor(t) : t
              };
            }
          },
          {
            key: "zoomUpdateOptions",
            value: function (e, t) {
              var i = this.w;
              if (void 0 !== e || void 0 !== t) {
                if (
                  !(
                    i.config.xaxis.convertedCatToNumeric &&
                    (e < 1 && ((e = 1), (t = i.globals.dataPoints)), t - e < 2)
                  )
                ) {
                  var a = { min: e, max: t },
                    n = this.getBeforeZoomRange(a);
                  n && (a = n.xaxis);
                  var s = { xaxis: a },
                    o = st.clone(i.globals.initialConfig.yaxis);
                  i.config.chart.zoom.autoScaleYaxis &&
                    (o = new s_(this.ctx).autoScaleY(this.ctx, o, {
                      xaxis: a
                    })),
                    i.config.chart.group || (s.yaxis = o),
                    (this.w.globals.zoomed = !0),
                    this.ctx.updateHelpers._updateOptions(
                      s,
                      !1,
                      this.w.config.chart.animations.dynamicAnimation.enabled
                    ),
                    this.zoomCallback(a, o);
                }
              } else this.handleZoomReset();
            }
          },
          {
            key: "zoomCallback",
            value: function (e, t) {
              "function" == typeof this.ev.zoomed &&
                this.ev.zoomed(this.ctx, { xaxis: e, yaxis: t });
            }
          },
          {
            key: "getBeforeZoomRange",
            value: function (e, t) {
              var i = null;
              return (
                "function" == typeof this.ev.beforeZoom &&
                  (i = this.ev.beforeZoom(this, { xaxis: e, yaxis: t })),
                i
              );
            }
          },
          {
            key: "toggleMenu",
            value: function () {
              var e = this;
              window.setTimeout(function () {
                e.elMenu.classList.contains("apexcharts-menu-open")
                  ? e.elMenu.classList.remove("apexcharts-menu-open")
                  : e.elMenu.classList.add("apexcharts-menu-open");
              }, 0);
            }
          },
          {
            key: "handleDownload",
            value: function (e) {
              var t = this.w,
                i = new sT(this.ctx);
              switch (e) {
                case "svg":
                  i.exportToSVG(this.ctx);
                  break;
                case "png":
                  i.exportToPng(this.ctx);
                  break;
                case "csv":
                  i.exportToCSV({
                    series: t.config.series,
                    columnDelimiter:
                      t.config.chart.toolbar.export.csv.columnDelimiter
                  });
              }
            }
          },
          {
            key: "handleZoomReset",
            value: function (e) {
              this.ctx.getSyncedCharts().forEach(function (e) {
                var t = e.w;
                if (
                  ((t.globals.lastXAxis.min = void 0),
                  (t.globals.lastXAxis.max = void 0),
                  e.updateHelpers.revertDefaultAxisMinMax(),
                  "function" == typeof t.config.chart.events.beforeResetZoom)
                ) {
                  var i = t.config.chart.events.beforeResetZoom(e, t);
                  i && e.updateHelpers.revertDefaultAxisMinMax(i);
                }
                "function" == typeof t.config.chart.events.zoomed &&
                  e.ctx.toolbar.zoomCallback({
                    min: t.config.xaxis.min,
                    max: t.config.xaxis.max
                  }),
                  (t.globals.zoomed = !1);
                var a = e.ctx.series.emptyCollapsedSeries(
                  st.clone(t.globals.initialSeries)
                );
                e.updateHelpers._updateSeries(
                  a,
                  t.config.chart.animations.dynamicAnimation.enabled
                );
              });
            }
          },
          {
            key: "destroy",
            value: function () {
              (this.elZoom = null),
                (this.elZoomIn = null),
                (this.elZoomOut = null),
                (this.elPan = null),
                (this.elSelection = null),
                (this.elZoomReset = null),
                (this.elMenuIcon = null);
            }
          }
        ]),
        e
      );
    })(),
    sq = (function (e) {
      n4(i, sU);
      var t = n6(i);
      function i(e) {
        var a;
        return (
          nQ(this, i),
          ((a = t.call(this, e)).ctx = e),
          (a.w = e.w),
          (a.dragged = !1),
          (a.graphics = new sn(a.ctx)),
          (a.eventList = [
            "mousedown",
            "mouseleave",
            "mousemove",
            "touchstart",
            "touchmove",
            "mouseup",
            "touchend"
          ]),
          (a.clientX = 0),
          (a.clientY = 0),
          (a.startX = 0),
          (a.endX = 0),
          (a.dragX = 0),
          (a.startY = 0),
          (a.endY = 0),
          (a.dragY = 0),
          (a.moveDirection = "none"),
          a
        );
      }
      return (
        n1(i, [
          {
            key: "init",
            value: function (e) {
              var t = this,
                i = e.xyRatios,
                a = this.w,
                n = this;
              (this.xyRatios = i),
                (this.zoomRect = this.graphics.drawRect(0, 0, 0, 0)),
                (this.selectionRect = this.graphics.drawRect(0, 0, 0, 0)),
                (this.gridRect =
                  a.globals.dom.baseEl.querySelector(".apexcharts-grid")),
                this.zoomRect.node.classList.add("apexcharts-zoom-rect"),
                this.selectionRect.node.classList.add(
                  "apexcharts-selection-rect"
                ),
                a.globals.dom.elGraphical.add(this.zoomRect),
                a.globals.dom.elGraphical.add(this.selectionRect),
                "x" === a.config.chart.selection.type
                  ? (this.slDraggableRect = this.selectionRect
                      .draggable({
                        minX: 0,
                        minY: 0,
                        maxX: a.globals.gridWidth,
                        maxY: a.globals.gridHeight
                      })
                      .on(
                        "dragmove",
                        this.selectionDragging.bind(this, "dragging")
                      ))
                  : "y" === a.config.chart.selection.type
                  ? (this.slDraggableRect = this.selectionRect
                      .draggable({ minX: 0, maxX: a.globals.gridWidth })
                      .on(
                        "dragmove",
                        this.selectionDragging.bind(this, "dragging")
                      ))
                  : (this.slDraggableRect = this.selectionRect
                      .draggable()
                      .on(
                        "dragmove",
                        this.selectionDragging.bind(this, "dragging")
                      )),
                this.preselectedSelection(),
                (this.hoverArea = a.globals.dom.baseEl.querySelector(
                  "".concat(a.globals.chartClass, " .apexcharts-svg")
                )),
                this.hoverArea.classList.add("apexcharts-zoomable"),
                this.eventList.forEach(function (e) {
                  t.hoverArea.addEventListener(e, n.svgMouseEvents.bind(n, i), {
                    capture: !1,
                    passive: !0
                  });
                });
            }
          },
          {
            key: "destroy",
            value: function () {
              this.slDraggableRect &&
                (this.slDraggableRect.draggable(!1),
                this.slDraggableRect.off(),
                this.selectionRect.off()),
                (this.selectionRect = null),
                (this.zoomRect = null),
                (this.gridRect = null);
            }
          },
          {
            key: "svgMouseEvents",
            value: function (e, t) {
              var i = this.w,
                a = this.ctx.toolbar,
                n = i.globals.zoomEnabled
                  ? i.config.chart.zoom.type
                  : i.config.chart.selection.type,
                s = i.config.chart.toolbar.autoSelected;
              if (
                (t.shiftKey
                  ? ((this.shiftWasPressed = !0),
                    a.enableZoomPanFromToolbar("pan" === s ? "zoom" : "pan"))
                  : this.shiftWasPressed &&
                    (a.enableZoomPanFromToolbar(s),
                    (this.shiftWasPressed = !1)),
                t.target)
              ) {
                var o,
                  r = t.target.classList;
                if (
                  (t.target.parentNode &&
                    null !== t.target.parentNode &&
                    (o = t.target.parentNode.classList),
                  !(
                    r.contains("apexcharts-selection-rect") ||
                    r.contains("apexcharts-legend-marker") ||
                    r.contains("apexcharts-legend-text") ||
                    (o && o.contains("apexcharts-toolbar"))
                  ))
                ) {
                  if (
                    ((this.clientX =
                      "touchmove" === t.type || "touchstart" === t.type
                        ? t.touches[0].clientX
                        : "touchend" === t.type
                        ? t.changedTouches[0].clientX
                        : t.clientX),
                    (this.clientY =
                      "touchmove" === t.type || "touchstart" === t.type
                        ? t.touches[0].clientY
                        : "touchend" === t.type
                        ? t.changedTouches[0].clientY
                        : t.clientY),
                    "mousedown" === t.type && 1 === t.which)
                  ) {
                    var l = this.gridRect.getBoundingClientRect();
                    (this.startX = this.clientX - l.left),
                      (this.startY = this.clientY - l.top),
                      (this.dragged = !1),
                      (this.w.globals.mousedown = !0);
                  }
                  if (
                    ((("mousemove" === t.type && 1 === t.which) ||
                      "touchmove" === t.type) &&
                      ((this.dragged = !0),
                      i.globals.panEnabled
                        ? ((i.globals.selection = null),
                          this.w.globals.mousedown &&
                            this.panDragging({
                              context: this,
                              zoomtype: n,
                              xyRatios: e
                            }))
                        : ((this.w.globals.mousedown &&
                            i.globals.zoomEnabled) ||
                            (this.w.globals.mousedown &&
                              i.globals.selectionEnabled)) &&
                          (this.selection = this.selectionDrawing({
                            context: this,
                            zoomtype: n
                          }))),
                    "mouseup" === t.type ||
                      "touchend" === t.type ||
                      "mouseleave" === t.type)
                  ) {
                    var c = this.gridRect.getBoundingClientRect();
                    this.w.globals.mousedown &&
                      ((this.endX = this.clientX - c.left),
                      (this.endY = this.clientY - c.top),
                      (this.dragX = Math.abs(this.endX - this.startX)),
                      (this.dragY = Math.abs(this.endY - this.startY)),
                      (i.globals.zoomEnabled || i.globals.selectionEnabled) &&
                        this.selectionDrawn({ context: this, zoomtype: n }),
                      i.globals.panEnabled &&
                        i.config.xaxis.convertedCatToNumeric &&
                        this.delayedPanScrolled()),
                      i.globals.zoomEnabled &&
                        this.hideSelectionRect(this.selectionRect),
                      (this.dragged = !1),
                      (this.w.globals.mousedown = !1);
                  }
                  this.makeSelectionRectDraggable();
                }
              }
            }
          },
          {
            key: "makeSelectionRectDraggable",
            value: function () {
              var e = this.w;
              if (this.selectionRect) {
                var t = this.selectionRect.node.getBoundingClientRect();
                t.width > 0 &&
                  t.height > 0 &&
                  this.slDraggableRect
                    .selectize({
                      points: "l, r",
                      pointSize: 8,
                      pointType: "rect"
                    })
                    .resize({
                      constraint: {
                        minX: 0,
                        minY: 0,
                        maxX: e.globals.gridWidth,
                        maxY: e.globals.gridHeight
                      }
                    })
                    .on(
                      "resizing",
                      this.selectionDragging.bind(this, "resizing")
                    );
              }
            }
          },
          {
            key: "preselectedSelection",
            value: function () {
              var e = this.w,
                t = this.xyRatios;
              if (!e.globals.zoomEnabled) {
                if (
                  void 0 !== e.globals.selection &&
                  null !== e.globals.selection
                )
                  this.drawSelectionRect(e.globals.selection);
                else if (
                  void 0 !== e.config.chart.selection.xaxis.min &&
                  void 0 !== e.config.chart.selection.xaxis.max
                ) {
                  var i =
                      (e.config.chart.selection.xaxis.min - e.globals.minX) /
                      t.xRatio,
                    a = {
                      x: i,
                      y: 0,
                      width:
                        e.globals.gridWidth -
                        (e.globals.maxX - e.config.chart.selection.xaxis.max) /
                          t.xRatio -
                        i,
                      height: e.globals.gridHeight,
                      translateX: 0,
                      translateY: 0,
                      selectionEnabled: !0
                    };
                  this.drawSelectionRect(a),
                    this.makeSelectionRectDraggable(),
                    "function" == typeof e.config.chart.events.selection &&
                      e.config.chart.events.selection(this.ctx, {
                        xaxis: {
                          min: e.config.chart.selection.xaxis.min,
                          max: e.config.chart.selection.xaxis.max
                        },
                        yaxis: {}
                      });
                }
              }
            }
          },
          {
            key: "drawSelectionRect",
            value: function (e) {
              var t = e.x,
                i = e.y,
                a = e.width,
                n = e.height,
                s = e.translateX,
                o = e.translateY,
                r = this.w,
                l = this.zoomRect,
                c = this.selectionRect;
              if (this.dragged || null !== r.globals.selection) {
                var h = {
                  transform:
                    "translate(" +
                    (void 0 === s ? 0 : s) +
                    ", " +
                    (void 0 === o ? 0 : o) +
                    ")"
                };
                r.globals.zoomEnabled &&
                  this.dragged &&
                  (a < 0 && (a = 1),
                  l.attr({
                    x: t,
                    y: i,
                    width: a,
                    height: n,
                    fill: r.config.chart.zoom.zoomedArea.fill.color,
                    "fill-opacity": r.config.chart.zoom.zoomedArea.fill.opacity,
                    stroke: r.config.chart.zoom.zoomedArea.stroke.color,
                    "stroke-width": r.config.chart.zoom.zoomedArea.stroke.width,
                    "stroke-opacity":
                      r.config.chart.zoom.zoomedArea.stroke.opacity
                  }),
                  sn.setAttrs(l.node, h)),
                  r.globals.selectionEnabled &&
                    (c.attr({
                      x: t,
                      y: i,
                      width: a > 0 ? a : 0,
                      height: n > 0 ? n : 0,
                      fill: r.config.chart.selection.fill.color,
                      "fill-opacity": r.config.chart.selection.fill.opacity,
                      stroke: r.config.chart.selection.stroke.color,
                      "stroke-width": r.config.chart.selection.stroke.width,
                      "stroke-dasharray":
                        r.config.chart.selection.stroke.dashArray,
                      "stroke-opacity": r.config.chart.selection.stroke.opacity
                    }),
                    sn.setAttrs(c.node, h));
              }
            }
          },
          {
            key: "hideSelectionRect",
            value: function (e) {
              e && e.attr({ x: 0, y: 0, width: 0, height: 0 });
            }
          },
          {
            key: "selectionDrawing",
            value: function (e) {
              var t = e.context,
                i = e.zoomtype,
                a = this.w,
                n = this.gridRect.getBoundingClientRect(),
                s = t.startX - 1,
                o = t.startY,
                r = !1,
                l = !1,
                c = t.clientX - n.left - s,
                h = t.clientY - n.top - o,
                d = {};
              return (
                Math.abs(c + s) > a.globals.gridWidth
                  ? (c = a.globals.gridWidth - s)
                  : t.clientX - n.left < 0 && (c = s),
                s > t.clientX - n.left && ((r = !0), (c = Math.abs(c))),
                o > t.clientY - n.top && ((l = !0), (h = Math.abs(h))),
                (d =
                  "x" === i
                    ? {
                        x: r ? s - c : s,
                        y: 0,
                        width: c,
                        height: a.globals.gridHeight
                      }
                    : "y" === i
                    ? {
                        x: 0,
                        y: l ? o - h : o,
                        width: a.globals.gridWidth,
                        height: h
                      }
                    : {
                        x: r ? s - c : s,
                        y: l ? o - h : o,
                        width: c,
                        height: h
                      }),
                t.drawSelectionRect(d),
                t.selectionDragging("resizing"),
                d
              );
            }
          },
          {
            key: "selectionDragging",
            value: function (e, t) {
              var i = this,
                a = this.w,
                n = this.xyRatios,
                s = this.selectionRect,
                o = 0;
              "resizing" === e && (o = 30);
              var r = function (e) {
                  return parseFloat(s.node.getAttribute(e));
                },
                l = {
                  x: r("x"),
                  y: r("y"),
                  width: r("width"),
                  height: r("height")
                };
              (a.globals.selection = l),
                "function" == typeof a.config.chart.events.selection &&
                  a.globals.selectionEnabled &&
                  (clearTimeout(this.w.globals.selectionResizeTimer),
                  (this.w.globals.selectionResizeTimer = window.setTimeout(
                    function () {
                      var e = i.gridRect.getBoundingClientRect(),
                        t = s.node.getBoundingClientRect(),
                        o = {
                          xaxis: {
                            min:
                              a.globals.xAxisScale.niceMin +
                              (t.left - e.left) * n.xRatio,
                            max:
                              a.globals.xAxisScale.niceMin +
                              (t.right - e.left) * n.xRatio
                          },
                          yaxis: {
                            min:
                              a.globals.yAxisScale[0].niceMin +
                              (e.bottom - t.bottom) * n.yRatio[0],
                            max:
                              a.globals.yAxisScale[0].niceMax -
                              (t.top - e.top) * n.yRatio[0]
                          }
                        };
                      a.config.chart.events.selection(i.ctx, o),
                        a.config.chart.brush.enabled &&
                          void 0 !== a.config.chart.events.brushScrolled &&
                          a.config.chart.events.brushScrolled(i.ctx, o);
                    },
                    o
                  )));
            }
          },
          {
            key: "selectionDrawn",
            value: function (e) {
              var t = e.context,
                i = e.zoomtype,
                a = this.w,
                n = this.xyRatios,
                s = this.ctx.toolbar;
              if (t.startX > t.endX) {
                var o = t.startX;
                (t.startX = t.endX), (t.endX = o);
              }
              if (t.startY > t.endY) {
                var r = t.startY;
                (t.startY = t.endY), (t.endY = r);
              }
              var l = void 0,
                c = void 0;
              a.globals.isRangeBar
                ? ((l =
                    a.globals.yAxisScale[0].niceMin +
                    t.startX * n.invertedYRatio),
                  (c =
                    a.globals.yAxisScale[0].niceMin +
                    t.endX * n.invertedYRatio))
                : ((l = a.globals.xAxisScale.niceMin + t.startX * n.xRatio),
                  (c = a.globals.xAxisScale.niceMin + t.endX * n.xRatio));
              var h = [],
                d = [];
              if (
                (a.config.yaxis.forEach(function (e, i) {
                  h.push(
                    a.globals.yAxisScale[i].niceMax - n.yRatio[i] * t.startY
                  ),
                    d.push(
                      a.globals.yAxisScale[i].niceMax - n.yRatio[i] * t.endY
                    );
                }),
                t.dragged && (t.dragX > 10 || t.dragY > 10) && l !== c)
              ) {
                if (a.globals.zoomEnabled) {
                  var u = st.clone(a.globals.initialConfig.yaxis),
                    g = st.clone(a.globals.initialConfig.xaxis);
                  if (
                    ((a.globals.zoomed = !0),
                    a.config.xaxis.convertedCatToNumeric &&
                      ((l = Math.floor(l)),
                      (c = Math.floor(c)),
                      l < 1 && ((l = 1), (c = a.globals.dataPoints)),
                      c - l < 2 && (c = l + 1)),
                    ("xy" !== i && "x" !== i) || (g = { min: l, max: c }),
                    ("xy" !== i && "y" !== i) ||
                      u.forEach(function (e, t) {
                        (u[t].min = d[t]), (u[t].max = h[t]);
                      }),
                    a.config.chart.zoom.autoScaleYaxis &&
                      (u = new s_(t.ctx).autoScaleY(t.ctx, u, { xaxis: g })),
                    s)
                  ) {
                    var p = s.getBeforeZoomRange(g, u);
                    p &&
                      ((g = p.xaxis ? p.xaxis : g),
                      (u = p.yaxis ? p.yaxis : u));
                  }
                  var f = { xaxis: g };
                  a.config.chart.group || (f.yaxis = u),
                    t.ctx.updateHelpers._updateOptions(
                      f,
                      !1,
                      t.w.config.chart.animations.dynamicAnimation.enabled
                    ),
                    "function" == typeof a.config.chart.events.zoomed &&
                      s.zoomCallback(g, u);
                } else if (a.globals.selectionEnabled) {
                  var m,
                    x = null;
                  (m = { min: l, max: c }),
                    ("xy" !== i && "y" !== i) ||
                      (x = st.clone(a.config.yaxis)).forEach(function (e, t) {
                        (x[t].min = d[t]), (x[t].max = h[t]);
                      }),
                    (a.globals.selection = t.selection),
                    "function" == typeof a.config.chart.events.selection &&
                      a.config.chart.events.selection(t.ctx, {
                        xaxis: m,
                        yaxis: x
                      });
                }
              }
            }
          },
          {
            key: "panDragging",
            value: function (e) {
              var t = e.context,
                i = this.w;
              if (void 0 !== i.globals.lastClientPosition.x) {
                var a = i.globals.lastClientPosition.x - t.clientX,
                  n = i.globals.lastClientPosition.y - t.clientY;
                Math.abs(a) > Math.abs(n) && a > 0
                  ? (this.moveDirection = "left")
                  : Math.abs(a) > Math.abs(n) && a < 0
                  ? (this.moveDirection = "right")
                  : Math.abs(n) > Math.abs(a) && n > 0
                  ? (this.moveDirection = "up")
                  : Math.abs(n) > Math.abs(a) &&
                    n < 0 &&
                    (this.moveDirection = "down");
              }
              i.globals.lastClientPosition = { x: t.clientX, y: t.clientY };
              var s = i.globals.isRangeBar ? i.globals.minY : i.globals.minX,
                o = i.globals.isRangeBar ? i.globals.maxY : i.globals.maxX;
              i.config.xaxis.convertedCatToNumeric || t.panScrolled(s, o);
            }
          },
          {
            key: "delayedPanScrolled",
            value: function () {
              var e = this.w,
                t = e.globals.minX,
                i = e.globals.maxX,
                a = (e.globals.maxX - e.globals.minX) / 2;
              "left" === this.moveDirection
                ? ((t = e.globals.minX + a), (i = e.globals.maxX + a))
                : "right" === this.moveDirection &&
                  ((t = e.globals.minX - a), (i = e.globals.maxX - a)),
                (t = Math.floor(t)),
                (i = Math.floor(i)),
                this.updateScrolledChart({ xaxis: { min: t, max: i } }, t, i);
            }
          },
          {
            key: "panScrolled",
            value: function (e, t) {
              var i = this.w,
                a = this.xyRatios,
                n = st.clone(i.globals.initialConfig.yaxis),
                s = a.xRatio,
                o = i.globals.minX,
                r = i.globals.maxX;
              i.globals.isRangeBar &&
                ((s = a.invertedYRatio),
                (o = i.globals.minY),
                (r = i.globals.maxY)),
                "left" === this.moveDirection
                  ? ((e = o + (i.globals.gridWidth / 15) * s),
                    (t = r + (i.globals.gridWidth / 15) * s))
                  : "right" === this.moveDirection &&
                    ((e = o - (i.globals.gridWidth / 15) * s),
                    (t = r - (i.globals.gridWidth / 15) * s)),
                i.globals.isRangeBar ||
                  ((e < i.globals.initialMinX || t > i.globals.initialMaxX) &&
                    ((e = o), (t = r)));
              var l = { min: e, max: t };
              i.config.chart.zoom.autoScaleYaxis &&
                (n = new s_(this.ctx).autoScaleY(this.ctx, n, { xaxis: l }));
              var c = { xaxis: { min: e, max: t } };
              i.config.chart.group || (c.yaxis = n),
                this.updateScrolledChart(c, e, t);
            }
          },
          {
            key: "updateScrolledChart",
            value: function (e, t, i) {
              var a = this.w;
              this.ctx.updateHelpers._updateOptions(e, !1, !1),
                "function" == typeof a.config.chart.events.scrolled &&
                  a.config.chart.events.scrolled(this.ctx, {
                    xaxis: { min: t, max: i }
                  });
            }
          }
        ]),
        i
      );
    })(),
    sZ = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.ttCtx = t), (this.ctx = t.ctx);
      }
      return (
        n1(e, [
          {
            key: "getNearestValues",
            value: function (e) {
              var t = e.hoverArea,
                i = e.elGrid,
                a = e.clientX,
                n = e.clientY,
                s = this.w,
                o = i.getBoundingClientRect(),
                r = o.width,
                l = o.height,
                c = r / (s.globals.dataPoints - 1),
                h = l / s.globals.dataPoints,
                d = this.hasBars();
              (s.globals.comboCharts || d) &&
                !s.config.xaxis.convertedCatToNumeric &&
                (c = r / s.globals.dataPoints);
              var u = a - o.left - s.globals.barPadForNumericAxis,
                g = n - o.top;
              u < 0 || g < 0 || u > r || g > l
                ? (t.classList.remove("hovering-zoom"),
                  t.classList.remove("hovering-pan"))
                : s.globals.zoomEnabled
                ? (t.classList.remove("hovering-pan"),
                  t.classList.add("hovering-zoom"))
                : s.globals.panEnabled &&
                  (t.classList.remove("hovering-zoom"),
                  t.classList.add("hovering-pan"));
              var p = Math.round(u / c),
                f = Math.floor(g / h);
              d &&
                !s.config.xaxis.convertedCatToNumeric &&
                (p = Math.ceil(u / c) - 1);
              var m = null,
                x = null,
                b = [],
                v = [];
              if (
                (s.globals.seriesXvalues.forEach(function (e) {
                  b.push([e[0] + 1e-6].concat(e));
                }),
                s.globals.seriesYvalues.forEach(function (e) {
                  v.push([e[0] + 1e-6].concat(e));
                }),
                (b = b.map(function (e) {
                  return e.filter(function (e) {
                    return st.isNumber(e);
                  });
                })),
                (v = v.map(function (e) {
                  return e.filter(function (e) {
                    return st.isNumber(e);
                  });
                })),
                s.globals.isXNumeric)
              ) {
                var y = this.ttCtx.getElGrid().getBoundingClientRect(),
                  w = u * (y.width / r),
                  C = g * (y.height / l);
                (m = (x = this.closestInMultiArray(w, C, b, v)).index),
                  (p = x.j),
                  null !== m &&
                    ((b = s.globals.seriesXvalues[m]),
                    (p = (x = this.closestInArray(w, b)).index));
              }
              return (
                (s.globals.capturedSeriesIndex = null === m ? -1 : m),
                (!p || p < 1) && (p = 0),
                s.globals.isBarHorizontal
                  ? (s.globals.capturedDataPointIndex = f)
                  : (s.globals.capturedDataPointIndex = p),
                {
                  capturedSeries: m,
                  j: s.globals.isBarHorizontal ? f : p,
                  hoverX: u,
                  hoverY: g
                }
              );
            }
          },
          {
            key: "closestInMultiArray",
            value: function (e, t, i, a) {
              var n = this.w,
                s = 0,
                o = null,
                r = -1;
              n.globals.series.length > 1
                ? (s = this.getFirstActiveXArray(i))
                : (o = 0);
              var l = Math.abs(e - i[s][0]);
              if (
                (i.forEach(function (t) {
                  t.forEach(function (t, i) {
                    var a = Math.abs(e - t);
                    a < l && ((l = a), (r = i));
                  });
                }),
                -1 !== r)
              ) {
                var c = Math.abs(t - a[s][r]);
                (o = s),
                  a.forEach(function (e, i) {
                    var a = Math.abs(t - e[r]);
                    a < c && ((c = a), (o = i));
                  });
              }
              return { index: o, j: r };
            }
          },
          {
            key: "getFirstActiveXArray",
            value: function (e) {
              for (
                var t = this.w,
                  i = 0,
                  a = e.map(function (e, t) {
                    return e.length > 0 ? t : -1;
                  }),
                  n = 0;
                n < a.length;
                n++
              )
                if (
                  -1 !== a[n] &&
                  -1 === t.globals.collapsedSeriesIndices.indexOf(n) &&
                  -1 === t.globals.ancillaryCollapsedSeriesIndices.indexOf(n)
                ) {
                  i = a[n];
                  break;
                }
              return i;
            }
          },
          {
            key: "closestInArray",
            value: function (e, t) {
              for (
                var i = t[0], a = null, n = Math.abs(e - i), s = 0;
                s < t.length;
                s++
              ) {
                var o = Math.abs(e - t[s]);
                o < n && ((n = o), (a = s));
              }
              return { index: a };
            }
          },
          {
            key: "isXoverlap",
            value: function (e) {
              var t = [],
                i = this.w.globals.seriesX.filter(function (e) {
                  return void 0 !== e[0];
                });
              if (i.length > 0)
                for (var a = 0; a < i.length - 1; a++)
                  void 0 !== i[a][e] &&
                    void 0 !== i[a + 1][e] &&
                    i[a][e] !== i[a + 1][e] &&
                    t.push("unEqual");
              return 0 === t.length;
            }
          },
          {
            key: "isInitialSeriesSameLen",
            value: function () {
              for (
                var e = !0, t = this.w.globals.initialSeries, i = 0;
                i < t.length - 1;
                i++
              )
                if (t[i].data.length !== t[i + 1].data.length) {
                  e = !1;
                  break;
                }
              return e;
            }
          },
          {
            key: "getBarsHeight",
            value: function (e) {
              return n8(e).reduce(function (e, t) {
                return e + t.getBBox().height;
              }, 0);
            }
          },
          {
            key: "getElMarkers",
            value: function (e) {
              return "number" == typeof e
                ? this.w.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series[data\\:realIndex='".concat(
                      e,
                      "'] .apexcharts-series-markers-wrap > *"
                    )
                  )
                : this.w.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series-markers-wrap > *"
                  );
            }
          },
          {
            key: "getAllMarkers",
            value: function () {
              var e = this.w.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-series-markers-wrap"
              );
              (e = n8(e)).sort(function (e, t) {
                var i = Number(e.getAttribute("data:realIndex")),
                  a = Number(t.getAttribute("data:realIndex"));
                return a < i ? 1 : a > i ? -1 : 0;
              });
              var t = [];
              return (
                e.forEach(function (e) {
                  t.push(e.querySelector(".apexcharts-marker"));
                }),
                t
              );
            }
          },
          {
            key: "hasMarkers",
            value: function (e) {
              return this.getElMarkers(e).length > 0;
            }
          },
          {
            key: "getElBars",
            value: function () {
              return this.w.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-bar-series,  .apexcharts-candlestick-series, .apexcharts-boxPlot-series, .apexcharts-rangebar-series"
              );
            }
          },
          {
            key: "hasBars",
            value: function () {
              return this.getElBars().length > 0;
            }
          },
          {
            key: "getHoverMarkerSize",
            value: function (e) {
              var t = this.w,
                i = t.config.markers.hover.size;
              return (
                void 0 === i &&
                  (i =
                    t.globals.markers.size[e] +
                    t.config.markers.hover.sizeOffset),
                i
              );
            }
          },
          {
            key: "toggleAllTooltipSeriesGroups",
            value: function (e) {
              var t = this.w,
                i = this.ttCtx;
              0 === i.allTooltipSeriesGroups.length &&
                (i.allTooltipSeriesGroups =
                  t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-tooltip-series-group"
                  ));
              for (var a = i.allTooltipSeriesGroups, n = 0; n < a.length; n++)
                "enable" === e
                  ? (a[n].classList.add("apexcharts-active"),
                    (a[n].style.display = t.config.tooltip.items.display))
                  : (a[n].classList.remove("apexcharts-active"),
                    (a[n].style.display = "none"));
            }
          }
        ]),
        e
      );
    })(),
    sJ = (function () {
      function e(t) {
        nQ(this, e),
          (this.w = t.w),
          (this.ctx = t.ctx),
          (this.ttCtx = t),
          (this.tooltipUtil = new sZ(t));
      }
      return (
        n1(e, [
          {
            key: "drawSeriesTexts",
            value: function (e) {
              var t = e.shared,
                i = void 0 === t || t,
                a = e.ttItems,
                n = e.i,
                s = void 0 === n ? 0 : n,
                o = e.j,
                r = void 0 === o ? null : o,
                l = e.y1,
                c = e.y2,
                h = e.e,
                d = this.w;
              void 0 !== d.config.tooltip.custom
                ? this.handleCustomTooltip({ i: s, j: r, y1: l, y2: c, w: d })
                : this.toggleActiveInactiveSeries(i);
              var u = this.getValuesToPrint({ i: s, j: r });
              this.printLabels({
                i: s,
                j: r,
                values: u,
                ttItems: a,
                shared: i,
                e: h
              });
              var g = this.ttCtx.getElTooltip();
              (this.ttCtx.tooltipRect.ttWidth =
                g.getBoundingClientRect().width),
                (this.ttCtx.tooltipRect.ttHeight =
                  g.getBoundingClientRect().height);
            }
          },
          {
            key: "printLabels",
            value: function (e) {
              var t,
                i = this,
                a = e.i,
                n = e.j,
                s = e.values,
                o = e.ttItems,
                r = e.shared,
                l = e.e,
                c = this.w,
                h = [],
                d = function (e) {
                  return (
                    c.globals.seriesGoals[e] &&
                    c.globals.seriesGoals[e][n] &&
                    Array.isArray(c.globals.seriesGoals[e][n])
                  );
                },
                u = s.xVal,
                g = s.zVal,
                p = s.xAxisTTVal,
                f = "",
                m = c.globals.colors[a];
              null !== n &&
                c.config.plotOptions.bar.distributed &&
                (m = c.globals.colors[n]);
              for (
                var x = 0, b = c.globals.series.length - 1;
                x < c.globals.series.length;
                x++, b--
              )
                (function (e, s) {
                  var x = i.getFormatters(a);
                  (f = i.getSeriesName({
                    fn: x.yLbTitleFormatter,
                    index: a,
                    seriesIndex: a,
                    j: n
                  })),
                    "treemap" === c.config.chart.type &&
                      (f = x.yLbTitleFormatter(
                        String(c.config.series[a].data[n].x),
                        {
                          series: c.globals.series,
                          seriesIndex: a,
                          dataPointIndex: n,
                          w: c
                        }
                      ));
                  var b = c.config.tooltip.inverseOrder ? s : e;
                  if (c.globals.axisCharts) {
                    var v = function (e) {
                      var t, i, a, s;
                      return c.globals.isRangeData
                        ? x.yLbFormatter(
                            null === (t = c.globals.seriesRangeStart) ||
                              void 0 === t ||
                              null === (i = t[e]) ||
                              void 0 === i
                              ? void 0
                              : i[n],
                            {
                              series: c.globals.seriesRangeStart,
                              seriesIndex: e,
                              dataPointIndex: n,
                              w: c
                            }
                          ) +
                            " - " +
                            x.yLbFormatter(
                              null === (a = c.globals.seriesRangeEnd) ||
                                void 0 === a ||
                                null === (s = a[e]) ||
                                void 0 === s
                                ? void 0
                                : s[n],
                              {
                                series: c.globals.seriesRangeEnd,
                                seriesIndex: e,
                                dataPointIndex: n,
                                w: c
                              }
                            )
                        : x.yLbFormatter(c.globals.series[e][n], {
                            series: c.globals.series,
                            seriesIndex: e,
                            dataPointIndex: n,
                            w: c
                          });
                    };
                    if (r)
                      (x = i.getFormatters(b)),
                        (f = i.getSeriesName({
                          fn: x.yLbTitleFormatter,
                          index: b,
                          seriesIndex: a,
                          j: n
                        })),
                        (m = c.globals.colors[b]),
                        (t = v(b)),
                        d(b) &&
                          (h = c.globals.seriesGoals[b][n].map(function (e) {
                            return {
                              attrs: e,
                              val: x.yLbFormatter(e.value, {
                                seriesIndex: b,
                                dataPointIndex: n,
                                w: c
                              })
                            };
                          }));
                    else {
                      var y,
                        w =
                          null == l || null === (y = l.target) || void 0 === y
                            ? void 0
                            : y.getAttribute("fill");
                      w &&
                        (m =
                          -1 !== w.indexOf("url")
                            ? document
                                .querySelector(w.substr(4).slice(0, -1))
                                .childNodes[0].getAttribute("stroke")
                            : w),
                        (t = v(a)),
                        d(a) &&
                          Array.isArray(c.globals.seriesGoals[a][n]) &&
                          (h = c.globals.seriesGoals[a][n].map(function (e) {
                            return {
                              attrs: e,
                              val: x.yLbFormatter(e.value, {
                                seriesIndex: a,
                                dataPointIndex: n,
                                w: c
                              })
                            };
                          }));
                    }
                  }
                  null === n &&
                    (t = x.yLbFormatter(
                      c.globals.series[a],
                      nJ(nJ({}, c), {}, { seriesIndex: a, dataPointIndex: a })
                    )),
                    i.DOMHandling({
                      i: a,
                      t: b,
                      j: n,
                      ttItems: o,
                      values: {
                        val: t,
                        goalVals: h,
                        xVal: u,
                        xAxisTTVal: p,
                        zVal: g
                      },
                      seriesName: f,
                      shared: r,
                      pColor: m
                    });
                })(x, b);
            }
          },
          {
            key: "getFormatters",
            value: function (e) {
              var t,
                i = this.w,
                a = i.globals.yLabelFormatters[e];
              return (
                void 0 !== i.globals.ttVal
                  ? Array.isArray(i.globals.ttVal)
                    ? ((a = i.globals.ttVal[e] && i.globals.ttVal[e].formatter),
                      (t =
                        i.globals.ttVal[e] &&
                        i.globals.ttVal[e].title &&
                        i.globals.ttVal[e].title.formatter))
                    : ((a = i.globals.ttVal.formatter),
                      "function" == typeof i.globals.ttVal.title.formatter &&
                        (t = i.globals.ttVal.title.formatter))
                  : (t = i.config.tooltip.y.title.formatter),
                "function" != typeof a &&
                  (a = i.globals.yLabelFormatters[0]
                    ? i.globals.yLabelFormatters[0]
                    : function (e) {
                        return e;
                      }),
                "function" != typeof t &&
                  (t = function (e) {
                    return e;
                  }),
                { yLbFormatter: a, yLbTitleFormatter: t }
              );
            }
          },
          {
            key: "getSeriesName",
            value: function (e) {
              var t = e.fn,
                i = e.index,
                a = e.seriesIndex,
                n = e.j,
                s = this.w;
              return t(String(s.globals.seriesNames[i]), {
                series: s.globals.series,
                seriesIndex: a,
                dataPointIndex: n,
                w: s
              });
            }
          },
          {
            key: "DOMHandling",
            value: function (e) {
              e.i;
              var t = e.t,
                i = e.j,
                a = e.ttItems,
                n = e.values,
                s = e.seriesName,
                o = e.shared,
                r = e.pColor,
                l = this.w,
                c = this.ttCtx,
                h = n.val,
                d = n.goalVals,
                u = n.xVal,
                g = n.xAxisTTVal,
                p = n.zVal,
                f = null;
              (f = a[t].children),
                l.config.tooltip.fillSeriesColor &&
                  ((a[t].style.backgroundColor = r),
                  (f[0].style.display = "none")),
                c.showTooltipTitle &&
                  (null === c.tooltipTitle &&
                    (c.tooltipTitle = l.globals.dom.baseEl.querySelector(
                      ".apexcharts-tooltip-title"
                    )),
                  (c.tooltipTitle.innerHTML = u)),
                c.isXAxisTooltipEnabled &&
                  (c.xaxisTooltipText.innerHTML = "" !== g ? g : u);
              var m = a[t].querySelector(".apexcharts-tooltip-text-y-label");
              m && (m.innerHTML = s || "");
              var x = a[t].querySelector(".apexcharts-tooltip-text-y-value");
              x && (x.innerHTML = void 0 !== h ? h : ""),
                f[0] &&
                  f[0].classList.contains("apexcharts-tooltip-marker") &&
                  (l.config.tooltip.marker.fillColors &&
                    Array.isArray(l.config.tooltip.marker.fillColors) &&
                    (r = l.config.tooltip.marker.fillColors[t]),
                  (f[0].style.backgroundColor = r)),
                l.config.tooltip.marker.show || (f[0].style.display = "none");
              var b = a[t].querySelector(
                  ".apexcharts-tooltip-text-goals-label"
                ),
                v = a[t].querySelector(".apexcharts-tooltip-text-goals-value");
              if (d.length && l.globals.seriesGoals[t]) {
                var y = function () {
                  var e = "<div >",
                    t = "<div>";
                  d.forEach(function (i, a) {
                    (e +=
                      ' <div style="display: flex"><span class="apexcharts-tooltip-marker" style="background-color: '
                        .concat(
                          i.attrs.strokeColor,
                          '; height: 3px; border-radius: 0; top: 5px;"></span> '
                        )
                        .concat(i.attrs.name, "</div>")),
                      (t += "<div>".concat(i.val, "</div>"));
                  }),
                    (b.innerHTML = e + "</div>"),
                    (v.innerHTML = t + "</div>");
                };
                o
                  ? l.globals.seriesGoals[t][i] &&
                    Array.isArray(l.globals.seriesGoals[t][i])
                    ? y()
                    : ((b.innerHTML = ""), (v.innerHTML = ""))
                  : y();
              } else (b.innerHTML = ""), (v.innerHTML = "");
              null !== p &&
                ((a[t].querySelector(
                  ".apexcharts-tooltip-text-z-label"
                ).innerHTML = l.config.tooltip.z.title),
                (a[t].querySelector(
                  ".apexcharts-tooltip-text-z-value"
                ).innerHTML = void 0 !== p ? p : "")),
                o &&
                  f[0] &&
                  (null == h ||
                  l.globals.ancillaryCollapsedSeriesIndices.indexOf(t) > -1 ||
                  l.globals.collapsedSeriesIndices.indexOf(t) > -1
                    ? (f[0].parentNode.style.display = "none")
                    : (f[0].parentNode.style.display =
                        l.config.tooltip.items.display));
            }
          },
          {
            key: "toggleActiveInactiveSeries",
            value: function (e) {
              var t = this.w;
              if (e) this.tooltipUtil.toggleAllTooltipSeriesGroups("enable");
              else {
                this.tooltipUtil.toggleAllTooltipSeriesGroups("disable");
                var i = t.globals.dom.baseEl.querySelector(
                  ".apexcharts-tooltip-series-group"
                );
                i &&
                  (i.classList.add("apexcharts-active"),
                  (i.style.display = t.config.tooltip.items.display));
              }
            }
          },
          {
            key: "getValuesToPrint",
            value: function (e) {
              var t = e.i,
                i = e.j,
                a = this.w,
                n = this.ctx.series.filteredSeriesX(),
                s = "",
                o = "",
                r = null,
                l = null,
                c = {
                  series: a.globals.series,
                  seriesIndex: t,
                  dataPointIndex: i,
                  w: a
                },
                h = a.globals.ttZFormatter;
              null === i
                ? (l = a.globals.series[t])
                : a.globals.isXNumeric && "treemap" !== a.config.chart.type
                ? ((s = n[t][i]),
                  0 === n[t].length &&
                    (s = n[this.tooltipUtil.getFirstActiveXArray(n)][i]))
                : (s =
                    void 0 !== a.globals.labels[i] ? a.globals.labels[i] : "");
              var d = s;
              return (
                (s =
                  a.globals.isXNumeric && "datetime" === a.config.xaxis.type
                    ? new sp(this.ctx).xLabelFormat(
                        a.globals.ttKeyFormatter,
                        d,
                        d,
                        {
                          i: void 0,
                          dateFormatter: new sg(this.ctx).formatDate,
                          w: this.w
                        }
                      )
                    : a.globals.isBarHorizontal
                    ? a.globals.yLabelFormatters[0](d, c)
                    : a.globals.xLabelFormatter(d, c)),
                void 0 !== a.config.tooltip.x.formatter &&
                  (s = a.globals.ttKeyFormatter(d, c)),
                a.globals.seriesZ.length > 0 &&
                  a.globals.seriesZ[t].length > 0 &&
                  (r = h(a.globals.seriesZ[t][i], a)),
                (o =
                  "function" == typeof a.config.xaxis.tooltip.formatter
                    ? a.globals.xaxisTooltipFormatter(d, c)
                    : s),
                {
                  val: Array.isArray(l) ? l.join(" ") : l,
                  xVal: Array.isArray(s) ? s.join(" ") : s,
                  xAxisTTVal: Array.isArray(o) ? o.join(" ") : o,
                  zVal: r
                }
              );
            }
          },
          {
            key: "handleCustomTooltip",
            value: function (e) {
              var t = e.i,
                i = e.j,
                a = e.y1,
                n = e.y2,
                s = e.w,
                o = this.ttCtx.getElTooltip(),
                r = s.config.tooltip.custom;
              Array.isArray(r) && r[t] && (r = r[t]),
                (o.innerHTML = r({
                  ctx: this.ctx,
                  series: s.globals.series,
                  seriesIndex: t,
                  dataPointIndex: i,
                  y1: a,
                  y2: n,
                  w: s
                }));
            }
          }
        ]),
        e
      );
    })(),
    sK = (function () {
      function e(t) {
        nQ(this, e), (this.ttCtx = t), (this.ctx = t.ctx), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "moveXCrosshairs",
            value: function (e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : null,
                i = this.ttCtx,
                a = this.w,
                n = i.getElXCrosshairs(),
                s = e - i.xcrosshairsWidth / 2,
                o = a.globals.labels.slice().length;
              if (
                (null !== t && (s = (a.globals.gridWidth / o) * t),
                null === n ||
                  a.globals.isBarHorizontal ||
                  (n.setAttribute("x", s),
                  n.setAttribute("x1", s),
                  n.setAttribute("x2", s),
                  n.setAttribute("y2", a.globals.gridHeight),
                  n.classList.add("apexcharts-active")),
                s < 0 && (s = 0),
                s > a.globals.gridWidth && (s = a.globals.gridWidth),
                i.isXAxisTooltipEnabled)
              ) {
                var r = s;
                ("tickWidth" !== a.config.xaxis.crosshairs.width &&
                  "barWidth" !== a.config.xaxis.crosshairs.width) ||
                  (r = s + i.xcrosshairsWidth / 2),
                  this.moveXAxisTooltip(r);
              }
            }
          },
          {
            key: "moveYCrosshairs",
            value: function (e) {
              var t = this.ttCtx;
              null !== t.ycrosshairs &&
                sn.setAttrs(t.ycrosshairs, { y1: e, y2: e }),
                null !== t.ycrosshairsHidden &&
                  sn.setAttrs(t.ycrosshairsHidden, { y1: e, y2: e });
            }
          },
          {
            key: "moveXAxisTooltip",
            value: function (e) {
              var t = this.w,
                i = this.ttCtx;
              if (null !== i.xaxisTooltip && 0 !== i.xcrosshairsWidth) {
                i.xaxisTooltip.classList.add("apexcharts-active");
                var a,
                  n =
                    i.xaxisOffY +
                    t.config.xaxis.tooltip.offsetY +
                    t.globals.translateY +
                    1 +
                    t.config.xaxis.offsetY;
                isNaN(
                  (e -= i.xaxisTooltip.getBoundingClientRect().width / 2)
                ) ||
                  ((e += t.globals.translateX),
                  (a = new sn(this.ctx).getTextRects(
                    i.xaxisTooltipText.innerHTML
                  )),
                  (i.xaxisTooltipText.style.minWidth = a.width + "px"),
                  (i.xaxisTooltip.style.left = e + "px"),
                  (i.xaxisTooltip.style.top = n + "px"));
              }
            }
          },
          {
            key: "moveYAxisTooltip",
            value: function (e) {
              var t = this.w,
                i = this.ttCtx;
              null === i.yaxisTTEls &&
                (i.yaxisTTEls = t.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-yaxistooltip"
                ));
              var a = parseInt(i.ycrosshairsHidden.getAttribute("y1"), 10),
                n = t.globals.translateY + a,
                s = i.yaxisTTEls[e].getBoundingClientRect().height,
                o = t.globals.translateYAxisX[e] - 2;
              t.config.yaxis[e].opposite && (o -= 26),
                (n -= s / 2),
                -1 === t.globals.ignoreYAxisIndexes.indexOf(e)
                  ? (i.yaxisTTEls[e].classList.add("apexcharts-active"),
                    (i.yaxisTTEls[e].style.top = n + "px"),
                    (i.yaxisTTEls[e].style.left =
                      o + t.config.yaxis[e].tooltip.offsetX + "px"))
                  : i.yaxisTTEls[e].classList.remove("apexcharts-active");
            }
          },
          {
            key: "moveTooltip",
            value: function (e, t) {
              var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : null,
                a = this.w,
                n = this.ttCtx,
                s = n.getElTooltip(),
                o = n.tooltipRect,
                r = null !== i ? parseFloat(i) : 1,
                l = parseFloat(e) + r + 5,
                c = parseFloat(t) + r / 2;
              if (
                (l > a.globals.gridWidth / 2 && (l = l - o.ttWidth - r - 10),
                l > a.globals.gridWidth - o.ttWidth - 10 &&
                  (l = a.globals.gridWidth - o.ttWidth),
                l < -20 && (l = -20),
                a.config.tooltip.followCursor)
              ) {
                var h = n.getElGrid().getBoundingClientRect();
                (l = n.e.clientX - h.left) > a.globals.gridWidth / 2 &&
                  (l -= n.tooltipRect.ttWidth),
                  (c = n.e.clientY + a.globals.translateY - h.top) >
                    a.globals.gridHeight / 2 && (c -= n.tooltipRect.ttHeight);
              } else
                a.globals.isBarHorizontal ||
                  (o.ttHeight / 2 + c > a.globals.gridHeight &&
                    (c =
                      a.globals.gridHeight -
                      o.ttHeight +
                      a.globals.translateY));
              isNaN(l) ||
                ((l += a.globals.translateX),
                (s.style.left = l + "px"),
                (s.style.top = c + "px"));
            }
          },
          {
            key: "moveMarkers",
            value: function (e, t) {
              var i = this.w,
                a = this.ttCtx;
              if (i.globals.markers.size[e] > 0)
                for (
                  var n = i.globals.dom.baseEl.querySelectorAll(
                      " .apexcharts-series[data\\:realIndex='".concat(
                        e,
                        "'] .apexcharts-marker"
                      )
                    ),
                    s = 0;
                  s < n.length;
                  s++
                )
                  parseInt(n[s].getAttribute("rel"), 10) === t &&
                    (a.marker.resetPointsSize(),
                    a.marker.enlargeCurrentPoint(t, n[s]));
              else
                a.marker.resetPointsSize(), this.moveDynamicPointOnHover(t, e);
            }
          },
          {
            key: "moveDynamicPointOnHover",
            value: function (e, t) {
              var i,
                a,
                n = this.w,
                s = this.ttCtx,
                o = n.globals.pointsArray,
                r = s.tooltipUtil.getHoverMarkerSize(t),
                l = n.config.series[t].type;
              if (
                !l ||
                ("column" !== l && "candlestick" !== l && "boxPlot" !== l)
              ) {
                (i = o[t][e][0]), (a = o[t][e][1] ? o[t][e][1] : 0);
                var c = n.globals.dom.baseEl.querySelector(
                  ".apexcharts-series[data\\:realIndex='".concat(
                    t,
                    "'] .apexcharts-series-markers circle"
                  )
                );
                c &&
                  a < n.globals.gridHeight &&
                  a > 0 &&
                  (c.setAttribute("r", r),
                  c.setAttribute("cx", i),
                  c.setAttribute("cy", a)),
                  this.moveXCrosshairs(i),
                  s.fixedTooltip || this.moveTooltip(i, a, r);
              }
            }
          },
          {
            key: "moveDynamicPointsOnHover",
            value: function (e) {
              var t,
                i = this.ttCtx,
                a = i.w,
                n = 0,
                s = 0,
                o = a.globals.pointsArray;
              t = new sS(this.ctx).getActiveConfigSeriesIndex("asc", [
                "line",
                "area",
                "scatter",
                "bubble"
              ]);
              var r = i.tooltipUtil.getHoverMarkerSize(t);
              o[t] && ((n = o[t][e][0]), (s = o[t][e][1]));
              var l = i.tooltipUtil.getAllMarkers();
              if (null !== l)
                for (var c = 0; c < a.globals.series.length; c++) {
                  var h = o[c];
                  if (
                    (a.globals.comboCharts &&
                      void 0 === h &&
                      l.splice(c, 0, null),
                    h && h.length)
                  ) {
                    var d = o[c][e][1],
                      u = void 0;
                    if (
                      (l[c].setAttribute("cx", n),
                      "rangeArea" === a.config.chart.type &&
                        !a.globals.comboCharts)
                    ) {
                      var g = e + a.globals.series[c].length;
                      (u = o[c][g][1]), (d -= Math.abs(d - u) / 2);
                    }
                    null !== d &&
                    !isNaN(d) &&
                    d < a.globals.gridHeight + r &&
                    d + r > 0
                      ? (l[c] && l[c].setAttribute("r", r),
                        l[c] && l[c].setAttribute("cy", d))
                      : l[c] && l[c].setAttribute("r", 0);
                  }
                }
              this.moveXCrosshairs(n),
                i.fixedTooltip ||
                  this.moveTooltip(n, s || a.globals.gridHeight, r);
            }
          },
          {
            key: "moveStickyTooltipOverBars",
            value: function (e, t) {
              var i = this.w,
                a = this.ttCtx,
                n = i.globals.columnSeries
                  ? i.globals.columnSeries.length
                  : i.globals.series.length,
                s =
                  n >= 2 && n % 2 == 0
                    ? Math.floor(n / 2)
                    : Math.floor(n / 2) + 1;
              i.globals.isBarHorizontal &&
                (s = new sS(this.ctx).getActiveConfigSeriesIndex("desc") + 1);
              var o = i.globals.dom.baseEl.querySelector(
                ".apexcharts-bar-series .apexcharts-series[rel='"
                  .concat(s, "'] path[j='")
                  .concat(
                    e,
                    "'], .apexcharts-candlestick-series .apexcharts-series[rel='"
                  )
                  .concat(s, "'] path[j='")
                  .concat(
                    e,
                    "'], .apexcharts-boxPlot-series .apexcharts-series[rel='"
                  )
                  .concat(s, "'] path[j='")
                  .concat(
                    e,
                    "'], .apexcharts-rangebar-series .apexcharts-series[rel='"
                  )
                  .concat(s, "'] path[j='")
                  .concat(e, "']")
              );
              o ||
                "number" != typeof t ||
                (o = i.globals.dom.baseEl.querySelector(
                  ".apexcharts-bar-series .apexcharts-series[data\\:realIndex='"
                    .concat(t, "'] path[j='")
                    .concat(
                      e,
                      "'],\n        .apexcharts-candlestick-series .apexcharts-series[data\\:realIndex='"
                    )
                    .concat(t, "'] path[j='")
                    .concat(
                      e,
                      "'],\n        .apexcharts-boxPlot-series .apexcharts-series[data\\:realIndex='"
                    )
                    .concat(t, "'] path[j='")
                    .concat(
                      e,
                      "'],\n        .apexcharts-rangebar-series .apexcharts-series[data\\:realIndex='"
                    )
                    .concat(t, "'] path[j='")
                    .concat(e, "']")
                ));
              var r = o ? parseFloat(o.getAttribute("cx")) : 0,
                l = o ? parseFloat(o.getAttribute("cy")) : 0,
                c = o ? parseFloat(o.getAttribute("barWidth")) : 0,
                h = a.getElGrid().getBoundingClientRect(),
                d =
                  o &&
                  (o.classList.contains("apexcharts-candlestick-area") ||
                    o.classList.contains("apexcharts-boxPlot-area"));
              i.globals.isXNumeric
                ? (o && !d && (r -= n % 2 != 0 ? c / 2 : 0),
                  o && d && i.globals.comboCharts && (r -= c / 2))
                : i.globals.isBarHorizontal ||
                  (isNaN(
                    (r =
                      a.xAxisTicksPositions[e - 1] +
                      a.dataPointsDividedWidth / 2)
                  ) &&
                    (r =
                      a.xAxisTicksPositions[e] - a.dataPointsDividedWidth / 2)),
                i.globals.isBarHorizontal
                  ? (l -= a.tooltipRect.ttHeight)
                  : i.config.tooltip.followCursor
                  ? (l = a.e.clientY - h.top - a.tooltipRect.ttHeight / 2)
                  : l + a.tooltipRect.ttHeight + 15 > i.globals.gridHeight &&
                    (l = i.globals.gridHeight),
                i.globals.isBarHorizontal || this.moveXCrosshairs(r),
                a.fixedTooltip ||
                  this.moveTooltip(r, l || i.globals.gridHeight);
            }
          }
        ]),
        e
      );
    })(),
    sQ = (function () {
      function e(t) {
        nQ(this, e),
          (this.w = t.w),
          (this.ttCtx = t),
          (this.ctx = t.ctx),
          (this.tooltipPosition = new sK(t));
      }
      return (
        n1(e, [
          {
            key: "drawDynamicPoints",
            value: function () {
              var e = this.w,
                t = new sn(this.ctx),
                i = new sC(this.ctx),
                a = e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
              (a = n8(a)),
                e.config.chart.stacked &&
                  a.sort(function (e, t) {
                    return (
                      parseFloat(e.getAttribute("data:realIndex")) -
                      parseFloat(t.getAttribute("data:realIndex"))
                    );
                  });
              for (var n = 0; n < a.length; n++) {
                var s = a[n].querySelector(".apexcharts-series-markers-wrap");
                if (null !== s) {
                  var o = void 0,
                    r = "apexcharts-marker w".concat(
                      (Math.random() + 1).toString(36).substring(4)
                    );
                  ("line" !== e.config.chart.type &&
                    "area" !== e.config.chart.type) ||
                    e.globals.comboCharts ||
                    e.config.tooltip.intersect ||
                    (r += " no-pointer-events");
                  var l = i.getMarkerConfig({
                    cssClass: r,
                    seriesIndex: Number(s.getAttribute("data:realIndex"))
                  });
                  (o = t.drawMarker(0, 0, l)).node.setAttribute(
                    "default-marker-size",
                    0
                  );
                  var c = document.createElementNS(e.globals.SVGNS, "g");
                  c.classList.add("apexcharts-series-markers"),
                    c.appendChild(o.node),
                    s.appendChild(c);
                }
              }
            }
          },
          {
            key: "enlargeCurrentPoint",
            value: function (e, t) {
              var i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : null,
                a =
                  arguments.length > 3 && void 0 !== arguments[3]
                    ? arguments[3]
                    : null,
                n = this.w;
              "bubble" !== n.config.chart.type && this.newPointSize(e, t);
              var s = t.getAttribute("cx"),
                o = t.getAttribute("cy");
              if (
                (null !== i && null !== a && ((s = i), (o = a)),
                this.tooltipPosition.moveXCrosshairs(s),
                !this.fixedTooltip)
              ) {
                if ("radar" === n.config.chart.type) {
                  var r = this.ttCtx.getElGrid().getBoundingClientRect();
                  s = this.ttCtx.e.clientX - r.left;
                }
                this.tooltipPosition.moveTooltip(
                  s,
                  o,
                  n.config.markers.hover.size
                );
              }
            }
          },
          {
            key: "enlargePoints",
            value: function (e) {
              for (
                var t = this.w,
                  i = this.ttCtx,
                  a = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                  ),
                  n = t.config.markers.hover.size,
                  s = 0;
                s < a.length;
                s++
              ) {
                var o = a[s].getAttribute("rel"),
                  r = a[s].getAttribute("index");
                if (
                  (void 0 === n &&
                    (n =
                      t.globals.markers.size[r] +
                      t.config.markers.hover.sizeOffset),
                  e === parseInt(o, 10))
                ) {
                  this.newPointSize(e, a[s]);
                  var l = a[s].getAttribute("cx"),
                    c = a[s].getAttribute("cy");
                  this.tooltipPosition.moveXCrosshairs(l),
                    i.fixedTooltip || this.tooltipPosition.moveTooltip(l, c, n);
                } else this.oldPointSize(a[s]);
              }
            }
          },
          {
            key: "newPointSize",
            value: function (e, t) {
              var i = this.w,
                a = i.config.markers.hover.size,
                n = 0 === e ? t.parentNode.firstChild : t.parentNode.lastChild;
              if ("0" !== n.getAttribute("default-marker-size")) {
                var s = parseInt(n.getAttribute("index"), 10);
                void 0 === a &&
                  (a =
                    i.globals.markers.size[s] +
                    i.config.markers.hover.sizeOffset),
                  a < 0 && (a = 0),
                  n.setAttribute("r", a);
              }
            }
          },
          {
            key: "oldPointSize",
            value: function (e) {
              var t = parseFloat(e.getAttribute("default-marker-size"));
              e.setAttribute("r", t);
            }
          },
          {
            key: "resetPointsSize",
            value: function () {
              for (
                var e = this.w.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker"
                  ),
                  t = 0;
                t < e.length;
                t++
              ) {
                var i = parseFloat(e[t].getAttribute("default-marker-size"));
                st.isNumber(i) && i >= 0
                  ? e[t].setAttribute("r", i)
                  : e[t].setAttribute("r", 0);
              }
            }
          }
        ]),
        e
      );
    })(),
    s0 = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w);
        var i = this.w;
        (this.ttCtx = t),
          (this.isVerticalGroupedRangeBar =
            !i.globals.isBarHorizontal &&
            "rangeBar" === i.config.chart.type &&
            i.config.plotOptions.bar.rangeBarGroupRows);
      }
      return (
        n1(e, [
          {
            key: "getAttr",
            value: function (e, t) {
              return parseFloat(e.target.getAttribute(t));
            }
          },
          {
            key: "handleHeatTreeTooltip",
            value: function (e) {
              var t = e.e,
                i = e.opt,
                a = e.x,
                n = e.y,
                s = e.type,
                o = this.ttCtx,
                r = this.w;
              if (
                t.target.classList.contains("apexcharts-".concat(s, "-rect"))
              ) {
                var l = this.getAttr(t, "i"),
                  c = this.getAttr(t, "j"),
                  h = this.getAttr(t, "cx"),
                  d = this.getAttr(t, "cy"),
                  u = this.getAttr(t, "width"),
                  g = this.getAttr(t, "height");
                if (
                  (o.tooltipLabels.drawSeriesTexts({
                    ttItems: i.ttItems,
                    i: l,
                    j: c,
                    shared: !1,
                    e: t
                  }),
                  (r.globals.capturedSeriesIndex = l),
                  (r.globals.capturedDataPointIndex = c),
                  (a = h + o.tooltipRect.ttWidth / 2 + u),
                  (n = d + o.tooltipRect.ttHeight / 2 - g / 2),
                  o.tooltipPosition.moveXCrosshairs(h + u / 2),
                  a > r.globals.gridWidth / 2 &&
                    (a = h - o.tooltipRect.ttWidth / 2 + u),
                  o.w.config.tooltip.followCursor)
                ) {
                  var p = r.globals.dom.elWrap.getBoundingClientRect();
                  (a =
                    r.globals.clientX -
                    p.left -
                    (a > r.globals.gridWidth / 2 ? o.tooltipRect.ttWidth : 0)),
                    (n =
                      r.globals.clientY -
                      p.top -
                      (n > r.globals.gridHeight / 2
                        ? o.tooltipRect.ttHeight
                        : 0));
                }
              }
              return { x: a, y: n };
            }
          },
          {
            key: "handleMarkerTooltip",
            value: function (e) {
              var t,
                i,
                a = e.e,
                n = e.opt,
                s = e.x,
                o = e.y,
                r = this.w,
                l = this.ttCtx;
              if (a.target.classList.contains("apexcharts-marker")) {
                var c = parseInt(n.paths.getAttribute("cx"), 10),
                  h = parseInt(n.paths.getAttribute("cy"), 10),
                  d = parseFloat(n.paths.getAttribute("val"));
                if (
                  ((i = parseInt(n.paths.getAttribute("rel"), 10)),
                  (t =
                    parseInt(
                      n.paths.parentNode.parentNode.parentNode.getAttribute(
                        "rel"
                      ),
                      10
                    ) - 1),
                  l.intersect)
                ) {
                  var u = st.findAncestor(n.paths, "apexcharts-series");
                  u && (t = parseInt(u.getAttribute("data:realIndex"), 10));
                }
                if (
                  (l.tooltipLabels.drawSeriesTexts({
                    ttItems: n.ttItems,
                    i: t,
                    j: i,
                    shared: !l.showOnIntersect && r.config.tooltip.shared,
                    e: a
                  }),
                  "mouseup" === a.type && l.markerClick(a, t, i),
                  (r.globals.capturedSeriesIndex = t),
                  (r.globals.capturedDataPointIndex = i),
                  (s = c),
                  (o = h + r.globals.translateY - 1.4 * l.tooltipRect.ttHeight),
                  l.w.config.tooltip.followCursor)
                ) {
                  var g = l.getElGrid().getBoundingClientRect();
                  o = l.e.clientY + r.globals.translateY - g.top;
                }
                d < 0 && (o = h),
                  l.marker.enlargeCurrentPoint(i, n.paths, s, o);
              }
              return { x: s, y: o };
            }
          },
          {
            key: "handleBarTooltip",
            value: function (e) {
              var t,
                i,
                a = e.e,
                n = e.opt,
                s = this.w,
                o = this.ttCtx,
                r = o.getElTooltip(),
                l = 0,
                c = 0,
                h = 0,
                d = this.getBarTooltipXY({ e: a, opt: n });
              t = d.i;
              var u = d.barHeight,
                g = d.j;
              (s.globals.capturedSeriesIndex = t),
                (s.globals.capturedDataPointIndex = g),
                (s.globals.isBarHorizontal && o.tooltipUtil.hasBars()) ||
                !s.config.tooltip.shared
                  ? ((c = d.x),
                    (h = d.y),
                    (i = Array.isArray(s.config.stroke.width)
                      ? s.config.stroke.width[t]
                      : s.config.stroke.width),
                    (l = c))
                  : s.globals.comboCharts ||
                    s.config.tooltip.shared ||
                    (l /= 2),
                isNaN(h) && (h = s.globals.svgHeight - o.tooltipRect.ttHeight);
              var p = parseInt(
                  n.paths.parentNode.getAttribute("data:realIndex"),
                  10
                ),
                f = s.globals.isMultipleYAxis
                  ? s.config.yaxis[p] && s.config.yaxis[p].reversed
                  : s.config.yaxis[0].reversed;
              if (
                (c + o.tooltipRect.ttWidth > s.globals.gridWidth && !f
                  ? (c -= o.tooltipRect.ttWidth)
                  : c < 0 && (c = 0),
                o.w.config.tooltip.followCursor)
              ) {
                var m = o.getElGrid().getBoundingClientRect();
                h = o.e.clientY - m.top;
              }
              null === o.tooltip &&
                (o.tooltip = s.globals.dom.baseEl.querySelector(
                  ".apexcharts-tooltip"
                )),
                s.config.tooltip.shared ||
                  (s.globals.comboBarCount > 0
                    ? o.tooltipPosition.moveXCrosshairs(l + i / 2)
                    : o.tooltipPosition.moveXCrosshairs(l)),
                !o.fixedTooltip &&
                  (!s.config.tooltip.shared ||
                    (s.globals.isBarHorizontal && o.tooltipUtil.hasBars())) &&
                  (f && (c -= o.tooltipRect.ttWidth) < 0 && (c = 0),
                  !f ||
                    (s.globals.isBarHorizontal && o.tooltipUtil.hasBars()) ||
                    (h = h + u - 2 * (s.globals.series[t][g] < 0 ? u : 0)),
                  (h = h + s.globals.translateY - o.tooltipRect.ttHeight / 2),
                  (r.style.left = c + s.globals.translateX + "px"),
                  (r.style.top = h + "px"));
            }
          },
          {
            key: "getBarTooltipXY",
            value: function (e) {
              var t = this,
                i = e.e,
                a = e.opt,
                n = this.w,
                s = null,
                o = this.ttCtx,
                r = 0,
                l = 0,
                c = 0,
                h = 0,
                d = 0,
                u = i.target.classList;
              if (
                u.contains("apexcharts-bar-area") ||
                u.contains("apexcharts-candlestick-area") ||
                u.contains("apexcharts-boxPlot-area") ||
                u.contains("apexcharts-rangebar-area")
              ) {
                var g = i.target,
                  p = g.getBoundingClientRect(),
                  f = a.elGrid.getBoundingClientRect(),
                  m = p.height;
                d = p.height;
                var x = p.width,
                  b = parseInt(g.getAttribute("cx"), 10),
                  v = parseInt(g.getAttribute("cy"), 10);
                h = parseFloat(g.getAttribute("barWidth"));
                var y =
                  "touchmove" === i.type ? i.touches[0].clientX : i.clientX;
                (s = parseInt(g.getAttribute("j"), 10)),
                  (r = parseInt(g.parentNode.getAttribute("rel"), 10) - 1);
                var w = g.getAttribute("data-range-y1"),
                  C = g.getAttribute("data-range-y2");
                n.globals.comboCharts &&
                  (r = parseInt(
                    g.parentNode.getAttribute("data:realIndex"),
                    10
                  ));
                var k = function (e) {
                    return n.globals.isXNumeric
                      ? b - x / 2
                      : t.isVerticalGroupedRangeBar
                      ? b + x / 2
                      : b - o.dataPointsDividedWidth + x / 2;
                  },
                  A = function () {
                    return (
                      v -
                      o.dataPointsDividedHeight +
                      m / 2 -
                      o.tooltipRect.ttHeight / 2
                    );
                  };
                o.tooltipLabels.drawSeriesTexts({
                  ttItems: a.ttItems,
                  i: r,
                  j: s,
                  y1: w ? parseInt(w, 10) : null,
                  y2: C ? parseInt(C, 10) : null,
                  shared: !o.showOnIntersect && n.config.tooltip.shared,
                  e: i
                }),
                  n.config.tooltip.followCursor
                    ? n.globals.isBarHorizontal
                      ? ((l = y - f.left + 15), (c = A()))
                      : ((l = k()),
                        (c =
                          i.clientY - f.top - o.tooltipRect.ttHeight / 2 - 15))
                    : n.globals.isBarHorizontal
                    ? ((l = b) < o.xyRatios.baseLineInvertedY &&
                        (l = b - o.tooltipRect.ttWidth),
                      (c = A()))
                    : ((l = k()), (c = v));
              }
              return { x: l, y: c, barHeight: d, barWidth: h, i: r, j: s };
            }
          }
        ]),
        e
      );
    })(),
    s1 = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.ttCtx = t);
      }
      return (
        n1(e, [
          {
            key: "drawXaxisTooltip",
            value: function () {
              var e = this.w,
                t = this.ttCtx,
                i = "bottom" === e.config.xaxis.position;
              t.xaxisOffY = i
                ? e.globals.gridHeight + 1
                : -e.globals.xAxisHeight - e.config.xaxis.axisTicks.height + 3;
              var a = e.globals.dom.elWrap;
              t.isXAxisTooltipEnabled &&
                null ===
                  e.globals.dom.baseEl.querySelector(
                    ".apexcharts-xaxistooltip"
                  ) &&
                ((t.xaxisTooltip = document.createElement("div")),
                t.xaxisTooltip.setAttribute(
                  "class",
                  (i
                    ? "apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom"
                    : "apexcharts-xaxistooltip apexcharts-xaxistooltip-top") +
                    " apexcharts-theme-" +
                    e.config.tooltip.theme
                ),
                a.appendChild(t.xaxisTooltip),
                (t.xaxisTooltipText = document.createElement("div")),
                t.xaxisTooltipText.classList.add(
                  "apexcharts-xaxistooltip-text"
                ),
                (t.xaxisTooltipText.style.fontFamily =
                  e.config.xaxis.tooltip.style.fontFamily ||
                  e.config.chart.fontFamily),
                (t.xaxisTooltipText.style.fontSize =
                  e.config.xaxis.tooltip.style.fontSize),
                t.xaxisTooltip.appendChild(t.xaxisTooltipText));
            }
          },
          {
            key: "drawYaxisTooltip",
            value: function () {
              for (
                var e = this.w,
                  t = this.ttCtx,
                  i = function (i) {
                    var a =
                      e.config.yaxis[i].opposite ||
                      e.config.yaxis[i].crosshairs.opposite;
                    t.yaxisOffX = a ? e.globals.gridWidth + 1 : 1;
                    var n =
                      "apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                        i,
                        a
                          ? " apexcharts-yaxistooltip-right"
                          : " apexcharts-yaxistooltip-left"
                      );
                    e.globals.yAxisSameScaleIndices.map(function (t, a) {
                      t.map(function (t, a) {
                        a === i &&
                          (n += e.config.yaxis[a].show
                            ? " "
                            : " apexcharts-yaxistooltip-hidden");
                      });
                    });
                    var s = e.globals.dom.elWrap;
                    null ===
                      e.globals.dom.baseEl.querySelector(
                        ".apexcharts-yaxistooltip apexcharts-yaxistooltip-".concat(
                          i
                        )
                      ) &&
                      ((t.yaxisTooltip = document.createElement("div")),
                      t.yaxisTooltip.setAttribute(
                        "class",
                        n + " apexcharts-theme-" + e.config.tooltip.theme
                      ),
                      s.appendChild(t.yaxisTooltip),
                      0 === i && (t.yaxisTooltipText = []),
                      (t.yaxisTooltipText[i] = document.createElement("div")),
                      t.yaxisTooltipText[i].classList.add(
                        "apexcharts-yaxistooltip-text"
                      ),
                      t.yaxisTooltip.appendChild(t.yaxisTooltipText[i]));
                  },
                  a = 0;
                a < e.config.yaxis.length;
                a++
              )
                i(a);
            }
          },
          {
            key: "setXCrosshairWidth",
            value: function () {
              var e = this.w,
                t = this.ttCtx,
                i = t.getElXCrosshairs();
              if (
                ((t.xcrosshairsWidth = parseInt(
                  e.config.xaxis.crosshairs.width,
                  10
                )),
                e.globals.comboCharts)
              ) {
                var a = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-bar-area"
                );
                if (
                  null !== a &&
                  "barWidth" === e.config.xaxis.crosshairs.width
                ) {
                  var n = parseFloat(a.getAttribute("barWidth"));
                  t.xcrosshairsWidth = n;
                } else if ("tickWidth" === e.config.xaxis.crosshairs.width) {
                  var s = e.globals.labels.length;
                  t.xcrosshairsWidth = e.globals.gridWidth / s;
                }
              } else if ("tickWidth" === e.config.xaxis.crosshairs.width) {
                var o = e.globals.labels.length;
                t.xcrosshairsWidth = e.globals.gridWidth / o;
              } else if ("barWidth" === e.config.xaxis.crosshairs.width) {
                var r = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-bar-area"
                );
                if (null !== r) {
                  var l = parseFloat(r.getAttribute("barWidth"));
                  t.xcrosshairsWidth = l;
                } else t.xcrosshairsWidth = 1;
              }
              e.globals.isBarHorizontal && (t.xcrosshairsWidth = 0),
                null !== i &&
                  t.xcrosshairsWidth > 0 &&
                  i.setAttribute("width", t.xcrosshairsWidth);
            }
          },
          {
            key: "handleYCrosshair",
            value: function () {
              var e = this.w,
                t = this.ttCtx;
              (t.ycrosshairs = e.globals.dom.baseEl.querySelector(
                ".apexcharts-ycrosshairs"
              )),
                (t.ycrosshairsHidden = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-ycrosshairs-hidden"
                ));
            }
          },
          {
            key: "drawYaxisTooltipText",
            value: function (e, t, i) {
              var a = this.ttCtx,
                n = this.w,
                s = n.globals.yLabelFormatters[e];
              if (a.yaxisTooltips[e]) {
                var o = a.getElGrid().getBoundingClientRect(),
                  r = (t - o.top) * i.yRatio[e],
                  l = n.globals.maxYArr[e] - n.globals.minYArr[e],
                  c = n.globals.minYArr[e] + (l - r);
                a.tooltipPosition.moveYCrosshairs(t - o.top),
                  (a.yaxisTooltipText[e].innerHTML = s(c)),
                  a.tooltipPosition.moveYAxisTooltip(e);
              }
            }
          }
        ]),
        e
      );
    })(),
    s2 = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
        var i = this.w;
        (this.tConfig = i.config.tooltip),
          (this.tooltipUtil = new sZ(this)),
          (this.tooltipLabels = new sJ(this)),
          (this.tooltipPosition = new sK(this)),
          (this.marker = new sQ(this)),
          (this.intersect = new s0(this)),
          (this.axesTooltip = new s1(this)),
          (this.showOnIntersect = this.tConfig.intersect),
          (this.showTooltipTitle = this.tConfig.x.show),
          (this.fixedTooltip = this.tConfig.fixed.enabled),
          (this.xaxisTooltip = null),
          (this.yaxisTTEls = null),
          (this.isBarShared =
            !i.globals.isBarHorizontal && this.tConfig.shared),
          (this.lastHoverTime = Date.now());
      }
      return (
        n1(e, [
          {
            key: "getElTooltip",
            value: function (e) {
              return (
                e || (e = this),
                e.w.globals.dom.baseEl
                  ? e.w.globals.dom.baseEl.querySelector(".apexcharts-tooltip")
                  : null
              );
            }
          },
          {
            key: "getElXCrosshairs",
            value: function () {
              return this.w.globals.dom.baseEl.querySelector(
                ".apexcharts-xcrosshairs"
              );
            }
          },
          {
            key: "getElGrid",
            value: function () {
              return this.w.globals.dom.baseEl.querySelector(
                ".apexcharts-grid"
              );
            }
          },
          {
            key: "drawTooltip",
            value: function (e) {
              var t = this.w;
              (this.xyRatios = e),
                (this.isXAxisTooltipEnabled =
                  t.config.xaxis.tooltip.enabled && t.globals.axisCharts),
                (this.yaxisTooltips = t.config.yaxis.map(function (e, i) {
                  return !!(
                    e.show &&
                    e.tooltip.enabled &&
                    t.globals.axisCharts
                  );
                })),
                (this.allTooltipSeriesGroups = []),
                t.globals.axisCharts || (this.showTooltipTitle = !1);
              var i = document.createElement("div");
              if (
                (i.classList.add("apexcharts-tooltip"),
                t.config.tooltip.cssClass &&
                  i.classList.add(t.config.tooltip.cssClass),
                i.classList.add("apexcharts-theme-".concat(this.tConfig.theme)),
                t.globals.dom.elWrap.appendChild(i),
                t.globals.axisCharts)
              ) {
                this.axesTooltip.drawXaxisTooltip(),
                  this.axesTooltip.drawYaxisTooltip(),
                  this.axesTooltip.setXCrosshairWidth(),
                  this.axesTooltip.handleYCrosshair();
                var a = new sP(this.ctx);
                this.xAxisTicksPositions = a.getXAxisTicksPositions();
              }
              if (
                ((t.globals.comboCharts ||
                  this.tConfig.intersect ||
                  "rangeBar" === t.config.chart.type) &&
                  !this.tConfig.shared &&
                  (this.showOnIntersect = !0),
                (0 !== t.config.markers.size &&
                  0 !== t.globals.markers.largestSize) ||
                  this.marker.drawDynamicPoints(this),
                t.globals.collapsedSeries.length !== t.globals.series.length)
              ) {
                (this.dataPointsDividedHeight =
                  t.globals.gridHeight / t.globals.dataPoints),
                  (this.dataPointsDividedWidth =
                    t.globals.gridWidth / t.globals.dataPoints),
                  this.showTooltipTitle &&
                    ((this.tooltipTitle = document.createElement("div")),
                    this.tooltipTitle.classList.add("apexcharts-tooltip-title"),
                    (this.tooltipTitle.style.fontFamily =
                      this.tConfig.style.fontFamily ||
                      t.config.chart.fontFamily),
                    (this.tooltipTitle.style.fontSize =
                      this.tConfig.style.fontSize),
                    i.appendChild(this.tooltipTitle));
                var n = t.globals.series.length;
                (t.globals.xyCharts || t.globals.comboCharts) &&
                  this.tConfig.shared &&
                  (n = this.showOnIntersect ? 1 : t.globals.series.length),
                  (this.legendLabels = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-legend-text"
                  )),
                  (this.ttItems = this.createTTElements(n)),
                  this.addSVGEvents();
              }
            }
          },
          {
            key: "createTTElements",
            value: function (e) {
              for (
                var t = this,
                  i = this.w,
                  a = [],
                  n = this.getElTooltip(),
                  s = 0;
                s < e;
                s++
              )
                (function (s) {
                  var o = document.createElement("div");
                  o.classList.add("apexcharts-tooltip-series-group"),
                    (o.style.order = i.config.tooltip.inverseOrder
                      ? e - s
                      : s + 1),
                    t.tConfig.shared &&
                      t.tConfig.enabledOnSeries &&
                      Array.isArray(t.tConfig.enabledOnSeries) &&
                      0 > t.tConfig.enabledOnSeries.indexOf(s) &&
                      o.classList.add("apexcharts-tooltip-series-group-hidden");
                  var r = document.createElement("span");
                  r.classList.add("apexcharts-tooltip-marker"),
                    (r.style.backgroundColor = i.globals.colors[s]),
                    o.appendChild(r);
                  var l = document.createElement("div");
                  l.classList.add("apexcharts-tooltip-text"),
                    (l.style.fontFamily =
                      t.tConfig.style.fontFamily || i.config.chart.fontFamily),
                    (l.style.fontSize = t.tConfig.style.fontSize),
                    ["y", "goals", "z"].forEach(function (e) {
                      var t = document.createElement("div");
                      t.classList.add(
                        "apexcharts-tooltip-".concat(e, "-group")
                      );
                      var i = document.createElement("span");
                      i.classList.add(
                        "apexcharts-tooltip-text-".concat(e, "-label")
                      ),
                        t.appendChild(i);
                      var a = document.createElement("span");
                      a.classList.add(
                        "apexcharts-tooltip-text-".concat(e, "-value")
                      ),
                        t.appendChild(a),
                        l.appendChild(t);
                    }),
                    o.appendChild(l),
                    n.appendChild(o),
                    a.push(o);
                })(s);
              return a;
            }
          },
          {
            key: "addSVGEvents",
            value: function () {
              var e = this.w,
                t = e.config.chart.type,
                i = this.getElTooltip(),
                a = !(
                  "bar" !== t &&
                  "candlestick" !== t &&
                  "boxPlot" !== t &&
                  "rangeBar" !== t
                ),
                n =
                  "area" === t ||
                  "line" === t ||
                  "scatter" === t ||
                  "bubble" === t ||
                  "radar" === t,
                s = e.globals.dom.Paper.node,
                o = this.getElGrid();
              o && (this.seriesBound = o.getBoundingClientRect());
              var r,
                l = [],
                c = [],
                h = {
                  hoverArea: s,
                  elGrid: o,
                  tooltipEl: i,
                  tooltipY: l,
                  tooltipX: c,
                  ttItems: this.ttItems
                };
              if (
                e.globals.axisCharts &&
                (n
                  ? (r = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series[data\\:longestSeries='true'] .apexcharts-marker"
                    ))
                  : a
                  ? (r = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series .apexcharts-bar-area, .apexcharts-series .apexcharts-candlestick-area, .apexcharts-series .apexcharts-boxPlot-area, .apexcharts-series .apexcharts-rangebar-area"
                    ))
                  : ("heatmap" !== t && "treemap" !== t) ||
                    (r = e.globals.dom.baseEl.querySelectorAll(
                      ".apexcharts-series .apexcharts-heatmap, .apexcharts-series .apexcharts-treemap"
                    )),
                r && r.length)
              )
                for (var d = 0; d < r.length; d++)
                  l.push(r[d].getAttribute("cy")),
                    c.push(r[d].getAttribute("cx"));
              if (
                (e.globals.xyCharts && !this.showOnIntersect) ||
                (e.globals.comboCharts && !this.showOnIntersect) ||
                (a && this.tooltipUtil.hasBars() && this.tConfig.shared)
              )
                this.addPathsEventListeners([s], h);
              else if (
                (a && !e.globals.comboCharts) ||
                (n && this.showOnIntersect)
              )
                this.addDatapointEventsListeners(h);
              else if (
                !e.globals.axisCharts ||
                "heatmap" === t ||
                "treemap" === t
              ) {
                var u =
                  e.globals.dom.baseEl.querySelectorAll(".apexcharts-series");
                this.addPathsEventListeners(u, h);
              }
              if (this.showOnIntersect) {
                var g = e.globals.dom.baseEl.querySelectorAll(
                  ".apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker"
                );
                g.length > 0 && this.addPathsEventListeners(g, h),
                  this.tooltipUtil.hasBars() &&
                    !this.tConfig.shared &&
                    this.addDatapointEventsListeners(h);
              }
            }
          },
          {
            key: "drawFixedTooltipRect",
            value: function () {
              var e = this.w,
                t = this.getElTooltip(),
                i = t.getBoundingClientRect(),
                a = i.width + 10,
                n = i.height + 10,
                s = this.tConfig.fixed.offsetX,
                o = this.tConfig.fixed.offsetY,
                r = this.tConfig.fixed.position.toLowerCase();
              return (
                r.indexOf("right") > -1 &&
                  (s = s + e.globals.svgWidth - a + 10),
                r.indexOf("bottom") > -1 &&
                  (o = o + e.globals.svgHeight - n - 10),
                (t.style.left = s + "px"),
                (t.style.top = o + "px"),
                { x: s, y: o, ttWidth: a, ttHeight: n }
              );
            }
          },
          {
            key: "addDatapointEventsListeners",
            value: function (e) {
              var t = this.w.globals.dom.baseEl.querySelectorAll(
                ".apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area"
              );
              this.addPathsEventListeners(t, e);
            }
          },
          {
            key: "addPathsEventListeners",
            value: function (e, t) {
              for (
                var i = this,
                  a = function (a) {
                    var n = {
                      paths: e[a],
                      tooltipEl: t.tooltipEl,
                      tooltipY: t.tooltipY,
                      tooltipX: t.tooltipX,
                      elGrid: t.elGrid,
                      hoverArea: t.hoverArea,
                      ttItems: t.ttItems
                    };
                    [
                      "mousemove",
                      "mouseup",
                      "touchmove",
                      "mouseout",
                      "touchend"
                    ].map(function (t) {
                      return e[a].addEventListener(
                        t,
                        i.onSeriesHover.bind(i, n),
                        { capture: !1, passive: !0 }
                      );
                    });
                  },
                  n = 0;
                n < e.length;
                n++
              )
                a(n);
            }
          },
          {
            key: "onSeriesHover",
            value: function (e, t) {
              var i = this,
                a = Date.now() - this.lastHoverTime;
              a >= 100
                ? this.seriesHover(e, t)
                : (clearTimeout(this.seriesHoverTimeout),
                  (this.seriesHoverTimeout = setTimeout(function () {
                    i.seriesHover(e, t);
                  }, 100 - a)));
            }
          },
          {
            key: "seriesHover",
            value: function (e, t) {
              var i = this;
              this.lastHoverTime = Date.now();
              var a = [],
                n = this.w;
              n.config.chart.group && (a = this.ctx.getGroupedCharts()),
                (n.globals.axisCharts &&
                  ((n.globals.minX === -1 / 0 && n.globals.maxX === 1 / 0) ||
                    0 === n.globals.dataPoints)) ||
                  (a.length
                    ? a.forEach(function (a) {
                        var n = i.getElTooltip(a),
                          s = {
                            paths: e.paths,
                            tooltipEl: n,
                            tooltipY: e.tooltipY,
                            tooltipX: e.tooltipX,
                            elGrid: e.elGrid,
                            hoverArea: e.hoverArea,
                            ttItems: a.w.globals.tooltip.ttItems
                          };
                        a.w.globals.minX === i.w.globals.minX &&
                          a.w.globals.maxX === i.w.globals.maxX &&
                          a.w.globals.tooltip.seriesHoverByContext({
                            chartCtx: a,
                            ttCtx: a.w.globals.tooltip,
                            opt: s,
                            e: t
                          });
                      })
                    : this.seriesHoverByContext({
                        chartCtx: this.ctx,
                        ttCtx: this.w.globals.tooltip,
                        opt: e,
                        e: t
                      }));
            }
          },
          {
            key: "seriesHoverByContext",
            value: function (e) {
              var t = e.chartCtx,
                i = e.ttCtx,
                a = e.opt,
                n = e.e,
                s = t.w,
                o = this.getElTooltip();
              o &&
                ((i.tooltipRect = {
                  x: 0,
                  y: 0,
                  ttWidth: o.getBoundingClientRect().width,
                  ttHeight: o.getBoundingClientRect().height
                }),
                (i.e = n),
                i.tooltipUtil.hasBars() &&
                  !s.globals.comboCharts &&
                  !i.isBarShared &&
                  this.tConfig.onDatasetHover.highlightDataSeries &&
                  new sS(t).toggleSeriesOnHover(n, n.target.parentNode),
                i.fixedTooltip && i.drawFixedTooltipRect(),
                s.globals.axisCharts
                  ? i.axisChartsTooltips({
                      e: n,
                      opt: a,
                      tooltipRect: i.tooltipRect
                    })
                  : i.nonAxisChartsTooltips({
                      e: n,
                      opt: a,
                      tooltipRect: i.tooltipRect
                    }));
            }
          },
          {
            key: "axisChartsTooltips",
            value: function (e) {
              var t,
                i,
                a = e.e,
                n = e.opt,
                s = this.w,
                o = n.elGrid.getBoundingClientRect(),
                r = "touchmove" === a.type ? a.touches[0].clientX : a.clientX,
                l = "touchmove" === a.type ? a.touches[0].clientY : a.clientY;
              if (
                ((this.clientY = l),
                (this.clientX = r),
                (s.globals.capturedSeriesIndex = -1),
                (s.globals.capturedDataPointIndex = -1),
                l < o.top || l > o.top + o.height)
              )
                this.handleMouseOut(n);
              else {
                if (
                  Array.isArray(this.tConfig.enabledOnSeries) &&
                  !s.config.tooltip.shared
                ) {
                  var c = parseInt(n.paths.getAttribute("index"), 10);
                  if (0 > this.tConfig.enabledOnSeries.indexOf(c))
                    return void this.handleMouseOut(n);
                }
                var h = this.getElTooltip(),
                  d = this.getElXCrosshairs(),
                  u =
                    s.globals.xyCharts ||
                    ("bar" === s.config.chart.type &&
                      !s.globals.isBarHorizontal &&
                      this.tooltipUtil.hasBars() &&
                      this.tConfig.shared) ||
                    (s.globals.comboCharts && this.tooltipUtil.hasBars());
                if (
                  "mousemove" === a.type ||
                  "touchmove" === a.type ||
                  "mouseup" === a.type
                ) {
                  if (
                    s.globals.collapsedSeries.length +
                      s.globals.ancillaryCollapsedSeries.length ===
                    s.globals.series.length
                  )
                    return;
                  null !== d && d.classList.add("apexcharts-active");
                  var g = this.yaxisTooltips.filter(function (e) {
                    return !0 === e;
                  });
                  if (
                    (null !== this.ycrosshairs &&
                      g.length &&
                      this.ycrosshairs.classList.add("apexcharts-active"),
                    u && !this.showOnIntersect)
                  )
                    this.handleStickyTooltip(a, r, l, n);
                  else if (
                    "heatmap" === s.config.chart.type ||
                    "treemap" === s.config.chart.type
                  ) {
                    var p = this.intersect.handleHeatTreeTooltip({
                      e: a,
                      opt: n,
                      x: t,
                      y: i,
                      type: s.config.chart.type
                    });
                    (t = p.x),
                      (i = p.y),
                      (h.style.left = t + "px"),
                      (h.style.top = i + "px");
                  } else
                    this.tooltipUtil.hasBars() &&
                      this.intersect.handleBarTooltip({ e: a, opt: n }),
                      this.tooltipUtil.hasMarkers() &&
                        this.intersect.handleMarkerTooltip({
                          e: a,
                          opt: n,
                          x: t,
                          y: i
                        });
                  if (this.yaxisTooltips.length)
                    for (var f = 0; f < s.config.yaxis.length; f++)
                      this.axesTooltip.drawYaxisTooltipText(
                        f,
                        l,
                        this.xyRatios
                      );
                  n.tooltipEl.classList.add("apexcharts-active");
                } else
                  ("mouseout" !== a.type && "touchend" !== a.type) ||
                    this.handleMouseOut(n);
              }
            }
          },
          {
            key: "nonAxisChartsTooltips",
            value: function (e) {
              var t = e.e,
                i = e.opt,
                a = e.tooltipRect,
                n = this.w,
                s = i.paths.getAttribute("rel"),
                o = this.getElTooltip(),
                r = n.globals.dom.elWrap.getBoundingClientRect();
              if ("mousemove" === t.type || "touchmove" === t.type) {
                o.classList.add("apexcharts-active"),
                  this.tooltipLabels.drawSeriesTexts({
                    ttItems: i.ttItems,
                    i: parseInt(s, 10) - 1,
                    shared: !1
                  });
                var l = n.globals.clientX - r.left - a.ttWidth / 2,
                  c = n.globals.clientY - r.top - a.ttHeight - 10;
                if (
                  ((o.style.left = l + "px"),
                  (o.style.top = c + "px"),
                  n.config.legend.tooltipHoverFormatter)
                ) {
                  var h = s - 1,
                    d = (0, n.config.legend.tooltipHoverFormatter)(
                      this.legendLabels[h].getAttribute("data:default-text"),
                      { seriesIndex: h, dataPointIndex: h, w: n }
                    );
                  this.legendLabels[h].innerHTML = d;
                }
              } else
                ("mouseout" !== t.type && "touchend" !== t.type) ||
                  (o.classList.remove("apexcharts-active"),
                  n.config.legend.tooltipHoverFormatter &&
                    this.legendLabels.forEach(function (e) {
                      var t = e.getAttribute("data:default-text");
                      e.innerHTML = decodeURIComponent(t);
                    }));
            }
          },
          {
            key: "handleStickyTooltip",
            value: function (e, t, i, a) {
              var n = this.w,
                s = this.tooltipUtil.getNearestValues({
                  context: this,
                  hoverArea: a.hoverArea,
                  elGrid: a.elGrid,
                  clientX: t,
                  clientY: i
                }),
                o = s.j,
                r = s.capturedSeries;
              n.globals.collapsedSeriesIndices.includes(r) && (r = null);
              var l = a.elGrid.getBoundingClientRect();
              if (s.hoverX < 0 || s.hoverX > l.width) this.handleMouseOut(a);
              else if (null !== r) this.handleStickyCapturedSeries(e, r, a, o);
              else if (
                this.tooltipUtil.isXoverlap(o) ||
                n.globals.isBarHorizontal
              ) {
                var c = n.globals.series.findIndex(function (e, t) {
                  return !n.globals.collapsedSeriesIndices.includes(t);
                });
                this.create(e, this, c, o, a.ttItems);
              }
            }
          },
          {
            key: "handleStickyCapturedSeries",
            value: function (e, t, i, a) {
              var n = this.w;
              if (!this.tConfig.shared && null === n.globals.series[t][a])
                return void this.handleMouseOut(i);
              if (void 0 !== n.globals.series[t][a])
                this.tConfig.shared &&
                this.tooltipUtil.isXoverlap(a) &&
                this.tooltipUtil.isInitialSeriesSameLen()
                  ? this.create(e, this, t, a, i.ttItems)
                  : this.create(e, this, t, a, i.ttItems, !1);
              else if (this.tooltipUtil.isXoverlap(a)) {
                var s = n.globals.series.findIndex(function (e, t) {
                  return !n.globals.collapsedSeriesIndices.includes(t);
                });
                this.create(e, this, s, a, i.ttItems);
              }
            }
          },
          {
            key: "deactivateHoverFilter",
            value: function () {
              for (
                var e = this.w,
                  t = new sn(this.ctx),
                  i = e.globals.dom.Paper.select(".apexcharts-bar-area"),
                  a = 0;
                a < i.length;
                a++
              )
                t.pathMouseLeave(i[a]);
            }
          },
          {
            key: "handleMouseOut",
            value: function (e) {
              var t = this.w,
                i = this.getElXCrosshairs();
              if (
                (e.tooltipEl.classList.remove("apexcharts-active"),
                this.deactivateHoverFilter(),
                "bubble" !== t.config.chart.type &&
                  this.marker.resetPointsSize(),
                null !== i && i.classList.remove("apexcharts-active"),
                null !== this.ycrosshairs &&
                  this.ycrosshairs.classList.remove("apexcharts-active"),
                this.isXAxisTooltipEnabled &&
                  this.xaxisTooltip.classList.remove("apexcharts-active"),
                this.yaxisTooltips.length)
              ) {
                null === this.yaxisTTEls &&
                  (this.yaxisTTEls = t.globals.dom.baseEl.querySelectorAll(
                    ".apexcharts-yaxistooltip"
                  ));
                for (var a = 0; a < this.yaxisTTEls.length; a++)
                  this.yaxisTTEls[a].classList.remove("apexcharts-active");
              }
              t.config.legend.tooltipHoverFormatter &&
                this.legendLabels.forEach(function (e) {
                  var t = e.getAttribute("data:default-text");
                  e.innerHTML = decodeURIComponent(t);
                });
            }
          },
          {
            key: "markerClick",
            value: function (e, t, i) {
              var a = this.w;
              "function" == typeof a.config.chart.events.markerClick &&
                a.config.chart.events.markerClick(e, this.ctx, {
                  seriesIndex: t,
                  dataPointIndex: i,
                  w: a
                }),
                this.ctx.events.fireEvent("markerClick", [
                  e,
                  this.ctx,
                  { seriesIndex: t, dataPointIndex: i, w: a }
                ]);
            }
          },
          {
            key: "create",
            value: function (e, t, i, a, n) {
              var s,
                o,
                r,
                l,
                c,
                h,
                d,
                u,
                g,
                p,
                f,
                m,
                x,
                b,
                v,
                y,
                w =
                  arguments.length > 5 && void 0 !== arguments[5]
                    ? arguments[5]
                    : null,
                C = this.w;
              "mouseup" === e.type && this.markerClick(e, i, a),
                null === w && (w = this.tConfig.shared);
              var k = this.tooltipUtil.hasMarkers(i),
                A = this.tooltipUtil.getElBars();
              if (C.config.legend.tooltipHoverFormatter) {
                var S = C.config.legend.tooltipHoverFormatter,
                  L = Array.from(this.legendLabels);
                L.forEach(function (e) {
                  var t = e.getAttribute("data:default-text");
                  e.innerHTML = decodeURIComponent(t);
                });
                for (var O = 0; O < L.length; O++) {
                  var T = L[O],
                    P = parseInt(T.getAttribute("i"), 10),
                    M = decodeURIComponent(T.getAttribute("data:default-text")),
                    _ = S(M, {
                      seriesIndex: w ? P : i,
                      dataPointIndex: a,
                      w: C
                    });
                  if (w)
                    T.innerHTML =
                      0 > C.globals.collapsedSeriesIndices.indexOf(P) ? _ : M;
                  else if (((T.innerHTML = P === i ? _ : M), i === P)) break;
                }
              }
              var D = nJ(
                nJ(
                  { ttItems: n, i: i, j: a },
                  void 0 !==
                    (null === (s = C.globals.seriesRange) ||
                    void 0 === s ||
                    null === (o = s[i]) ||
                    void 0 === o ||
                    null === (r = o[a]) ||
                    void 0 === r ||
                    null === (l = r.y[0]) ||
                    void 0 === l
                      ? void 0
                      : l.y1) && {
                    y1:
                      null === (c = C.globals.seriesRange) ||
                      void 0 === c ||
                      null === (h = c[i]) ||
                      void 0 === h ||
                      null === (d = h[a]) ||
                      void 0 === d ||
                      null === (u = d.y[0]) ||
                      void 0 === u
                        ? void 0
                        : u.y1
                  }
                ),
                void 0 !==
                  (null === (g = C.globals.seriesRange) ||
                  void 0 === g ||
                  null === (p = g[i]) ||
                  void 0 === p ||
                  null === (f = p[a]) ||
                  void 0 === f ||
                  null === (m = f.y[0]) ||
                  void 0 === m
                    ? void 0
                    : m.y2) && {
                  y2:
                    null === (x = C.globals.seriesRange) ||
                    void 0 === x ||
                    null === (b = x[i]) ||
                    void 0 === b ||
                    null === (v = b[a]) ||
                    void 0 === v ||
                    null === (y = v.y[0]) ||
                    void 0 === y
                      ? void 0
                      : y.y2
                }
              );
              if (w) {
                if (
                  (t.tooltipLabels.drawSeriesTexts(
                    nJ(
                      nJ({}, D),
                      {},
                      { shared: !this.showOnIntersect && this.tConfig.shared }
                    )
                  ),
                  k)
                )
                  C.globals.markers.largestSize > 0
                    ? t.marker.enlargePoints(a)
                    : t.tooltipPosition.moveDynamicPointsOnHover(a);
                else if (
                  this.tooltipUtil.hasBars() &&
                  ((this.barSeriesHeight = this.tooltipUtil.getBarsHeight(A)),
                  this.barSeriesHeight > 0)
                ) {
                  var E = new sn(this.ctx),
                    I = C.globals.dom.Paper.select(
                      ".apexcharts-bar-area[j='".concat(a, "']")
                    );
                  this.deactivateHoverFilter(),
                    this.tooltipPosition.moveStickyTooltipOverBars(a, i);
                  for (var H = 0; H < I.length; H++) E.pathMouseEnter(I[H]);
                }
              } else
                t.tooltipLabels.drawSeriesTexts(nJ({ shared: !1 }, D)),
                  this.tooltipUtil.hasBars() &&
                    t.tooltipPosition.moveStickyTooltipOverBars(a, i),
                  k && t.tooltipPosition.moveMarkers(i, a);
            }
          }
        ]),
        e
      );
    })(),
    s4 = (function () {
      function e(t) {
        nQ(this, e),
          (this.w = t.w),
          (this.barCtx = t),
          (this.totalFormatter =
            this.w.config.plotOptions.bar.dataLabels.total.formatter),
          this.totalFormatter ||
            (this.totalFormatter = this.w.config.dataLabels.formatter);
      }
      return (
        n1(e, [
          {
            key: "handleBarDataLabels",
            value: function (e) {
              var t = e.x,
                i = e.y,
                a = e.y1,
                n = e.y2,
                s = e.i,
                o = e.j,
                r = e.realIndex,
                l = e.groupIndex,
                c = e.series,
                h = e.barHeight,
                d = e.barWidth,
                u = e.barXPosition,
                g = e.barYPosition,
                p = e.visibleSeries,
                f = e.renderedPath,
                m = this.w,
                x = new sn(this.barCtx.ctx),
                b = Array.isArray(this.barCtx.strokeWidth)
                  ? this.barCtx.strokeWidth[r]
                  : this.barCtx.strokeWidth,
                v = t + parseFloat(d * p),
                y = i + parseFloat(h * p);
              m.globals.isXNumeric &&
                !m.globals.isBarHorizontal &&
                ((v = t + parseFloat(d * (p + 1))),
                (y = i + parseFloat(h * (p + 1)) - b));
              var w,
                C = null,
                k = t,
                A = i,
                S = {},
                L = m.config.dataLabels,
                O = this.barCtx.barOptions.dataLabels,
                T = this.barCtx.barOptions.dataLabels.total;
              void 0 !== g && this.barCtx.isRangeBar && ((y = g), (A = g)),
                void 0 !== u &&
                  this.barCtx.isVerticalGroupedRangeBar &&
                  ((v = u), (k = u));
              var P = L.offsetX,
                M = L.offsetY,
                _ = { width: 0, height: 0 };
              if (m.config.dataLabels.enabled) {
                var D = this.barCtx.series[s][o];
                _ = x.getTextRects(
                  m.globals.yLabelFormatters[0](D),
                  parseFloat(L.style.fontSize)
                );
              }
              var E = {
                x: t,
                y: i,
                i: s,
                j: o,
                realIndex: r,
                groupIndex: l || -1,
                renderedPath: f,
                bcx: v,
                bcy: y,
                barHeight: h,
                barWidth: d,
                textRects: _,
                strokeWidth: b,
                dataLabelsX: k,
                dataLabelsY: A,
                dataLabelsConfig: L,
                barDataLabelsConfig: O,
                barTotalDataLabelsConfig: T,
                offX: P,
                offY: M
              };
              return (
                (S = this.barCtx.isHorizontal
                  ? this.calculateBarsDataLabelsPosition(E)
                  : this.calculateColumnsDataLabelsPosition(E)),
                f.attr({
                  cy: S.bcy,
                  cx: S.bcx,
                  j: o,
                  val: c[s][o],
                  barHeight: h,
                  barWidth: d
                }),
                (w = this.drawCalculatedDataLabels({
                  x: S.dataLabelsX,
                  y: S.dataLabelsY,
                  val: this.barCtx.isRangeBar ? [a, n] : c[s][o],
                  i: r,
                  j: o,
                  barWidth: d,
                  barHeight: h,
                  textRects: _,
                  dataLabelsConfig: L
                })),
                m.config.chart.stacked &&
                  T.enabled &&
                  (C = this.drawTotalDataLabels({
                    x: S.totalDataLabelsX,
                    y: S.totalDataLabelsY,
                    realIndex: r,
                    textAnchor: S.totalDataLabelsAnchor,
                    val: this.getStackedTotalDataLabel({ realIndex: r, j: o }),
                    dataLabelsConfig: L,
                    barTotalDataLabelsConfig: T
                  })),
                { dataLabels: w, totalDataLabels: C }
              );
            }
          },
          {
            key: "getStackedTotalDataLabel",
            value: function (e) {
              var t = e.realIndex,
                i = e.j,
                a = this.w,
                n = this.barCtx.stackedSeriesTotals[i];
              return (
                this.totalFormatter &&
                  (n = this.totalFormatter(
                    n,
                    nJ(
                      nJ({}, a),
                      {},
                      { seriesIndex: t, dataPointIndex: i, w: a }
                    )
                  )),
                n
              );
            }
          },
          {
            key: "calculateColumnsDataLabelsPosition",
            value: function (e) {
              var t,
                i,
                a = this.w,
                n = e.i,
                s = e.j,
                o = e.realIndex,
                r = e.groupIndex,
                l = e.y,
                c = e.bcx,
                h = e.barWidth,
                d = e.barHeight,
                u = e.textRects,
                g = e.dataLabelsX,
                p = e.dataLabelsY,
                f = e.dataLabelsConfig,
                m = e.barDataLabelsConfig,
                x = e.barTotalDataLabelsConfig,
                b = e.strokeWidth,
                v = e.offX,
                y = e.offY;
              d = Math.abs(d);
              var w =
                "vertical" === a.config.plotOptions.bar.dataLabels.orientation;
              c = c - b / 2 + (-1 !== r ? r * h : 0);
              var C = a.globals.gridWidth / a.globals.dataPoints;
              this.barCtx.isVerticalGroupedRangeBar
                ? (g += h / 2)
                : (g = a.globals.isXNumeric
                    ? c - h / 2 + v
                    : c - C + h / 2 + v),
                w && (g = g + u.height / 2 - b / 2 - 2);
              var k = this.barCtx.series[n][s] < 0,
                A = l;
              switch (
                (this.barCtx.isReversed &&
                  ((A = l - d + (k ? 2 * d : 0)), (l -= d)),
                m.position)
              ) {
                case "center":
                  p = w
                    ? k
                      ? A + d / 2 + y
                      : A + d / 2 - y
                    : k
                    ? A - d / 2 + u.height / 2 + y
                    : A + d / 2 + u.height / 2 - y;
                  break;
                case "bottom":
                  p = w
                    ? k
                      ? A + d + y
                      : A + d - y
                    : k
                    ? A - d + u.height + b + y
                    : A + d - u.height / 2 + b - y;
                  break;
                case "top":
                  p = w
                    ? k
                      ? A + y
                      : A - y
                    : k
                    ? A - u.height / 2 - y
                    : A + u.height + y;
              }
              if (this.barCtx.lastActiveBarSerieIndex === o && x.enabled) {
                var S = new sn(this.barCtx.ctx).getTextRects(
                  this.getStackedTotalDataLabel({ realIndex: o, j: s }),
                  f.fontSize
                );
                (t = k
                  ? A - S.height / 2 - y - x.offsetY + 18
                  : A + S.height + y + x.offsetY - 18),
                  (i = g + x.offsetX);
              }
              return (
                a.config.chart.stacked ||
                  (p < 0
                    ? (p = 0 + b)
                    : p + u.height / 3 > a.globals.gridHeight &&
                      (p = a.globals.gridHeight - b)),
                {
                  bcx: c,
                  bcy: l,
                  dataLabelsX: g,
                  dataLabelsY: p,
                  totalDataLabelsX: i,
                  totalDataLabelsY: t,
                  totalDataLabelsAnchor: "middle"
                }
              );
            }
          },
          {
            key: "calculateBarsDataLabelsPosition",
            value: function (e) {
              var t = this.w,
                i = e.x,
                a = e.i,
                n = e.j,
                s = e.realIndex,
                o = e.groupIndex,
                r = e.bcy,
                l = e.barHeight,
                c = e.barWidth,
                h = e.textRects,
                d = e.dataLabelsX,
                u = e.strokeWidth,
                g = e.dataLabelsConfig,
                p = e.barDataLabelsConfig,
                f = e.barTotalDataLabelsConfig,
                m = e.offX,
                x = e.offY,
                b = t.globals.gridHeight / t.globals.dataPoints;
              c = Math.abs(c);
              var v,
                y,
                w =
                  (r += -1 !== o ? o * l : 0) -
                  (this.barCtx.isRangeBar ? 0 : b) +
                  l / 2 +
                  h.height / 2 +
                  x -
                  3,
                C = "start",
                k = this.barCtx.series[a][n] < 0,
                A = i;
              switch (
                (this.barCtx.isReversed &&
                  ((A = i + c - (k ? 2 * c : 0)),
                  (i = t.globals.gridWidth - c)),
                p.position)
              ) {
                case "center":
                  d = k ? A + c / 2 - m : Math.max(h.width / 2, A - c / 2) + m;
                  break;
                case "bottom":
                  d = k
                    ? A + c - u - Math.round(h.width / 2) - m
                    : A - c + u + Math.round(h.width / 2) + m;
                  break;
                case "top":
                  d = k
                    ? A - u + Math.round(h.width / 2) - m
                    : A - u - Math.round(h.width / 2) + m;
              }
              if (this.barCtx.lastActiveBarSerieIndex === s && f.enabled) {
                var S = new sn(this.barCtx.ctx).getTextRects(
                  this.getStackedTotalDataLabel({ realIndex: s, j: n }),
                  g.fontSize
                );
                k
                  ? ((v = A - u + Math.round(S.width / 2) - m - f.offsetX - 15),
                    (C = "end"))
                  : (v = A - u - Math.round(S.width / 2) + m + f.offsetX + 15),
                  (y = w + f.offsetY);
              }
              return (
                t.config.chart.stacked ||
                  (d < 0
                    ? (d = d + h.width + u)
                    : d + h.width / 2 > t.globals.gridWidth &&
                      (d = t.globals.gridWidth - h.width - u)),
                {
                  bcx: i,
                  bcy: r,
                  dataLabelsX: d,
                  dataLabelsY: w,
                  totalDataLabelsX: v,
                  totalDataLabelsY: y,
                  totalDataLabelsAnchor: C
                }
              );
            }
          },
          {
            key: "drawCalculatedDataLabels",
            value: function (e) {
              var t = e.x,
                i = e.y,
                a = e.val,
                n = e.i,
                s = e.j,
                o = e.textRects,
                r = e.barHeight,
                l = e.barWidth,
                c = e.dataLabelsConfig,
                h = this.w,
                d = "rotate(0)";
              "vertical" === h.config.plotOptions.bar.dataLabels.orientation &&
                (d = "rotate(-90, ".concat(t, ", ").concat(i, ")"));
              var u = new sA(this.barCtx.ctx),
                g = new sn(this.barCtx.ctx),
                p = c.formatter,
                f = null,
                m = h.globals.collapsedSeriesIndices.indexOf(n) > -1;
              if (c.enabled && !m) {
                f = g.group({ class: "apexcharts-data-labels", transform: d });
                var x = "";
                void 0 !== a &&
                  (x = p(
                    a,
                    nJ(
                      nJ({}, h),
                      {},
                      { seriesIndex: n, dataPointIndex: s, w: h }
                    )
                  )),
                  !a &&
                    h.config.plotOptions.bar.hideZeroBarsWhenGrouped &&
                    (x = "");
                var b = h.globals.series[n][s] < 0,
                  v = h.config.plotOptions.bar.dataLabels.position;
                "vertical" ===
                  h.config.plotOptions.bar.dataLabels.orientation &&
                  ("top" === v && (c.textAnchor = b ? "end" : "start"),
                  "center" === v && (c.textAnchor = "middle"),
                  "bottom" === v && (c.textAnchor = b ? "end" : "start")),
                  this.barCtx.isRangeBar &&
                    this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                    l < g.getTextRects(x, parseFloat(c.style.fontSize)).width &&
                    (x = ""),
                  h.config.chart.stacked &&
                    this.barCtx.barOptions.dataLabels.hideOverflowingLabels &&
                    (this.barCtx.isHorizontal
                      ? o.width / 1.6 > Math.abs(l) && (x = "")
                      : o.height / 1.6 > Math.abs(r) && (x = ""));
                var y = nJ({}, c);
                this.barCtx.isHorizontal &&
                  a < 0 &&
                  ("start" === c.textAnchor
                    ? (y.textAnchor = "end")
                    : "end" === c.textAnchor && (y.textAnchor = "start")),
                  u.plotDataLabelsText({
                    x: t,
                    y: i,
                    text: x,
                    i: n,
                    j: s,
                    parent: f,
                    dataLabelsConfig: y,
                    alwaysDrawDataLabel: !0,
                    offsetCorrection: !0
                  });
              }
              return f;
            }
          },
          {
            key: "drawTotalDataLabels",
            value: function (e) {
              var t,
                i = e.x,
                a = e.y,
                n = e.val,
                s = e.realIndex,
                o = e.textAnchor,
                r = e.barTotalDataLabelsConfig,
                l = new sn(this.barCtx.ctx);
              return (
                r.enabled &&
                  void 0 !== i &&
                  void 0 !== a &&
                  this.barCtx.lastActiveBarSerieIndex === s &&
                  (t = l.drawText({
                    x: i,
                    y: a,
                    foreColor: r.style.color,
                    text: n,
                    textAnchor: o,
                    fontFamily: r.style.fontFamily,
                    fontSize: r.style.fontSize,
                    fontWeight: r.style.fontWeight
                  })),
                t
              );
            }
          }
        ]),
        e
      );
    })(),
    s3 = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.barCtx = t);
      }
      return (
        n1(e, [
          {
            key: "initVariables",
            value: function (e) {
              var t = this.w;
              (this.barCtx.series = e),
                (this.barCtx.totalItems = 0),
                (this.barCtx.seriesLen = 0),
                (this.barCtx.visibleI = -1),
                (this.barCtx.visibleItems = 1);
              for (var i = 0; i < e.length; i++)
                if (
                  (e[i].length > 0 &&
                    ((this.barCtx.seriesLen = this.barCtx.seriesLen + 1),
                    (this.barCtx.totalItems += e[i].length)),
                  t.globals.isXNumeric)
                )
                  for (var a = 0; a < e[i].length; a++)
                    t.globals.seriesX[i][a] > t.globals.minX &&
                      t.globals.seriesX[i][a] < t.globals.maxX &&
                      this.barCtx.visibleItems++;
                else this.barCtx.visibleItems = t.globals.dataPoints;
              0 === this.barCtx.seriesLen && (this.barCtx.seriesLen = 1),
                (this.barCtx.zeroSerieses = []),
                t.globals.comboCharts || this.checkZeroSeries({ series: e });
            }
          },
          {
            key: "initialPositions",
            value: function () {
              var e,
                t,
                i,
                a,
                n,
                s,
                o,
                r,
                l = this.w,
                c = l.globals.dataPoints;
              this.barCtx.isRangeBar && (c = l.globals.labels.length);
              var h = this.barCtx.seriesLen;
              if (
                (l.config.plotOptions.bar.rangeBarGroupRows && (h = 1),
                this.barCtx.isHorizontal)
              )
                (n = (i = l.globals.gridHeight / c) / h),
                  l.globals.isXNumeric &&
                    (n =
                      (i = l.globals.gridHeight / this.barCtx.totalItems) /
                      this.barCtx.seriesLen),
                  (n =
                    (n * parseInt(this.barCtx.barOptions.barHeight, 10)) / 100),
                  -1 ===
                    String(this.barCtx.barOptions.barHeight).indexOf("%") &&
                    (n = parseInt(this.barCtx.barOptions.barHeight, 10)),
                  (r =
                    this.barCtx.baseLineInvertedY +
                    l.globals.padHorizontal +
                    (this.barCtx.isReversed ? l.globals.gridWidth : 0) -
                    (this.barCtx.isReversed
                      ? 2 * this.barCtx.baseLineInvertedY
                      : 0)),
                  this.barCtx.isFunnel && (r = l.globals.gridWidth / 2),
                  (t = (i - n * this.barCtx.seriesLen) / 2);
              else {
                if (
                  ((a = l.globals.gridWidth / this.barCtx.visibleItems),
                  l.config.xaxis.convertedCatToNumeric &&
                    (a = l.globals.gridWidth / l.globals.dataPoints),
                  (s =
                    ((a / h) *
                      parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                    100),
                  l.globals.isXNumeric)
                ) {
                  var d = this.barCtx.xRatio;
                  l.config.xaxis.convertedCatToNumeric &&
                    (d = this.barCtx.initialXRatio),
                    l.globals.minXDiff &&
                      0.5 !== l.globals.minXDiff &&
                      l.globals.minXDiff / d > 0 &&
                      (a = l.globals.minXDiff / d),
                    (s =
                      ((a / h) *
                        parseInt(this.barCtx.barOptions.columnWidth, 10)) /
                      100) < 1 && (s = 1);
                }
                -1 ===
                  String(this.barCtx.barOptions.columnWidth).indexOf("%") &&
                  (s = parseInt(this.barCtx.barOptions.columnWidth, 10)),
                  (o =
                    l.globals.gridHeight -
                    this.barCtx.baseLineY[this.barCtx.yaxisIndex] -
                    (this.barCtx.isReversed ? l.globals.gridHeight : 0) +
                    (this.barCtx.isReversed
                      ? 2 * this.barCtx.baseLineY[this.barCtx.yaxisIndex]
                      : 0)),
                  (e =
                    l.globals.padHorizontal +
                    (a - s * this.barCtx.seriesLen) / 2);
              }
              return {
                x: e,
                y: t,
                yDivision: i,
                xDivision: a,
                barHeight: n,
                barWidth: s,
                zeroH: o,
                zeroW: r
              };
            }
          },
          {
            key: "initializeStackedPrevVars",
            value: function (e) {
              var t = e.w;
              t.globals.hasSeriesGroups
                ? t.globals.seriesGroups.forEach(function (t) {
                    e[t] || (e[t] = {}),
                      (e[t].prevY = []),
                      (e[t].prevX = []),
                      (e[t].prevYF = []),
                      (e[t].prevXF = []),
                      (e[t].prevYVal = []),
                      (e[t].prevXVal = []);
                  })
                : ((e.prevY = []),
                  (e.prevX = []),
                  (e.prevYF = []),
                  (e.prevXF = []),
                  (e.prevYVal = []),
                  (e.prevXVal = []));
            }
          },
          {
            key: "initializeStackedXYVars",
            value: function (e) {
              var t = e.w;
              t.globals.hasSeriesGroups
                ? t.globals.seriesGroups.forEach(function (t) {
                    e[t] || (e[t] = {}),
                      (e[t].xArrj = []),
                      (e[t].xArrjF = []),
                      (e[t].xArrjVal = []),
                      (e[t].yArrj = []),
                      (e[t].yArrjF = []),
                      (e[t].yArrjVal = []);
                  })
                : ((e.xArrj = []),
                  (e.xArrjF = []),
                  (e.xArrjVal = []),
                  (e.yArrj = []),
                  (e.yArrjF = []),
                  (e.yArrjVal = []));
            }
          },
          {
            key: "getPathFillColor",
            value: function (e, t, i, a) {
              var n,
                s,
                o,
                r,
                l = this.w,
                c = new sw(this.barCtx.ctx),
                h = null,
                d = this.barCtx.barOptions.distributed ? i : t;
              return (
                this.barCtx.barOptions.colors.ranges.length > 0 &&
                  this.barCtx.barOptions.colors.ranges.map(function (a) {
                    e[t][i] >= a.from && e[t][i] <= a.to && (h = a.color);
                  }),
                l.config.series[t].data[i] &&
                  l.config.series[t].data[i].fillColor &&
                  (h = l.config.series[t].data[i].fillColor),
                c.fillPath({
                  seriesNumber: this.barCtx.barOptions.distributed ? d : a,
                  dataPointIndex: i,
                  color: h,
                  value: e[t][i],
                  fillConfig:
                    null === (n = l.config.series[t].data[i]) || void 0 === n
                      ? void 0
                      : n.fill,
                  fillType:
                    null !== (s = l.config.series[t].data[i]) &&
                    void 0 !== s &&
                    null !== (o = s.fill) &&
                    void 0 !== o &&
                    o.type
                      ? null === (r = l.config.series[t].data[i]) ||
                        void 0 === r
                        ? void 0
                        : r.fill.type
                      : l.config.fill.type
                })
              );
            }
          },
          {
            key: "getStrokeWidth",
            value: function (e, t, i) {
              var a = 0,
                n = this.w;
              return (
                this.barCtx.series[e][t]
                  ? (this.barCtx.isNullValue = !1)
                  : (this.barCtx.isNullValue = !0),
                n.config.stroke.show &&
                  (this.barCtx.isNullValue ||
                    (a = Array.isArray(this.barCtx.strokeWidth)
                      ? this.barCtx.strokeWidth[i]
                      : this.barCtx.strokeWidth)),
                a
              );
            }
          },
          {
            key: "shouldApplyRadius",
            value: function (e) {
              var t = this.w,
                i = !1;
              return (
                t.config.plotOptions.bar.borderRadius > 0 &&
                  (t.config.chart.stacked &&
                  "last" === t.config.plotOptions.bar.borderRadiusWhenStacked
                    ? this.barCtx.lastActiveBarSerieIndex === e && (i = !0)
                    : (i = !0)),
                i
              );
            }
          },
          {
            key: "barBackground",
            value: function (e) {
              var t = e.j,
                i = e.i,
                a = e.x1,
                n = e.x2,
                s = e.y1,
                o = e.y2,
                r = e.elSeries,
                l = this.w,
                c = new sn(this.barCtx.ctx),
                h = new sS(this.barCtx.ctx).getActiveConfigSeriesIndex();
              if (
                this.barCtx.barOptions.colors.backgroundBarColors.length > 0 &&
                h === i
              ) {
                t >= this.barCtx.barOptions.colors.backgroundBarColors.length &&
                  (t %=
                    this.barCtx.barOptions.colors.backgroundBarColors.length);
                var d = this.barCtx.barOptions.colors.backgroundBarColors[t],
                  u = c.drawRect(
                    void 0 !== a ? a : 0,
                    void 0 !== s ? s : 0,
                    void 0 !== n ? n : l.globals.gridWidth,
                    void 0 !== o ? o : l.globals.gridHeight,
                    this.barCtx.barOptions.colors.backgroundBarRadius,
                    d,
                    this.barCtx.barOptions.colors.backgroundBarOpacity
                  );
                r.add(u), u.node.classList.add("apexcharts-backgroundBar");
              }
            }
          },
          {
            key: "getColumnPaths",
            value: function (e) {
              var t,
                i = e.barWidth,
                a = e.barXPosition,
                n = e.y1,
                s = e.y2,
                o = e.strokeWidth,
                r = e.seriesGroup,
                l = e.realIndex,
                c = e.i,
                h = e.j,
                d = e.w,
                u = new sn(this.barCtx.ctx);
              (o = Array.isArray(o) ? o[l] : o) || (o = 0);
              var g = i,
                p = a;
              null !== (t = d.config.series[l].data[h]) &&
                void 0 !== t &&
                t.columnWidthOffset &&
                ((p = a - d.config.series[l].data[h].columnWidthOffset / 2),
                (g = i + d.config.series[l].data[h].columnWidthOffset));
              var f = p,
                m = p + g;
              (n += 0.001), (s += 0.001);
              var x = u.move(f, n),
                b = u.move(f, n),
                v = u.line(m - o, n);
              if (
                (d.globals.previousPaths.length > 0 &&
                  (b = this.barCtx.getPreviousPath(l, h, !1)),
                (x =
                  x +
                  u.line(f, s) +
                  u.line(m - o, s) +
                  u.line(m - o, n) +
                  ("around" === d.config.plotOptions.bar.borderRadiusApplication
                    ? " Z"
                    : " z")),
                (b =
                  b +
                  u.line(f, n) +
                  v +
                  v +
                  v +
                  v +
                  v +
                  u.line(f, n) +
                  ("around" === d.config.plotOptions.bar.borderRadiusApplication
                    ? " Z"
                    : " z")),
                this.shouldApplyRadius(l) &&
                  (x = u.roundPathCorners(
                    x,
                    d.config.plotOptions.bar.borderRadius
                  )),
                d.config.chart.stacked)
              ) {
                var y = this.barCtx;
                d.globals.hasSeriesGroups && r && (y = this.barCtx[r]),
                  y.yArrj.push(s),
                  y.yArrjF.push(Math.abs(n - s)),
                  y.yArrjVal.push(this.barCtx.series[c][h]);
              }
              return { pathTo: x, pathFrom: b };
            }
          },
          {
            key: "getBarpaths",
            value: function (e) {
              var t,
                i = e.barYPosition,
                a = e.barHeight,
                n = e.x1,
                s = e.x2,
                o = e.strokeWidth,
                r = e.seriesGroup,
                l = e.realIndex,
                c = e.i,
                h = e.j,
                d = e.w,
                u = new sn(this.barCtx.ctx);
              (o = Array.isArray(o) ? o[l] : o) || (o = 0);
              var g = i,
                p = a;
              null !== (t = d.config.series[l].data[h]) &&
                void 0 !== t &&
                t.barHeightOffset &&
                ((g = i - d.config.series[l].data[h].barHeightOffset / 2),
                (p = a + d.config.series[l].data[h].barHeightOffset));
              var f = g,
                m = g + p;
              (n += 0.001), (s += 0.001);
              var x = u.move(n, f),
                b = u.move(n, f);
              d.globals.previousPaths.length > 0 &&
                (b = this.barCtx.getPreviousPath(l, h, !1));
              var v = u.line(n, m - o);
              if (
                ((x =
                  x +
                  u.line(s, f) +
                  u.line(s, m - o) +
                  v +
                  ("around" === d.config.plotOptions.bar.borderRadiusApplication
                    ? " Z"
                    : " z")),
                (b =
                  b +
                  u.line(n, f) +
                  v +
                  v +
                  v +
                  v +
                  v +
                  u.line(n, f) +
                  ("around" === d.config.plotOptions.bar.borderRadiusApplication
                    ? " Z"
                    : " z")),
                this.shouldApplyRadius(l) &&
                  (x = u.roundPathCorners(
                    x,
                    d.config.plotOptions.bar.borderRadius
                  )),
                d.config.chart.stacked)
              ) {
                var y = this.barCtx;
                d.globals.hasSeriesGroups && r && (y = this.barCtx[r]),
                  y.xArrj.push(s),
                  y.xArrjF.push(Math.abs(n - s)),
                  y.xArrjVal.push(this.barCtx.series[c][h]);
              }
              return { pathTo: x, pathFrom: b };
            }
          },
          {
            key: "checkZeroSeries",
            value: function (e) {
              for (var t = e.series, i = this.w, a = 0; a < t.length; a++) {
                for (
                  var n = 0, s = 0;
                  s < t[i.globals.maxValsInArrayIndex].length;
                  s++
                )
                  n += t[a][s];
                0 === n && this.barCtx.zeroSerieses.push(a);
              }
            }
          },
          {
            key: "getXForValue",
            value: function (e, t) {
              var i =
                !(arguments.length > 2 && void 0 !== arguments[2]) ||
                arguments[2]
                  ? t
                  : null;
              return (
                null != e &&
                  (i =
                    t +
                    e / this.barCtx.invertedYRatio -
                    2 *
                      (this.barCtx.isReversed
                        ? e / this.barCtx.invertedYRatio
                        : 0)),
                i
              );
            }
          },
          {
            key: "getYForValue",
            value: function (e, t) {
              var i =
                !(arguments.length > 2 && void 0 !== arguments[2]) ||
                arguments[2]
                  ? t
                  : null;
              return (
                null != e &&
                  (i =
                    t -
                    e / this.barCtx.yRatio[this.barCtx.yaxisIndex] +
                    2 *
                      (this.barCtx.isReversed
                        ? e / this.barCtx.yRatio[this.barCtx.yaxisIndex]
                        : 0)),
                i
              );
            }
          },
          {
            key: "getGoalValues",
            value: function (e, t, i, a, n) {
              var s = this,
                o = this.w,
                r = [],
                l = function (a, n) {
                  var o;
                  r.push(
                    (n2(
                      (o = {}),
                      e,
                      "x" === e
                        ? s.getXForValue(a, t, !1)
                        : s.getYForValue(a, i, !1)
                    ),
                    n2(o, "attrs", n),
                    o)
                  );
                };
              if (
                (o.globals.seriesGoals[a] &&
                  o.globals.seriesGoals[a][n] &&
                  Array.isArray(o.globals.seriesGoals[a][n]) &&
                  o.globals.seriesGoals[a][n].forEach(function (e) {
                    l(e.value, e);
                  }),
                this.barCtx.barOptions.isDumbbell &&
                  o.globals.seriesRange.length)
              ) {
                var c = this.barCtx.barOptions.dumbbellColors
                    ? this.barCtx.barOptions.dumbbellColors
                    : o.globals.colors,
                  h = {
                    strokeHeight: "x" === e ? 0 : o.globals.markers.size[a],
                    strokeWidth: "x" === e ? o.globals.markers.size[a] : 0,
                    strokeDashArray: 0,
                    strokeLineCap: "round",
                    strokeColor: Array.isArray(c[a]) ? c[a][0] : c[a]
                  };
                l(o.globals.seriesRangeStart[a][n], h),
                  l(
                    o.globals.seriesRangeEnd[a][n],
                    nJ(
                      nJ({}, h),
                      {},
                      { strokeColor: Array.isArray(c[a]) ? c[a][1] : c[a] }
                    )
                  );
              }
              return r;
            }
          },
          {
            key: "drawGoalLine",
            value: function (e) {
              var t = e.barXPosition,
                i = e.barYPosition,
                a = e.goalX,
                n = e.goalY,
                s = e.barWidth,
                o = e.barHeight,
                r = new sn(this.barCtx.ctx),
                l = r.group({ className: "apexcharts-bar-goals-groups" });
              l.node.classList.add("apexcharts-element-hidden"),
                this.barCtx.w.globals.delayedElements.push({ el: l.node }),
                l.attr(
                  "clip-path",
                  "url(#gridRectMarkerMask".concat(
                    this.barCtx.w.globals.cuid,
                    ")"
                  )
                );
              var c = null;
              return (
                this.barCtx.isHorizontal
                  ? Array.isArray(a) &&
                    a.forEach(function (e) {
                      var t =
                          void 0 !== e.attrs.strokeHeight
                            ? e.attrs.strokeHeight
                            : o / 2,
                        a = i + t + o / 2;
                      (c = r.drawLine(
                        e.x,
                        a - 2 * t,
                        e.x,
                        a,
                        e.attrs.strokeColor ? e.attrs.strokeColor : void 0,
                        e.attrs.strokeDashArray,
                        e.attrs.strokeWidth ? e.attrs.strokeWidth : 2,
                        e.attrs.strokeLineCap
                      )),
                        l.add(c);
                    })
                  : Array.isArray(n) &&
                    n.forEach(function (e) {
                      var i =
                          void 0 !== e.attrs.strokeWidth
                            ? e.attrs.strokeWidth
                            : s / 2,
                        a = t + i + s / 2;
                      (c = r.drawLine(
                        a - 2 * i,
                        e.y,
                        a,
                        e.y,
                        e.attrs.strokeColor ? e.attrs.strokeColor : void 0,
                        e.attrs.strokeDashArray,
                        e.attrs.strokeHeight ? e.attrs.strokeHeight : 2,
                        e.attrs.strokeLineCap
                      )),
                        l.add(c);
                    }),
                l
              );
            }
          },
          {
            key: "drawBarShadow",
            value: function (e) {
              var t = e.prevPaths,
                i = e.currPaths,
                a = e.color,
                n = this.w,
                s = t.x,
                o = t.x1,
                r = t.barYPosition,
                l = i.x,
                c = i.x1,
                h = i.barYPosition,
                d = r + i.barHeight,
                u = new sn(this.barCtx.ctx),
                g = new st(),
                p =
                  u.move(o, d) +
                  u.line(s, d) +
                  u.line(l, h) +
                  u.line(c, h) +
                  u.line(o, d) +
                  ("around" === n.config.plotOptions.bar.borderRadiusApplication
                    ? " Z"
                    : " z");
              return u.drawPath({
                d: p,
                fill: g.shadeColor(0.5, st.rgb2hex(a)),
                stroke: "none",
                strokeWidth: 0,
                fillOpacity: 1,
                classes: "apexcharts-bar-shadows"
              });
            }
          }
        ]),
        e
      );
    })(),
    s5 = (function () {
      function e(t, i) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
        var a = this.w;
        (this.barOptions = a.config.plotOptions.bar),
          (this.isHorizontal = this.barOptions.horizontal),
          (this.strokeWidth = a.config.stroke.width),
          (this.isNullValue = !1),
          (this.isRangeBar = a.globals.seriesRange.length && this.isHorizontal),
          (this.isVerticalGroupedRangeBar =
            !a.globals.isBarHorizontal &&
            a.globals.seriesRange.length &&
            a.config.plotOptions.bar.rangeBarGroupRows),
          (this.isFunnel = this.barOptions.isFunnel),
          (this.xyRatios = i),
          null !== this.xyRatios &&
            ((this.xRatio = i.xRatio),
            (this.initialXRatio = i.initialXRatio),
            (this.yRatio = i.yRatio),
            (this.invertedXRatio = i.invertedXRatio),
            (this.invertedYRatio = i.invertedYRatio),
            (this.baseLineY = i.baseLineY),
            (this.baseLineInvertedY = i.baseLineInvertedY)),
          (this.yaxisIndex = 0),
          (this.seriesLen = 0),
          (this.pathArr = []);
        var n = new sS(this.ctx);
        this.lastActiveBarSerieIndex = n.getActiveConfigSeriesIndex("desc", [
          "bar",
          "column"
        ]);
        var s = n.getBarSeriesIndices(),
          o = new ss(this.ctx);
        (this.stackedSeriesTotals = o.getStackedSeriesTotals(
          this.w.config.series
            .map(function (e, t) {
              return -1 === s.indexOf(t) ? t : -1;
            })
            .filter(function (e) {
              return -1 !== e;
            })
        )),
          (this.barHelpers = new s3(this));
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function (e, t) {
              var i = this.w,
                a = new sn(this.ctx),
                n = new ss(this.ctx, i);
              (e = n.getLogSeries(e)),
                (this.series = e),
                (this.yRatio = n.getLogYRatios(this.yRatio)),
                this.barHelpers.initVariables(e);
              var s = a.group({
                class: "apexcharts-bar-series apexcharts-plot-series"
              });
              i.config.dataLabels.enabled &&
                this.totalItems > this.barOptions.dataLabels.maxItems &&
                console.warn(
                  "WARNING: DataLabels are enabled but there are too many to display. This may cause performance issue when rendering."
                );
              for (var o = 0, r = 0; o < e.length; o++, r++) {
                var l,
                  c,
                  h,
                  d,
                  u = void 0,
                  g = void 0,
                  p = [],
                  f = [],
                  m = i.globals.comboCharts ? t[o] : o,
                  x = a.group({
                    class: "apexcharts-series",
                    rel: o + 1,
                    seriesName: st.escapeString(i.globals.seriesNames[m]),
                    "data:realIndex": m
                  });
                this.ctx.series.addCollapsedClassToSeries(x, m),
                  e[o].length > 0 && (this.visibleI = this.visibleI + 1);
                var b = 0,
                  v = 0;
                this.yRatio.length > 1 && (this.yaxisIndex = m),
                  (this.isReversed =
                    i.config.yaxis[this.yaxisIndex] &&
                    i.config.yaxis[this.yaxisIndex].reversed);
                var y = this.barHelpers.initialPositions();
                (g = y.y),
                  (b = y.barHeight),
                  (c = y.yDivision),
                  (d = y.zeroW),
                  (u = y.x),
                  (v = y.barWidth),
                  (l = y.xDivision),
                  (h = y.zeroH),
                  this.horizontal || f.push(u + v / 2);
                var w = a.group({
                  class: "apexcharts-datalabels",
                  "data:realIndex": m
                });
                i.globals.delayedElements.push({ el: w.node }),
                  w.node.classList.add("apexcharts-element-hidden");
                var C = a.group({ class: "apexcharts-bar-goals-markers" }),
                  k = a.group({ class: "apexcharts-bar-shadows" });
                i.globals.delayedElements.push({ el: k.node }),
                  k.node.classList.add("apexcharts-element-hidden");
                for (var A = 0; A < i.globals.dataPoints; A++) {
                  var S = this.barHelpers.getStrokeWidth(o, A, m),
                    L = null,
                    O = {
                      indexes: { i: o, j: A, realIndex: m, bc: r },
                      x: u,
                      y: g,
                      strokeWidth: S,
                      elSeries: x
                    };
                  this.isHorizontal
                    ? ((L = this.drawBarPaths(
                        nJ(
                          nJ({}, O),
                          {},
                          { barHeight: b, zeroW: d, yDivision: c }
                        )
                      )),
                      (v = this.series[o][A] / this.invertedYRatio))
                    : ((L = this.drawColumnPaths(
                        nJ(
                          nJ({}, O),
                          {},
                          { xDivision: l, barWidth: v, zeroH: h }
                        )
                      )),
                      (b = this.series[o][A] / this.yRatio[this.yaxisIndex]));
                  var T = this.barHelpers.getPathFillColor(e, o, A, m);
                  if (
                    this.isFunnel &&
                    this.barOptions.isFunnel3d &&
                    this.pathArr.length &&
                    A > 0
                  ) {
                    var P = this.barHelpers.drawBarShadow({
                      color:
                        "string" == typeof T &&
                        -1 === (null == T ? void 0 : T.indexOf("url"))
                          ? T
                          : st.hexToRgba(i.globals.colors[o]),
                      prevPaths: this.pathArr[this.pathArr.length - 1],
                      currPaths: L
                    });
                    P && k.add(P);
                  }
                  this.pathArr.push(L);
                  var M = this.barHelpers.drawGoalLine({
                    barXPosition: L.barXPosition,
                    barYPosition: L.barYPosition,
                    goalX: L.goalX,
                    goalY: L.goalY,
                    barHeight: b,
                    barWidth: v
                  });
                  M && C.add(M),
                    (g = L.y),
                    (u = L.x),
                    A > 0 && f.push(u + v / 2),
                    p.push(g),
                    this.renderSeries({
                      realIndex: m,
                      pathFill: T,
                      j: A,
                      i: o,
                      pathFrom: L.pathFrom,
                      pathTo: L.pathTo,
                      strokeWidth: S,
                      elSeries: x,
                      x: u,
                      y: g,
                      series: e,
                      barHeight: L.barHeight ? L.barHeight : b,
                      barWidth: L.barWidth ? L.barWidth : v,
                      elDataLabelsWrap: w,
                      elGoalsMarkers: C,
                      elBarShadows: k,
                      visibleSeries: this.visibleI,
                      type: "bar"
                    });
                }
                (i.globals.seriesXvalues[m] = f),
                  (i.globals.seriesYvalues[m] = p),
                  s.add(x);
              }
              return s;
            }
          },
          {
            key: "renderSeries",
            value: function (e) {
              var t = e.realIndex,
                i = e.pathFill,
                a = e.lineFill,
                n = e.j,
                s = e.i,
                o = e.groupIndex,
                r = e.pathFrom,
                l = e.pathTo,
                c = e.strokeWidth,
                h = e.elSeries,
                d = e.x,
                u = e.y,
                g = e.y1,
                p = e.y2,
                f = e.series,
                m = e.barHeight,
                x = e.barWidth,
                b = e.barXPosition,
                v = e.barYPosition,
                y = e.elDataLabelsWrap,
                w = e.elGoalsMarkers,
                C = e.elBarShadows,
                k = e.visibleSeries,
                A = e.type,
                S = this.w,
                L = new sn(this.ctx);
              a ||
                (a = this.barOptions.distributed
                  ? S.globals.stroke.colors[n]
                  : S.globals.stroke.colors[t]),
                S.config.series[s].data[n] &&
                  S.config.series[s].data[n].strokeColor &&
                  (a = S.config.series[s].data[n].strokeColor),
                this.isNullValue && (i = "none");
              var O =
                  ((n / S.config.chart.animations.animateGradually.delay) *
                    (S.config.chart.animations.speed / S.globals.dataPoints)) /
                  2.4,
                T = L.renderPaths({
                  i: s,
                  j: n,
                  realIndex: t,
                  pathFrom: r,
                  pathTo: l,
                  stroke: a,
                  strokeWidth: c,
                  strokeLineCap: S.config.stroke.lineCap,
                  fill: i,
                  animationDelay: O,
                  initialSpeed: S.config.chart.animations.speed,
                  dataChangeSpeed:
                    S.config.chart.animations.dynamicAnimation.speed,
                  className: "apexcharts-".concat(A, "-area")
                });
              T.attr(
                "clip-path",
                "url(#gridRectMask".concat(S.globals.cuid, ")")
              );
              var P = S.config.forecastDataPoints;
              P.count > 0 &&
                n >= S.globals.dataPoints - P.count &&
                (T.node.setAttribute("stroke-dasharray", P.dashArray),
                T.node.setAttribute("stroke-width", P.strokeWidth),
                T.node.setAttribute("fill-opacity", P.fillOpacity)),
                void 0 !== g &&
                  void 0 !== p &&
                  (T.attr("data-range-y1", g), T.attr("data-range-y2", p)),
                new sa(this.ctx).setSelectionFilter(T, t, n),
                h.add(T);
              var M = new s4(this).handleBarDataLabels({
                x: d,
                y: u,
                y1: g,
                y2: p,
                i: s,
                j: n,
                series: f,
                realIndex: t,
                groupIndex: o,
                barHeight: m,
                barWidth: x,
                barXPosition: b,
                barYPosition: v,
                renderedPath: T,
                visibleSeries: k
              });
              return (
                null !== M.dataLabels && y.add(M.dataLabels),
                M.totalDataLabels && y.add(M.totalDataLabels),
                h.add(y),
                w && h.add(w),
                C && h.add(C),
                h
              );
            }
          },
          {
            key: "drawBarPaths",
            value: function (e) {
              var t,
                i = e.indexes,
                a = e.barHeight,
                n = e.strokeWidth,
                s = e.zeroW,
                o = e.x,
                r = e.y,
                l = e.yDivision,
                c = e.elSeries,
                h = this.w,
                d = i.i,
                u = i.j;
              if (h.globals.isXNumeric)
                t =
                  (r =
                    (h.globals.seriesX[d][u] - h.globals.minX) /
                      this.invertedXRatio -
                    a) +
                  a * this.visibleI;
              else if (h.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
                var g = 0,
                  p = 0;
                h.globals.seriesPercent.forEach(function (e, t) {
                  e[u] && g++, t < d && 0 === e[u] && p++;
                }),
                  g > 0 && (a = (this.seriesLen * a) / g),
                  (t = r + a * this.visibleI - a * p);
              } else t = r + a * this.visibleI;
              this.isFunnel &&
                (s -=
                  (this.barHelpers.getXForValue(this.series[d][u], s) - s) / 2),
                (o = this.barHelpers.getXForValue(this.series[d][u], s));
              var f = this.barHelpers.getBarpaths({
                barYPosition: t,
                barHeight: a,
                x1: s,
                x2: o,
                strokeWidth: n,
                series: this.series,
                realIndex: i.realIndex,
                i: d,
                j: u,
                w: h
              });
              return (
                h.globals.isXNumeric || (r += l),
                this.barHelpers.barBackground({
                  j: u,
                  i: d,
                  y1: t - a * this.visibleI,
                  y2: a * this.seriesLen,
                  elSeries: c
                }),
                {
                  pathTo: f.pathTo,
                  pathFrom: f.pathFrom,
                  x1: s,
                  x: o,
                  y: r,
                  goalX: this.barHelpers.getGoalValues("x", s, null, d, u),
                  barYPosition: t,
                  barHeight: a
                }
              );
            }
          },
          {
            key: "drawColumnPaths",
            value: function (e) {
              var t,
                i = e.indexes,
                a = e.x,
                n = e.y,
                s = e.xDivision,
                o = e.barWidth,
                r = e.zeroH,
                l = e.strokeWidth,
                c = e.elSeries,
                h = this.w,
                d = i.realIndex,
                u = i.i,
                g = i.j,
                p = i.bc;
              if (h.globals.isXNumeric) {
                var f = d;
                h.globals.seriesX[d].length ||
                  (f = h.globals.maxValsInArrayIndex),
                  h.globals.seriesX[f][g] &&
                    (a =
                      (h.globals.seriesX[f][g] - h.globals.minX) / this.xRatio -
                      (o * this.seriesLen) / 2),
                  (t = a + o * this.visibleI);
              } else if (h.config.plotOptions.bar.hideZeroBarsWhenGrouped) {
                var m = 0,
                  x = 0;
                h.globals.seriesPercent.forEach(function (e, t) {
                  e[g] && m++, t < u && 0 === e[g] && x++;
                }),
                  m > 0 && (o = (this.seriesLen * o) / m),
                  (t = a + o * this.visibleI - o * x);
              } else t = a + o * this.visibleI;
              n = this.barHelpers.getYForValue(this.series[u][g], r);
              var b = this.barHelpers.getColumnPaths({
                barXPosition: t,
                barWidth: o,
                y1: r,
                y2: n,
                strokeWidth: l,
                series: this.series,
                realIndex: i.realIndex,
                i: u,
                j: g,
                w: h
              });
              return (
                h.globals.isXNumeric || (a += s),
                this.barHelpers.barBackground({
                  bc: p,
                  j: g,
                  i: u,
                  x1: t - l / 2 - o * this.visibleI,
                  x2: o * this.seriesLen + l / 2,
                  elSeries: c
                }),
                {
                  pathTo: b.pathTo,
                  pathFrom: b.pathFrom,
                  x: a,
                  y: n,
                  goalY: this.barHelpers.getGoalValues("y", null, r, u, g),
                  barXPosition: t,
                  barWidth: o
                }
              );
            }
          },
          {
            key: "getPreviousPath",
            value: function (e, t) {
              for (
                var i, a = this.w, n = 0;
                n < a.globals.previousPaths.length;
                n++
              ) {
                var s = a.globals.previousPaths[n];
                s.paths &&
                  s.paths.length > 0 &&
                  parseInt(s.realIndex, 10) === parseInt(e, 10) &&
                  void 0 !== a.globals.previousPaths[n].paths[t] &&
                  (i = a.globals.previousPaths[n].paths[t].d);
              }
              return i;
            }
          }
        ]),
        e
      );
    })(),
    s6 = (function (e) {
      n4(i, s5);
      var t = n6(i);
      function i() {
        return nQ(this, i), t.apply(this, arguments);
      }
      return (
        n1(i, [
          {
            key: "draw",
            value: function (e, t) {
              var i = this,
                a = this.w;
              (this.graphics = new sn(this.ctx)),
                (this.bar = new s5(this.ctx, this.xyRatios));
              var n = new ss(this.ctx, a);
              (e = n.getLogSeries(e)),
                (this.yRatio = n.getLogYRatios(this.yRatio)),
                this.barHelpers.initVariables(e),
                "100%" === a.config.chart.stackType &&
                  (e = a.globals.seriesPercent.slice()),
                (this.series = e),
                this.barHelpers.initializeStackedPrevVars(this);
              for (
                var s = this.graphics.group({
                    class: "apexcharts-bar-series apexcharts-plot-series"
                  }),
                  o = 0,
                  r = 0,
                  l = function (n, l) {
                    var c = void 0,
                      h = void 0,
                      d = void 0,
                      u = void 0,
                      g = -1;
                    (i.groupCtx = i),
                      a.globals.seriesGroups.forEach(function (e, t) {
                        e.indexOf(a.config.series[n].name) > -1 && (g = t);
                      }),
                      -1 !== g && (i.groupCtx = i[a.globals.seriesGroups[g]]);
                    var p = [],
                      f = [],
                      m = a.globals.comboCharts ? t[n] : n;
                    i.yRatio.length > 1 && (i.yaxisIndex = m),
                      (i.isReversed =
                        a.config.yaxis[i.yaxisIndex] &&
                        a.config.yaxis[i.yaxisIndex].reversed);
                    var x = i.graphics.group({
                      class: "apexcharts-series",
                      seriesName: st.escapeString(a.globals.seriesNames[m]),
                      rel: n + 1,
                      "data:realIndex": m
                    });
                    i.ctx.series.addCollapsedClassToSeries(x, m);
                    var b = i.graphics.group({
                        class: "apexcharts-datalabels",
                        "data:realIndex": m
                      }),
                      v = i.graphics.group({
                        class: "apexcharts-bar-goals-markers"
                      }),
                      y = 0,
                      w = 0,
                      C = i.initialPositions(o, r, c, h, d, u);
                    (r = C.y),
                      (y = C.barHeight),
                      (h = C.yDivision),
                      (u = C.zeroW),
                      (o = C.x),
                      (w = C.barWidth),
                      (c = C.xDivision),
                      (d = C.zeroH),
                      i.barHelpers.initializeStackedXYVars(i),
                      1 === i.groupCtx.prevY.length &&
                        i.groupCtx.prevY[0].every(function (e) {
                          return isNaN(e);
                        }) &&
                        ((i.groupCtx.prevY[0] = i.groupCtx.prevY[0].map(
                          function (e) {
                            return d;
                          }
                        )),
                        (i.groupCtx.prevYF[0] = i.groupCtx.prevYF[0].map(
                          function (e) {
                            return 0;
                          }
                        )));
                    for (var k = 0; k < a.globals.dataPoints; k++) {
                      var A = i.barHelpers.getStrokeWidth(n, k, m),
                        S = {
                          indexes: { i: n, j: k, realIndex: m, bc: l },
                          strokeWidth: A,
                          x: o,
                          y: r,
                          elSeries: x,
                          groupIndex: g,
                          seriesGroup: a.globals.seriesGroups[g]
                        },
                        L = null;
                      i.isHorizontal
                        ? ((L = i.drawStackedBarPaths(
                            nJ(
                              nJ({}, S),
                              {},
                              { zeroW: u, barHeight: y, yDivision: h }
                            )
                          )),
                          (w = i.series[n][k] / i.invertedYRatio))
                        : ((L = i.drawStackedColumnPaths(
                            nJ(
                              nJ({}, S),
                              {},
                              { xDivision: c, barWidth: w, zeroH: d }
                            )
                          )),
                          (y = i.series[n][k] / i.yRatio[i.yaxisIndex]));
                      var O = i.barHelpers.drawGoalLine({
                        barXPosition: L.barXPosition,
                        barYPosition: L.barYPosition,
                        goalX: L.goalX,
                        goalY: L.goalY,
                        barHeight: y,
                        barWidth: w
                      });
                      O && v.add(O), (r = L.y), (o = L.x), p.push(o), f.push(r);
                      var T = i.barHelpers.getPathFillColor(e, n, k, m);
                      x = i.renderSeries({
                        realIndex: m,
                        pathFill: T,
                        j: k,
                        i: n,
                        groupIndex: g,
                        pathFrom: L.pathFrom,
                        pathTo: L.pathTo,
                        strokeWidth: A,
                        elSeries: x,
                        x: o,
                        y: r,
                        series: e,
                        barHeight: y,
                        barWidth: w,
                        elDataLabelsWrap: b,
                        elGoalsMarkers: v,
                        type: "bar",
                        visibleSeries: 0
                      });
                    }
                    (a.globals.seriesXvalues[m] = p),
                      (a.globals.seriesYvalues[m] = f),
                      i.groupCtx.prevY.push(i.groupCtx.yArrj),
                      i.groupCtx.prevYF.push(i.groupCtx.yArrjF),
                      i.groupCtx.prevYVal.push(i.groupCtx.yArrjVal),
                      i.groupCtx.prevX.push(i.groupCtx.xArrj),
                      i.groupCtx.prevXF.push(i.groupCtx.xArrjF),
                      i.groupCtx.prevXVal.push(i.groupCtx.xArrjVal),
                      s.add(x);
                  },
                  c = 0,
                  h = 0;
                c < e.length;
                c++, h++
              )
                l(c, h);
              return s;
            }
          },
          {
            key: "initialPositions",
            value: function (e, t, i, a, n, s) {
              var o,
                r,
                l,
                c,
                h = this.w;
              return (
                this.isHorizontal
                  ? ((l =
                      ((l = a = h.globals.gridHeight / h.globals.dataPoints) *
                        parseInt(h.config.plotOptions.bar.barHeight, 10)) /
                      100),
                    -1 ===
                      String(h.config.plotOptions.bar.barHeight).indexOf("%") &&
                      (l = parseInt(h.config.plotOptions.bar.barHeight, 10)),
                    (s =
                      this.baseLineInvertedY +
                      h.globals.padHorizontal +
                      (this.isReversed ? h.globals.gridWidth : 0) -
                      (this.isReversed ? 2 * this.baseLineInvertedY : 0)),
                    (t = (a - l) / 2))
                  : ((c = i = h.globals.gridWidth / h.globals.dataPoints),
                    (c =
                      h.globals.isXNumeric && h.globals.dataPoints > 1
                        ? ((i = h.globals.minXDiff / this.xRatio) *
                            parseInt(this.barOptions.columnWidth, 10)) /
                          100
                        : (c *
                            parseInt(
                              h.config.plotOptions.bar.columnWidth,
                              10
                            )) /
                          100),
                    -1 ===
                      String(h.config.plotOptions.bar.columnWidth).indexOf(
                        "%"
                      ) &&
                      (c = parseInt(h.config.plotOptions.bar.columnWidth, 10)),
                    (n =
                      h.globals.gridHeight -
                      this.baseLineY[this.yaxisIndex] -
                      (this.isReversed ? h.globals.gridHeight : 0) +
                      (this.isReversed
                        ? 2 * this.baseLineY[this.yaxisIndex]
                        : 0)),
                    (e = h.globals.padHorizontal + (i - c) / 2)),
                {
                  x: e,
                  y: t,
                  yDivision: a,
                  xDivision: i,
                  barHeight:
                    null !== (o = h.globals.seriesGroups) &&
                    void 0 !== o &&
                    o.length
                      ? l / h.globals.seriesGroups.length
                      : l,
                  barWidth:
                    null !== (r = h.globals.seriesGroups) &&
                    void 0 !== r &&
                    r.length
                      ? c / h.globals.seriesGroups.length
                      : c,
                  zeroH: n,
                  zeroW: s
                }
              );
            }
          },
          {
            key: "drawStackedBarPaths",
            value: function (e) {
              for (
                var t,
                  i = e.indexes,
                  a = e.barHeight,
                  n = e.strokeWidth,
                  s = e.zeroW,
                  o = e.x,
                  r = e.y,
                  l = e.groupIndex,
                  c = e.seriesGroup,
                  h = e.yDivision,
                  d = e.elSeries,
                  u = this.w,
                  g = r + (-1 !== l ? l * a : 0),
                  p = i.i,
                  f = i.j,
                  m = 0,
                  x = 0;
                x < this.groupCtx.prevXF.length;
                x++
              )
                m += this.groupCtx.prevXF[x][f];
              var b = p;
              if ((c && (b = c.indexOf(u.config.series[p].name)), b > 0)) {
                var v = s;
                this.groupCtx.prevXVal[b - 1][f] < 0
                  ? (v =
                      this.series[p][f] >= 0
                        ? this.groupCtx.prevX[b - 1][f] +
                          m -
                          2 * (this.isReversed ? m : 0)
                        : this.groupCtx.prevX[b - 1][f])
                  : this.groupCtx.prevXVal[b - 1][f] >= 0 &&
                    (v =
                      this.series[p][f] >= 0
                        ? this.groupCtx.prevX[b - 1][f]
                        : this.groupCtx.prevX[b - 1][f] -
                          m +
                          2 * (this.isReversed ? m : 0)),
                  (t = v);
              } else t = s;
              o =
                null === this.series[p][f]
                  ? t
                  : t +
                    this.series[p][f] / this.invertedYRatio -
                    2 *
                      (this.isReversed
                        ? this.series[p][f] / this.invertedYRatio
                        : 0);
              var y = this.barHelpers.getBarpaths({
                barYPosition: g,
                barHeight: a,
                x1: t,
                x2: o,
                strokeWidth: n,
                series: this.series,
                realIndex: i.realIndex,
                seriesGroup: c,
                i: p,
                j: f,
                w: u
              });
              return (
                this.barHelpers.barBackground({
                  j: f,
                  i: p,
                  y1: g,
                  y2: a,
                  elSeries: d
                }),
                (r += h),
                {
                  pathTo: y.pathTo,
                  pathFrom: y.pathFrom,
                  goalX: this.barHelpers.getGoalValues("x", s, null, p, f),
                  barYPosition: g,
                  x: o,
                  y: r
                }
              );
            }
          },
          {
            key: "drawStackedColumnPaths",
            value: function (e) {
              var t = e.indexes,
                i = e.x,
                a = e.y,
                n = e.xDivision,
                s = e.barWidth,
                o = e.zeroH,
                r = e.groupIndex,
                l = e.seriesGroup,
                c = e.elSeries,
                h = this.w,
                d = t.i,
                u = t.j,
                g = t.bc;
              if (h.globals.isXNumeric) {
                var p = h.globals.seriesX[d][u];
                p || (p = 0),
                  (i = (p - h.globals.minX) / this.xRatio - s / 2),
                  h.globals.seriesGroups.length &&
                    (i =
                      (p - h.globals.minX) / this.xRatio -
                      (s / 2) * h.globals.seriesGroups.length);
              }
              for (
                var f, m = i + (-1 !== r ? r * s : 0), x = 0, b = 0;
                b < this.groupCtx.prevYF.length;
                b++
              )
                x += isNaN(this.groupCtx.prevYF[b][u])
                  ? 0
                  : this.groupCtx.prevYF[b][u];
              var v = d;
              if (
                (l && (v = l.indexOf(h.config.series[d].name)),
                (v > 0 && !h.globals.isXNumeric) ||
                  (v > 0 &&
                    h.globals.isXNumeric &&
                    h.globals.seriesX[d - 1][u] === h.globals.seriesX[d][u]))
              ) {
                var y,
                  w,
                  C,
                  k,
                  A,
                  S,
                  L = Math.min(this.yRatio.length + 1, d + 1);
                if (
                  void 0 !== this.groupCtx.prevY[v - 1] &&
                  this.groupCtx.prevY[v - 1].length
                ) {
                  for (var O = 1; O < L; O++)
                    if (
                      !isNaN(
                        null === (y = this.groupCtx.prevY[v - O]) ||
                          void 0 === y
                          ? void 0
                          : y[u]
                      )
                    ) {
                      S = this.groupCtx.prevY[v - O][u];
                      break;
                    }
                }
                for (var T = 1; T < L; T++) {
                  if (
                    (null === (w = this.groupCtx.prevYVal[v - T]) ||
                    void 0 === w
                      ? void 0
                      : w[u]) < 0
                  ) {
                    A =
                      this.series[d][u] >= 0
                        ? S - x + 2 * (this.isReversed ? x : 0)
                        : S;
                    break;
                  }
                  if (
                    (null === (C = this.groupCtx.prevYVal[v - T]) ||
                    void 0 === C
                      ? void 0
                      : C[u]) >= 0
                  ) {
                    A =
                      this.series[d][u] >= 0
                        ? S
                        : S + x - 2 * (this.isReversed ? x : 0);
                    break;
                  }
                }
                void 0 === A && (A = h.globals.gridHeight),
                  (f =
                    null !== (k = this.groupCtx.prevYF[0]) &&
                    void 0 !== k &&
                    k.every(function (e) {
                      return 0 === e;
                    }) &&
                    this.groupCtx.prevYF.slice(1, v).every(function (e) {
                      return e.every(function (e) {
                        return isNaN(e);
                      });
                    })
                      ? o
                      : A);
              } else f = o;
              a = this.series[d][u]
                ? f -
                  this.series[d][u] / this.yRatio[this.yaxisIndex] +
                  2 *
                    (this.isReversed
                      ? this.series[d][u] / this.yRatio[this.yaxisIndex]
                      : 0)
                : f;
              var P = this.barHelpers.getColumnPaths({
                barXPosition: m,
                barWidth: s,
                y1: f,
                y2: a,
                yRatio: this.yRatio[this.yaxisIndex],
                strokeWidth: this.strokeWidth,
                series: this.series,
                seriesGroup: l,
                realIndex: t.realIndex,
                i: d,
                j: u,
                w: h
              });
              return (
                this.barHelpers.barBackground({
                  bc: g,
                  j: u,
                  i: d,
                  x1: m,
                  x2: s,
                  elSeries: c
                }),
                (i += n),
                {
                  pathTo: P.pathTo,
                  pathFrom: P.pathFrom,
                  goalY: this.barHelpers.getGoalValues("y", null, o, d, u),
                  barXPosition: m,
                  x: h.globals.isXNumeric ? i - n : i,
                  y: a
                }
              );
            }
          }
        ]),
        i
      );
    })(),
    s9 = (function (e) {
      n4(i, s5);
      var t = n6(i);
      function i() {
        return nQ(this, i), t.apply(this, arguments);
      }
      return (
        n1(i, [
          {
            key: "draw",
            value: function (e, t, i) {
              var a = this,
                n = this.w,
                s = new sn(this.ctx),
                o = n.globals.comboCharts ? t : n.config.chart.type,
                r = new sw(this.ctx);
              (this.candlestickOptions = this.w.config.plotOptions.candlestick),
                (this.boxOptions = this.w.config.plotOptions.boxPlot),
                (this.isHorizontal = n.config.plotOptions.bar.horizontal);
              var l = new ss(this.ctx, n);
              (e = l.getLogSeries(e)),
                (this.series = e),
                (this.yRatio = l.getLogYRatios(this.yRatio)),
                this.barHelpers.initVariables(e);
              for (
                var c = s.group({
                    class: "apexcharts-".concat(
                      o,
                      "-series apexcharts-plot-series"
                    )
                  }),
                  h = function (t) {
                    a.isBoxPlot =
                      "boxPlot" === n.config.chart.type ||
                      "boxPlot" === n.config.series[t].type;
                    var o,
                      l,
                      h,
                      d,
                      u,
                      g,
                      p = void 0,
                      f = void 0,
                      m = [],
                      x = [],
                      b = n.globals.comboCharts ? i[t] : t,
                      v = s.group({
                        class: "apexcharts-series",
                        seriesName: st.escapeString(n.globals.seriesNames[b]),
                        rel: t + 1,
                        "data:realIndex": b
                      });
                    a.ctx.series.addCollapsedClassToSeries(v, b),
                      e[t].length > 0 && (a.visibleI = a.visibleI + 1),
                      a.yRatio.length > 1 && (a.yaxisIndex = b);
                    var y = a.barHelpers.initialPositions();
                    (f = y.y),
                      (o = y.barHeight),
                      (d = y.yDivision),
                      (g = y.zeroW),
                      (p = y.x),
                      (l = y.barWidth),
                      (h = y.xDivision),
                      (u = y.zeroH),
                      x.push(p + l / 2);
                    for (
                      var w = s.group({
                          class: "apexcharts-datalabels",
                          "data:realIndex": b
                        }),
                        C = function (i) {
                          var s = a.barHelpers.getStrokeWidth(t, i, b),
                            c = null,
                            y = {
                              indexes: { i: t, j: i, realIndex: b },
                              x: p,
                              y: f,
                              strokeWidth: s,
                              elSeries: v
                            };
                          (f = (c = a.isHorizontal
                            ? a.drawHorizontalBoxPaths(
                                nJ(
                                  nJ({}, y),
                                  {},
                                  { yDivision: d, barHeight: o, zeroW: g }
                                )
                              )
                            : a.drawVerticalBoxPaths(
                                nJ(
                                  nJ({}, y),
                                  {},
                                  { xDivision: h, barWidth: l, zeroH: u }
                                )
                              )).y),
                            (p = c.x),
                            i > 0 && x.push(p + l / 2),
                            m.push(f),
                            c.pathTo.forEach(function (h, d) {
                              var u =
                                  !a.isBoxPlot &&
                                  a.candlestickOptions.wick.useFillColor
                                    ? c.color[d]
                                    : n.globals.stroke.colors[t],
                                g = r.fillPath({
                                  seriesNumber: b,
                                  dataPointIndex: i,
                                  color: c.color[d],
                                  value: e[t][i]
                                });
                              a.renderSeries({
                                realIndex: b,
                                pathFill: g,
                                lineFill: u,
                                j: i,
                                i: t,
                                pathFrom: c.pathFrom,
                                pathTo: h,
                                strokeWidth: s,
                                elSeries: v,
                                x: p,
                                y: f,
                                series: e,
                                barHeight: o,
                                barWidth: l,
                                elDataLabelsWrap: w,
                                visibleSeries: a.visibleI,
                                type: n.config.chart.type
                              });
                            });
                        },
                        k = 0;
                      k < n.globals.dataPoints;
                      k++
                    )
                      C(k);
                    (n.globals.seriesXvalues[b] = x),
                      (n.globals.seriesYvalues[b] = m),
                      c.add(v);
                  },
                  d = 0;
                d < e.length;
                d++
              )
                h(d);
              return c;
            }
          },
          {
            key: "drawVerticalBoxPaths",
            value: function (e) {
              var t = e.indexes,
                i = e.x;
              e.y;
              var a = e.xDivision,
                n = e.barWidth,
                s = e.zeroH,
                o = e.strokeWidth,
                r = this.w,
                l = new sn(this.ctx),
                c = t.i,
                h = t.j,
                d = !0,
                u = r.config.plotOptions.candlestick.colors.upward,
                g = r.config.plotOptions.candlestick.colors.downward,
                p = "";
              this.isBoxPlot &&
                (p = [
                  this.boxOptions.colors.lower,
                  this.boxOptions.colors.upper
                ]);
              var f = this.yRatio[this.yaxisIndex],
                m = t.realIndex,
                x = this.getOHLCValue(m, h),
                b = s,
                v = s;
              x.o > x.c && (d = !1);
              var y = Math.min(x.o, x.c),
                w = Math.max(x.o, x.c),
                C = x.m;
              r.globals.isXNumeric &&
                (i =
                  (r.globals.seriesX[m][h] - r.globals.minX) / this.xRatio -
                  n / 2);
              var k = i + n * this.visibleI;
              void 0 === this.series[c][h] || null === this.series[c][h]
                ? ((y = s), (w = s))
                : ((y = s - y / f),
                  (w = s - w / f),
                  (b = s - x.h / f),
                  (v = s - x.l / f),
                  (C = s - x.m / f));
              var A = l.move(k, s),
                S = l.move(k + n / 2, y);
              return (
                r.globals.previousPaths.length > 0 &&
                  (S = this.getPreviousPath(m, h, !0)),
                (A = this.isBoxPlot
                  ? [
                      l.move(k, y) +
                        l.line(k + n / 2, y) +
                        l.line(k + n / 2, b) +
                        l.line(k + n / 4, b) +
                        l.line(k + n - n / 4, b) +
                        l.line(k + n / 2, b) +
                        l.line(k + n / 2, y) +
                        l.line(k + n, y) +
                        l.line(k + n, C) +
                        l.line(k, C) +
                        l.line(k, y + o / 2),
                      l.move(k, C) +
                        l.line(k + n, C) +
                        l.line(k + n, w) +
                        l.line(k + n / 2, w) +
                        l.line(k + n / 2, v) +
                        l.line(k + n - n / 4, v) +
                        l.line(k + n / 4, v) +
                        l.line(k + n / 2, v) +
                        l.line(k + n / 2, w) +
                        l.line(k, w) +
                        l.line(k, C) +
                        "z"
                    ]
                  : [
                      l.move(k, w) +
                        l.line(k + n / 2, w) +
                        l.line(k + n / 2, b) +
                        l.line(k + n / 2, w) +
                        l.line(k + n, w) +
                        l.line(k + n, y) +
                        l.line(k + n / 2, y) +
                        l.line(k + n / 2, v) +
                        l.line(k + n / 2, y) +
                        l.line(k, y) +
                        l.line(k, w - o / 2)
                    ]),
                (S += l.move(k, y)),
                r.globals.isXNumeric || (i += a),
                {
                  pathTo: A,
                  pathFrom: S,
                  x: i,
                  y: w,
                  barXPosition: k,
                  color: this.isBoxPlot ? p : d ? [u] : [g]
                }
              );
            }
          },
          {
            key: "drawHorizontalBoxPaths",
            value: function (e) {
              var t = e.indexes;
              e.x;
              var i = e.y,
                a = e.yDivision,
                n = e.barHeight,
                s = e.zeroW,
                o = e.strokeWidth,
                r = this.w,
                l = new sn(this.ctx),
                c = t.i,
                h = t.j,
                d = this.boxOptions.colors.lower;
              this.isBoxPlot &&
                (d = [
                  this.boxOptions.colors.lower,
                  this.boxOptions.colors.upper
                ]);
              var u = this.invertedYRatio,
                g = t.realIndex,
                p = this.getOHLCValue(g, h),
                f = s,
                m = s,
                x = Math.min(p.o, p.c),
                b = Math.max(p.o, p.c),
                v = p.m;
              r.globals.isXNumeric &&
                (i =
                  (r.globals.seriesX[g][h] - r.globals.minX) /
                    this.invertedXRatio -
                  n / 2);
              var y = i + n * this.visibleI;
              void 0 === this.series[c][h] || null === this.series[c][h]
                ? ((x = s), (b = s))
                : ((x = s + x / u),
                  (b = s + b / u),
                  (f = s + p.h / u),
                  (m = s + p.l / u),
                  (v = s + p.m / u));
              var w = l.move(s, y),
                C = l.move(x, y + n / 2);
              return (
                r.globals.previousPaths.length > 0 &&
                  (C = this.getPreviousPath(g, h, !0)),
                (w = [
                  l.move(x, y) +
                    l.line(x, y + n / 2) +
                    l.line(f, y + n / 2) +
                    l.line(f, y + n / 2 - n / 4) +
                    l.line(f, y + n / 2 + n / 4) +
                    l.line(f, y + n / 2) +
                    l.line(x, y + n / 2) +
                    l.line(x, y + n) +
                    l.line(v, y + n) +
                    l.line(v, y) +
                    l.line(x + o / 2, y),
                  l.move(v, y) +
                    l.line(v, y + n) +
                    l.line(b, y + n) +
                    l.line(b, y + n / 2) +
                    l.line(m, y + n / 2) +
                    l.line(m, y + n - n / 4) +
                    l.line(m, y + n / 4) +
                    l.line(m, y + n / 2) +
                    l.line(b, y + n / 2) +
                    l.line(b, y) +
                    l.line(v, y) +
                    "z"
                ]),
                (C += l.move(x, y)),
                r.globals.isXNumeric || (i += a),
                {
                  pathTo: w,
                  pathFrom: C,
                  x: b,
                  y: i,
                  barYPosition: y,
                  color: d
                }
              );
            }
          },
          {
            key: "getOHLCValue",
            value: function (e, t) {
              var i = this.w;
              return {
                o: this.isBoxPlot
                  ? i.globals.seriesCandleH[e][t]
                  : i.globals.seriesCandleO[e][t],
                h: this.isBoxPlot
                  ? i.globals.seriesCandleO[e][t]
                  : i.globals.seriesCandleH[e][t],
                m: i.globals.seriesCandleM[e][t],
                l: this.isBoxPlot
                  ? i.globals.seriesCandleC[e][t]
                  : i.globals.seriesCandleL[e][t],
                c: this.isBoxPlot
                  ? i.globals.seriesCandleL[e][t]
                  : i.globals.seriesCandleC[e][t]
              };
            }
          }
        ]),
        i
      );
    })(),
    s8 = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "checkColorRange",
            value: function () {
              var e = this.w,
                t = !1,
                i = e.config.plotOptions[e.config.chart.type];
              return (
                i.colorScale.ranges.length > 0 &&
                  i.colorScale.ranges.map(function (e, i) {
                    e.from <= 0 && (t = !0);
                  }),
                t
              );
            }
          },
          {
            key: "getShadeColor",
            value: function (e, t, i, a) {
              var n = this.w,
                s = 1,
                o = n.config.plotOptions[e].shadeIntensity,
                r = this.determineColor(e, t, i);
              n.globals.hasNegs || a
                ? (s = n.config.plotOptions[e].reverseNegativeShade
                    ? r.percent < 0
                      ? (r.percent / 100) * (1.25 * o)
                      : (1 - r.percent / 100) * (1.25 * o)
                    : r.percent <= 0
                    ? 1 - (1 + r.percent / 100) * o
                    : (1 - r.percent / 100) * o)
                : ((s = 1 - r.percent / 100),
                  "treemap" === e && (s = (1 - r.percent / 100) * (1.25 * o)));
              var l = r.color,
                c = new st();
              return (
                n.config.plotOptions[e].enableShades &&
                  (l =
                    "dark" === this.w.config.theme.mode
                      ? st.hexToRgba(
                          c.shadeColor(-1 * s, r.color),
                          n.config.fill.opacity
                        )
                      : st.hexToRgba(
                          c.shadeColor(s, r.color),
                          n.config.fill.opacity
                        )),
                { color: l, colorProps: r }
              );
            }
          },
          {
            key: "determineColor",
            value: function (e, t, i) {
              var a = this.w,
                n = a.globals.series[t][i],
                s = a.config.plotOptions[e],
                o = s.colorScale.inverse ? i : t;
              s.distributed && "treemap" === a.config.chart.type && (o = i);
              var r = a.globals.colors[o],
                l = null,
                c = Math.min.apply(Math, n8(a.globals.series[t])),
                h = Math.max.apply(Math, n8(a.globals.series[t]));
              s.distributed ||
                "heatmap" !== e ||
                ((c = a.globals.minY), (h = a.globals.maxY)),
                void 0 !== s.colorScale.min &&
                  ((c =
                    s.colorScale.min < a.globals.minY
                      ? s.colorScale.min
                      : a.globals.minY),
                  (h =
                    s.colorScale.max > a.globals.maxY
                      ? s.colorScale.max
                      : a.globals.maxY));
              var d = Math.abs(h) + Math.abs(c),
                u = (100 * n) / (0 === d ? d - 1e-6 : d);
              return (
                s.colorScale.ranges.length > 0 &&
                  s.colorScale.ranges.map(function (e, t) {
                    if (n >= e.from && n <= e.to) {
                      (r = e.color),
                        (l = e.foreColor ? e.foreColor : null),
                        (c = e.from);
                      var i = Math.abs((h = e.to)) + Math.abs(c);
                      u = (100 * n) / (0 === i ? i - 1e-6 : i);
                    }
                  }),
                { color: r, foreColor: l, percent: u }
              );
            }
          },
          {
            key: "calculateDataLabels",
            value: function (e) {
              var t = e.text,
                i = e.x,
                a = e.y,
                n = e.i,
                s = e.j,
                o = e.colorProps,
                r = e.fontSize,
                l = this.w.config.dataLabels,
                c = new sn(this.ctx),
                h = new sA(this.ctx),
                d = null;
              if (l.enabled) {
                d = c.group({ class: "apexcharts-data-labels" });
                var u = l.offsetX,
                  g = l.offsetY,
                  p = a + parseFloat(l.style.fontSize) / 3 + g;
                h.plotDataLabelsText({
                  x: i + u,
                  y: p,
                  text: t,
                  i: n,
                  j: s,
                  color: o.foreColor,
                  parent: d,
                  fontSize: r,
                  dataLabelsConfig: l
                });
              }
              return d;
            }
          },
          {
            key: "addListeners",
            value: function (e) {
              var t = new sn(this.ctx);
              e.node.addEventListener(
                "mouseenter",
                t.pathMouseEnter.bind(this, e)
              ),
                e.node.addEventListener(
                  "mouseleave",
                  t.pathMouseLeave.bind(this, e)
                ),
                e.node.addEventListener(
                  "mousedown",
                  t.pathMouseDown.bind(this, e)
                );
            }
          }
        ]),
        e
      );
    })(),
    s7 = (function () {
      function e(t, i) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.xRatio = i.xRatio),
          (this.yRatio = i.yRatio),
          (this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation),
          (this.helpers = new s8(t)),
          (this.rectRadius = this.w.config.plotOptions.heatmap.radius),
          (this.strokeWidth = this.w.config.stroke.show
            ? this.w.config.stroke.width
            : 0);
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = i.group({ class: "apexcharts-heatmap" });
              a.attr(
                "clip-path",
                "url(#gridRectMask".concat(t.globals.cuid, ")")
              );
              var n = t.globals.gridWidth / t.globals.dataPoints,
                s = t.globals.gridHeight / t.globals.series.length,
                o = 0,
                r = !1;
              this.negRange = this.helpers.checkColorRange();
              var l = e.slice();
              t.config.yaxis[0].reversed && ((r = !0), l.reverse());
              for (
                var c = r ? 0 : l.length - 1;
                r ? c < l.length : c >= 0;
                r ? c++ : c--
              ) {
                var h = i.group({
                  class: "apexcharts-series apexcharts-heatmap-series",
                  seriesName: st.escapeString(t.globals.seriesNames[c]),
                  rel: c + 1,
                  "data:realIndex": c
                });
                if (
                  (this.ctx.series.addCollapsedClassToSeries(h, c),
                  t.config.chart.dropShadow.enabled)
                ) {
                  var d = t.config.chart.dropShadow;
                  new sa(this.ctx).dropShadow(h, d, c);
                }
                for (
                  var u = 0,
                    g = t.config.plotOptions.heatmap.shadeIntensity,
                    p = 0;
                  p < l[c].length;
                  p++
                ) {
                  var f = this.helpers.getShadeColor(
                      t.config.chart.type,
                      c,
                      p,
                      this.negRange
                    ),
                    m = f.color,
                    x = f.colorProps;
                  "image" === t.config.fill.type &&
                    (m = new sw(this.ctx).fillPath({
                      seriesNumber: c,
                      dataPointIndex: p,
                      opacity: t.globals.hasNegs
                        ? x.percent < 0
                          ? 1 - (1 + x.percent / 100)
                          : g + x.percent / 100
                        : x.percent / 100,
                      patternID: st.randomId(),
                      width: t.config.fill.image.width
                        ? t.config.fill.image.width
                        : n,
                      height: t.config.fill.image.height
                        ? t.config.fill.image.height
                        : s
                    }));
                  var b = this.rectRadius,
                    v = i.drawRect(u, o, n, s, b);
                  if (
                    (v.attr({ cx: u, cy: o }),
                    v.node.classList.add("apexcharts-heatmap-rect"),
                    h.add(v),
                    v.attr({
                      fill: m,
                      i: c,
                      index: c,
                      j: p,
                      val: l[c][p],
                      "stroke-width": this.strokeWidth,
                      stroke: t.config.plotOptions.heatmap.useFillColorAsStroke
                        ? m
                        : t.globals.stroke.colors[0],
                      color: m
                    }),
                    this.helpers.addListeners(v),
                    t.config.chart.animations.enabled && !t.globals.dataChanged)
                  ) {
                    var y = 1;
                    t.globals.resized || (y = t.config.chart.animations.speed),
                      this.animateHeatMap(v, u, o, n, s, y);
                  }
                  if (t.globals.dataChanged) {
                    var w = 1;
                    if (this.dynamicAnim.enabled && t.globals.shouldAnimate) {
                      w = this.dynamicAnim.speed;
                      var C =
                        t.globals.previousPaths[c] &&
                        t.globals.previousPaths[c][p] &&
                        t.globals.previousPaths[c][p].color;
                      C || (C = "rgba(255, 255, 255, 0)"),
                        this.animateHeatColor(
                          v,
                          st.isColorHex(C) ? C : st.rgb2hex(C),
                          st.isColorHex(m) ? m : st.rgb2hex(m),
                          w
                        );
                    }
                  }
                  var k = (0, t.config.dataLabels.formatter)(
                      t.globals.series[c][p],
                      {
                        value: t.globals.series[c][p],
                        seriesIndex: c,
                        dataPointIndex: p,
                        w: t
                      }
                    ),
                    A = this.helpers.calculateDataLabels({
                      text: k,
                      x: u + n / 2,
                      y: o + s / 2,
                      i: c,
                      j: p,
                      colorProps: x,
                      series: l
                    });
                  null !== A && h.add(A), (u += n);
                }
                (o += s), a.add(h);
              }
              var S = t.globals.yAxisScale[0].result.slice();
              t.config.yaxis[0].reversed ? S.unshift("") : S.push(""),
                (t.globals.yAxisScale[0].result = S);
              var L = t.globals.gridHeight / t.globals.series.length;
              return (t.config.yaxis[0].labels.offsetY = -L / 2), a;
            }
          },
          {
            key: "animateHeatMap",
            value: function (e, t, i, a, n, s) {
              var o = new si(this.ctx);
              o.animateRect(
                e,
                { x: t + a / 2, y: i + n / 2, width: 0, height: 0 },
                { x: t, y: i, width: a, height: n },
                s,
                function () {
                  o.animationCompleted(e);
                }
              );
            }
          },
          {
            key: "animateHeatColor",
            value: function (e, t, i, a) {
              e.attr({ fill: t }).animate(a).attr({ fill: i });
            }
          }
        ]),
        e
      );
    })(),
    oe = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "drawYAxisTexts",
            value: function (e, t, i, a) {
              var n = this.w,
                s = n.config.yaxis[0],
                o = n.globals.yLabelFormatters[0];
              return new sn(this.ctx).drawText({
                x: e + s.labels.offsetX,
                y: t + s.labels.offsetY,
                text: o(a, i),
                textAnchor: "middle",
                fontSize: s.labels.style.fontSize,
                fontFamily: s.labels.style.fontFamily,
                foreColor: Array.isArray(s.labels.style.colors)
                  ? s.labels.style.colors[i]
                  : s.labels.style.colors
              });
            }
          }
        ]),
        e
      );
    })(),
    ot = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
        var i = this.w;
        (this.chartType = this.w.config.chart.type),
          (this.initialAnim = this.w.config.chart.animations.enabled),
          (this.dynamicAnim =
            this.initialAnim &&
            this.w.config.chart.animations.dynamicAnimation.enabled),
          (this.animBeginArr = [0]),
          (this.animDur = 0),
          (this.donutDataLabels = this.w.config.plotOptions.pie.donut.labels),
          (this.lineColorArr =
            void 0 !== i.globals.stroke.colors
              ? i.globals.stroke.colors
              : i.globals.colors),
          (this.defaultSize = Math.min(
            i.globals.gridWidth,
            i.globals.gridHeight
          )),
          (this.centerY = this.defaultSize / 2),
          (this.centerX = i.globals.gridWidth / 2),
          "radialBar" === i.config.chart.type
            ? (this.fullAngle = 360)
            : (this.fullAngle = Math.abs(
                i.config.plotOptions.pie.endAngle -
                  i.config.plotOptions.pie.startAngle
              )),
          (this.initialAngle =
            i.config.plotOptions.pie.startAngle % this.fullAngle),
          (i.globals.radialSize =
            this.defaultSize / 2.05 -
            i.config.stroke.width -
            (i.config.chart.sparkline.enabled
              ? 0
              : i.config.chart.dropShadow.blur)),
          (this.donutSize =
            (i.globals.radialSize *
              parseInt(i.config.plotOptions.pie.donut.size, 10)) /
            100),
          (this.maxY = 0),
          (this.sliceLabels = []),
          (this.sliceSizes = []),
          (this.prevSectorAngleArr = []);
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function (e) {
              var t = this,
                i = this.w,
                a = new sn(this.ctx);
              if (
                ((this.ret = a.group({ class: "apexcharts-pie" })),
                i.globals.noData)
              )
                return this.ret;
              for (var n = 0, s = 0; s < e.length; s++) n += st.negToZero(e[s]);
              var o = [],
                r = a.group();
              0 === n && (n = 1e-5),
                e.forEach(function (e) {
                  t.maxY = Math.max(t.maxY, e);
                }),
                i.config.yaxis[0].max && (this.maxY = i.config.yaxis[0].max),
                "back" === i.config.grid.position &&
                  "polarArea" === this.chartType &&
                  this.drawPolarElements(this.ret);
              for (var l = 0; l < e.length; l++) {
                var c = (this.fullAngle * st.negToZero(e[l])) / n;
                o.push(c),
                  "polarArea" === this.chartType
                    ? ((o[l] = this.fullAngle / e.length),
                      this.sliceSizes.push(
                        (i.globals.radialSize * e[l]) / this.maxY
                      ))
                    : this.sliceSizes.push(i.globals.radialSize);
              }
              if (i.globals.dataChanged) {
                for (
                  var h, d = 0, u = 0;
                  u < i.globals.previousPaths.length;
                  u++
                )
                  d += st.negToZero(i.globals.previousPaths[u]);
                for (var g = 0; g < i.globals.previousPaths.length; g++)
                  (h =
                    (this.fullAngle *
                      st.negToZero(i.globals.previousPaths[g])) /
                    d),
                    this.prevSectorAngleArr.push(h);
              }
              this.donutSize < 0 && (this.donutSize = 0);
              var p = i.config.plotOptions.pie.customScale,
                f = i.globals.gridWidth / 2,
                m = i.globals.gridHeight / 2,
                x = f - (i.globals.gridWidth / 2) * p,
                b = m - (i.globals.gridHeight / 2) * p;
              if ("donut" === this.chartType) {
                var v = a.drawCircle(this.donutSize);
                v.attr({
                  cx: this.centerX,
                  cy: this.centerY,
                  fill: i.config.plotOptions.pie.donut.background
                    ? i.config.plotOptions.pie.donut.background
                    : "transparent"
                }),
                  r.add(v);
              }
              var y = this.drawArcs(o, e);
              if (
                (this.sliceLabels.forEach(function (e) {
                  y.add(e);
                }),
                r.attr({
                  transform: "translate("
                    .concat(x, ", ")
                    .concat(b, ") scale(")
                    .concat(p, ")")
                }),
                r.add(y),
                this.ret.add(r),
                this.donutDataLabels.show)
              ) {
                var w = this.renderInnerDataLabels(this.donutDataLabels, {
                  hollowSize: this.donutSize,
                  centerX: this.centerX,
                  centerY: this.centerY,
                  opacity: this.donutDataLabels.show,
                  translateX: x,
                  translateY: b
                });
                this.ret.add(w);
              }
              return (
                "front" === i.config.grid.position &&
                  "polarArea" === this.chartType &&
                  this.drawPolarElements(this.ret),
                this.ret
              );
            }
          },
          {
            key: "drawArcs",
            value: function (e, t) {
              var i = this.w,
                a = new sa(this.ctx),
                n = new sn(this.ctx),
                s = new sw(this.ctx),
                o = n.group({ class: "apexcharts-slices" }),
                r = this.initialAngle,
                l = this.initialAngle,
                c = this.initialAngle,
                h = this.initialAngle;
              this.strokeWidth = i.config.stroke.show
                ? i.config.stroke.width
                : 0;
              for (var d = 0; d < e.length; d++) {
                var u = n.group({
                  class: "apexcharts-series apexcharts-pie-series",
                  seriesName: st.escapeString(i.globals.seriesNames[d]),
                  rel: d + 1,
                  "data:realIndex": d
                });
                o.add(u),
                  (l = h),
                  (c = (r = c) + e[d]),
                  (h = l + this.prevSectorAngleArr[d]);
                var g = c < r ? this.fullAngle + c - r : c - r,
                  p = s.fillPath({
                    seriesNumber: d,
                    size: this.sliceSizes[d],
                    value: t[d]
                  }),
                  f = this.getChangedPath(l, h),
                  m = n.drawPath({
                    d: f,
                    stroke: Array.isArray(this.lineColorArr)
                      ? this.lineColorArr[d]
                      : this.lineColorArr,
                    strokeWidth: 0,
                    fill: p,
                    fillOpacity: i.config.fill.opacity,
                    classes: "apexcharts-pie-area apexcharts-"
                      .concat(this.chartType.toLowerCase(), "-slice-")
                      .concat(d)
                  });
                if (
                  (m.attr({ index: 0, j: d }),
                  a.setSelectionFilter(m, 0, d),
                  i.config.chart.dropShadow.enabled)
                ) {
                  var x = i.config.chart.dropShadow;
                  a.dropShadow(m, x, d);
                }
                this.addListeners(m, this.donutDataLabels),
                  sn.setAttrs(m.node, {
                    "data:angle": g,
                    "data:startAngle": r,
                    "data:strokeWidth": this.strokeWidth,
                    "data:value": t[d]
                  });
                var b = { x: 0, y: 0 };
                "pie" === this.chartType || "polarArea" === this.chartType
                  ? (b = st.polarToCartesian(
                      this.centerX,
                      this.centerY,
                      i.globals.radialSize / 1.25 +
                        i.config.plotOptions.pie.dataLabels.offset,
                      (r + g / 2) % this.fullAngle
                    ))
                  : "donut" === this.chartType &&
                    (b = st.polarToCartesian(
                      this.centerX,
                      this.centerY,
                      (i.globals.radialSize + this.donutSize) / 2 +
                        i.config.plotOptions.pie.dataLabels.offset,
                      (r + g / 2) % this.fullAngle
                    )),
                  u.add(m);
                var v = 0;
                if (
                  (!this.initialAnim ||
                  i.globals.resized ||
                  i.globals.dataChanged
                    ? this.animBeginArr.push(0)
                    : (0 ==
                        (v =
                          (g / this.fullAngle) *
                          i.config.chart.animations.speed) && (v = 1),
                      (this.animDur = v + this.animDur),
                      this.animBeginArr.push(this.animDur)),
                  this.dynamicAnim && i.globals.dataChanged
                    ? this.animatePaths(m, {
                        size: this.sliceSizes[d],
                        endAngle: c,
                        startAngle: r,
                        prevStartAngle: l,
                        prevEndAngle: h,
                        animateStartingPos: !0,
                        i: d,
                        animBeginArr: this.animBeginArr,
                        shouldSetPrevPaths: !0,
                        dur: i.config.chart.animations.dynamicAnimation.speed
                      })
                    : this.animatePaths(m, {
                        size: this.sliceSizes[d],
                        endAngle: c,
                        startAngle: r,
                        i: d,
                        totalItems: e.length - 1,
                        animBeginArr: this.animBeginArr,
                        dur: v
                      }),
                  i.config.plotOptions.pie.expandOnClick &&
                    "polarArea" !== this.chartType &&
                    m.click(this.pieClicked.bind(this, d)),
                  void 0 !== i.globals.selectedDataPoints[0] &&
                    i.globals.selectedDataPoints[0].indexOf(d) > -1 &&
                    this.pieClicked(d),
                  i.config.dataLabels.enabled)
                ) {
                  var y = b.x,
                    w = b.y,
                    C = (100 * g) / this.fullAngle + "%";
                  if (
                    0 !== g &&
                    i.config.plotOptions.pie.dataLabels.minAngleToShowLabel <
                      e[d]
                  ) {
                    var k = i.config.dataLabels.formatter;
                    void 0 !== k &&
                      (C = k(i.globals.seriesPercent[d][0], {
                        seriesIndex: d,
                        w: i
                      }));
                    var A = i.globals.dataLabels.style.colors[d],
                      S = n.group({ class: "apexcharts-datalabels" }),
                      L = n.drawText({
                        x: y,
                        y: w,
                        text: C,
                        textAnchor: "middle",
                        fontSize: i.config.dataLabels.style.fontSize,
                        fontFamily: i.config.dataLabels.style.fontFamily,
                        fontWeight: i.config.dataLabels.style.fontWeight,
                        foreColor: A
                      });
                    if ((S.add(L), i.config.dataLabels.dropShadow.enabled)) {
                      var O = i.config.dataLabels.dropShadow;
                      a.dropShadow(L, O);
                    }
                    L.node.classList.add("apexcharts-pie-label"),
                      i.config.chart.animations.animate &&
                        !1 === i.globals.resized &&
                        (L.node.classList.add("apexcharts-pie-label-delay"),
                        (L.node.style.animationDelay =
                          i.config.chart.animations.speed / 940 + "s")),
                      this.sliceLabels.push(S);
                  }
                }
              }
              return o;
            }
          },
          {
            key: "addListeners",
            value: function (e, t) {
              var i = new sn(this.ctx);
              e.node.addEventListener(
                "mouseenter",
                i.pathMouseEnter.bind(this, e)
              ),
                e.node.addEventListener(
                  "mouseleave",
                  i.pathMouseLeave.bind(this, e)
                ),
                e.node.addEventListener(
                  "mouseleave",
                  this.revertDataLabelsInner.bind(this, e.node, t)
                ),
                e.node.addEventListener(
                  "mousedown",
                  i.pathMouseDown.bind(this, e)
                ),
                this.donutDataLabels.total.showAlways ||
                  (e.node.addEventListener(
                    "mouseenter",
                    this.printDataLabelsInner.bind(this, e.node, t)
                  ),
                  e.node.addEventListener(
                    "mousedown",
                    this.printDataLabelsInner.bind(this, e.node, t)
                  ));
            }
          },
          {
            key: "animatePaths",
            value: function (e, t) {
              var i = this.w,
                a =
                  t.endAngle < t.startAngle
                    ? this.fullAngle + t.endAngle - t.startAngle
                    : t.endAngle - t.startAngle,
                n = a,
                s = t.startAngle,
                o = t.startAngle;
              void 0 !== t.prevStartAngle &&
                void 0 !== t.prevEndAngle &&
                ((s = t.prevEndAngle),
                (n =
                  t.prevEndAngle < t.prevStartAngle
                    ? this.fullAngle + t.prevEndAngle - t.prevStartAngle
                    : t.prevEndAngle - t.prevStartAngle)),
                t.i === i.config.series.length - 1 &&
                  (a + o > this.fullAngle
                    ? (t.endAngle = t.endAngle - (a + o))
                    : a + o < this.fullAngle &&
                      (t.endAngle = t.endAngle + (this.fullAngle - (a + o)))),
                a === this.fullAngle && (a = this.fullAngle - 0.01),
                this.animateArc(e, s, o, a, n, t);
            }
          },
          {
            key: "animateArc",
            value: function (e, t, i, a, n, s) {
              var o,
                r = this,
                l = this.w,
                c = new si(this.ctx),
                h = s.size;
              (isNaN(t) || isNaN(n)) && ((t = i), (n = a), (s.dur = 0));
              var d = a,
                u = i,
                g = t < i ? this.fullAngle + t - i : t - i;
              l.globals.dataChanged &&
                s.shouldSetPrevPaths &&
                s.prevEndAngle &&
                ((o = r.getPiePath({
                  me: r,
                  startAngle: s.prevStartAngle,
                  angle:
                    s.prevEndAngle < s.prevStartAngle
                      ? this.fullAngle + s.prevEndAngle - s.prevStartAngle
                      : s.prevEndAngle - s.prevStartAngle,
                  size: h
                })),
                e.attr({ d: o })),
                0 !== s.dur
                  ? e
                      .animate(s.dur, l.globals.easing, s.animBeginArr[s.i])
                      .afterAll(function () {
                        ("pie" !== r.chartType &&
                          "donut" !== r.chartType &&
                          "polarArea" !== r.chartType) ||
                          this.animate(
                            l.config.chart.animations.dynamicAnimation.speed
                          ).attr({ "stroke-width": r.strokeWidth }),
                          s.i === l.config.series.length - 1 &&
                            c.animationCompleted(e);
                      })
                      .during(function (l) {
                        (d = g + (a - g) * l),
                          s.animateStartingPos &&
                            ((d = n + (a - n) * l),
                            (u = t - n + (i - (t - n)) * l)),
                          (o = r.getPiePath({
                            me: r,
                            startAngle: u,
                            angle: d,
                            size: h
                          })),
                          e.node.setAttribute("data:pathOrig", o),
                          e.attr({ d: o });
                      })
                  : ((o = r.getPiePath({
                      me: r,
                      startAngle: u,
                      angle: a,
                      size: h
                    })),
                    s.isTrack || (l.globals.animationEnded = !0),
                    e.node.setAttribute("data:pathOrig", o),
                    e.attr({ d: o, "stroke-width": r.strokeWidth }));
            }
          },
          {
            key: "pieClicked",
            value: function (e) {
              var t,
                i = this.w,
                a =
                  this.sliceSizes[e] +
                  (i.config.plotOptions.pie.expandOnClick ? 4 : 0),
                n = i.globals.dom.Paper.select(
                  ".apexcharts-"
                    .concat(this.chartType.toLowerCase(), "-slice-")
                    .concat(e)
                ).members[0];
              if ("true" !== n.attr("data:pieClicked")) {
                var s = i.globals.dom.baseEl.getElementsByClassName(
                  "apexcharts-pie-area"
                );
                Array.prototype.forEach.call(s, function (e) {
                  e.setAttribute("data:pieClicked", "false");
                  var t = e.getAttribute("data:pathOrig");
                  t && e.setAttribute("d", t);
                }),
                  n.attr("data:pieClicked", "true");
                var o = parseInt(n.attr("data:startAngle"), 10),
                  r = parseInt(n.attr("data:angle"), 10);
                (t = this.getPiePath({
                  me: this,
                  startAngle: o,
                  angle: r,
                  size: a
                })),
                  360 !== r && n.plot(t);
              } else {
                n.attr({ "data:pieClicked": "false" }),
                  this.revertDataLabelsInner(n.node, this.donutDataLabels);
                var l = n.attr("data:pathOrig");
                n.attr({ d: l });
              }
            }
          },
          {
            key: "getChangedPath",
            value: function (e, t) {
              var i = "";
              return (
                this.dynamicAnim &&
                  this.w.globals.dataChanged &&
                  (i = this.getPiePath({
                    me: this,
                    startAngle: e,
                    angle: t - e,
                    size: this.size
                  })),
                i
              );
            }
          },
          {
            key: "getPiePath",
            value: function (e) {
              var t = e.me,
                i = e.startAngle,
                a = e.angle,
                n = e.size,
                s = (Math.PI * (i - 90)) / 180,
                o = a + i;
              Math.ceil(o) >=
                this.fullAngle +
                  (this.w.config.plotOptions.pie.startAngle % this.fullAngle) &&
                (o =
                  this.fullAngle +
                  (this.w.config.plotOptions.pie.startAngle % this.fullAngle) -
                  0.01),
                Math.ceil(o) > this.fullAngle && (o -= this.fullAngle);
              var r = (Math.PI * (o - 90)) / 180,
                l = t.centerX + n * Math.cos(s),
                c = t.centerY + n * Math.sin(s),
                h = t.centerX + n * Math.cos(r),
                d = t.centerY + n * Math.sin(r),
                u = st.polarToCartesian(t.centerX, t.centerY, t.donutSize, o),
                g = st.polarToCartesian(t.centerX, t.centerY, t.donutSize, i),
                p = a > 180 ? 1 : 0,
                f = ["M", l, c, "A", n, n, 0, p, 1, h, d];
              return "donut" === t.chartType
                ? []
                    .concat(f, [
                      "L",
                      u.x,
                      u.y,
                      "A",
                      t.donutSize,
                      t.donutSize,
                      0,
                      p,
                      0,
                      g.x,
                      g.y,
                      "L",
                      l,
                      c,
                      "z"
                    ])
                    .join(" ")
                : "pie" === t.chartType || "polarArea" === t.chartType
                ? [].concat(f, ["L", t.centerX, t.centerY, "L", l, c]).join(" ")
                : [].concat(f).join(" ");
            }
          },
          {
            key: "drawPolarElements",
            value: function (e) {
              var t = this.w,
                i = new s_(this.ctx),
                a = new sn(this.ctx),
                n = new oe(this.ctx),
                s = a.group(),
                o = a.group(),
                r = i.niceScale(
                  0,
                  Math.ceil(this.maxY),
                  t.config.yaxis[0].tickAmount,
                  0,
                  !0
                ),
                l = r.result.reverse(),
                c = r.result.length;
              this.maxY = r.niceMax;
              for (
                var h = t.globals.radialSize, d = h / (c - 1), u = 0;
                u < c - 1;
                u++
              ) {
                var g = a.drawCircle(h);
                if (
                  (g.attr({
                    cx: this.centerX,
                    cy: this.centerY,
                    fill: "none",
                    "stroke-width":
                      t.config.plotOptions.polarArea.rings.strokeWidth,
                    stroke: t.config.plotOptions.polarArea.rings.strokeColor
                  }),
                  t.config.yaxis[0].show)
                ) {
                  var p = n.drawYAxisTexts(
                    this.centerX,
                    this.centerY -
                      h +
                      parseInt(t.config.yaxis[0].labels.style.fontSize, 10) / 2,
                    u,
                    l[u]
                  );
                  o.add(p);
                }
                s.add(g), (h -= d);
              }
              this.drawSpokes(e), e.add(s), e.add(o);
            }
          },
          {
            key: "renderInnerDataLabels",
            value: function (e, t) {
              var i = this.w,
                a = new sn(this.ctx),
                n = a.group({
                  class: "apexcharts-datalabels-group",
                  transform: "translate("
                    .concat(t.translateX ? t.translateX : 0, ", ")
                    .concat(t.translateY ? t.translateY : 0, ") scale(")
                    .concat(i.config.plotOptions.pie.customScale, ")")
                }),
                s = e.total.show;
              n.node.style.opacity = t.opacity;
              var o,
                r,
                l = t.centerX,
                c = t.centerY;
              o = void 0 === e.name.color ? i.globals.colors[0] : e.name.color;
              var h = e.name.fontSize,
                d = e.name.fontFamily,
                u = e.name.fontWeight;
              r =
                void 0 === e.value.color
                  ? i.config.chart.foreColor
                  : e.value.color;
              var g = e.value.formatter,
                p = "",
                f = "";
              if (
                (s
                  ? ((o = e.total.color),
                    (h = e.total.fontSize),
                    (d = e.total.fontFamily),
                    (u = e.total.fontWeight),
                    (f = e.total.label),
                    (p = e.total.formatter(i)))
                  : 1 === i.globals.series.length &&
                    ((p = g(i.globals.series[0], i)),
                    (f = i.globals.seriesNames[0])),
                f && (f = e.name.formatter(f, e.total.show, i)),
                e.name.show)
              ) {
                var m = a.drawText({
                  x: l,
                  y: c + parseFloat(e.name.offsetY),
                  text: f,
                  textAnchor: "middle",
                  foreColor: o,
                  fontSize: h,
                  fontWeight: u,
                  fontFamily: d
                });
                m.node.classList.add("apexcharts-datalabel-label"), n.add(m);
              }
              if (e.value.show) {
                var x = e.name.show
                    ? parseFloat(e.value.offsetY) + 16
                    : e.value.offsetY,
                  b = a.drawText({
                    x: l,
                    y: c + x,
                    text: p,
                    textAnchor: "middle",
                    foreColor: r,
                    fontWeight: e.value.fontWeight,
                    fontSize: e.value.fontSize,
                    fontFamily: e.value.fontFamily
                  });
                b.node.classList.add("apexcharts-datalabel-value"), n.add(b);
              }
              return n;
            }
          },
          {
            key: "printInnerLabels",
            value: function (e, t, i, a) {
              var n,
                s = this.w;
              a
                ? (n =
                    void 0 === e.name.color
                      ? s.globals.colors[
                          parseInt(a.parentNode.getAttribute("rel"), 10) - 1
                        ]
                      : e.name.color)
                : s.globals.series.length > 1 &&
                  e.total.show &&
                  (n = e.total.color);
              var o = s.globals.dom.baseEl.querySelector(
                  ".apexcharts-datalabel-label"
                ),
                r = s.globals.dom.baseEl.querySelector(
                  ".apexcharts-datalabel-value"
                );
              (i = (0, e.value.formatter)(i, s)),
                a ||
                  "function" != typeof e.total.formatter ||
                  (i = e.total.formatter(s));
              var l = t === e.total.label;
              (t = e.name.formatter(t, l, s)),
                null !== o && (o.textContent = t),
                null !== r && (r.textContent = i),
                null !== o && (o.style.fill = n);
            }
          },
          {
            key: "printDataLabelsInner",
            value: function (e, t) {
              var i = this.w,
                a = e.getAttribute("data:value"),
                n =
                  i.globals.seriesNames[
                    parseInt(e.parentNode.getAttribute("rel"), 10) - 1
                  ];
              i.globals.series.length > 1 && this.printInnerLabels(t, n, a, e);
              var s = i.globals.dom.baseEl.querySelector(
                ".apexcharts-datalabels-group"
              );
              null !== s && (s.style.opacity = 1);
            }
          },
          {
            key: "drawSpokes",
            value: function (e) {
              var t = this,
                i = this.w,
                a = new sn(this.ctx),
                n = i.config.plotOptions.polarArea.spokes;
              if (0 !== n.strokeWidth) {
                for (
                  var s = [], o = 360 / i.globals.series.length, r = 0;
                  r < i.globals.series.length;
                  r++
                )
                  s.push(
                    st.polarToCartesian(
                      this.centerX,
                      this.centerY,
                      i.globals.radialSize,
                      i.config.plotOptions.pie.startAngle + o * r
                    )
                  );
                s.forEach(function (i, s) {
                  var o = a.drawLine(
                    i.x,
                    i.y,
                    t.centerX,
                    t.centerY,
                    Array.isArray(n.connectorColors)
                      ? n.connectorColors[s]
                      : n.connectorColors
                  );
                  e.add(o);
                });
              }
            }
          },
          {
            key: "revertDataLabelsInner",
            value: function (e, t, i) {
              var a = this,
                n = this.w,
                s = n.globals.dom.baseEl.querySelector(
                  ".apexcharts-datalabels-group"
                ),
                o = !1,
                r = n.globals.dom.baseEl.getElementsByClassName(
                  "apexcharts-pie-area"
                ),
                l = function (e) {
                  var i = e.makeSliceOut,
                    n = e.printLabel;
                  Array.prototype.forEach.call(r, function (e) {
                    "true" === e.getAttribute("data:pieClicked") &&
                      (i && (o = !0), n && a.printDataLabelsInner(e, t));
                  });
                };
              if (
                (l({ makeSliceOut: !0, printLabel: !1 }),
                t.total.show && n.globals.series.length > 1)
              )
                o && !t.total.showAlways
                  ? l({ makeSliceOut: !1, printLabel: !0 })
                  : this.printInnerLabels(
                      t,
                      t.total.label,
                      t.total.formatter(n)
                    );
              else if ((l({ makeSliceOut: !1, printLabel: !0 }), !o)) {
                if (
                  n.globals.selectedDataPoints.length &&
                  n.globals.series.length > 1
                ) {
                  if (n.globals.selectedDataPoints[0].length > 0) {
                    var c = n.globals.selectedDataPoints[0],
                      h = n.globals.dom.baseEl.querySelector(
                        ".apexcharts-"
                          .concat(this.chartType.toLowerCase(), "-slice-")
                          .concat(c)
                      );
                    this.printDataLabelsInner(h, t);
                  } else
                    s &&
                      n.globals.selectedDataPoints.length &&
                      0 === n.globals.selectedDataPoints[0].length &&
                      (s.style.opacity = 0);
                } else
                  s && n.globals.series.length > 1 && (s.style.opacity = 0);
              }
            }
          }
        ]),
        e
      );
    })(),
    oi = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.chartType = this.w.config.chart.type),
          (this.initialAnim = this.w.config.chart.animations.enabled),
          (this.dynamicAnim =
            this.initialAnim &&
            this.w.config.chart.animations.dynamicAnimation.enabled),
          (this.animDur = 0);
        var i = this.w;
        (this.graphics = new sn(this.ctx)),
          (this.lineColorArr =
            void 0 !== i.globals.stroke.colors
              ? i.globals.stroke.colors
              : i.globals.colors),
          (this.defaultSize =
            i.globals.svgHeight < i.globals.svgWidth
              ? i.globals.gridHeight + 1.5 * i.globals.goldenPadding
              : i.globals.gridWidth),
          (this.isLog = i.config.yaxis[0].logarithmic),
          (this.coreUtils = new ss(this.ctx)),
          (this.maxValue = this.isLog
            ? this.coreUtils.getLogVal(i.globals.maxY, 0)
            : i.globals.maxY),
          (this.minValue = this.isLog
            ? this.coreUtils.getLogVal(this.w.globals.minY, 0)
            : i.globals.minY),
          (this.polygons = i.config.plotOptions.radar.polygons),
          (this.strokeWidth = i.config.stroke.show ? i.config.stroke.width : 0),
          (this.size =
            this.defaultSize / 2.1 -
            this.strokeWidth -
            i.config.chart.dropShadow.blur),
          i.config.xaxis.labels.show &&
            (this.size = this.size - i.globals.xAxisLabelsWidth / 1.75),
          void 0 !== i.config.plotOptions.radar.size &&
            (this.size = i.config.plotOptions.radar.size),
          (this.dataRadiusOfPercent = []),
          (this.dataRadius = []),
          (this.angleArr = []),
          (this.yaxisLabelsTextsPos = []);
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function (e) {
              var t = this,
                i = this.w,
                a = new sw(this.ctx),
                n = [],
                s = new sA(this.ctx);
              e.length &&
                (this.dataPointsLen = e[i.globals.maxValsInArrayIndex].length),
                (this.disAngle = (2 * Math.PI) / this.dataPointsLen);
              var o = i.globals.gridWidth / 2,
                r = i.globals.gridHeight / 2,
                l = o + i.config.plotOptions.radar.offsetX,
                c = r + i.config.plotOptions.radar.offsetY,
                h = this.graphics.group({
                  class: "apexcharts-radar-series apexcharts-plot-series",
                  transform: "translate("
                    .concat(l || 0, ", ")
                    .concat(c || 0, ")")
                }),
                d = [],
                u = null,
                g = null;
              if (
                ((this.yaxisLabels = this.graphics.group({
                  class: "apexcharts-yaxis"
                })),
                e.forEach(function (e, o) {
                  var r = e.length === i.globals.dataPoints,
                    l = t.graphics
                      .group()
                      .attr({
                        class: "apexcharts-series",
                        "data:longestSeries": r,
                        seriesName: st.escapeString(i.globals.seriesNames[o]),
                        rel: o + 1,
                        "data:realIndex": o
                      });
                  (t.dataRadiusOfPercent[o] = []),
                    (t.dataRadius[o] = []),
                    (t.angleArr[o] = []),
                    e.forEach(function (e, i) {
                      var a = Math.abs(t.maxValue - t.minValue);
                      (e += Math.abs(t.minValue)),
                        t.isLog && (e = t.coreUtils.getLogVal(e, 0)),
                        (t.dataRadiusOfPercent[o][i] = e / a),
                        (t.dataRadius[o][i] =
                          t.dataRadiusOfPercent[o][i] * t.size),
                        (t.angleArr[o][i] = i * t.disAngle);
                    }),
                    (d = t.getDataPointsPos(t.dataRadius[o], t.angleArr[o]));
                  var c = t.createPaths(d, { x: 0, y: 0 });
                  (u = t.graphics.group({
                    class:
                      "apexcharts-series-markers-wrap apexcharts-element-hidden"
                  })),
                    (g = t.graphics.group({
                      class: "apexcharts-datalabels",
                      "data:realIndex": o
                    })),
                    i.globals.delayedElements.push({ el: u.node, index: o });
                  var h = {
                      i: o,
                      realIndex: o,
                      animationDelay: o,
                      initialSpeed: i.config.chart.animations.speed,
                      dataChangeSpeed:
                        i.config.chart.animations.dynamicAnimation.speed,
                      className: "apexcharts-radar",
                      shouldClipToGrid: !1,
                      bindEventsOnPaths: !1,
                      stroke: i.globals.stroke.colors[o],
                      strokeLineCap: i.config.stroke.lineCap
                    },
                    p = null;
                  i.globals.previousPaths.length > 0 &&
                    (p = t.getPreviousPath(o));
                  for (var f = 0; f < c.linePathsTo.length; f++) {
                    var m = t.graphics.renderPaths(
                      nJ(
                        nJ({}, h),
                        {},
                        {
                          pathFrom: null === p ? c.linePathsFrom[f] : p,
                          pathTo: c.linePathsTo[f],
                          strokeWidth: Array.isArray(t.strokeWidth)
                            ? t.strokeWidth[o]
                            : t.strokeWidth,
                          fill: "none",
                          drawShadow: !1
                        }
                      )
                    );
                    l.add(m);
                    var x = a.fillPath({ seriesNumber: o }),
                      b = t.graphics.renderPaths(
                        nJ(
                          nJ({}, h),
                          {},
                          {
                            pathFrom: null === p ? c.areaPathsFrom[f] : p,
                            pathTo: c.areaPathsTo[f],
                            strokeWidth: 0,
                            fill: x,
                            drawShadow: !1
                          }
                        )
                      );
                    if (i.config.chart.dropShadow.enabled) {
                      var v = new sa(t.ctx),
                        y = i.config.chart.dropShadow;
                      v.dropShadow(
                        b,
                        Object.assign({}, y, { noUserSpaceOnUse: !0 }),
                        o
                      );
                    }
                    l.add(b);
                  }
                  e.forEach(function (e, a) {
                    var n = new sC(t.ctx).getMarkerConfig({
                        cssClass: "apexcharts-marker",
                        seriesIndex: o,
                        dataPointIndex: a
                      }),
                      r = t.graphics.drawMarker(d[a].x, d[a].y, n);
                    r.attr("rel", a),
                      r.attr("j", a),
                      r.attr("index", o),
                      r.node.setAttribute("default-marker-size", n.pSize);
                    var c = t.graphics.group({
                      class: "apexcharts-series-markers"
                    });
                    c && c.add(r), u.add(c), l.add(u);
                    var h = i.config.dataLabels;
                    if (h.enabled) {
                      var p = h.formatter(i.globals.series[o][a], {
                        seriesIndex: o,
                        dataPointIndex: a,
                        w: i
                      });
                      s.plotDataLabelsText({
                        x: d[a].x,
                        y: d[a].y,
                        text: p,
                        textAnchor: "middle",
                        i: o,
                        j: o,
                        parent: g,
                        offsetCorrection: !1,
                        dataLabelsConfig: nJ({}, h)
                      });
                    }
                    l.add(g);
                  }),
                    n.push(l);
                }),
                this.drawPolygons({ parent: h }),
                i.config.xaxis.labels.show)
              ) {
                var p = this.drawXAxisTexts();
                h.add(p);
              }
              return (
                n.forEach(function (e) {
                  h.add(e);
                }),
                h.add(this.yaxisLabels),
                h
              );
            }
          },
          {
            key: "drawPolygons",
            value: function (e) {
              for (
                var t = this,
                  i = this.w,
                  a = e.parent,
                  n = new oe(this.ctx),
                  s = i.globals.yAxisScale[0].result.reverse(),
                  o = s.length,
                  r = [],
                  l = this.size / (o - 1),
                  c = 0;
                c < o;
                c++
              )
                r[c] = l * c;
              r.reverse();
              var h = [],
                d = [];
              r.forEach(function (e, i) {
                var a = st.getPolygonPos(e, t.dataPointsLen),
                  n = "";
                a.forEach(function (e, a) {
                  if (0 === i) {
                    var s = t.graphics.drawLine(
                      e.x,
                      e.y,
                      0,
                      0,
                      Array.isArray(t.polygons.connectorColors)
                        ? t.polygons.connectorColors[a]
                        : t.polygons.connectorColors
                    );
                    d.push(s);
                  }
                  0 === a && t.yaxisLabelsTextsPos.push({ x: e.x, y: e.y }),
                    (n += e.x + "," + e.y + " ");
                }),
                  h.push(n);
              }),
                h.forEach(function (e, n) {
                  var s = t.polygons.strokeColors,
                    o = t.polygons.strokeWidth,
                    r = t.graphics.drawPolygon(
                      e,
                      Array.isArray(s) ? s[n] : s,
                      Array.isArray(o) ? o[n] : o,
                      i.globals.radarPolygons.fill.colors[n]
                    );
                  a.add(r);
                }),
                d.forEach(function (e) {
                  a.add(e);
                }),
                i.config.yaxis[0].show &&
                  this.yaxisLabelsTextsPos.forEach(function (e, i) {
                    var a = n.drawYAxisTexts(e.x, e.y, i, s[i]);
                    t.yaxisLabels.add(a);
                  });
            }
          },
          {
            key: "drawXAxisTexts",
            value: function () {
              var e = this,
                t = this.w,
                i = t.config.xaxis.labels,
                a = this.graphics.group({ class: "apexcharts-xaxis" }),
                n = st.getPolygonPos(this.size, this.dataPointsLen);
              return (
                t.globals.labels.forEach(function (s, o) {
                  var r = t.config.xaxis.labels.formatter,
                    l = new sA(e.ctx);
                  if (n[o]) {
                    var c = e.getTextPos(n[o], e.size),
                      h = r(s, { seriesIndex: -1, dataPointIndex: o, w: t });
                    l.plotDataLabelsText({
                      x: c.newX,
                      y: c.newY,
                      text: h,
                      textAnchor: c.textAnchor,
                      i: o,
                      j: o,
                      parent: a,
                      color:
                        Array.isArray(i.style.colors) && i.style.colors[o]
                          ? i.style.colors[o]
                          : "#a8a8a8",
                      dataLabelsConfig: nJ(
                        {
                          textAnchor: c.textAnchor,
                          dropShadow: { enabled: !1 }
                        },
                        i
                      ),
                      offsetCorrection: !1
                    });
                  }
                }),
                a
              );
            }
          },
          {
            key: "createPaths",
            value: function (e, t) {
              var i = this,
                a = [],
                n = [],
                s = [],
                o = [];
              if (e.length) {
                (n = [this.graphics.move(t.x, t.y)]),
                  (o = [this.graphics.move(t.x, t.y)]);
                var r = this.graphics.move(e[0].x, e[0].y),
                  l = this.graphics.move(e[0].x, e[0].y);
                e.forEach(function (t, a) {
                  (r += i.graphics.line(t.x, t.y)),
                    (l += i.graphics.line(t.x, t.y)),
                    a === e.length - 1 && ((r += "Z"), (l += "Z"));
                }),
                  a.push(r),
                  s.push(l);
              }
              return {
                linePathsFrom: n,
                linePathsTo: a,
                areaPathsFrom: o,
                areaPathsTo: s
              };
            }
          },
          {
            key: "getTextPos",
            value: function (e, t) {
              var i = "middle",
                a = e.x,
                n = e.y;
              return (
                Math.abs(e.x) >= 10
                  ? e.x > 0
                    ? ((i = "start"), (a += 10))
                    : e.x < 0 && ((i = "end"), (a -= 10))
                  : (i = "middle"),
                Math.abs(e.y) >= t - 10 &&
                  (e.y < 0 ? (n -= 10) : e.y > 0 && (n += 10)),
                { textAnchor: i, newX: a, newY: n }
              );
            }
          },
          {
            key: "getPreviousPath",
            value: function (e) {
              for (
                var t = this.w, i = null, a = 0;
                a < t.globals.previousPaths.length;
                a++
              ) {
                var n = t.globals.previousPaths[a];
                n.paths.length > 0 &&
                  parseInt(n.realIndex, 10) === parseInt(e, 10) &&
                  void 0 !== t.globals.previousPaths[a].paths[0] &&
                  (i = t.globals.previousPaths[a].paths[0].d);
              }
              return i;
            }
          },
          {
            key: "getDataPointsPos",
            value: function (e, t) {
              var i =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : this.dataPointsLen;
              (e = e || []), (t = t || []);
              for (var a = [], n = 0; n < i; n++) {
                var s = {};
                (s.x = e[n] * Math.sin(t[n])),
                  (s.y = -e[n] * Math.cos(t[n])),
                  a.push(s);
              }
              return a;
            }
          }
        ]),
        e
      );
    })(),
    oa = (function (e) {
      n4(i, ot);
      var t = n6(i);
      function i(e) {
        nQ(this, i),
          ((a = t.call(this, e)).ctx = e),
          (a.w = e.w),
          (a.animBeginArr = [0]),
          (a.animDur = 0);
        var a,
          n = a.w;
        return (
          (a.startAngle = n.config.plotOptions.radialBar.startAngle),
          (a.endAngle = n.config.plotOptions.radialBar.endAngle),
          (a.totalAngle = Math.abs(
            n.config.plotOptions.radialBar.endAngle -
              n.config.plotOptions.radialBar.startAngle
          )),
          (a.trackStartAngle = n.config.plotOptions.radialBar.track.startAngle),
          (a.trackEndAngle = n.config.plotOptions.radialBar.track.endAngle),
          (a.donutDataLabels = a.w.config.plotOptions.radialBar.dataLabels),
          (a.radialDataLabels = a.donutDataLabels),
          a.trackStartAngle || (a.trackStartAngle = a.startAngle),
          a.trackEndAngle || (a.trackEndAngle = a.endAngle),
          360 === a.endAngle && (a.endAngle = 359.99),
          (a.margin = parseInt(
            n.config.plotOptions.radialBar.track.margin,
            10
          )),
          a
        );
      }
      return (
        n1(i, [
          {
            key: "draw",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = i.group({ class: "apexcharts-radialbar" });
              if (t.globals.noData) return a;
              var n = i.group(),
                s = this.defaultSize / 2,
                o = t.globals.gridWidth / 2,
                r = this.defaultSize / 2.05;
              t.config.chart.sparkline.enabled ||
                (r =
                  r - t.config.stroke.width - t.config.chart.dropShadow.blur);
              var l = t.globals.fill.colors;
              if (t.config.plotOptions.radialBar.track.show) {
                var c = this.drawTracks({
                  size: r,
                  centerX: o,
                  centerY: s,
                  colorArr: l,
                  series: e
                });
                n.add(c);
              }
              var h = this.drawArcs({
                  size: r,
                  centerX: o,
                  centerY: s,
                  colorArr: l,
                  series: e
                }),
                d = 360;
              t.config.plotOptions.radialBar.startAngle < 0 &&
                (d = this.totalAngle);
              var u = (360 - d) / 360;
              if (
                ((t.globals.radialSize = r - r * u),
                this.radialDataLabels.value.show)
              ) {
                var g = Math.max(
                  this.radialDataLabels.value.offsetY,
                  this.radialDataLabels.name.offsetY
                );
                t.globals.radialSize += g * u;
              }
              return (
                n.add(h.g),
                "front" === t.config.plotOptions.radialBar.hollow.position &&
                  (h.g.add(h.elHollow), h.dataLabels && h.g.add(h.dataLabels)),
                a.add(n),
                a
              );
            }
          },
          {
            key: "drawTracks",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = i.group({ class: "apexcharts-tracks" }),
                n = new sa(this.ctx),
                s = new sw(this.ctx),
                o = this.getStrokeWidth(e);
              e.size = e.size - o / 2;
              for (var r = 0; r < e.series.length; r++) {
                var l = i.group({
                  class: "apexcharts-radialbar-track apexcharts-track"
                });
                a.add(l),
                  l.attr({ rel: r + 1 }),
                  (e.size = e.size - o - this.margin);
                var c = t.config.plotOptions.radialBar.track,
                  h = s.fillPath({
                    seriesNumber: 0,
                    size: e.size,
                    fillColors: Array.isArray(c.background)
                      ? c.background[r]
                      : c.background,
                    solid: !0
                  }),
                  d = this.trackStartAngle,
                  u = this.trackEndAngle;
                Math.abs(u) + Math.abs(d) >= 360 &&
                  (u = 360 - Math.abs(this.startAngle) - 0.1);
                var g = i.drawPath({
                  d: "",
                  stroke: h,
                  strokeWidth: (o * parseInt(c.strokeWidth, 10)) / 100,
                  fill: "none",
                  strokeOpacity: c.opacity,
                  classes: "apexcharts-radialbar-area"
                });
                if (c.dropShadow.enabled) {
                  var p = c.dropShadow;
                  n.dropShadow(g, p);
                }
                l.add(g),
                  g.attr("id", "apexcharts-radialbarTrack-" + r),
                  this.animatePaths(g, {
                    centerX: e.centerX,
                    centerY: e.centerY,
                    endAngle: u,
                    startAngle: d,
                    size: e.size,
                    i: r,
                    totalItems: 2,
                    animBeginArr: 0,
                    dur: 0,
                    isTrack: !0,
                    easing: t.globals.easing
                  });
              }
              return a;
            }
          },
          {
            key: "drawArcs",
            value: function (e) {
              var t = this.w,
                i = new sn(this.ctx),
                a = new sw(this.ctx),
                n = new sa(this.ctx),
                s = i.group(),
                o = this.getStrokeWidth(e);
              e.size = e.size - o / 2;
              var r = t.config.plotOptions.radialBar.hollow.background,
                l =
                  e.size -
                  o * e.series.length -
                  this.margin * e.series.length -
                  (o *
                    parseInt(
                      t.config.plotOptions.radialBar.track.strokeWidth,
                      10
                    )) /
                    100 /
                    2,
                c = l - t.config.plotOptions.radialBar.hollow.margin;
              void 0 !== t.config.plotOptions.radialBar.hollow.image &&
                (r = this.drawHollowImage(e, s, l, r));
              var h = this.drawHollow({
                size: c,
                centerX: e.centerX,
                centerY: e.centerY,
                fill: r || "transparent"
              });
              if (t.config.plotOptions.radialBar.hollow.dropShadow.enabled) {
                var d = t.config.plotOptions.radialBar.hollow.dropShadow;
                n.dropShadow(h, d);
              }
              var u = 1;
              !this.radialDataLabels.total.show &&
                t.globals.series.length > 1 &&
                (u = 0);
              var g = null;
              this.radialDataLabels.show &&
                (g = this.renderInnerDataLabels(this.radialDataLabels, {
                  hollowSize: l,
                  centerX: e.centerX,
                  centerY: e.centerY,
                  opacity: u
                })),
                "back" === t.config.plotOptions.radialBar.hollow.position &&
                  (s.add(h), g && s.add(g));
              var p = !1;
              t.config.plotOptions.radialBar.inverseOrder && (p = !0);
              for (
                var f = p ? e.series.length - 1 : 0;
                p ? f >= 0 : f < e.series.length;
                p ? f-- : f++
              ) {
                var m = i.group({
                  class: "apexcharts-series apexcharts-radial-series",
                  seriesName: st.escapeString(t.globals.seriesNames[f])
                });
                s.add(m),
                  m.attr({ rel: f + 1, "data:realIndex": f }),
                  this.ctx.series.addCollapsedClassToSeries(m, f),
                  (e.size = e.size - o - this.margin);
                var x = a.fillPath({
                    seriesNumber: f,
                    size: e.size,
                    value: e.series[f]
                  }),
                  b = this.startAngle,
                  v = void 0,
                  y = st.negToZero(e.series[f] > 100 ? 100 : e.series[f]) / 100,
                  w = Math.round(this.totalAngle * y) + this.startAngle,
                  C = void 0;
                t.globals.dataChanged &&
                  ((v = this.startAngle),
                  (C =
                    Math.round(
                      (this.totalAngle *
                        st.negToZero(t.globals.previousPaths[f])) /
                        100
                    ) + v)),
                  Math.abs(w) + Math.abs(b) >= 360 && (w -= 0.01),
                  Math.abs(C) + Math.abs(v) >= 360 && (C -= 0.01);
                var k = w - b,
                  A = Array.isArray(t.config.stroke.dashArray)
                    ? t.config.stroke.dashArray[f]
                    : t.config.stroke.dashArray,
                  S = i.drawPath({
                    d: "",
                    stroke: x,
                    strokeWidth: o,
                    fill: "none",
                    fillOpacity: t.config.fill.opacity,
                    classes:
                      "apexcharts-radialbar-area apexcharts-radialbar-slice-" +
                      f,
                    strokeDashArray: A
                  });
                if (
                  (sn.setAttrs(S.node, {
                    "data:angle": k,
                    "data:value": e.series[f]
                  }),
                  t.config.chart.dropShadow.enabled)
                ) {
                  var L = t.config.chart.dropShadow;
                  n.dropShadow(S, L, f);
                }
                n.setSelectionFilter(S, 0, f),
                  this.addListeners(S, this.radialDataLabels),
                  m.add(S),
                  S.attr({ index: 0, j: f });
                var O = 0;
                !this.initialAnim ||
                  t.globals.resized ||
                  t.globals.dataChanged ||
                  (O = t.config.chart.animations.speed),
                  t.globals.dataChanged &&
                    (O = t.config.chart.animations.dynamicAnimation.speed),
                  (this.animDur = O / (1.2 * e.series.length) + this.animDur),
                  this.animBeginArr.push(this.animDur),
                  this.animatePaths(S, {
                    centerX: e.centerX,
                    centerY: e.centerY,
                    endAngle: w,
                    startAngle: b,
                    prevEndAngle: C,
                    prevStartAngle: v,
                    size: e.size,
                    i: f,
                    totalItems: 2,
                    animBeginArr: this.animBeginArr,
                    dur: O,
                    shouldSetPrevPaths: !0,
                    easing: t.globals.easing
                  });
              }
              return { g: s, elHollow: h, dataLabels: g };
            }
          },
          {
            key: "drawHollow",
            value: function (e) {
              var t = new sn(this.ctx).drawCircle(2 * e.size);
              return (
                t.attr({
                  class: "apexcharts-radialbar-hollow",
                  cx: e.centerX,
                  cy: e.centerY,
                  r: e.size,
                  fill: e.fill
                }),
                t
              );
            }
          },
          {
            key: "drawHollowImage",
            value: function (e, t, i, a) {
              var n = this.w,
                s = new sw(this.ctx),
                o = st.randomId(),
                r = n.config.plotOptions.radialBar.hollow.image;
              if (n.config.plotOptions.radialBar.hollow.imageClipped)
                s.clippedImgArea({
                  width: i,
                  height: i,
                  image: r,
                  patternID: "pattern".concat(n.globals.cuid).concat(o)
                }),
                  (a = "url(#pattern".concat(n.globals.cuid).concat(o, ")"));
              else {
                var l = n.config.plotOptions.radialBar.hollow.imageWidth,
                  c = n.config.plotOptions.radialBar.hollow.imageHeight;
                if (void 0 === l && void 0 === c) {
                  var h = n.globals.dom.Paper.image(r).loaded(function (t) {
                    this.move(
                      e.centerX -
                        t.width / 2 +
                        n.config.plotOptions.radialBar.hollow.imageOffsetX,
                      e.centerY -
                        t.height / 2 +
                        n.config.plotOptions.radialBar.hollow.imageOffsetY
                    );
                  });
                  t.add(h);
                } else {
                  var d = n.globals.dom.Paper.image(r).loaded(function (t) {
                    this.move(
                      e.centerX -
                        l / 2 +
                        n.config.plotOptions.radialBar.hollow.imageOffsetX,
                      e.centerY -
                        c / 2 +
                        n.config.plotOptions.radialBar.hollow.imageOffsetY
                    ),
                      this.size(l, c);
                  });
                  t.add(d);
                }
              }
              return a;
            }
          },
          {
            key: "getStrokeWidth",
            value: function (e) {
              var t = this.w;
              return (
                (e.size *
                  (100 -
                    parseInt(t.config.plotOptions.radialBar.hollow.size, 10))) /
                  100 /
                  (e.series.length + 1) -
                this.margin
              );
            }
          }
        ]),
        i
      );
    })(),
    on = (function (e) {
      n4(i, s5);
      var t = n6(i);
      function i() {
        return nQ(this, i), t.apply(this, arguments);
      }
      return (
        n1(i, [
          {
            key: "draw",
            value: function (e, t) {
              var i = this.w,
                a = new sn(this.ctx);
              (this.rangeBarOptions = this.w.config.plotOptions.rangeBar),
                (this.series = e),
                (this.seriesRangeStart = i.globals.seriesRangeStart),
                (this.seriesRangeEnd = i.globals.seriesRangeEnd),
                this.barHelpers.initVariables(e);
              for (
                var n = a.group({
                    class: "apexcharts-rangebar-series apexcharts-plot-series"
                  }),
                  s = 0;
                s < e.length;
                s++
              ) {
                var o,
                  r,
                  l,
                  c,
                  h = void 0,
                  d = void 0,
                  u = i.globals.comboCharts ? t[s] : s,
                  g = a.group({
                    class: "apexcharts-series",
                    seriesName: st.escapeString(i.globals.seriesNames[u]),
                    rel: s + 1,
                    "data:realIndex": u
                  });
                this.ctx.series.addCollapsedClassToSeries(g, u),
                  e[s].length > 0 && (this.visibleI = this.visibleI + 1);
                var p = 0,
                  f = 0;
                this.yRatio.length > 1 && (this.yaxisIndex = u);
                var m = this.barHelpers.initialPositions();
                (d = m.y),
                  (c = m.zeroW),
                  (h = m.x),
                  (f = m.barWidth),
                  (p = m.barHeight),
                  (o = m.xDivision),
                  (r = m.yDivision),
                  (l = m.zeroH);
                for (
                  var x = a.group({
                      class: "apexcharts-datalabels",
                      "data:realIndex": u
                    }),
                    b = a.group({ class: "apexcharts-rangebar-goals-markers" }),
                    v = 0;
                  v < i.globals.dataPoints;
                  v++
                ) {
                  var y,
                    w = this.barHelpers.getStrokeWidth(s, v, u),
                    C = this.seriesRangeStart[s][v],
                    k = this.seriesRangeEnd[s][v],
                    A = null,
                    S = null,
                    L = null,
                    O = { x: h, y: d, strokeWidth: w, elSeries: g },
                    T = this.seriesLen;
                  if (
                    (i.config.plotOptions.bar.rangeBarGroupRows && (T = 1),
                    void 0 === i.config.series[s].data[v])
                  )
                    break;
                  if (this.isHorizontal) {
                    L = d + p * this.visibleI;
                    var P = (r - p * T) / 2;
                    if (i.config.series[s].data[v].x) {
                      var M = this.detectOverlappingBars({
                        i: s,
                        j: v,
                        barYPosition: L,
                        srty: P,
                        barHeight: p,
                        yDivision: r,
                        initPositions: m
                      });
                      (p = M.barHeight), (L = M.barYPosition);
                    }
                    f = (A = this.drawRangeBarPaths(
                      nJ(
                        {
                          indexes: { i: s, j: v, realIndex: u },
                          barHeight: p,
                          barYPosition: L,
                          zeroW: c,
                          yDivision: r,
                          y1: C,
                          y2: k
                        },
                        O
                      )
                    )).barWidth;
                  } else {
                    i.globals.isXNumeric &&
                      (h =
                        (i.globals.seriesX[s][v] - i.globals.minX) /
                          this.xRatio -
                        f / 2),
                      (S = h + f * this.visibleI);
                    var _ = (o - f * T) / 2;
                    if (i.config.series[s].data[v].x) {
                      var D = this.detectOverlappingBars({
                        i: s,
                        j: v,
                        barXPosition: S,
                        srtx: _,
                        barWidth: f,
                        xDivision: o,
                        initPositions: m
                      });
                      (f = D.barWidth), (S = D.barXPosition);
                    }
                    p = (A = this.drawRangeColumnPaths(
                      nJ(
                        {
                          indexes: { i: s, j: v, realIndex: u },
                          barWidth: f,
                          barXPosition: S,
                          zeroH: l,
                          xDivision: o
                        },
                        O
                      )
                    )).barHeight;
                  }
                  var E = this.barHelpers.drawGoalLine({
                    barXPosition: A.barXPosition,
                    barYPosition: L,
                    goalX: A.goalX,
                    goalY: A.goalY,
                    barHeight: p,
                    barWidth: f
                  });
                  E && b.add(E), (d = A.y), (h = A.x);
                  var I = this.barHelpers.getPathFillColor(e, s, v, u),
                    H = i.globals.stroke.colors[u];
                  this.renderSeries(
                    (n2(
                      (y = {
                        realIndex: u,
                        pathFill: I,
                        lineFill: H,
                        j: v,
                        i: s,
                        x: h,
                        y: d,
                        y1: C,
                        y2: k,
                        pathFrom: A.pathFrom,
                        pathTo: A.pathTo,
                        strokeWidth: w,
                        elSeries: g,
                        series: e,
                        barHeight: p,
                        barWidth: f,
                        barXPosition: S,
                        barYPosition: L
                      }),
                      "barWidth",
                      f
                    ),
                    n2(y, "elDataLabelsWrap", x),
                    n2(y, "elGoalsMarkers", b),
                    n2(y, "visibleSeries", this.visibleI),
                    n2(y, "type", "rangebar"),
                    y)
                  );
                }
                n.add(g);
              }
              return n;
            }
          },
          {
            key: "detectOverlappingBars",
            value: function (e) {
              var t = e.i,
                i = e.j,
                a = e.barYPosition,
                n = e.barXPosition,
                s = e.srty,
                o = e.srtx,
                r = e.barHeight,
                l = e.barWidth,
                c = e.yDivision,
                h = e.xDivision,
                d = e.initPositions,
                u = this.w,
                g = [],
                p = u.config.series[t].data[i].rangeName,
                f = u.config.series[t].data[i].x,
                m = Array.isArray(f) ? f.join(" ") : f,
                x = u.globals.labels
                  .map(function (e) {
                    return Array.isArray(e) ? e.join(" ") : e;
                  })
                  .indexOf(m),
                b = u.globals.seriesRange[t].findIndex(function (e) {
                  return e.x === m && e.overlaps.length > 0;
                });
              return (
                this.isHorizontal
                  ? ((a = u.config.plotOptions.bar.rangeBarGroupRows
                      ? s + c * x
                      : s + r * this.visibleI + c * x),
                    b > -1 &&
                      !u.config.plotOptions.bar.rangeBarOverlap &&
                      (g = u.globals.seriesRange[t][b].overlaps).indexOf(p) >
                        -1 &&
                      (a =
                        (r = d.barHeight / g.length) * this.visibleI +
                        (c * (100 - parseInt(this.barOptions.barHeight, 10))) /
                          100 /
                          2 +
                        r * (this.visibleI + g.indexOf(p)) +
                        c * x))
                  : (x > -1 &&
                      (n = u.config.plotOptions.bar.rangeBarGroupRows
                        ? o + h * x
                        : o + l * this.visibleI + h * x),
                    b > -1 &&
                      !u.config.plotOptions.bar.rangeBarOverlap &&
                      (g = u.globals.seriesRange[t][b].overlaps).indexOf(p) >
                        -1 &&
                      (n =
                        (l = d.barWidth / g.length) * this.visibleI +
                        (h * (100 - parseInt(this.barOptions.barWidth, 10))) /
                          100 /
                          2 +
                        l * (this.visibleI + g.indexOf(p)) +
                        h * x)),
                { barYPosition: a, barXPosition: n, barHeight: r, barWidth: l }
              );
            }
          },
          {
            key: "drawRangeColumnPaths",
            value: function (e) {
              var t = e.indexes,
                i = e.x,
                a = e.xDivision,
                n = e.barWidth,
                s = e.barXPosition,
                o = e.zeroH,
                r = this.w,
                l = t.i,
                c = t.j,
                h = this.yRatio[this.yaxisIndex],
                d = t.realIndex,
                u = this.getRangeValue(d, c),
                g = Math.min(u.start, u.end),
                p = Math.max(u.start, u.end);
              void 0 === this.series[l][c] || null === this.series[l][c]
                ? (g = o)
                : ((g = o - g / h), (p = o - p / h));
              var f = Math.abs(p - g),
                m = this.barHelpers.getColumnPaths({
                  barXPosition: s,
                  barWidth: n,
                  y1: g,
                  y2: p,
                  strokeWidth: this.strokeWidth,
                  series: this.seriesRangeEnd,
                  realIndex: t.realIndex,
                  i: d,
                  j: c,
                  w: r
                });
              return (
                r.globals.isXNumeric || (i += a),
                {
                  pathTo: m.pathTo,
                  pathFrom: m.pathFrom,
                  barHeight: f,
                  x: i,
                  y: p,
                  goalY: this.barHelpers.getGoalValues("y", null, o, l, c),
                  barXPosition: s
                }
              );
            }
          },
          {
            key: "drawRangeBarPaths",
            value: function (e) {
              var t = e.indexes,
                i = e.y,
                a = e.y1,
                n = e.y2,
                s = e.yDivision,
                o = e.barHeight,
                r = e.barYPosition,
                l = e.zeroW,
                c = this.w,
                h = l + a / this.invertedYRatio,
                d = l + n / this.invertedYRatio,
                u = Math.abs(d - h),
                g = this.barHelpers.getBarpaths({
                  barYPosition: r,
                  barHeight: o,
                  x1: h,
                  x2: d,
                  strokeWidth: this.strokeWidth,
                  series: this.seriesRangeEnd,
                  i: t.realIndex,
                  realIndex: t.realIndex,
                  j: t.j,
                  w: c
                });
              return (
                c.globals.isXNumeric || (i += s),
                {
                  pathTo: g.pathTo,
                  pathFrom: g.pathFrom,
                  barWidth: u,
                  x: d,
                  goalX: this.barHelpers.getGoalValues(
                    "x",
                    l,
                    null,
                    t.realIndex,
                    t.j
                  ),
                  y: i
                }
              );
            }
          },
          {
            key: "getRangeValue",
            value: function (e, t) {
              var i = this.w;
              return {
                start: i.globals.seriesRangeStart[e][t],
                end: i.globals.seriesRangeEnd[e][t]
              };
            }
          }
        ]),
        i
      );
    })(),
    os = (function () {
      function e(t) {
        nQ(this, e), (this.w = t.w), (this.lineCtx = t);
      }
      return (
        n1(e, [
          {
            key: "sameValueSeriesFix",
            value: function (e, t) {
              var i = this.w;
              if (
                ("gradient" === i.config.fill.type ||
                  "gradient" === i.config.fill.type[e]) &&
                new ss(this.lineCtx.ctx, i).seriesHaveSameValues(e)
              ) {
                var a = t[e].slice();
                (a[a.length - 1] = a[a.length - 1] + 1e-6), (t[e] = a);
              }
              return t;
            }
          },
          {
            key: "calculatePoints",
            value: function (e) {
              var t = e.series,
                i = e.realIndex,
                a = e.x,
                n = e.y,
                s = e.i,
                o = e.j,
                r = e.prevY,
                l = this.w,
                c = [],
                h = [];
              if (0 === o) {
                var d =
                  this.lineCtx.categoryAxisCorrection +
                  l.config.markers.offsetX;
                l.globals.isXNumeric &&
                  (d =
                    (l.globals.seriesX[i][0] - l.globals.minX) /
                      this.lineCtx.xRatio +
                    l.config.markers.offsetX),
                  c.push(d),
                  h.push(
                    st.isNumber(t[s][0]) ? r + l.config.markers.offsetY : null
                  ),
                  c.push(a + l.config.markers.offsetX),
                  h.push(
                    st.isNumber(t[s][o + 1])
                      ? n + l.config.markers.offsetY
                      : null
                  );
              } else
                c.push(a + l.config.markers.offsetX),
                  h.push(
                    st.isNumber(t[s][o + 1])
                      ? n + l.config.markers.offsetY
                      : null
                  );
              return { x: c, y: h };
            }
          },
          {
            key: "checkPreviousPaths",
            value: function (e) {
              for (
                var t = e.pathFromLine,
                  i = e.pathFromArea,
                  a = e.realIndex,
                  n = this.w,
                  s = 0;
                s < n.globals.previousPaths.length;
                s++
              ) {
                var o = n.globals.previousPaths[s];
                ("line" === o.type || "area" === o.type) &&
                  o.paths.length > 0 &&
                  parseInt(o.realIndex, 10) === parseInt(a, 10) &&
                  ("line" === o.type
                    ? ((this.lineCtx.appendPathFrom = !1),
                      (t = n.globals.previousPaths[s].paths[0].d))
                    : "area" === o.type &&
                      ((this.lineCtx.appendPathFrom = !1),
                      (i = n.globals.previousPaths[s].paths[0].d),
                      n.config.stroke.show &&
                        n.globals.previousPaths[s].paths[1] &&
                        (t = n.globals.previousPaths[s].paths[1].d)));
              }
              return { pathFromLine: t, pathFromArea: i };
            }
          },
          {
            key: "determineFirstPrevY",
            value: function (e) {
              var t,
                i = e.i,
                a = e.series,
                n = e.prevY,
                s = e.lineYPosition,
                o = this.w;
              if (
                void 0 !== (null === (t = a[i]) || void 0 === t ? void 0 : t[0])
              )
                n =
                  (s =
                    o.config.chart.stacked && i > 0
                      ? this.lineCtx.prevSeriesY[i - 1][0]
                      : this.lineCtx.zeroY) -
                  a[i][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex] +
                  2 *
                    (this.lineCtx.isReversed
                      ? a[i][0] / this.lineCtx.yRatio[this.lineCtx.yaxisIndex]
                      : 0);
              else if (o.config.chart.stacked && i > 0 && void 0 === a[i][0]) {
                for (var r = i - 1; r >= 0; r--)
                  if (null !== a[r][0] && void 0 !== a[r][0]) {
                    n = s = this.lineCtx.prevSeriesY[r][0];
                    break;
                  }
              }
              return { prevY: n, lineYPosition: s };
            }
          }
        ]),
        e
      );
    })(),
    oo = function (e) {
      for (
        var t,
          i,
          a,
          n,
          s = (function (e) {
            for (
              var t = [],
                i = e[0],
                a = e[1],
                n = (t[0] = oc(i, a)),
                s = 1,
                o = e.length - 1;
              s < o;
              s++
            )
              (i = a), (a = e[s + 1]), (t[s] = 0.5 * (n + (n = oc(i, a))));
            return (t[s] = n), t;
          })(e),
          o = e.length - 1,
          r = [],
          l = 0;
        l < o;
        l++
      )
        1e-6 > Math.abs((a = oc(e[l], e[l + 1])))
          ? (s[l] = s[l + 1] = 0)
          : (n = (t = s[l] / a) * t + (i = s[l + 1] / a) * i) > 9 &&
            ((n = (3 * a) / Math.sqrt(n)), (s[l] = n * t), (s[l + 1] = n * i));
      for (var c = 0; c <= o; c++)
        r.push([
          (n =
            (e[Math.min(o, c + 1)][0] - e[Math.max(0, c - 1)][0]) /
            (6 * (1 + s[c] * s[c]))) || 0,
          s[c] * n || 0
        ]);
      return r;
    },
    or = function (e) {
      for (var t = "", i = 0; i < e.length; i++) {
        var a = e[i],
          n = a.length;
        n > 4
          ? (t +=
              "C".concat(a[0], ", ").concat(a[1]) +
              ", ".concat(a[2], ", ").concat(a[3]) +
              ", ".concat(a[4], ", ").concat(a[5]))
          : n > 2 &&
            (t +=
              "S".concat(a[0], ", ").concat(a[1]) +
              ", ".concat(a[2], ", ").concat(a[3]));
      }
      return t;
    },
    ol = function (e) {
      var t = oo(e),
        i = e[1],
        a = e[0],
        n = [],
        s = t[1],
        o = t[0];
      n.push(a, [
        a[0] + o[0],
        a[1] + o[1],
        i[0] - s[0],
        i[1] - s[1],
        i[0],
        i[1]
      ]);
      for (var r = 2, l = t.length; r < l; r++) {
        var c = e[r],
          h = t[r];
        n.push([c[0] - h[0], c[1] - h[1], c[0], c[1]]);
      }
      return n;
    };
  function oc(e, t) {
    return (t[1] - e[1]) / (t[0] - e[0]);
  }
  var oh = (function () {
    function e(t, i, a) {
      nQ(this, e),
        (this.ctx = t),
        (this.w = t.w),
        (this.xyRatios = i),
        (this.pointsChart =
          !(
            "bubble" !== this.w.config.chart.type &&
            "scatter" !== this.w.config.chart.type
          ) || a),
        (this.scatter = new sk(this.ctx)),
        (this.noNegatives = this.w.globals.minX === Number.MAX_VALUE),
        (this.lineHelpers = new os(this)),
        (this.markers = new sC(this.ctx)),
        (this.prevSeriesY = []),
        (this.categoryAxisCorrection = 0),
        (this.yaxisIndex = 0);
    }
    return (
      n1(e, [
        {
          key: "draw",
          value: function (e, t, i, a) {
            var n = this.w,
              s = new sn(this.ctx),
              o = n.globals.comboCharts ? t : n.config.chart.type,
              r = s.group({
                class: "apexcharts-".concat(o, "-series apexcharts-plot-series")
              }),
              l = new ss(this.ctx, n);
            (this.yRatio = this.xyRatios.yRatio),
              (this.zRatio = this.xyRatios.zRatio),
              (this.xRatio = this.xyRatios.xRatio),
              (this.baseLineY = this.xyRatios.baseLineY),
              (e = l.getLogSeries(e)),
              (this.yRatio = l.getLogYRatios(this.yRatio));
            for (var c = [], h = 0; h < e.length; h++) {
              e = this.lineHelpers.sameValueSeriesFix(h, e);
              var d = n.globals.comboCharts ? i[h] : h;
              this._initSerieVariables(e, h, d);
              var u = [],
                g = [],
                p = [],
                f = n.globals.padHorizontal + this.categoryAxisCorrection;
              this.ctx.series.addCollapsedClassToSeries(this.elSeries, d),
                n.globals.isXNumeric &&
                  n.globals.seriesX.length > 0 &&
                  (f =
                    (n.globals.seriesX[d][0] - n.globals.minX) / this.xRatio),
                p.push(f);
              var m,
                x = f,
                b = void 0,
                v = this.zeroY,
                y = this.zeroY;
              u.push(
                (v = this.lineHelpers.determineFirstPrevY({
                  i: h,
                  series: e,
                  prevY: v,
                  lineYPosition: 0
                }).prevY)
              ),
                (m = v),
                "rangeArea" === o &&
                  ((b = y =
                    this.lineHelpers.determineFirstPrevY({
                      i: h,
                      series: a,
                      prevY: y,
                      lineYPosition: 0
                    }).prevY),
                  g.push(y));
              var w = {
                  type: o,
                  series: e,
                  realIndex: d,
                  i: h,
                  x: f,
                  y: 1,
                  pX: x,
                  pY: m,
                  pathsFrom: this._calculatePathsFrom({
                    type: o,
                    series: e,
                    i: h,
                    realIndex: d,
                    prevX: x,
                    prevY: v,
                    prevY2: y
                  }),
                  linePaths: [],
                  areaPaths: [],
                  seriesIndex: i,
                  lineYPosition: 0,
                  xArrj: p,
                  yArrj: u,
                  y2Arrj: g,
                  seriesRangeEnd: a
                },
                C = this._iterateOverDataPoints(
                  nJ(
                    nJ({}, w),
                    {},
                    {
                      iterations: "rangeArea" === o ? e[h].length - 1 : void 0,
                      isRangeStart: !0
                    }
                  )
                );
              if ("rangeArea" === o) {
                var k = this._calculatePathsFrom({
                    series: a,
                    i: h,
                    realIndex: d,
                    prevX: x,
                    prevY: y
                  }),
                  A = this._iterateOverDataPoints(
                    nJ(
                      nJ({}, w),
                      {},
                      {
                        series: a,
                        pY: b,
                        pathsFrom: k,
                        iterations: a[h].length - 1,
                        isRangeStart: !1
                      }
                    )
                  );
                (C.linePaths[0] = A.linePath + C.linePath),
                  (C.pathFromLine = A.pathFromLine + C.pathFromLine);
              }
              this._handlePaths({ type: o, realIndex: d, i: h, paths: C }),
                this.elSeries.add(this.elPointsMain),
                this.elSeries.add(this.elDataLabelsWrap),
                c.push(this.elSeries);
            }
            if (n.config.chart.stacked)
              for (var S = c.length; S > 0; S--) r.add(c[S - 1]);
            else for (var L = 0; L < c.length; L++) r.add(c[L]);
            return r;
          }
        },
        {
          key: "_initSerieVariables",
          value: function (e, t, i) {
            var a = this.w,
              n = new sn(this.ctx);
            (this.xDivision =
              a.globals.gridWidth /
              (a.globals.dataPoints -
                ("on" === a.config.xaxis.tickPlacement ? 1 : 0))),
              (this.strokeWidth = Array.isArray(a.config.stroke.width)
                ? a.config.stroke.width[i]
                : a.config.stroke.width),
              this.yRatio.length > 1 && (this.yaxisIndex = i),
              (this.isReversed =
                a.config.yaxis[this.yaxisIndex] &&
                a.config.yaxis[this.yaxisIndex].reversed),
              (this.zeroY =
                a.globals.gridHeight -
                this.baseLineY[this.yaxisIndex] -
                (this.isReversed ? a.globals.gridHeight : 0) +
                (this.isReversed ? 2 * this.baseLineY[this.yaxisIndex] : 0)),
              (this.areaBottomY = this.zeroY),
              (this.zeroY > a.globals.gridHeight ||
                "end" === a.config.plotOptions.area.fillTo) &&
                (this.areaBottomY = a.globals.gridHeight),
              (this.categoryAxisCorrection = this.xDivision / 2),
              (this.elSeries = n.group({
                class: "apexcharts-series",
                seriesName: st.escapeString(a.globals.seriesNames[i])
              })),
              (this.elPointsMain = n.group({
                class: "apexcharts-series-markers-wrap",
                "data:realIndex": i
              })),
              (this.elDataLabelsWrap = n.group({
                class: "apexcharts-datalabels",
                "data:realIndex": i
              }));
            var s = e[t].length === a.globals.dataPoints;
            this.elSeries.attr({
              "data:longestSeries": s,
              rel: t + 1,
              "data:realIndex": i
            }),
              (this.appendPathFrom = !0);
          }
        },
        {
          key: "_calculatePathsFrom",
          value: function (e) {
            var t,
              i,
              a,
              n,
              s = e.type,
              o = e.series,
              r = e.i,
              l = e.realIndex,
              c = e.prevX,
              h = e.prevY,
              d = e.prevY2,
              u = this.w,
              g = new sn(this.ctx);
            if (null === o[r][0]) {
              for (var p = 0; p < o[r].length; p++)
                if (null !== o[r][p]) {
                  (c = this.xDivision * p),
                    (h = this.zeroY - o[r][p] / this.yRatio[this.yaxisIndex]),
                    (t = g.move(c, h)),
                    (i = g.move(c, this.areaBottomY));
                  break;
                }
            } else
              (t = g.move(c, h)),
                "rangeArea" === s && (t = g.move(c, d) + g.line(c, h)),
                (i = g.move(c, this.areaBottomY) + g.line(c, h));
            if (
              ((a = g.move(-1, this.zeroY) + g.line(-1, this.zeroY)),
              (n = g.move(-1, this.zeroY) + g.line(-1, this.zeroY)),
              u.globals.previousPaths.length > 0)
            ) {
              var f = this.lineHelpers.checkPreviousPaths({
                pathFromLine: a,
                pathFromArea: n,
                realIndex: l
              });
              (a = f.pathFromLine), (n = f.pathFromArea);
            }
            return {
              prevX: c,
              prevY: h,
              linePath: t,
              areaPath: i,
              pathFromLine: a,
              pathFromArea: n
            };
          }
        },
        {
          key: "_handlePaths",
          value: function (e) {
            var t = e.type,
              i = e.realIndex,
              a = e.i,
              n = e.paths,
              s = this.w,
              o = new sn(this.ctx),
              r = new sw(this.ctx);
            this.prevSeriesY.push(n.yArrj),
              (s.globals.seriesXvalues[i] = n.xArrj),
              (s.globals.seriesYvalues[i] = n.yArrj);
            var l = s.config.forecastDataPoints;
            if (l.count > 0 && "rangeArea" !== t) {
              var c =
                  s.globals.seriesXvalues[i][
                    s.globals.seriesXvalues[i].length - l.count - 1
                  ],
                h = o.drawRect(
                  c,
                  0,
                  s.globals.gridWidth,
                  s.globals.gridHeight,
                  0
                );
              s.globals.dom.elForecastMask.appendChild(h.node);
              var d = o.drawRect(0, 0, c, s.globals.gridHeight, 0);
              s.globals.dom.elNonForecastMask.appendChild(d.node);
            }
            this.pointsChart ||
              s.globals.delayedElements.push({
                el: this.elPointsMain.node,
                index: i
              });
            var u = {
              i: a,
              realIndex: i,
              animationDelay: a,
              initialSpeed: s.config.chart.animations.speed,
              dataChangeSpeed: s.config.chart.animations.dynamicAnimation.speed,
              className: "apexcharts-".concat(t)
            };
            if ("area" === t)
              for (
                var g = r.fillPath({ seriesNumber: i }), p = 0;
                p < n.areaPaths.length;
                p++
              ) {
                var f = o.renderPaths(
                  nJ(
                    nJ({}, u),
                    {},
                    {
                      pathFrom: n.pathFromArea,
                      pathTo: n.areaPaths[p],
                      stroke: "none",
                      strokeWidth: 0,
                      strokeLineCap: null,
                      fill: g
                    }
                  )
                );
                this.elSeries.add(f);
              }
            if (s.config.stroke.show && !this.pointsChart) {
              var m = null;
              if ("line" === t) m = r.fillPath({ seriesNumber: i, i: a });
              else if ("solid" === s.config.stroke.fill.type)
                m = s.globals.stroke.colors[i];
              else {
                var x = s.config.fill;
                (s.config.fill = s.config.stroke.fill),
                  (m = r.fillPath({ seriesNumber: i, i: a })),
                  (s.config.fill = x);
              }
              for (var b = 0; b < n.linePaths.length; b++) {
                var v = m;
                "rangeArea" === t && (v = r.fillPath({ seriesNumber: i }));
                var y = nJ(
                    nJ({}, u),
                    {},
                    {
                      pathFrom: n.pathFromLine,
                      pathTo: n.linePaths[b],
                      stroke: m,
                      strokeWidth: this.strokeWidth,
                      strokeLineCap: s.config.stroke.lineCap,
                      fill: "rangeArea" === t ? v : "none"
                    }
                  ),
                  w = o.renderPaths(y);
                if (
                  (this.elSeries.add(w),
                  w.attr("fill-rule", "evenodd"),
                  l.count > 0 && "rangeArea" !== t)
                ) {
                  var C = o.renderPaths(y);
                  C.node.setAttribute("stroke-dasharray", l.dashArray),
                    l.strokeWidth &&
                      C.node.setAttribute("stroke-width", l.strokeWidth),
                    this.elSeries.add(C),
                    C.attr(
                      "clip-path",
                      "url(#forecastMask".concat(s.globals.cuid, ")")
                    ),
                    w.attr(
                      "clip-path",
                      "url(#nonForecastMask".concat(s.globals.cuid, ")")
                    );
                }
              }
            }
          }
        },
        {
          key: "_iterateOverDataPoints",
          value: function (e) {
            var t = e.type,
              i = e.series,
              a = e.iterations,
              n = e.realIndex,
              s = e.i,
              o = e.x,
              r = e.y,
              l = e.pX,
              c = e.pY,
              h = e.pathsFrom,
              d = e.linePaths,
              u = e.areaPaths,
              g = e.seriesIndex,
              p = e.lineYPosition,
              f = e.xArrj,
              m = e.yArrj,
              x = e.y2Arrj,
              b = e.isRangeStart,
              v = e.seriesRangeEnd,
              y = this.w,
              w = new sn(this.ctx),
              C = this.yRatio,
              k = h.prevY,
              A = h.linePath,
              S = h.areaPath,
              L = h.pathFromLine,
              O = h.pathFromArea,
              T = st.isNumber(y.globals.minYArr[n])
                ? y.globals.minYArr[n]
                : y.globals.minY;
            a ||
              (a =
                y.globals.dataPoints > 1
                  ? y.globals.dataPoints - 1
                  : y.globals.dataPoints);
            for (var P = r, M = 0; M < a; M++) {
              var _ = void 0 === i[s][M + 1] || null === i[s][M + 1];
              if (y.globals.isXNumeric) {
                var D = y.globals.seriesX[n][M + 1];
                void 0 === y.globals.seriesX[n][M + 1] &&
                  (D = y.globals.seriesX[n][a - 1]),
                  (o = (D - y.globals.minX) / this.xRatio);
              } else o += this.xDivision;
              (p =
                y.config.chart.stacked &&
                s > 0 &&
                y.globals.collapsedSeries.length < y.config.series.length - 1
                  ? this.prevSeriesY[
                      (function (e) {
                        for (var t = e, i = 0; i < y.globals.series.length; i++)
                          if (
                            y.globals.collapsedSeriesIndices.indexOf(e) > -1
                          ) {
                            t--;
                            break;
                          }
                        return t >= 0 ? t : 0;
                      })(s - 1)
                    ][M + 1]
                  : this.zeroY),
                _
                  ? (r =
                      p -
                      T / C[this.yaxisIndex] +
                      2 * (this.isReversed ? T / C[this.yaxisIndex] : 0))
                  : ((r =
                      p -
                      i[s][M + 1] / C[this.yaxisIndex] +
                      2 *
                        (this.isReversed
                          ? i[s][M + 1] / C[this.yaxisIndex]
                          : 0)),
                    "rangeArea" === t &&
                      (P =
                        p -
                        v[s][M + 1] / C[this.yaxisIndex] +
                        2 *
                          (this.isReversed
                            ? v[s][M + 1] / C[this.yaxisIndex]
                            : 0))),
                f.push(o),
                m.push(r),
                x.push(P);
              var E = this.lineHelpers.calculatePoints({
                  series: i,
                  x: o,
                  y: r,
                  realIndex: n,
                  i: s,
                  j: M,
                  prevY: k
                }),
                I = this._createPaths({
                  type: t,
                  series: i,
                  i: s,
                  realIndex: n,
                  j: M,
                  x: o,
                  y: r,
                  y2: P,
                  xArrj: f,
                  yArrj: m,
                  y2Arrj: x,
                  pX: l,
                  pY: c,
                  linePath: A,
                  areaPath: S,
                  linePaths: d,
                  areaPaths: u,
                  seriesIndex: g,
                  isRangeStart: b
                });
              (u = I.areaPaths),
                (d = I.linePaths),
                (l = I.pX),
                (c = I.pY),
                (S = I.areaPath),
                (A = I.linePath),
                this.appendPathFrom &&
                  ("monotoneCubic" !== y.config.stroke.curve ||
                    "rangeArea" !== t) &&
                  ((L += w.line(o, this.zeroY)), (O += w.line(o, this.zeroY))),
                this.handleNullDataPoints(i, E, s, M, n),
                this._handleMarkersAndLabels({
                  type: t,
                  pointsPos: E,
                  i: s,
                  j: M,
                  realIndex: n,
                  isRangeStart: b
                });
            }
            return {
              yArrj: m,
              xArrj: f,
              pathFromArea: O,
              areaPaths: u,
              pathFromLine: L,
              linePaths: d,
              linePath: A,
              areaPath: S
            };
          }
        },
        {
          key: "_handleMarkersAndLabels",
          value: function (e) {
            var t = e.type,
              i = e.pointsPos,
              a = e.isRangeStart,
              n = e.i,
              s = e.j,
              o = e.realIndex,
              r = this.w,
              l = new sA(this.ctx);
            if (this.pointsChart)
              this.scatter.draw(this.elSeries, s, {
                realIndex: o,
                pointsPos: i,
                zRatio: this.zRatio,
                elParent: this.elPointsMain
              });
            else {
              r.globals.series[n].length > 1 &&
                this.elPointsMain.node.classList.add(
                  "apexcharts-element-hidden"
                );
              var c = this.markers.plotChartMarkers(i, o, s + 1);
              null !== c && this.elPointsMain.add(c);
            }
            var h = l.drawDataLabel({
              type: t,
              isRangeStart: a,
              pos: i,
              i: o,
              j: s + 1
            });
            null !== h && this.elDataLabelsWrap.add(h);
          }
        },
        {
          key: "_createPaths",
          value: function (e) {
            var t = e.type,
              i = e.series,
              a = e.i,
              n = e.realIndex,
              s = e.j,
              o = e.x,
              r = e.y,
              l = e.xArrj,
              c = e.yArrj,
              h = e.y2,
              d = e.y2Arrj,
              u = e.pX,
              g = e.pY,
              p = e.linePath,
              f = e.areaPath,
              m = e.linePaths,
              x = e.areaPaths,
              b = e.seriesIndex,
              v = e.isRangeStart,
              y = this.w,
              w = new sn(this.ctx),
              C = y.config.stroke.curve,
              k = this.areaBottomY;
            if (
              (Array.isArray(y.config.stroke.curve) &&
                (C = Array.isArray(b)
                  ? y.config.stroke.curve[b[a]]
                  : y.config.stroke.curve[a]),
              (("rangeArea" === t &&
                (y.globals.hasNullValues ||
                  y.config.forecastDataPoints.count > 0)) ||
                y.globals.hasNullValues) &&
                "monotoneCubic" === C &&
                (C = "straight"),
              "smooth" === C)
            ) {
              var A = 0.35 * (o - u);
              y.globals.hasNullValues
                ? (null !== i[a][s] &&
                    (null !== i[a][s + 1]
                      ? ((p =
                          w.move(u, g) + w.curve(u + A, g, o - A, r, o + 1, r)),
                        (f =
                          w.move(u + 1, g) +
                          w.curve(u + A, g, o - A, r, o + 1, r) +
                          w.line(o, k) +
                          w.line(u, k) +
                          "z"))
                      : ((p = w.move(u, g)), (f = w.move(u, g) + "z"))),
                  m.push(p),
                  x.push(f))
                : ((p += w.curve(u + A, g, o - A, r, o, r)),
                  (f += w.curve(u + A, g, o - A, r, o, r))),
                (u = o),
                (g = r),
                s === i[a].length - 2 &&
                  ((f += w.curve(u, g, o, r, o, k) + w.move(o, r) + "z"),
                  "rangeArea" === t && v
                    ? (p += w.curve(u, g, o, r, o, h) + w.move(o, h) + "z")
                    : y.globals.hasNullValues || (m.push(p), x.push(f)));
            } else if ("monotoneCubic" === C) {
              if (
                "rangeArea" === t
                  ? l.length === y.globals.dataPoints
                  : s === i[a].length - 2
              ) {
                var S = ol(
                  l.map(function (e, t) {
                    return [l[t], c[t]];
                  })
                );
                if (
                  ((p += or(S)),
                  (f += or(S)),
                  (u = o),
                  (g = r),
                  "rangeArea" === t && v)
                ) {
                  p += w.line(l[l.length - 1], d[d.length - 1]);
                  var L = l.slice().reverse(),
                    O = d.slice().reverse();
                  f = p += or(
                    ol(
                      L.map(function (e, t) {
                        return [L[t], O[t]];
                      })
                    )
                  );
                } else f += w.curve(u, g, o, r, o, k) + w.move(o, r) + "z";
                m.push(p), x.push(f);
              }
            } else {
              if (null === i[a][s + 1]) {
                p += w.move(o, r);
                var T = y.globals.isXNumeric
                  ? (y.globals.seriesX[n][s] - y.globals.minX) / this.xRatio
                  : o - this.xDivision;
                f = f + w.line(T, k) + w.move(o, r) + "z";
              }
              null === i[a][s] && ((p += w.move(o, r)), (f += w.move(o, k))),
                "stepline" === C
                  ? ((p = p + w.line(o, null, "H") + w.line(null, r, "V")),
                    (f = f + w.line(o, null, "H") + w.line(null, r, "V")))
                  : "straight" === C &&
                    ((p += w.line(o, r)), (f += w.line(o, r))),
                s === i[a].length - 2 &&
                  ((f = f + w.line(o, k) + w.move(o, r) + "z"),
                  "rangeArea" === t && v
                    ? (p = p + w.line(o, h) + w.move(o, h) + "z")
                    : (m.push(p), x.push(f)));
            }
            return {
              linePaths: m,
              areaPaths: x,
              pX: u,
              pY: g,
              linePath: p,
              areaPath: f
            };
          }
        },
        {
          key: "handleNullDataPoints",
          value: function (e, t, i, a, n) {
            var s = this.w;
            if (
              (null === e[i][a] && s.config.markers.showNullDataPoints) ||
              1 === e[i].length
            ) {
              var o = this.markers.plotChartMarkers(
                t,
                n,
                a + 1,
                this.strokeWidth - s.config.markers.strokeWidth / 2,
                !0
              );
              null !== o && this.elPointsMain.add(o);
            }
          }
        }
      ]),
      e
    );
  })();
  (window.TreemapSquared = {}),
    (window.TreemapSquared.generate = (function () {
      function e(t, i, a, s) {
        (this.xoffset = t),
          (this.yoffset = i),
          (this.height = s),
          (this.width = a),
          (this.shortestEdge = function () {
            return Math.min(this.height, this.width);
          }),
          (this.getCoordinates = function (e) {
            var t,
              i = [],
              a = this.xoffset,
              s = this.yoffset,
              o = n(e) / this.height,
              r = n(e) / this.width;
            if (this.width >= this.height)
              for (t = 0; t < e.length; t++)
                i.push([a, s, a + o, s + e[t] / o]), (s += e[t] / o);
            else
              for (t = 0; t < e.length; t++)
                i.push([a, s, a + e[t] / r, s + r]), (a += e[t] / r);
            return i;
          }),
          (this.cutArea = function (t) {
            var i;
            if (this.width >= this.height) {
              var a = t / this.height,
                n = this.width - a;
              i = new e(this.xoffset + a, this.yoffset, n, this.height);
            } else {
              var s = t / this.width,
                o = this.height - s;
              i = new e(this.xoffset, this.yoffset + s, this.width, o);
            }
            return i;
          });
      }
      function t(t, a, s, o, r) {
        return (
          (o = void 0 === o ? 0 : o),
          (r = void 0 === r ? 0 : r),
          (function (e) {
            var t,
              i,
              a = [];
            for (t = 0; t < e.length; t++)
              for (i = 0; i < e[t].length; i++) a.push(e[t][i]);
            return a;
          })(
            (function e(t, a, s, o) {
              var r, l, c, h, d;
              if (0 !== t.length)
                return (
                  (r = s.shortestEdge()),
                  ((h = l = t[0]),
                  0 === a.length ||
                    ((d = a.slice()).push(h), i(a, r) >= i(d, r)))
                    ? (a.push(l), e(t.slice(1), a, s, o))
                    : ((c = s.cutArea(n(a), o)),
                      o.push(s.getCoordinates(a)),
                      e(t, [], c, o)),
                  o
                );
              o.push(s.getCoordinates(a));
            })(
              (function (e, t) {
                var i,
                  a = [],
                  s = t / n(e);
                for (i = 0; i < e.length; i++) a[i] = e[i] * s;
                return a;
              })(t, a * s),
              [],
              new e(o, r, a, s),
              []
            )
          )
        );
      }
      function i(e, t) {
        var i = Math.min.apply(Math, e),
          a = Math.max.apply(Math, e),
          s = n(e);
        return Math.max(
          (Math.pow(t, 2) * a) / Math.pow(s, 2),
          Math.pow(s, 2) / (Math.pow(t, 2) * i)
        );
      }
      function a(e) {
        return e && e.constructor === Array;
      }
      function n(e) {
        var t,
          i = 0;
        for (t = 0; t < e.length; t++) i += e[t];
        return i;
      }
      return function e(i, s, o, r, l) {
        (r = void 0 === r ? 0 : r), (l = void 0 === l ? 0 : l);
        var c,
          h,
          d = [],
          u = [];
        if (a(i[0])) {
          for (h = 0; h < i.length; h++)
            d[h] = (function e(t) {
              var i,
                s = 0;
              if (a(t[0])) for (i = 0; i < t.length; i++) s += e(t[i]);
              else s = n(t);
              return s;
            })(i[h]);
          for (c = t(d, s, o, r, l), h = 0; h < i.length; h++)
            u.push(
              e(i[h], c[h][2] - c[h][0], c[h][3] - c[h][1], c[h][0], c[h][1])
            );
        } else u = t(i, s, o, r, l);
        return u;
      };
    })());
  var od,
    ou,
    og = (function () {
      function e(t, i) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.strokeWidth = this.w.config.stroke.width),
          (this.helpers = new s8(t)),
          (this.dynamicAnim = this.w.config.chart.animations.dynamicAnimation),
          (this.labels = []);
      }
      return (
        n1(e, [
          {
            key: "draw",
            value: function (e) {
              var t = this,
                i = this.w,
                a = new sn(this.ctx),
                n = new sw(this.ctx),
                s = a.group({ class: "apexcharts-treemap" });
              if (i.globals.noData) return s;
              var o = [];
              return (
                e.forEach(function (e) {
                  var t = e.map(function (e) {
                    return Math.abs(e);
                  });
                  o.push(t);
                }),
                (this.negRange = this.helpers.checkColorRange()),
                i.config.series.forEach(function (e, i) {
                  e.data.forEach(function (e) {
                    Array.isArray(t.labels[i]) || (t.labels[i] = []),
                      t.labels[i].push(e.x);
                  });
                }),
                window.TreemapSquared.generate(
                  o,
                  i.globals.gridWidth,
                  i.globals.gridHeight
                ).forEach(function (o, r) {
                  var l = a.group({
                    class: "apexcharts-series apexcharts-treemap-series",
                    seriesName: st.escapeString(i.globals.seriesNames[r]),
                    rel: r + 1,
                    "data:realIndex": r
                  });
                  if (i.config.chart.dropShadow.enabled) {
                    var c = i.config.chart.dropShadow;
                    new sa(t.ctx).dropShadow(s, c, r);
                  }
                  var h = a.group({ class: "apexcharts-data-labels" });
                  o.forEach(function (s, o) {
                    var c = s[0],
                      h = s[1],
                      d = s[2],
                      u = s[3],
                      g = a.drawRect(
                        c,
                        h,
                        d - c,
                        u - h,
                        0,
                        "#fff",
                        1,
                        t.strokeWidth,
                        i.config.plotOptions.treemap.useFillColorAsStroke
                          ? f
                          : i.globals.stroke.colors[r]
                      );
                    g.attr({
                      cx: c,
                      cy: h,
                      index: r,
                      i: r,
                      j: o,
                      width: d - c,
                      height: u - h
                    });
                    var p = t.helpers.getShadeColor(
                        i.config.chart.type,
                        r,
                        o,
                        t.negRange
                      ),
                      f = p.color;
                    void 0 !== i.config.series[r].data[o] &&
                      i.config.series[r].data[o].fillColor &&
                      (f = i.config.series[r].data[o].fillColor);
                    var m = n.fillPath({
                      color: f,
                      seriesNumber: r,
                      dataPointIndex: o
                    });
                    g.node.classList.add("apexcharts-treemap-rect"),
                      g.attr({ fill: m }),
                      t.helpers.addListeners(g);
                    var x = {
                        x: c + (d - c) / 2,
                        y: h + (u - h) / 2,
                        width: 0,
                        height: 0
                      },
                      b = { x: c, y: h, width: d - c, height: u - h };
                    if (
                      i.config.chart.animations.enabled &&
                      !i.globals.dataChanged
                    ) {
                      var v = 1;
                      i.globals.resized ||
                        (v = i.config.chart.animations.speed),
                        t.animateTreemap(g, x, b, v);
                    }
                    if (i.globals.dataChanged) {
                      var y = 1;
                      t.dynamicAnim.enabled &&
                        i.globals.shouldAnimate &&
                        ((y = t.dynamicAnim.speed),
                        i.globals.previousPaths[r] &&
                          i.globals.previousPaths[r][o] &&
                          i.globals.previousPaths[r][o].rect &&
                          (x = i.globals.previousPaths[r][o].rect),
                        t.animateTreemap(g, x, b, y));
                    }
                    var w = t.getFontSize(s),
                      C = i.config.dataLabels.formatter(t.labels[r][o], {
                        value: i.globals.series[r][o],
                        seriesIndex: r,
                        dataPointIndex: o,
                        w: i
                      });
                    "truncate" ===
                      i.config.plotOptions.treemap.dataLabels.format &&
                      ((w = parseInt(i.config.dataLabels.style.fontSize, 10)),
                      (C = t.truncateLabels(C, w, c, h, d, u)));
                    var k = t.helpers.calculateDataLabels({
                      text: C,
                      x: (c + d) / 2,
                      y: (h + u) / 2 + t.strokeWidth / 2 + w / 3,
                      i: r,
                      j: o,
                      colorProps: p,
                      fontSize: w,
                      series: e
                    });
                    i.config.dataLabels.enabled &&
                      k &&
                      t.rotateToFitLabel(k, w, C, c, h, d, u),
                      l.add(g),
                      null !== k && l.add(k);
                  }),
                    l.add(h),
                    s.add(l);
                }),
                s
              );
            }
          },
          {
            key: "getFontSize",
            value: function (e) {
              var t = this.w,
                i =
                  (function e(t) {
                    var i,
                      a = 0;
                    if (Array.isArray(t[0]))
                      for (i = 0; i < t.length; i++) a += e(t[i]);
                    else for (i = 0; i < t.length; i++) a += t[i].length;
                    return a;
                  })(this.labels) /
                  (function e(t) {
                    var i,
                      a = 0;
                    if (Array.isArray(t[0]))
                      for (i = 0; i < t.length; i++) a += e(t[i]);
                    else for (i = 0; i < t.length; i++) a += 1;
                    return a;
                  })(this.labels);
              return Math.min(
                Math.pow((e[2] - e[0]) * (e[3] - e[1]), 0.5) / i,
                parseInt(t.config.dataLabels.style.fontSize, 10)
              );
            }
          },
          {
            key: "rotateToFitLabel",
            value: function (e, t, i, a, n, s, o) {
              var r = new sn(this.ctx),
                l = r.getTextRects(i, t);
              if (
                l.width + this.w.config.stroke.width + 5 > s - a &&
                l.width <= o - n
              ) {
                var c = r.rotateAroundCenter(e.node);
                e.node.setAttribute(
                  "transform",
                  "rotate(-90 "
                    .concat(c.x, " ")
                    .concat(c.y, ") translate(")
                    .concat(l.height / 3, ")")
                );
              }
            }
          },
          {
            key: "truncateLabels",
            value: function (e, t, i, a, n, s) {
              var o = new sn(this.ctx),
                r =
                  o.getTextRects(e, t).width + this.w.config.stroke.width + 5 >
                    n - i && s - a > n - i
                    ? s - a
                    : n - i,
                l = o.getTextBasedOnMaxWidth({
                  text: e,
                  maxWidth: r,
                  fontSize: t
                });
              return e.length !== l.length && r / t < 5 ? "" : l;
            }
          },
          {
            key: "animateTreemap",
            value: function (e, t, i, a) {
              var n = new si(this.ctx);
              n.animateRect(
                e,
                { x: t.x, y: t.y, width: t.width, height: t.height },
                { x: i.x, y: i.y, width: i.width, height: i.height },
                a,
                function () {
                  n.animationCompleted(e);
                }
              );
            }
          }
        ]),
        e
      );
    })(),
    op = (function () {
      function e(t) {
        nQ(this, e),
          (this.ctx = t),
          (this.w = t.w),
          (this.timeScaleArray = []),
          (this.utc = this.w.config.xaxis.labels.datetimeUTC);
      }
      return (
        n1(e, [
          {
            key: "calculateTimeScaleTicks",
            value: function (e, t) {
              var i = this,
                a = this.w;
              if (a.globals.allSeriesCollapsed)
                return (
                  (a.globals.labels = []), (a.globals.timescaleLabels = []), []
                );
              var n = new sg(this.ctx),
                s = (t - e) / 864e5;
              this.determineInterval(s),
                (a.globals.disableZoomIn = !1),
                (a.globals.disableZoomOut = !1),
                s < 11574074074074075e-20
                  ? (a.globals.disableZoomIn = !0)
                  : s > 5e4 && (a.globals.disableZoomOut = !0);
              var o = n.getTimeUnitsfromTimestamp(e, t, this.utc),
                r = a.globals.gridWidth / s,
                l = r / 24,
                c = l / 60,
                h = c / 60,
                d = Math.floor(24 * s),
                u = Math.floor(1440 * s),
                g = Math.floor(86400 * s),
                p = Math.floor(s),
                f = Math.floor(s / 30),
                m = Math.floor(s / 365),
                x = {
                  minMillisecond: o.minMillisecond,
                  minSecond: o.minSecond,
                  minMinute: o.minMinute,
                  minHour: o.minHour,
                  minDate: o.minDate,
                  minMonth: o.minMonth,
                  minYear: o.minYear
                },
                b = {
                  firstVal: x,
                  currentMillisecond: x.minMillisecond,
                  currentSecond: x.minSecond,
                  currentMinute: x.minMinute,
                  currentHour: x.minHour,
                  currentMonthDate: x.minDate,
                  currentDate: x.minDate,
                  currentMonth: x.minMonth,
                  currentYear: x.minYear,
                  daysWidthOnXAxis: r,
                  hoursWidthOnXAxis: l,
                  minutesWidthOnXAxis: c,
                  secondsWidthOnXAxis: h,
                  numberOfSeconds: g,
                  numberOfMinutes: u,
                  numberOfHours: d,
                  numberOfDays: p,
                  numberOfMonths: f,
                  numberOfYears: m
                };
              switch (this.tickInterval) {
                case "years":
                  this.generateYearScale(b);
                  break;
                case "months":
                case "half_year":
                  this.generateMonthScale(b);
                  break;
                case "months_days":
                case "months_fortnight":
                case "days":
                case "week_days":
                  this.generateDayScale(b);
                  break;
                case "hours":
                  this.generateHourScale(b);
                  break;
                case "minutes_fives":
                case "minutes":
                  this.generateMinuteScale(b);
                  break;
                case "seconds_tens":
                case "seconds_fives":
                case "seconds":
                  this.generateSecondScale(b);
              }
              var v = this.timeScaleArray.map(function (e) {
                var t = {
                  position: e.position,
                  unit: e.unit,
                  year: e.year,
                  day: e.day ? e.day : 1,
                  hour: e.hour ? e.hour : 0,
                  month: e.month + 1
                };
                return "month" === e.unit
                  ? nJ(nJ({}, t), {}, { day: 1, value: e.value + 1 })
                  : "day" === e.unit || "hour" === e.unit
                  ? nJ(nJ({}, t), {}, { value: e.value })
                  : "minute" === e.unit
                  ? nJ(nJ({}, t), {}, { value: e.value, minute: e.value })
                  : "second" === e.unit
                  ? nJ(
                      nJ({}, t),
                      {},
                      { value: e.value, minute: e.minute, second: e.second }
                    )
                  : e;
              });
              return v.filter(function (e) {
                var t = 1,
                  n = Math.ceil(a.globals.gridWidth / 120),
                  s = e.value;
                void 0 !== a.config.xaxis.tickAmount &&
                  (n = a.config.xaxis.tickAmount),
                  v.length > n && (t = Math.floor(v.length / n));
                var o = !1,
                  r = !1;
                switch (i.tickInterval) {
                  case "years":
                    "year" === e.unit && (o = !0);
                    break;
                  case "half_year":
                    (t = 7), "year" === e.unit && (o = !0);
                    break;
                  case "months":
                    (t = 1), "year" === e.unit && (o = !0);
                    break;
                  case "months_fortnight":
                    (t = 15),
                      ("year" !== e.unit && "month" !== e.unit) || (o = !0),
                      30 === s && (r = !0);
                    break;
                  case "months_days":
                    (t = 10),
                      "month" === e.unit && (o = !0),
                      30 === s && (r = !0);
                    break;
                  case "week_days":
                    (t = 8), "month" === e.unit && (o = !0);
                    break;
                  case "days":
                    (t = 1), "month" === e.unit && (o = !0);
                    break;
                  case "hours":
                    "day" === e.unit && (o = !0);
                    break;
                  case "minutes_fives":
                  case "seconds_fives":
                    s % 5 != 0 && (r = !0);
                    break;
                  case "seconds_tens":
                    s % 10 != 0 && (r = !0);
                }
                if (
                  "hours" === i.tickInterval ||
                  "minutes_fives" === i.tickInterval ||
                  "seconds_tens" === i.tickInterval ||
                  "seconds_fives" === i.tickInterval
                ) {
                  if (!r) return !0;
                } else if ((s % t == 0 || o) && !r) return !0;
              });
            }
          },
          {
            key: "recalcDimensionsBasedOnFormat",
            value: function (e, t) {
              var i = this.w,
                a = this.formatDates(e),
                n = this.removeOverlappingTS(a);
              (i.globals.timescaleLabels = n.slice()),
                new sG(this.ctx).plotCoords();
            }
          },
          {
            key: "determineInterval",
            value: function (e) {
              var t = 24 * e,
                i = 60 * t;
              switch (!0) {
                case e / 365 > 5:
                  this.tickInterval = "years";
                  break;
                case e > 800:
                  this.tickInterval = "half_year";
                  break;
                case e > 180:
                  this.tickInterval = "months";
                  break;
                case e > 90:
                  this.tickInterval = "months_fortnight";
                  break;
                case e > 60:
                  this.tickInterval = "months_days";
                  break;
                case e > 30:
                  this.tickInterval = "week_days";
                  break;
                case e > 2:
                  this.tickInterval = "days";
                  break;
                case t > 2.4:
                  this.tickInterval = "hours";
                  break;
                case i > 15:
                  this.tickInterval = "minutes_fives";
                  break;
                case i > 5:
                  this.tickInterval = "minutes";
                  break;
                case i > 1:
                  this.tickInterval = "seconds_tens";
                  break;
                case 60 * i > 20:
                  this.tickInterval = "seconds_fives";
                  break;
                default:
                  this.tickInterval = "seconds";
              }
            }
          },
          {
            key: "generateYearScale",
            value: function (e) {
              var t = e.firstVal,
                i = e.currentMonth,
                a = e.currentYear,
                n = e.daysWidthOnXAxis,
                s = e.numberOfYears,
                o = t.minYear,
                r = 0,
                l = new sg(this.ctx),
                c = "year";
              if (t.minDate > 1 || t.minMonth > 0) {
                var h = l.determineRemainingDaysOfYear(
                  t.minYear,
                  t.minMonth,
                  t.minDate
                );
                (r = (l.determineDaysOfYear(t.minYear) - h + 1) * n),
                  (o = t.minYear + 1),
                  this.timeScaleArray.push({
                    position: r,
                    value: o,
                    unit: c,
                    year: o,
                    month: st.monthMod(i + 1)
                  });
              } else
                1 === t.minDate &&
                  0 === t.minMonth &&
                  this.timeScaleArray.push({
                    position: r,
                    value: o,
                    unit: c,
                    year: a,
                    month: st.monthMod(i + 1)
                  });
              for (var d = o, u = r, g = 0; g < s; g++)
                d++,
                  (u = l.determineDaysOfYear(d - 1) * n + u),
                  this.timeScaleArray.push({
                    position: u,
                    value: d,
                    unit: c,
                    year: d,
                    month: 1
                  });
            }
          },
          {
            key: "generateMonthScale",
            value: function (e) {
              var t = e.firstVal,
                i = e.currentMonthDate,
                a = e.currentMonth,
                n = e.currentYear,
                s = e.daysWidthOnXAxis,
                o = e.numberOfMonths,
                r = a,
                l = 0,
                c = new sg(this.ctx),
                h = "month",
                d = 0;
              if (t.minDate > 1) {
                (l = (c.determineDaysOfMonths(a + 1, t.minYear) - i + 1) * s),
                  (r = st.monthMod(a + 1));
                var u = n + d,
                  g = st.monthMod(r),
                  p = r;
                0 === r && ((h = "year"), (p = u), (g = 1), (u += d += 1)),
                  this.timeScaleArray.push({
                    position: l,
                    value: p,
                    unit: h,
                    year: u,
                    month: g
                  });
              } else
                this.timeScaleArray.push({
                  position: l,
                  value: r,
                  unit: h,
                  year: n,
                  month: st.monthMod(a)
                });
              for (var f = r + 1, m = l, x = 0, b = 1; x < o; x++, b++) {
                0 === (f = st.monthMod(f))
                  ? ((h = "year"), (d += 1))
                  : (h = "month");
                var v = this._getYear(n, f, d);
                m = c.determineDaysOfMonths(f, v) * s + m;
                var y = 0 === f ? v : f;
                this.timeScaleArray.push({
                  position: m,
                  value: y,
                  unit: h,
                  year: v,
                  month: 0 === f ? 1 : f
                }),
                  f++;
              }
            }
          },
          {
            key: "generateDayScale",
            value: function (e) {
              var t = e.firstVal,
                i = e.currentMonth,
                a = e.currentYear,
                n = e.hoursWidthOnXAxis,
                s = e.numberOfDays,
                o = new sg(this.ctx),
                r = "day",
                l = t.minDate + 1,
                c = l,
                h = function (e, t, i) {
                  return (
                    e > o.determineDaysOfMonths(t + 1, i) &&
                      ((c = 1), (r = "month"), (u = t += 1)),
                    t
                  );
                },
                d = (24 - t.minHour) * n,
                u = l,
                g = h(c, i, a);
              0 === t.minHour && 1 === t.minDate
                ? ((d = 0),
                  (u = st.monthMod(t.minMonth)),
                  (r = "month"),
                  (c = t.minDate),
                  s++)
                : 1 !== t.minDate &&
                  0 === t.minHour &&
                  0 === t.minMinute &&
                  ((d = 0), (u = l = t.minDate), (g = h((c = l), i, a))),
                this.timeScaleArray.push({
                  position: d,
                  value: u,
                  unit: r,
                  year: this._getYear(a, g, 0),
                  month: st.monthMod(g),
                  day: c
                });
              for (var p = d, f = 0; f < s; f++) {
                (r = "day"), (g = h((c += 1), g, this._getYear(a, g, 0)));
                var m = this._getYear(a, g, 0);
                p = 24 * n + p;
                var x = 1 === c ? st.monthMod(g) : c;
                this.timeScaleArray.push({
                  position: p,
                  value: x,
                  unit: r,
                  year: m,
                  month: st.monthMod(g),
                  day: x
                });
              }
            }
          },
          {
            key: "generateHourScale",
            value: function (e) {
              var t,
                i,
                a = e.firstVal,
                n = e.currentDate,
                s = e.currentMonth,
                o = e.currentYear,
                r = e.minutesWidthOnXAxis,
                l = e.numberOfHours,
                c = new sg(this.ctx),
                h = "hour",
                d = function (e, t) {
                  return e > c.determineDaysOfMonths(t + 1, o) ? (t += 1) : t;
                },
                u = 60 - (a.minMinute + a.minSecond / 60),
                g = u * r,
                p = a.minHour + 1,
                f = p + 1;
              60 === u && ((g = 0), (f = (p = a.minHour) + 1));
              var m = n,
                x = d(m, s);
              this.timeScaleArray.push({
                position: g,
                value: p,
                unit: h,
                day: m,
                hour: f,
                year: o,
                month: st.monthMod(x)
              });
              for (var b = g, v = 0; v < l; v++) {
                (h = "hour"),
                  f >= 24 &&
                    ((f = 0),
                    (h = "day"),
                    (x = ((t = m += 1),
                    (i = x),
                    t > c.determineDaysOfMonths(i + 1, o) &&
                      ((m = 1), (i += 1)),
                    { month: i, date: m }).month),
                    (x = d(m, x)));
                var y = this._getYear(o, x, 0);
                b = 60 * r + b;
                var w = 0 === f ? m : f;
                this.timeScaleArray.push({
                  position: b,
                  value: w,
                  unit: h,
                  hour: f,
                  day: m,
                  year: y,
                  month: st.monthMod(x)
                }),
                  f++;
              }
            }
          },
          {
            key: "generateMinuteScale",
            value: function (e) {
              for (
                var t = e.currentMillisecond,
                  i = e.currentSecond,
                  a = e.currentMinute,
                  n = e.currentHour,
                  s = e.currentDate,
                  o = e.currentMonth,
                  r = e.currentYear,
                  l = e.minutesWidthOnXAxis,
                  c = e.secondsWidthOnXAxis,
                  h = e.numberOfMinutes,
                  d = a + 1,
                  u = n,
                  g = (60 - i - t / 1e3) * c,
                  p = 0;
                p < h;
                p++
              )
                d >= 60 && ((d = 0), 24 === (u += 1) && (u = 0)),
                  this.timeScaleArray.push({
                    position: g,
                    value: d,
                    unit: "minute",
                    hour: u,
                    minute: d,
                    day: s,
                    year: this._getYear(r, o, 0),
                    month: st.monthMod(o)
                  }),
                  (g += l),
                  d++;
            }
          },
          {
            key: "generateSecondScale",
            value: function (e) {
              for (
                var t = e.currentMillisecond,
                  i = e.currentSecond,
                  a = e.currentMinute,
                  n = e.currentHour,
                  s = e.currentDate,
                  o = e.currentMonth,
                  r = e.currentYear,
                  l = e.secondsWidthOnXAxis,
                  c = e.numberOfSeconds,
                  h = i + 1,
                  d = a,
                  u = n,
                  g = ((1e3 - t) / 1e3) * l,
                  p = 0;
                p < c;
                p++
              )
                h >= 60 &&
                  ((h = 0), ++d >= 60 && ((d = 0), 24 == ++u && (u = 0))),
                  this.timeScaleArray.push({
                    position: g,
                    value: h,
                    unit: "second",
                    hour: u,
                    minute: d,
                    second: h,
                    day: s,
                    year: this._getYear(r, o, 0),
                    month: st.monthMod(o)
                  }),
                  (g += l),
                  h++;
            }
          },
          {
            key: "createRawDateString",
            value: function (e, t) {
              var i = e.year;
              return (
                0 === e.month && (e.month = 1),
                (i += "-" + ("0" + e.month.toString()).slice(-2)),
                "day" === e.unit
                  ? (i += "day" === e.unit ? "-" + ("0" + t).slice(-2) : "-01")
                  : (i += "-" + ("0" + (e.day ? e.day : "1")).slice(-2)),
                "hour" === e.unit
                  ? (i += "hour" === e.unit ? "T" + ("0" + t).slice(-2) : "T00")
                  : (i += "T" + ("0" + (e.hour ? e.hour : "0")).slice(-2)),
                "minute" === e.unit
                  ? (i += ":" + ("0" + t).slice(-2))
                  : (i += ":" + (e.minute ? ("0" + e.minute).slice(-2) : "00")),
                "second" === e.unit
                  ? (i += ":" + ("0" + t).slice(-2))
                  : (i += ":00"),
                this.utc && (i += ".000Z"),
                i
              );
            }
          },
          {
            key: "formatDates",
            value: function (e) {
              var t = this,
                i = this.w;
              return e.map(function (e) {
                var a = e.value.toString(),
                  n = new sg(t.ctx),
                  s = t.createRawDateString(e, a),
                  o = n.getDate(n.parseDate(s));
                if (
                  (t.utc || (o = n.getDate(n.parseDateWithTimezone(s))),
                  void 0 === i.config.xaxis.labels.format)
                ) {
                  var r = "dd MMM",
                    l = i.config.xaxis.labels.datetimeFormatter;
                  "year" === e.unit && (r = l.year),
                    "month" === e.unit && (r = l.month),
                    "day" === e.unit && (r = l.day),
                    "hour" === e.unit && (r = l.hour),
                    "minute" === e.unit && (r = l.minute),
                    "second" === e.unit && (r = l.second),
                    (a = n.formatDate(o, r));
                } else a = n.formatDate(o, i.config.xaxis.labels.format);
                return {
                  dateString: s,
                  position: e.position,
                  value: a,
                  unit: e.unit,
                  year: e.year,
                  month: e.month
                };
              });
            }
          },
          {
            key: "removeOverlappingTS",
            value: function (e) {
              var t,
                i = this,
                a = new sn(this.ctx),
                n = !1;
              e.length > 0 &&
                e[0].value &&
                e.every(function (t) {
                  return t.value.length === e[0].value.length;
                }) &&
                ((n = !0), (t = a.getTextRects(e[0].value).width));
              var s = 0;
              return e
                .map(function (o, r) {
                  if (r > 0 && i.w.config.xaxis.labels.hideOverlappingLabels) {
                    var l = n ? t : a.getTextRects(e[s].value).width,
                      c = e[s].position;
                    return o.position > c + l + 10 ? ((s = r), o) : null;
                  }
                  return o;
                })
                .filter(function (e) {
                  return null !== e;
                });
            }
          },
          {
            key: "_getYear",
            value: function (e, t, i) {
              return e + Math.floor(t / 12) + i;
            }
          }
        ]),
        e
      );
    })(),
    of = (function () {
      function e(t, i) {
        nQ(this, e), (this.ctx = i), (this.w = i.w), (this.el = t);
      }
      return (
        n1(e, [
          {
            key: "setupElements",
            value: function () {
              var e = this.w.globals,
                t = this.w.config,
                i = t.chart.type;
              (e.axisCharts =
                [
                  "line",
                  "area",
                  "bar",
                  "rangeBar",
                  "rangeArea",
                  "candlestick",
                  "boxPlot",
                  "scatter",
                  "bubble",
                  "radar",
                  "heatmap",
                  "treemap"
                ].indexOf(i) > -1),
                (e.xyCharts =
                  [
                    "line",
                    "area",
                    "bar",
                    "rangeBar",
                    "rangeArea",
                    "candlestick",
                    "boxPlot",
                    "scatter",
                    "bubble"
                  ].indexOf(i) > -1),
                (e.isBarHorizontal =
                  ("bar" === t.chart.type ||
                    "rangeBar" === t.chart.type ||
                    "boxPlot" === t.chart.type) &&
                  t.plotOptions.bar.horizontal),
                (e.chartClass = ".apexcharts" + e.chartID),
                (e.dom.baseEl = this.el),
                (e.dom.elWrap = document.createElement("div")),
                sn.setAttrs(e.dom.elWrap, {
                  id: e.chartClass.substring(1),
                  class: "apexcharts-canvas " + e.chartClass.substring(1)
                }),
                this.el.appendChild(e.dom.elWrap),
                (e.dom.Paper = new window.SVG.Doc(e.dom.elWrap)),
                e.dom.Paper.attr({
                  class: "apexcharts-svg",
                  "xmlns:data": "ApexChartsNS",
                  transform: "translate("
                    .concat(t.chart.offsetX, ", ")
                    .concat(t.chart.offsetY, ")")
                }),
                (e.dom.Paper.node.style.background = t.chart.background),
                this.setSVGDimensions(),
                (e.dom.elLegendForeign = document.createElementNS(
                  e.SVGNS,
                  "foreignObject"
                )),
                sn.setAttrs(e.dom.elLegendForeign, {
                  x: 0,
                  y: 0,
                  width: e.svgWidth,
                  height: e.svgHeight
                }),
                (e.dom.elLegendWrap = document.createElement("div")),
                e.dom.elLegendWrap.classList.add("apexcharts-legend"),
                e.dom.elLegendWrap.setAttribute(
                  "xmlns",
                  "http://www.w3.org/1999/xhtml"
                ),
                e.dom.elLegendForeign.appendChild(e.dom.elLegendWrap),
                e.dom.Paper.node.appendChild(e.dom.elLegendForeign),
                (e.dom.elGraphical = e.dom.Paper.group().attr({
                  class: "apexcharts-inner apexcharts-graphical"
                })),
                (e.dom.elDefs = e.dom.Paper.defs()),
                e.dom.Paper.add(e.dom.elGraphical),
                e.dom.elGraphical.add(e.dom.elDefs);
            }
          },
          {
            key: "plotChartType",
            value: function (e, t) {
              var i = this.w,
                a = i.config,
                n = i.globals,
                s = { series: [], i: [] },
                o = { series: [], i: [] },
                r = { series: [], i: [] },
                l = { series: [], i: [] },
                c = { series: [], i: [] },
                h = { series: [], i: [] },
                d = { series: [], i: [] },
                u = { series: [], i: [] },
                g = { series: [], seriesRangeEnd: [], i: [] };
              n.series.map(function (t, p) {
                var f = 0;
                void 0 !== e[p].type
                  ? ("column" === e[p].type || "bar" === e[p].type
                      ? (n.series.length > 1 &&
                          a.plotOptions.bar.horizontal &&
                          console.warn(
                            "Horizontal bars are not supported in a mixed/combo chart. Please turn off `plotOptions.bar.horizontal`"
                          ),
                        c.series.push(t),
                        c.i.push(p),
                        f++,
                        (i.globals.columnSeries = c.series))
                      : "area" === e[p].type
                      ? (o.series.push(t), o.i.push(p), f++)
                      : "line" === e[p].type
                      ? (s.series.push(t), s.i.push(p), f++)
                      : "scatter" === e[p].type
                      ? (r.series.push(t), r.i.push(p))
                      : "bubble" === e[p].type
                      ? (l.series.push(t), l.i.push(p), f++)
                      : "candlestick" === e[p].type
                      ? (h.series.push(t), h.i.push(p), f++)
                      : "boxPlot" === e[p].type
                      ? (d.series.push(t), d.i.push(p), f++)
                      : "rangeBar" === e[p].type
                      ? (u.series.push(t), u.i.push(p), f++)
                      : "rangeArea" === e[p].type
                      ? (g.series.push(n.seriesRangeStart[p]),
                        g.seriesRangeEnd.push(n.seriesRangeEnd[p]),
                        g.i.push(p),
                        f++)
                      : console.warn(
                          "You have specified an unrecognized chart type. Available types for this property are line/area/column/bar/scatter/bubble/candlestick/boxPlot/rangeBar/rangeArea"
                        ),
                    f > 1 && (n.comboCharts = !0))
                  : (s.series.push(t), s.i.push(p));
              });
              var p = new oh(this.ctx, t),
                f = new s9(this.ctx, t);
              this.ctx.pie = new ot(this.ctx);
              var m = new oa(this.ctx);
              this.ctx.rangeBar = new on(this.ctx, t);
              var x = new oi(this.ctx),
                b = [];
              if (n.comboCharts) {
                if (
                  (o.series.length > 0 && b.push(p.draw(o.series, "area", o.i)),
                  c.series.length > 0)
                ) {
                  if (i.config.chart.stacked) {
                    var v = new s6(this.ctx, t);
                    b.push(v.draw(c.series, c.i));
                  } else
                    (this.ctx.bar = new s5(this.ctx, t)),
                      b.push(this.ctx.bar.draw(c.series, c.i));
                }
                if (
                  (g.series.length > 0 &&
                    b.push(
                      p.draw(g.series, "rangeArea", g.i, g.seriesRangeEnd)
                    ),
                  s.series.length > 0 && b.push(p.draw(s.series, "line", s.i)),
                  h.series.length > 0 &&
                    b.push(f.draw(h.series, "candlestick", h.i)),
                  d.series.length > 0 &&
                    b.push(f.draw(d.series, "boxPlot", d.i)),
                  u.series.length > 0 &&
                    b.push(this.ctx.rangeBar.draw(u.series, u.i)),
                  r.series.length > 0)
                ) {
                  var y = new oh(this.ctx, t, !0);
                  b.push(y.draw(r.series, "scatter", r.i));
                }
                if (l.series.length > 0) {
                  var w = new oh(this.ctx, t, !0);
                  b.push(w.draw(l.series, "bubble", l.i));
                }
              } else
                switch (a.chart.type) {
                  case "line":
                    b = p.draw(n.series, "line");
                    break;
                  case "area":
                    b = p.draw(n.series, "area");
                    break;
                  case "bar":
                    a.chart.stacked
                      ? (b = new s6(this.ctx, t).draw(n.series))
                      : ((this.ctx.bar = new s5(this.ctx, t)),
                        (b = this.ctx.bar.draw(n.series)));
                    break;
                  case "candlestick":
                    b = new s9(this.ctx, t).draw(n.series, "candlestick");
                    break;
                  case "boxPlot":
                    b = new s9(this.ctx, t).draw(n.series, a.chart.type);
                    break;
                  case "rangeBar":
                    b = this.ctx.rangeBar.draw(n.series);
                    break;
                  case "rangeArea":
                    b = p.draw(
                      n.seriesRangeStart,
                      "rangeArea",
                      void 0,
                      n.seriesRangeEnd
                    );
                    break;
                  case "heatmap":
                    b = new s7(this.ctx, t).draw(n.series);
                    break;
                  case "treemap":
                    b = new og(this.ctx, t).draw(n.series);
                    break;
                  case "pie":
                  case "donut":
                  case "polarArea":
                    b = this.ctx.pie.draw(n.series);
                    break;
                  case "radialBar":
                    b = m.draw(n.series);
                    break;
                  case "radar":
                    b = x.draw(n.series);
                    break;
                  default:
                    b = p.draw(n.series);
                }
              return b;
            }
          },
          {
            key: "setSVGDimensions",
            value: function () {
              var e = this.w.globals,
                t = this.w.config;
              (e.svgWidth = t.chart.width), (e.svgHeight = t.chart.height);
              var i = st.getDimensions(this.el),
                a = t.chart.width
                  .toString()
                  .split(/[0-9]+/g)
                  .pop();
              "%" === a
                ? st.isNumber(i[0]) &&
                  (0 === i[0].width &&
                    (i = st.getDimensions(this.el.parentNode)),
                  (e.svgWidth = (i[0] * parseInt(t.chart.width, 10)) / 100))
                : ("px" !== a && "" !== a) ||
                  (e.svgWidth = parseInt(t.chart.width, 10));
              var n = t.chart.height
                .toString()
                .split(/[0-9]+/g)
                .pop();
              if ("auto" !== e.svgHeight && "" !== e.svgHeight) {
                if ("%" === n) {
                  var s = st.getDimensions(this.el.parentNode);
                  e.svgHeight = (s[1] * parseInt(t.chart.height, 10)) / 100;
                } else e.svgHeight = parseInt(t.chart.height, 10);
              } else
                e.axisCharts
                  ? (e.svgHeight = e.svgWidth / 1.61)
                  : (e.svgHeight = e.svgWidth / 1.2);
              if (
                (e.svgWidth < 0 && (e.svgWidth = 0),
                e.svgHeight < 0 && (e.svgHeight = 0),
                sn.setAttrs(e.dom.Paper.node, {
                  width: e.svgWidth,
                  height: e.svgHeight
                }),
                "%" !== n)
              ) {
                var o = t.chart.sparkline.enabled
                  ? 0
                  : e.axisCharts
                  ? t.chart.parentHeightOffset
                  : 0;
                e.dom.Paper.node.parentNode.parentNode.style.minHeight =
                  e.svgHeight + o + "px";
              }
              (e.dom.elWrap.style.width = e.svgWidth + "px"),
                (e.dom.elWrap.style.height = e.svgHeight + "px");
            }
          },
          {
            key: "shiftGraphPosition",
            value: function () {
              var e = this.w.globals,
                t = e.translateY,
                i = { transform: "translate(" + e.translateX + ", " + t + ")" };
              sn.setAttrs(e.dom.elGraphical.node, i);
            }
          },
          {
            key: "resizeNonAxisCharts",
            value: function () {
              var e = this.w,
                t = e.globals,
                i = 0,
                a = e.config.chart.sparkline.enabled ? 1 : 15;
              (a += e.config.grid.padding.bottom),
                ("top" !== e.config.legend.position &&
                  "bottom" !== e.config.legend.position) ||
                  !e.config.legend.show ||
                  e.config.legend.floating ||
                  (i =
                    new s$(this.ctx).legendHelpers.getLegendBBox().clwh + 10);
              var n = e.globals.dom.baseEl.querySelector(
                  ".apexcharts-radialbar, .apexcharts-pie"
                ),
                s = 2.05 * e.globals.radialSize;
              if (
                n &&
                !e.config.chart.sparkline.enabled &&
                0 !== e.config.plotOptions.radialBar.startAngle
              ) {
                var o = st.getBoundingClientRect(n);
                s = o.bottom;
                var r = o.bottom - o.top;
                s = Math.max(2.05 * e.globals.radialSize, r);
              }
              var l = s + t.translateY + i + a;
              t.dom.elLegendForeign &&
                t.dom.elLegendForeign.setAttribute("height", l),
                (e.config.chart.height &&
                  String(e.config.chart.height).indexOf("%") > 0) ||
                  ((t.dom.elWrap.style.height = l + "px"),
                  sn.setAttrs(t.dom.Paper.node, { height: l }),
                  (t.dom.Paper.node.parentNode.parentNode.style.minHeight =
                    l + "px"));
            }
          },
          {
            key: "coreCalculations",
            value: function () {
              new sD(this.ctx).init();
            }
          },
          {
            key: "resetGlobals",
            value: function () {
              var e = this,
                t = function () {
                  return e.w.config.series.map(function (e) {
                    return [];
                  });
                },
                i = new sv(),
                a = this.w.globals;
              i.initGlobalVars(a),
                (a.seriesXvalues = t()),
                (a.seriesYvalues = t());
            }
          },
          {
            key: "isMultipleY",
            value: function () {
              if (
                this.w.config.yaxis.constructor === Array &&
                this.w.config.yaxis.length > 1
              )
                return (this.w.globals.isMultipleYAxis = !0), !0;
            }
          },
          {
            key: "xySettings",
            value: function () {
              var e = null,
                t = this.w;
              if (t.globals.axisCharts) {
                if (
                  ("back" === t.config.xaxis.crosshairs.position &&
                    new sz(this.ctx).drawXCrosshairs(),
                  "back" === t.config.yaxis[0].crosshairs.position &&
                    new sz(this.ctx).drawYCrosshairs(),
                  "datetime" === t.config.xaxis.type &&
                    void 0 === t.config.xaxis.labels.formatter)
                ) {
                  this.ctx.timeScale = new op(this.ctx);
                  var i = [];
                  isFinite(t.globals.minX) &&
                  isFinite(t.globals.maxX) &&
                  !t.globals.isBarHorizontal
                    ? (i = this.ctx.timeScale.calculateTimeScaleTicks(
                        t.globals.minX,
                        t.globals.maxX
                      ))
                    : t.globals.isBarHorizontal &&
                      (i = this.ctx.timeScale.calculateTimeScaleTicks(
                        t.globals.minY,
                        t.globals.maxY
                      )),
                    this.ctx.timeScale.recalcDimensionsBasedOnFormat(i);
                }
                e = new ss(this.ctx).getCalculatedRatios();
              }
              return e;
            }
          },
          {
            key: "updateSourceChart",
            value: function (e) {
              (this.ctx.w.globals.selection = void 0),
                this.ctx.updateHelpers._updateOptions(
                  {
                    chart: {
                      selection: {
                        xaxis: { min: e.w.globals.minX, max: e.w.globals.maxX }
                      }
                    }
                  },
                  !1,
                  !1
                );
            }
          },
          {
            key: "setupBrushHandler",
            value: function () {
              var e = this,
                t = this.w;
              if (
                t.config.chart.brush.enabled &&
                "function" != typeof t.config.chart.events.selection
              ) {
                var i = Array.isArray(t.config.chart.brush.targets) || [
                  t.config.chart.brush.target
                ];
                i.forEach(function (t) {
                  var i = ApexCharts.getChartByID(t);
                  (i.w.globals.brushSource = e.ctx),
                    "function" != typeof i.w.config.chart.events.zoomed &&
                      (i.w.config.chart.events.zoomed = function () {
                        e.updateSourceChart(i);
                      }),
                    "function" != typeof i.w.config.chart.events.scrolled &&
                      (i.w.config.chart.events.scrolled = function () {
                        e.updateSourceChart(i);
                      });
                }),
                  (t.config.chart.events.selection = function (e, a) {
                    i.forEach(function (e) {
                      var i = ApexCharts.getChartByID(e),
                        n = st.clone(t.config.yaxis);
                      t.config.chart.brush.autoScaleYaxis &&
                        1 === i.w.globals.series.length &&
                        (n = new s_(i).autoScaleY(i, n, a));
                      var s = i.w.config.yaxis.reduce(function (e, t, a) {
                        return [].concat(n8(e), [
                          nJ(
                            nJ({}, i.w.config.yaxis[a]),
                            {},
                            { min: n[0].min, max: n[0].max }
                          )
                        ]);
                      }, []);
                      i.ctx.updateHelpers._updateOptions(
                        {
                          xaxis: { min: a.xaxis.min, max: a.xaxis.max },
                          yaxis: s
                        },
                        !1,
                        !1,
                        !1,
                        !1
                      );
                    });
                  });
              }
            }
          }
        ]),
        e
      );
    })(),
    om = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "_updateOptions",
            value: function (e) {
              var t = this,
                i =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1],
                a =
                  !(arguments.length > 2 && void 0 !== arguments[2]) ||
                  arguments[2],
                n =
                  !(arguments.length > 3 && void 0 !== arguments[3]) ||
                  arguments[3],
                s =
                  arguments.length > 4 &&
                  void 0 !== arguments[4] &&
                  arguments[4];
              return new Promise(function (o) {
                var r = [t.ctx];
                n && (r = t.ctx.getSyncedCharts()),
                  t.ctx.w.globals.isExecCalled &&
                    ((r = [t.ctx]), (t.ctx.w.globals.isExecCalled = !1)),
                  r.forEach(function (n, l) {
                    var c = n.w;
                    if (
                      ((c.globals.shouldAnimate = a),
                      i ||
                        ((c.globals.resized = !0),
                        (c.globals.dataChanged = !0),
                        a && n.series.getPreviousPaths()),
                      e &&
                        "object" === nK(e) &&
                        ((n.config = new sb(e)),
                        (e = ss.extendArrayProps(n.config, e, c)),
                        n.w.globals.chartID !== t.ctx.w.globals.chartID &&
                          delete e.series,
                        (c.config = st.extend(c.config, e)),
                        s &&
                          ((c.globals.lastXAxis = e.xaxis
                            ? st.clone(e.xaxis)
                            : []),
                          (c.globals.lastYAxis = e.yaxis
                            ? st.clone(e.yaxis)
                            : []),
                          (c.globals.initialConfig = st.extend({}, c.config)),
                          (c.globals.initialSeries = st.clone(c.config.series)),
                          e.series)))
                    ) {
                      for (
                        var h = 0;
                        h < c.globals.collapsedSeriesIndices.length;
                        h++
                      ) {
                        var d =
                          c.config.series[c.globals.collapsedSeriesIndices[h]];
                        c.globals.collapsedSeries[h].data = c.globals.axisCharts
                          ? d.data.slice()
                          : d;
                      }
                      for (
                        var u = 0;
                        u < c.globals.ancillaryCollapsedSeriesIndices.length;
                        u++
                      ) {
                        var g =
                          c.config.series[
                            c.globals.ancillaryCollapsedSeriesIndices[u]
                          ];
                        c.globals.ancillaryCollapsedSeries[u].data = c.globals
                          .axisCharts
                          ? g.data.slice()
                          : g;
                      }
                      n.series.emptyCollapsedSeries(c.config.series);
                    }
                    return n.update(e).then(function () {
                      l === r.length - 1 && o(n);
                    });
                  });
              });
            }
          },
          {
            key: "_updateSeries",
            value: function (e, t) {
              var i = this,
                a =
                  arguments.length > 2 &&
                  void 0 !== arguments[2] &&
                  arguments[2];
              return new Promise(function (n) {
                var s,
                  o = i.w;
                return (
                  (o.globals.shouldAnimate = t),
                  (o.globals.dataChanged = !0),
                  t && i.ctx.series.getPreviousPaths(),
                  o.globals.axisCharts
                    ? (0 ===
                        (s = e.map(function (e, t) {
                          return i._extendSeries(e, t);
                        })).length && (s = [{ data: [] }]),
                      (o.config.series = s))
                    : (o.config.series = e.slice()),
                  a &&
                    ((o.globals.initialConfig.series = st.clone(
                      o.config.series
                    )),
                    (o.globals.initialSeries = st.clone(o.config.series))),
                  i.ctx.update().then(function () {
                    n(i.ctx);
                  })
                );
              });
            }
          },
          {
            key: "_extendSeries",
            value: function (e, t) {
              var i = this.w,
                a = i.config.series[t];
              return nJ(
                nJ({}, i.config.series[t]),
                {},
                {
                  name: e.name ? e.name : a && a.name,
                  color: e.color ? e.color : a && a.color,
                  type: e.type ? e.type : a && a.type,
                  group: e.group ? e.group : a && a.group,
                  data: e.data ? e.data : a && a.data
                }
              );
            }
          },
          {
            key: "toggleDataPointSelection",
            value: function (e, t) {
              var i = this.w,
                a = null,
                n = ".apexcharts-series[data\\:realIndex='".concat(e, "']");
              return (
                i.globals.axisCharts
                  ? (a = i.globals.dom.Paper.select(
                      ""
                        .concat(n, " path[j='")
                        .concat(t, "'], ")
                        .concat(n, " circle[j='")
                        .concat(t, "'], ")
                        .concat(n, " rect[j='")
                        .concat(t, "']")
                    ).members[0])
                  : void 0 === t &&
                    ((a = i.globals.dom.Paper.select(
                      "".concat(n, " path[j='").concat(e, "']")
                    ).members[0]),
                    ("pie" !== i.config.chart.type &&
                      "polarArea" !== i.config.chart.type &&
                      "donut" !== i.config.chart.type) ||
                      this.ctx.pie.pieClicked(e)),
                a
                  ? (new sn(this.ctx).pathMouseDown(a, null),
                    a.node ? a.node : null)
                  : (console.warn(
                      "toggleDataPointSelection: Element not found"
                    ),
                    null)
              );
            }
          },
          {
            key: "forceXAxisUpdate",
            value: function (e) {
              var t = this.w;
              return (
                ["min", "max"].forEach(function (i) {
                  void 0 !== e.xaxis[i] &&
                    ((t.config.xaxis[i] = e.xaxis[i]),
                    (t.globals.lastXAxis[i] = e.xaxis[i]));
                }),
                e.xaxis.categories &&
                  e.xaxis.categories.length &&
                  (t.config.xaxis.categories = e.xaxis.categories),
                t.config.xaxis.convertedCatToNumeric &&
                  (e = new sx(e).convertCatToNumericXaxis(e, this.ctx)),
                e
              );
            }
          },
          {
            key: "forceYAxisUpdate",
            value: function (e) {
              return (
                e.chart &&
                  e.chart.stacked &&
                  "100%" === e.chart.stackType &&
                  (Array.isArray(e.yaxis)
                    ? e.yaxis.forEach(function (t, i) {
                        (e.yaxis[i].min = 0), (e.yaxis[i].max = 100);
                      })
                    : ((e.yaxis.min = 0), (e.yaxis.max = 100))),
                e
              );
            }
          },
          {
            key: "revertDefaultAxisMinMax",
            value: function (e) {
              var t = this,
                i = this.w,
                a = i.globals.lastXAxis,
                n = i.globals.lastYAxis;
              e && e.xaxis && (a = e.xaxis),
                e && e.yaxis && (n = e.yaxis),
                (i.config.xaxis.min = a.min),
                (i.config.xaxis.max = a.max);
              var s = function (e) {
                void 0 !== n[e] &&
                  ((i.config.yaxis[e].min = n[e].min),
                  (i.config.yaxis[e].max = n[e].max));
              };
              i.config.yaxis.map(function (e, a) {
                i.globals.zoomed || void 0 !== n[a]
                  ? s(a)
                  : void 0 !== t.ctx.opts.yaxis[a] &&
                    ((e.min = t.ctx.opts.yaxis[a].min),
                    (e.max = t.ctx.opts.yaxis[a].max));
              });
            }
          }
        ]),
        e
      );
    })();
  (od = "undefined" != typeof window ? window : void 0),
    (ou = function (e, t) {
      var i = ((void 0 !== this ? this : e).SVG = function (e) {
        if (i.supported)
          return (e = new i.Doc(e)), i.parser.draw || i.prepare(), e;
      });
      if (
        ((i.ns = "http://www.w3.org/2000/svg"),
        (i.xmlns = "http://www.w3.org/2000/xmlns/"),
        (i.xlink = "http://www.w3.org/1999/xlink"),
        (i.svgjs = "http://svgjs.dev"),
        (i.supported = !0),
        !i.supported)
      )
        return !1;
      (i.did = 1e3),
        (i.eid = function (e) {
          return "Svgjs" + h(e) + i.did++;
        }),
        (i.create = function (e) {
          var i = t.createElementNS(this.ns, e);
          return i.setAttribute("id", this.eid(e)), i;
        }),
        (i.extend = function () {
          var e, t;
          t = (e = [].slice.call(arguments)).pop();
          for (var a = e.length - 1; a >= 0; a--)
            if (e[a]) for (var n in t) e[a].prototype[n] = t[n];
          i.Set && i.Set.inherit && i.Set.inherit();
        }),
        (i.invent = function (e) {
          var t =
            "function" == typeof e.create
              ? e.create
              : function () {
                  this.constructor.call(this, i.create(e.create));
                };
          return (
            e.inherit && (t.prototype = new e.inherit()),
            e.extend && i.extend(t, e.extend),
            e.construct && i.extend(e.parent || i.Container, e.construct),
            t
          );
        }),
        (i.adopt = function (t) {
          var a;
          return t
            ? t.instance
              ? t.instance
              : (((a =
                  "svg" == t.nodeName
                    ? t.parentNode instanceof e.SVGElement
                      ? new i.Nested()
                      : new i.Doc()
                    : "linearGradient" == t.nodeName
                    ? new i.Gradient("linear")
                    : "radialGradient" == t.nodeName
                    ? new i.Gradient("radial")
                    : i[h(t.nodeName)]
                    ? new i[h(t.nodeName)]()
                    : new i.Element(t)).type = t.nodeName),
                (a.node = t),
                (t.instance = a),
                a instanceof i.Doc && a.namespace().defs(),
                a.setData(JSON.parse(t.getAttribute("svgjs:data")) || {}),
                a)
            : null;
        }),
        (i.prepare = function () {
          var e = t.getElementsByTagName("body")[0],
            a = (e ? new i.Doc(e) : i.adopt(t.documentElement).nested()).size(
              2,
              0
            );
          i.parser = {
            body: e || t.documentElement,
            draw: a.style(
              "opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden"
            ).node,
            poly: a.polyline().node,
            path: a.path().node,
            native: i.create("svg")
          };
        }),
        (i.parser = { native: i.create("svg") }),
        t.addEventListener(
          "DOMContentLoaded",
          function () {
            i.parser.draw || i.prepare();
          },
          !1
        ),
        (i.regex = {
          numberAndUnit: /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i,
          hex: /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i,
          rgb: /rgb\((\d+),(\d+),(\d+)\)/,
          reference: /#([a-z0-9\-_]+)/i,
          transforms: /\)\s*,?\s*/,
          whitespace: /\s/g,
          isHex: /^#[a-f0-9]{3,6}$/i,
          isRgb: /^rgb\(/,
          isCss: /[^:]+:[^;]+;?/,
          isBlank: /^(\s+)?$/,
          isNumber: /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
          isPercent: /^-?[\d\.]+%$/,
          isImage: /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i,
          delimiter: /[\s,]+/,
          hyphen: /([^e])\-/gi,
          pathLetters: /[MLHVCSQTAZ]/gi,
          isPathLetter: /[MLHVCSQTAZ]/i,
          numbersWithDots:
            /((\d?\.\d+(?:e[+-]?\d+)?)((?:\.\d+(?:e[+-]?\d+)?)+))+/gi,
          dots: /\./g
        }),
        (i.utils = {
          map: function (e, t) {
            for (var i = e.length, a = [], n = 0; n < i; n++) a.push(t(e[n]));
            return a;
          },
          filter: function (e, t) {
            for (var i = e.length, a = [], n = 0; n < i; n++)
              t(e[n]) && a.push(e[n]);
            return a;
          },
          filterSVGElements: function (t) {
            return this.filter(t, function (t) {
              return t instanceof e.SVGElement;
            });
          }
        }),
        (i.defaults = {
          attrs: {
            "fill-opacity": 1,
            "stroke-opacity": 1,
            "stroke-width": 0,
            "stroke-linejoin": "miter",
            "stroke-linecap": "butt",
            fill: "#000000",
            stroke: "#000000",
            opacity: 1,
            x: 0,
            y: 0,
            cx: 0,
            cy: 0,
            width: 0,
            height: 0,
            r: 0,
            rx: 0,
            ry: 0,
            offset: 0,
            "stop-opacity": 1,
            "stop-color": "#000000",
            "font-size": 16,
            "font-family": "Helvetica, Arial, sans-serif",
            "text-anchor": "start"
          }
        }),
        (i.Color = function (e) {
          var t;
          (this.r = 0),
            (this.g = 0),
            (this.b = 0),
            e &&
              ("string" == typeof e
                ? i.regex.isRgb.test(e)
                  ? ((t = i.regex.rgb.exec(e.replace(i.regex.whitespace, ""))),
                    (this.r = parseInt(t[1])),
                    (this.g = parseInt(t[2])),
                    (this.b = parseInt(t[3])))
                  : i.regex.isHex.test(e) &&
                    ((t = i.regex.hex.exec(
                      4 == e.length
                        ? [
                            "#",
                            e.substring(1, 2),
                            e.substring(1, 2),
                            e.substring(2, 3),
                            e.substring(2, 3),
                            e.substring(3, 4),
                            e.substring(3, 4)
                          ].join("")
                        : e
                    )),
                    (this.r = parseInt(t[1], 16)),
                    (this.g = parseInt(t[2], 16)),
                    (this.b = parseInt(t[3], 16)))
                : "object" === nK(e) &&
                  ((this.r = e.r), (this.g = e.g), (this.b = e.b)));
        }),
        i.extend(i.Color, {
          toString: function () {
            return this.toHex();
          },
          toHex: function () {
            return "#" + d(this.r) + d(this.g) + d(this.b);
          },
          toRgb: function () {
            return "rgb(" + [this.r, this.g, this.b].join() + ")";
          },
          brightness: function () {
            return (
              (this.r / 255) * 0.3 +
              (this.g / 255) * 0.59 +
              (this.b / 255) * 0.11
            );
          },
          morph: function (e) {
            return (this.destination = new i.Color(e)), this;
          },
          at: function (e) {
            return this.destination
              ? ((e = e < 0 ? 0 : e > 1 ? 1 : e),
                new i.Color({
                  r: ~~(this.r + (this.destination.r - this.r) * e),
                  g: ~~(this.g + (this.destination.g - this.g) * e),
                  b: ~~(this.b + (this.destination.b - this.b) * e)
                }))
              : this;
          }
        }),
        (i.Color.test = function (e) {
          return (e += ""), i.regex.isHex.test(e) || i.regex.isRgb.test(e);
        }),
        (i.Color.isRgb = function (e) {
          return (
            e &&
            "number" == typeof e.r &&
            "number" == typeof e.g &&
            "number" == typeof e.b
          );
        }),
        (i.Color.isColor = function (e) {
          return i.Color.isRgb(e) || i.Color.test(e);
        }),
        (i.Array = function (e, t) {
          0 == (e = (e || []).valueOf()).length && t && (e = t.valueOf()),
            (this.value = this.parse(e));
        }),
        i.extend(i.Array, {
          toString: function () {
            return this.value.join(" ");
          },
          valueOf: function () {
            return this.value;
          },
          parse: function (e) {
            return Array.isArray((e = e.valueOf())) ? e : this.split(e);
          }
        }),
        (i.PointArray = function (e, t) {
          i.Array.call(this, e, t || [[0, 0]]);
        }),
        (i.PointArray.prototype = new i.Array()),
        (i.PointArray.prototype.constructor = i.PointArray);
      for (
        var a = {
            M: function (e, t, i) {
              return (t.x = i.x = e[0]), (t.y = i.y = e[1]), ["M", t.x, t.y];
            },
            L: function (e, t) {
              return (t.x = e[0]), (t.y = e[1]), ["L", e[0], e[1]];
            },
            H: function (e, t) {
              return (t.x = e[0]), ["H", e[0]];
            },
            V: function (e, t) {
              return (t.y = e[0]), ["V", e[0]];
            },
            C: function (e, t) {
              return (
                (t.x = e[4]),
                (t.y = e[5]),
                ["C", e[0], e[1], e[2], e[3], e[4], e[5]]
              );
            },
            Q: function (e, t) {
              return (t.x = e[2]), (t.y = e[3]), ["Q", e[0], e[1], e[2], e[3]];
            },
            S: function (e, t) {
              return (t.x = e[2]), (t.y = e[3]), ["S", e[0], e[1], e[2], e[3]];
            },
            Z: function (e, t, i) {
              return (t.x = i.x), (t.y = i.y), ["Z"];
            }
          },
          n = "mlhvqtcsaz".split(""),
          s = 0,
          o = n.length;
        s < o;
        ++s
      )
        a[n[s]] = (function (e) {
          return function (t, i, n) {
            if ("H" == e) t[0] = t[0] + i.x;
            else if ("V" == e) t[0] = t[0] + i.y;
            else if ("A" == e) (t[5] = t[5] + i.x), (t[6] = t[6] + i.y);
            else
              for (var s = 0, o = t.length; s < o; ++s)
                t[s] = t[s] + (s % 2 ? i.y : i.x);
            if (a && "function" == typeof a[e]) return a[e](t, i, n);
          };
        })(n[s].toUpperCase());
      (i.PathArray = function (e, t) {
        i.Array.call(this, e, t || [["M", 0, 0]]);
      }),
        (i.PathArray.prototype = new i.Array()),
        (i.PathArray.prototype.constructor = i.PathArray),
        i.extend(i.PathArray, {
          toString: function () {
            return (function (e) {
              for (var t = 0, i = e.length, a = ""; t < i; t++)
                (a += e[t][0]),
                  null != e[t][1] &&
                    ((a += e[t][1]),
                    null != e[t][2] &&
                      ((a += " " + e[t][2]),
                      null != e[t][3] &&
                        ((a += " " + e[t][3] + " " + e[t][4]),
                        null != e[t][5] &&
                          ((a += " " + e[t][5] + " " + e[t][6]),
                          null != e[t][7] && (a += " " + e[t][7])))));
              return a + " ";
            })(this.value);
          },
          move: function (e, t) {
            var i = this.bbox();
            return i.x, i.y, this;
          },
          at: function (e) {
            if (!this.destination) return this;
            for (
              var t = this.value,
                a = this.destination.value,
                n = [],
                s = new i.PathArray(),
                o = 0,
                r = t.length;
              o < r;
              o++
            ) {
              n[o] = [t[o][0]];
              for (var l = 1, c = t[o].length; l < c; l++)
                n[o][l] = t[o][l] + (a[o][l] - t[o][l]) * e;
              "A" === n[o][0] &&
                ((n[o][4] = +(0 != n[o][4])), (n[o][5] = +(0 != n[o][5])));
            }
            return (s.value = n), s;
          },
          parse: function (e) {
            if (e instanceof i.PathArray) return e.valueOf();
            var t,
              n = {
                M: 2,
                L: 2,
                H: 1,
                V: 1,
                C: 6,
                S: 4,
                Q: 4,
                T: 2,
                A: 7,
                Z: 0
              };
            e =
              "string" == typeof e
                ? e
                    .replace(i.regex.numbersWithDots, l)
                    .replace(i.regex.pathLetters, " $& ")
                    .replace(i.regex.hyphen, "$1 -")
                    .trim()
                    .split(i.regex.delimiter)
                : e.reduce(function (e, t) {
                    return [].concat.call(e, t);
                  }, []);
            var s = [],
              o = new i.Point(),
              r = new i.Point(),
              c = 0,
              h = e.length;
            do
              i.regex.isPathLetter.test(e[c])
                ? ((t = e[c]), ++c)
                : "M" == t
                ? (t = "L")
                : "m" == t && (t = "l"),
                s.push(
                  a[t].call(
                    null,
                    e.slice(c, (c += n[t.toUpperCase()])).map(parseFloat),
                    o,
                    r
                  )
                );
            while (h > c);
            return s;
          },
          bbox: function () {
            return (
              i.parser.draw || i.prepare(),
              i.parser.path.setAttribute("d", this.toString()),
              i.parser.path.getBBox()
            );
          }
        }),
        (i.Number = i.invent({
          create: function (e, t) {
            (this.value = 0),
              (this.unit = t || ""),
              "number" == typeof e
                ? (this.value = isNaN(e)
                    ? 0
                    : isFinite(e)
                    ? e
                    : e < 0
                    ? -34e37
                    : 34e37)
                : "string" == typeof e
                ? (t = e.match(i.regex.numberAndUnit)) &&
                  ((this.value = parseFloat(t[1])),
                  "%" == t[5]
                    ? (this.value /= 100)
                    : "s" == t[5] && (this.value *= 1e3),
                  (this.unit = t[5]))
                : e instanceof i.Number &&
                  ((this.value = e.valueOf()), (this.unit = e.unit));
          },
          extend: {
            toString: function () {
              return (
                ("%" == this.unit
                  ? ~~(1e8 * this.value) / 1e6
                  : "s" == this.unit
                  ? this.value / 1e3
                  : this.value) + this.unit
              );
            },
            toJSON: function () {
              return this.toString();
            },
            valueOf: function () {
              return this.value;
            },
            plus: function (e) {
              return (
                (e = new i.Number(e)),
                new i.Number(this + e, this.unit || e.unit)
              );
            },
            minus: function (e) {
              return (
                (e = new i.Number(e)),
                new i.Number(this - e, this.unit || e.unit)
              );
            },
            times: function (e) {
              return (
                (e = new i.Number(e)),
                new i.Number(this * e, this.unit || e.unit)
              );
            },
            divide: function (e) {
              return (
                (e = new i.Number(e)),
                new i.Number(this / e, this.unit || e.unit)
              );
            },
            to: function (e) {
              var t = new i.Number(this);
              return "string" == typeof e && (t.unit = e), t;
            },
            morph: function (e) {
              return (
                (this.destination = new i.Number(e)),
                e.relative && (this.destination.value += this.value),
                this
              );
            },
            at: function (e) {
              return this.destination
                ? new i.Number(this.destination).minus(this).times(e).plus(this)
                : this;
            }
          }
        })),
        (i.Element = i.invent({
          create: function (e) {
            (this._stroke = i.defaults.attrs.stroke),
              (this._event = null),
              (this.dom = {}),
              (this.node = e) &&
                ((this.type = e.nodeName),
                (this.node.instance = this),
                (this._stroke = e.getAttribute("stroke") || this._stroke));
          },
          extend: {
            x: function (e) {
              return this.attr("x", e);
            },
            y: function (e) {
              return this.attr("y", e);
            },
            cx: function (e) {
              return null == e
                ? this.x() + this.width() / 2
                : this.x(e - this.width() / 2);
            },
            cy: function (e) {
              return null == e
                ? this.y() + this.height() / 2
                : this.y(e - this.height() / 2);
            },
            move: function (e, t) {
              return this.x(e).y(t);
            },
            center: function (e, t) {
              return this.cx(e).cy(t);
            },
            width: function (e) {
              return this.attr("width", e);
            },
            height: function (e) {
              return this.attr("height", e);
            },
            size: function (e, t) {
              var a = u(this, e, t);
              return this.width(new i.Number(a.width)).height(
                new i.Number(a.height)
              );
            },
            clone: function (e) {
              this.writeDataToDom();
              var t = f(this.node.cloneNode(!0));
              return e ? e.add(t) : this.after(t), t;
            },
            remove: function () {
              return this.parent() && this.parent().removeElement(this), this;
            },
            replace: function (e) {
              return this.after(e).remove(), e;
            },
            addTo: function (e) {
              return e.put(this);
            },
            putIn: function (e) {
              return e.add(this);
            },
            id: function (e) {
              return this.attr("id", e);
            },
            show: function () {
              return this.style("display", "");
            },
            hide: function () {
              return this.style("display", "none");
            },
            visible: function () {
              return "none" != this.style("display");
            },
            toString: function () {
              return this.attr("id");
            },
            classes: function () {
              var e = this.attr("class");
              return null == e ? [] : e.trim().split(i.regex.delimiter);
            },
            hasClass: function (e) {
              return -1 != this.classes().indexOf(e);
            },
            addClass: function (e) {
              if (!this.hasClass(e)) {
                var t = this.classes();
                t.push(e), this.attr("class", t.join(" "));
              }
              return this;
            },
            removeClass: function (e) {
              return (
                this.hasClass(e) &&
                  this.attr(
                    "class",
                    this.classes()
                      .filter(function (t) {
                        return t != e;
                      })
                      .join(" ")
                  ),
                this
              );
            },
            toggleClass: function (e) {
              return this.hasClass(e) ? this.removeClass(e) : this.addClass(e);
            },
            reference: function (e) {
              return i.get(this.attr(e));
            },
            parent: function (t) {
              var a = this;
              if (!a.node.parentNode) return null;
              if (((a = i.adopt(a.node.parentNode)), !t)) return a;
              for (; a && a.node instanceof e.SVGElement; ) {
                if ("string" == typeof t ? a.matches(t) : a instanceof t)
                  return a;
                if (
                  !a.node.parentNode ||
                  "#document" == a.node.parentNode.nodeName
                )
                  return null;
                a = i.adopt(a.node.parentNode);
              }
            },
            doc: function () {
              return this instanceof i.Doc ? this : this.parent(i.Doc);
            },
            parents: function (e) {
              var t = [],
                i = this;
              do {
                if (!(i = i.parent(e)) || !i.node) break;
                t.push(i);
              } while (i.parent);
              return t;
            },
            matches: function (e) {
              var t;
              return (
                (t = this.node).matches ||
                t.matchesSelector ||
                t.msMatchesSelector ||
                t.mozMatchesSelector ||
                t.webkitMatchesSelector ||
                t.oMatchesSelector
              ).call(t, e);
            },
            native: function () {
              return this.node;
            },
            svg: function (e) {
              var a = t.createElement("svg");
              if (!(e && this instanceof i.Parent))
                return (
                  a.appendChild((e = t.createElement("svg"))),
                  this.writeDataToDom(),
                  e.appendChild(this.node.cloneNode(!0)),
                  a.innerHTML.replace(/^<svg>/, "").replace(/<\/svg>$/, "")
                );
              a.innerHTML =
                "<svg>" +
                e
                  .replace(/\n/, "")
                  .replace(/<([\w:-]+)([^<]+?)\/>/g, "<$1$2></$1>") +
                "</svg>";
              for (var n = 0, s = a.firstChild.childNodes.length; n < s; n++)
                this.node.appendChild(a.firstChild.firstChild);
              return this;
            },
            writeDataToDom: function () {
              return (
                (this.each || this.lines) &&
                  (this.each ? this : this.lines()).each(function () {
                    this.writeDataToDom();
                  }),
                this.node.removeAttribute("svgjs:data"),
                Object.keys(this.dom).length &&
                  this.node.setAttribute(
                    "svgjs:data",
                    JSON.stringify(this.dom)
                  ),
                this
              );
            },
            setData: function (e) {
              return (this.dom = e), this;
            },
            is: function (e) {
              return this instanceof e;
            }
          }
        })),
        (i.easing = {
          "-": function (e) {
            return e;
          },
          "<>": function (e) {
            return -Math.cos(e * Math.PI) / 2 + 0.5;
          },
          ">": function (e) {
            return Math.sin((e * Math.PI) / 2);
          },
          "<": function (e) {
            return 1 - Math.cos((e * Math.PI) / 2);
          }
        }),
        (i.morph = function (e) {
          return function (t, a) {
            return new i.MorphObj(t, a).at(e);
          };
        }),
        (i.Situation = i.invent({
          create: function (e) {
            (this.init = !1),
              (this.reversed = !1),
              (this.reversing = !1),
              (this.duration = new i.Number(e.duration).valueOf()),
              (this.delay = new i.Number(e.delay).valueOf()),
              (this.start = +new Date() + this.delay),
              (this.finish = this.start + this.duration),
              (this.ease = e.ease),
              (this.loop = 0),
              (this.loops = !1),
              (this.animations = {}),
              (this.attrs = {}),
              (this.styles = {}),
              (this.transforms = []),
              (this.once = {});
          }
        })),
        (i.FX = i.invent({
          create: function (e) {
            (this._target = e),
              (this.situations = []),
              (this.active = !1),
              (this.situation = null),
              (this.paused = !1),
              (this.lastPos = 0),
              (this.pos = 0),
              (this.absPos = 0),
              (this._speed = 1);
          },
          extend: {
            animate: function (e, t, a) {
              "object" === nK(e) &&
                ((t = e.ease), (a = e.delay), (e = e.duration));
              var n = new i.Situation({
                duration: e || 1e3,
                delay: a || 0,
                ease: i.easing[t || "-"] || t
              });
              return this.queue(n), this;
            },
            target: function (e) {
              return e && e instanceof i.Element
                ? ((this._target = e), this)
                : this._target;
            },
            timeToAbsPos: function (e) {
              return (
                (e - this.situation.start) /
                (this.situation.duration / this._speed)
              );
            },
            absPosToTime: function (e) {
              return (
                (this.situation.duration / this._speed) * e +
                this.situation.start
              );
            },
            startAnimFrame: function () {
              this.stopAnimFrame(),
                (this.animationFrame = e.requestAnimationFrame(
                  function () {
                    this.step();
                  }.bind(this)
                ));
            },
            stopAnimFrame: function () {
              e.cancelAnimationFrame(this.animationFrame);
            },
            start: function () {
              return (
                !this.active &&
                  this.situation &&
                  ((this.active = !0), this.startCurrent()),
                this
              );
            },
            startCurrent: function () {
              return (
                (this.situation.start =
                  +new Date() + this.situation.delay / this._speed),
                (this.situation.finish =
                  this.situation.start + this.situation.duration / this._speed),
                this.initAnimations().step()
              );
            },
            queue: function (e) {
              return (
                ("function" == typeof e || e instanceof i.Situation) &&
                  this.situations.push(e),
                this.situation || (this.situation = this.situations.shift()),
                this
              );
            },
            dequeue: function () {
              return (
                this.stop(),
                (this.situation = this.situations.shift()),
                this.situation &&
                  (this.situation instanceof i.Situation
                    ? this.start()
                    : this.situation.call(this)),
                this
              );
            },
            initAnimations: function () {
              var e,
                t = this.situation;
              if (t.init) return this;
              for (var a in t.animations) {
                Array.isArray((e = this.target()[a]())) || (e = [e]),
                  Array.isArray(t.animations[a]) ||
                    (t.animations[a] = [t.animations[a]]);
                for (var n = e.length; n--; )
                  t.animations[a][n] instanceof i.Number &&
                    (e[n] = new i.Number(e[n])),
                    (t.animations[a][n] = e[n].morph(t.animations[a][n]));
              }
              for (var a in t.attrs)
                t.attrs[a] = new i.MorphObj(this.target().attr(a), t.attrs[a]);
              for (var a in t.styles)
                t.styles[a] = new i.MorphObj(
                  this.target().style(a),
                  t.styles[a]
                );
              return (
                (t.initialTransformation = this.target().matrixify()),
                (t.init = !0),
                this
              );
            },
            clearQueue: function () {
              return (this.situations = []), this;
            },
            clearCurrent: function () {
              return (this.situation = null), this;
            },
            stop: function (e, t) {
              var i = this.active;
              return (
                (this.active = !1),
                t && this.clearQueue(),
                e && this.situation && (i || this.startCurrent(), this.atEnd()),
                this.stopAnimFrame(),
                this.clearCurrent()
              );
            },
            after: function (e) {
              var t = this.last();
              return (
                this.target().on("finished.fx", function i(a) {
                  a.detail.situation == t &&
                    (e.call(this, t), this.off("finished.fx", i));
                }),
                this._callStart()
              );
            },
            during: function (e) {
              var t = this.last(),
                a = function (a) {
                  a.detail.situation == t &&
                    e.call(
                      this,
                      a.detail.pos,
                      i.morph(a.detail.pos),
                      a.detail.eased,
                      t
                    );
                };
              return (
                this.target().off("during.fx", a).on("during.fx", a),
                this.after(function () {
                  this.off("during.fx", a);
                }),
                this._callStart()
              );
            },
            afterAll: function (e) {
              var t = function t(i) {
                e.call(this), this.off("allfinished.fx", t);
              };
              return (
                this.target().off("allfinished.fx", t).on("allfinished.fx", t),
                this._callStart()
              );
            },
            last: function () {
              return this.situations.length
                ? this.situations[this.situations.length - 1]
                : this.situation;
            },
            add: function (e, t, i) {
              return (this.last()[i || "animations"][e] = t), this._callStart();
            },
            step: function (e) {
              e || (this.absPos = this.timeToAbsPos(+new Date())),
                !1 !== this.situation.loops
                  ? ((i = Math.floor((t = Math.max(this.absPos, 0)))),
                    !0 === this.situation.loops || i < this.situation.loops
                      ? ((this.pos = t - i),
                        (a = this.situation.loop),
                        (this.situation.loop = i))
                      : ((this.absPos = this.situation.loops),
                        (this.pos = 1),
                        (a = this.situation.loop - 1),
                        (this.situation.loop = this.situation.loops)),
                    this.situation.reversing &&
                      (this.situation.reversed =
                        !!((this.situation.loop - a) % 2) !=
                        this.situation.reversed))
                  : ((this.absPos = Math.min(this.absPos, 1)),
                    (this.pos = this.absPos)),
                this.pos < 0 && (this.pos = 0),
                this.situation.reversed && (this.pos = 1 - this.pos);
              var t,
                i,
                a,
                n = this.situation.ease(this.pos);
              for (var s in this.situation.once)
                s > this.lastPos &&
                  s <= n &&
                  (this.situation.once[s].call(this.target(), this.pos, n),
                  delete this.situation.once[s]);
              return (
                this.active &&
                  this.target().fire("during", {
                    pos: this.pos,
                    eased: n,
                    fx: this,
                    situation: this.situation
                  }),
                this.situation &&
                  (this.eachAt(),
                  (1 == this.pos && !this.situation.reversed) ||
                  (this.situation.reversed && 0 == this.pos)
                    ? (this.stopAnimFrame(),
                      this.target().fire("finished", {
                        fx: this,
                        situation: this.situation
                      }),
                      this.situations.length ||
                        (this.target().fire("allfinished"),
                        this.situations.length ||
                          (this.target().off(".fx"), (this.active = !1))),
                      this.active ? this.dequeue() : this.clearCurrent())
                    : !this.paused && this.active && this.startAnimFrame(),
                  (this.lastPos = n)),
                this
              );
            },
            eachAt: function () {
              var e,
                t = this,
                a = this.target(),
                n = this.situation;
              for (var s in n.animations)
                (e = [].concat(n.animations[s]).map(function (e) {
                  return "string" != typeof e && e.at
                    ? e.at(n.ease(t.pos), t.pos)
                    : e;
                })),
                  a[s].apply(a, e);
              for (var s in n.attrs)
                (e = [s].concat(n.attrs[s]).map(function (e) {
                  return "string" != typeof e && e.at
                    ? e.at(n.ease(t.pos), t.pos)
                    : e;
                })),
                  a.attr.apply(a, e);
              for (var s in n.styles)
                (e = [s].concat(n.styles[s]).map(function (e) {
                  return "string" != typeof e && e.at
                    ? e.at(n.ease(t.pos), t.pos)
                    : e;
                })),
                  a.style.apply(a, e);
              if (n.transforms.length) {
                (e = n.initialTransformation), (s = 0);
                for (var o = n.transforms.length; s < o; s++) {
                  var r = n.transforms[s];
                  r instanceof i.Matrix
                    ? (e = r.relative
                        ? e.multiply(
                            new i.Matrix().morph(r).at(n.ease(this.pos))
                          )
                        : e.morph(r).at(n.ease(this.pos)))
                    : (r.relative || r.undo(e.extract()),
                      (e = e.multiply(r.at(n.ease(this.pos)))));
                }
                a.matrix(e);
              }
              return this;
            },
            once: function (e, t, i) {
              var a = this.last();
              return i || (e = a.ease(e)), (a.once[e] = t), this;
            },
            _callStart: function () {
              return (
                setTimeout(
                  function () {
                    this.start();
                  }.bind(this),
                  0
                ),
                this
              );
            }
          },
          parent: i.Element,
          construct: {
            animate: function (e, t, a) {
              return (this.fx || (this.fx = new i.FX(this))).animate(e, t, a);
            },
            delay: function (e) {
              return (this.fx || (this.fx = new i.FX(this))).delay(e);
            },
            stop: function (e, t) {
              return this.fx && this.fx.stop(e, t), this;
            },
            finish: function () {
              return this.fx && this.fx.finish(), this;
            }
          }
        })),
        (i.MorphObj = i.invent({
          create: function (e, t) {
            return i.Color.isColor(t)
              ? new i.Color(e).morph(t)
              : i.regex.delimiter.test(e)
              ? i.regex.pathLetters.test(e)
                ? new i.PathArray(e).morph(t)
                : new i.Array(e).morph(t)
              : i.regex.numberAndUnit.test(t)
              ? new i.Number(e).morph(t)
              : ((this.value = e), void (this.destination = t));
          },
          extend: {
            at: function (e, t) {
              return t < 1 ? this.value : this.destination;
            },
            valueOf: function () {
              return this.value;
            }
          }
        })),
        i.extend(i.FX, {
          attr: function (e, t, i) {
            if ("object" === nK(e)) for (var a in e) this.attr(a, e[a]);
            else this.add(e, t, "attrs");
            return this;
          },
          plot: function (e, t, i, a) {
            return 4 == arguments.length
              ? this.plot([e, t, i, a])
              : this.add("plot", new (this.target().morphArray)(e));
          }
        }),
        (i.Box = i.invent({
          create: function (e, t, a, n) {
            if (!("object" !== nK(e) || e instanceof i.Element))
              return i.Box.call(
                this,
                null != e.left ? e.left : e.x,
                null != e.top ? e.top : e.y,
                e.width,
                e.height
              );
            4 == arguments.length &&
              ((this.x = e), (this.y = t), (this.width = a), (this.height = n)),
              null == this.x &&
                ((this.x = 0),
                (this.y = 0),
                (this.width = 0),
                (this.height = 0)),
              (this.w = this.width),
              (this.h = this.height),
              (this.x2 = this.x + this.width),
              (this.y2 = this.y + this.height),
              (this.cx = this.x + this.width / 2),
              (this.cy = this.y + this.height / 2);
          }
        })),
        (i.BBox = i.invent({
          create: function (e) {
            if (
              (i.Box.apply(this, [].slice.call(arguments)),
              e instanceof i.Element)
            ) {
              var a;
              try {
                if (!t.documentElement.contains) {
                  for (var n = e.node; n.parentNode; ) n = n.parentNode;
                  if (n != t) throw Error("Element not in the dom");
                }
                a = e.node.getBBox();
              } catch (t) {
                if (e instanceof i.Shape) {
                  i.parser.draw || i.prepare();
                  var s = e.clone(i.parser.draw.instance).show();
                  s &&
                    s.node &&
                    "function" == typeof s.node.getBBox &&
                    (a = s.node.getBBox()),
                    s && "function" == typeof s.remove && s.remove();
                } else
                  a = {
                    x: e.node.clientLeft,
                    y: e.node.clientTop,
                    width: e.node.clientWidth,
                    height: e.node.clientHeight
                  };
              }
              i.Box.call(this, a);
            }
          },
          inherit: i.Box,
          parent: i.Element,
          construct: {
            bbox: function () {
              return new i.BBox(this);
            }
          }
        })),
        (i.BBox.prototype.constructor = i.BBox),
        (i.Matrix = i.invent({
          create: function (e) {
            var t = p([1, 0, 0, 1, 0, 0]);
            e =
              null === e
                ? t
                : e instanceof i.Element
                ? e.matrixify()
                : "string" == typeof e
                ? p(e.split(i.regex.delimiter).map(parseFloat))
                : 6 == arguments.length
                ? p([].slice.call(arguments))
                : Array.isArray(e)
                ? p(e)
                : e && "object" === nK(e)
                ? e
                : t;
            for (var a = x.length - 1; a >= 0; --a)
              this[x[a]] = null != e[x[a]] ? e[x[a]] : t[x[a]];
          },
          extend: {
            extract: function () {
              var e = g(this, 0, 1);
              g(this, 1, 0);
              var t = (180 / Math.PI) * Math.atan2(e.y, e.x) - 90;
              return {
                x: this.e,
                y: this.f,
                transformedX:
                  (this.e * Math.cos((t * Math.PI) / 180) +
                    this.f * Math.sin((t * Math.PI) / 180)) /
                  Math.sqrt(this.a * this.a + this.b * this.b),
                transformedY:
                  (this.f * Math.cos((t * Math.PI) / 180) +
                    this.e * Math.sin((-t * Math.PI) / 180)) /
                  Math.sqrt(this.c * this.c + this.d * this.d),
                rotation: t,
                a: this.a,
                b: this.b,
                c: this.c,
                d: this.d,
                e: this.e,
                f: this.f,
                matrix: new i.Matrix(this)
              };
            },
            clone: function () {
              return new i.Matrix(this);
            },
            morph: function (e) {
              return (this.destination = new i.Matrix(e)), this;
            },
            multiply: function (e) {
              var t;
              return new i.Matrix(
                this.native().multiply(
                  ((t = e) instanceof i.Matrix || (t = new i.Matrix(t)),
                  t).native()
                )
              );
            },
            inverse: function () {
              return new i.Matrix(this.native().inverse());
            },
            translate: function (e, t) {
              return new i.Matrix(this.native().translate(e || 0, t || 0));
            },
            native: function () {
              for (
                var e = i.parser.native.createSVGMatrix(), t = x.length - 1;
                t >= 0;
                t--
              )
                e[x[t]] = this[x[t]];
              return e;
            },
            toString: function () {
              return (
                "matrix(" +
                m(this.a) +
                "," +
                m(this.b) +
                "," +
                m(this.c) +
                "," +
                m(this.d) +
                "," +
                m(this.e) +
                "," +
                m(this.f) +
                ")"
              );
            }
          },
          parent: i.Element,
          construct: {
            ctm: function () {
              return new i.Matrix(this.node.getCTM());
            },
            screenCTM: function () {
              if (this instanceof i.Nested) {
                var e = this.rect(1, 1),
                  t = e.node.getScreenCTM();
                return e.remove(), new i.Matrix(t);
              }
              return new i.Matrix(this.node.getScreenCTM());
            }
          }
        })),
        (i.Point = i.invent({
          create: function (e, t) {
            var i;
            (i = Array.isArray(e)
              ? { x: e[0], y: e[1] }
              : "object" === nK(e)
              ? { x: e.x, y: e.y }
              : null != e
              ? { x: e, y: null != t ? t : e }
              : { x: 0, y: 0 }),
              (this.x = i.x),
              (this.y = i.y);
          },
          extend: {
            clone: function () {
              return new i.Point(this);
            },
            morph: function (e, t) {
              return (this.destination = new i.Point(e, t)), this;
            }
          }
        })),
        i.extend(i.Element, {
          point: function (e, t) {
            return new i.Point(e, t).transform(this.screenCTM().inverse());
          }
        }),
        i.extend(i.Element, {
          attr: function (e, t, a) {
            if (null == e) {
              for (
                e = {}, a = (t = this.node.attributes).length - 1;
                a >= 0;
                a--
              )
                e[t[a].nodeName] = i.regex.isNumber.test(t[a].nodeValue)
                  ? parseFloat(t[a].nodeValue)
                  : t[a].nodeValue;
              return e;
            }
            if ("object" === nK(e)) for (var n in e) this.attr(n, e[n]);
            else if (null === t) this.node.removeAttribute(e);
            else {
              if (null == t)
                return null == (t = this.node.getAttribute(e))
                  ? i.defaults.attrs[e]
                  : i.regex.isNumber.test(t)
                  ? parseFloat(t)
                  : t;
              "stroke-width" == e
                ? this.attr("stroke", parseFloat(t) > 0 ? this._stroke : null)
                : "stroke" == e && (this._stroke = t),
                ("fill" != e && "stroke" != e) ||
                  (i.regex.isImage.test(t) &&
                    (t = this.doc().defs().image(t, 0, 0)),
                  t instanceof i.Image &&
                    (t = this.doc()
                      .defs()
                      .pattern(0, 0, function () {
                        this.add(t);
                      }))),
                "number" == typeof t
                  ? (t = new i.Number(t))
                  : i.Color.isColor(t)
                  ? (t = new i.Color(t))
                  : Array.isArray(t) && (t = new i.Array(t)),
                "leading" == e
                  ? this.leading && this.leading(t)
                  : "string" == typeof a
                  ? this.node.setAttributeNS(a, e, t.toString())
                  : this.node.setAttribute(e, t.toString()),
                this.rebuild &&
                  ("font-size" == e || "x" == e) &&
                  this.rebuild(e, t);
            }
            return this;
          }
        }),
        i.extend(i.Element, {
          transform: function (e, t) {
            var a;
            return "object" !== nK(e)
              ? ((a = new i.Matrix(this).extract()),
                "string" == typeof e ? a[e] : a)
              : ((a = new i.Matrix(this)),
                (t = !!t || !!e.relative),
                null != e.a &&
                  (a = t ? a.multiply(new i.Matrix(e)) : new i.Matrix(e)),
                this.attr("transform", a));
          }
        }),
        i.extend(i.Element, {
          untransform: function () {
            return this.attr("transform", null);
          },
          matrixify: function () {
            return (this.attr("transform") || "")
              .split(i.regex.transforms)
              .slice(0, -1)
              .map(function (e) {
                var t = e.trim().split("(");
                return [
                  t[0],
                  t[1].split(i.regex.delimiter).map(function (e) {
                    return parseFloat(e);
                  })
                ];
              })
              .reduce(function (e, t) {
                return "matrix" == t[0]
                  ? e.multiply(p(t[1]))
                  : e[t[0]].apply(e, t[1]);
              }, new i.Matrix());
          },
          toParent: function (e) {
            if (this == e) return this;
            var t = this.screenCTM(),
              i = e.screenCTM().inverse();
            return this.addTo(e).untransform().transform(i.multiply(t)), this;
          },
          toDoc: function () {
            return this.toParent(this.doc());
          }
        }),
        (i.Transformation = i.invent({
          create: function (e, t) {
            if (arguments.length > 1 && "boolean" != typeof t)
              return this.constructor.call(this, [].slice.call(arguments));
            if (Array.isArray(e))
              for (var i = 0, a = this.arguments.length; i < a; ++i)
                this[this.arguments[i]] = e[i];
            else if (e && "object" === nK(e))
              for (i = 0, a = this.arguments.length; i < a; ++i)
                this[this.arguments[i]] = e[this.arguments[i]];
            (this.inversed = !1), !0 === t && (this.inversed = !0);
          }
        })),
        (i.Translate = i.invent({
          parent: i.Matrix,
          inherit: i.Transformation,
          create: function (e, t) {
            this.constructor.apply(this, [].slice.call(arguments));
          },
          extend: {
            arguments: ["transformedX", "transformedY"],
            method: "translate"
          }
        })),
        i.extend(i.Element, {
          style: function (e, t) {
            if (0 == arguments.length) return this.node.style.cssText || "";
            if (arguments.length < 2) {
              if ("object" === nK(e)) for (var a in e) this.style(a, e[a]);
              else {
                if (!i.regex.isCss.test(e)) return this.node.style[c(e)];
                for (
                  e = e
                    .split(/\s*;\s*/)
                    .filter(function (e) {
                      return !!e;
                    })
                    .map(function (e) {
                      return e.split(/\s*:\s*/);
                    });
                  (t = e.pop());

                )
                  this.style(t[0], t[1]);
              }
            } else
              this.node.style[c(e)] =
                null === t || i.regex.isBlank.test(t) ? "" : t;
            return this;
          }
        }),
        (i.Parent = i.invent({
          create: function (e) {
            this.constructor.call(this, e);
          },
          inherit: i.Element,
          extend: {
            children: function () {
              return i.utils.map(
                i.utils.filterSVGElements(this.node.childNodes),
                function (e) {
                  return i.adopt(e);
                }
              );
            },
            add: function (e, t) {
              return (
                null == t
                  ? this.node.appendChild(e.node)
                  : e.node != this.node.childNodes[t] &&
                    this.node.insertBefore(e.node, this.node.childNodes[t]),
                this
              );
            },
            put: function (e, t) {
              return this.add(e, t), e;
            },
            has: function (e) {
              return this.index(e) >= 0;
            },
            index: function (e) {
              return [].slice.call(this.node.childNodes).indexOf(e.node);
            },
            get: function (e) {
              return i.adopt(this.node.childNodes[e]);
            },
            first: function () {
              return this.get(0);
            },
            last: function () {
              return this.get(this.node.childNodes.length - 1);
            },
            each: function (e, t) {
              for (var a = this.children(), n = 0, s = a.length; n < s; n++)
                a[n] instanceof i.Element && e.apply(a[n], [n, a]),
                  t && a[n] instanceof i.Container && a[n].each(e, t);
              return this;
            },
            removeElement: function (e) {
              return this.node.removeChild(e.node), this;
            },
            clear: function () {
              for (; this.node.hasChildNodes(); )
                this.node.removeChild(this.node.lastChild);
              return delete this._defs, this;
            },
            defs: function () {
              return this.doc().defs();
            }
          }
        })),
        i.extend(i.Parent, {
          ungroup: function (e, t) {
            return (
              0 === t ||
                this instanceof i.Defs ||
                this.node == i.parser.draw ||
                ((e =
                  e || (this instanceof i.Doc ? this : this.parent(i.Parent))),
                (t = t || 1 / 0),
                this.each(function () {
                  return this instanceof i.Defs
                    ? this
                    : this instanceof i.Parent
                    ? this.ungroup(e, t - 1)
                    : this.toParent(e);
                }),
                this.node.firstChild || this.remove()),
              this
            );
          },
          flatten: function (e, t) {
            return this.ungroup(e, t);
          }
        }),
        (i.Container = i.invent({
          create: function (e) {
            this.constructor.call(this, e);
          },
          inherit: i.Parent
        })),
        (i.ViewBox = i.invent({ parent: i.Container, construct: {} })),
        [
          "click",
          "dblclick",
          "mousedown",
          "mouseup",
          "mouseover",
          "mouseout",
          "mousemove",
          "touchstart",
          "touchmove",
          "touchleave",
          "touchend",
          "touchcancel"
        ].forEach(function (e) {
          i.Element.prototype[e] = function (t) {
            return i.on(this.node, e, t), this;
          };
        }),
        (i.listeners = []),
        (i.handlerMap = []),
        (i.listenerId = 0),
        (i.on = function (e, t, a, n, s) {
          var o = a.bind(n || e.instance || e),
            r = (i.handlerMap.indexOf(e) + 1 || i.handlerMap.push(e)) - 1,
            l = t.split(".")[0],
            c = t.split(".")[1] || "*";
          (i.listeners[r] = i.listeners[r] || {}),
            (i.listeners[r][l] = i.listeners[r][l] || {}),
            (i.listeners[r][l][c] = i.listeners[r][l][c] || {}),
            a._svgjsListenerId || (a._svgjsListenerId = ++i.listenerId),
            (i.listeners[r][l][c][a._svgjsListenerId] = o),
            e.addEventListener(l, o, s || { passive: !0 });
        }),
        (i.off = function (e, t, a) {
          var n = i.handlerMap.indexOf(e),
            s = t && t.split(".")[0],
            o = t && t.split(".")[1],
            r = "";
          if (-1 != n) {
            if (a) {
              if (("function" == typeof a && (a = a._svgjsListenerId), !a))
                return;
              i.listeners[n][s] &&
                i.listeners[n][s][o || "*"] &&
                (e.removeEventListener(s, i.listeners[n][s][o || "*"][a], !1),
                delete i.listeners[n][s][o || "*"][a]);
            } else if (o && s) {
              if (i.listeners[n][s] && i.listeners[n][s][o]) {
                for (var l in i.listeners[n][s][o])
                  i.off(e, [s, o].join("."), l);
                delete i.listeners[n][s][o];
              }
            } else if (o)
              for (var c in i.listeners[n])
                for (var r in i.listeners[n][c])
                  o === r && i.off(e, [c, o].join("."));
            else if (s) {
              if (i.listeners[n][s]) {
                for (var r in i.listeners[n][s]) i.off(e, [s, r].join("."));
                delete i.listeners[n][s];
              }
            } else {
              for (var c in i.listeners[n]) i.off(e, c);
              delete i.listeners[n], delete i.handlerMap[n];
            }
          }
        }),
        i.extend(i.Element, {
          on: function (e, t, a, n) {
            return i.on(this.node, e, t, a, n), this;
          },
          off: function (e, t) {
            return i.off(this.node, e, t), this;
          },
          fire: function (t, a) {
            return (
              t instanceof e.Event
                ? this.node.dispatchEvent(t)
                : this.node.dispatchEvent(
                    (t = new i.CustomEvent(t, { detail: a, cancelable: !0 }))
                  ),
              (this._event = t),
              this
            );
          },
          event: function () {
            return this._event;
          }
        }),
        (i.Defs = i.invent({ create: "defs", inherit: i.Container })),
        (i.G = i.invent({
          create: "g",
          inherit: i.Container,
          extend: {
            x: function (e) {
              return null == e
                ? this.transform("x")
                : this.transform({ x: e - this.x() }, !0);
            }
          },
          construct: {
            group: function () {
              return this.put(new i.G());
            }
          }
        })),
        (i.Doc = i.invent({
          create: function (e) {
            e &&
              ("svg" ==
              (e = "string" == typeof e ? t.getElementById(e) : e).nodeName
                ? this.constructor.call(this, e)
                : (this.constructor.call(this, i.create("svg")),
                  e.appendChild(this.node),
                  this.size("100%", "100%")),
              this.namespace().defs());
          },
          inherit: i.Container,
          extend: {
            namespace: function () {
              return this.attr({ xmlns: i.ns, version: "1.1" })
                .attr("xmlns:xlink", i.xlink, i.xmlns)
                .attr("xmlns:svgjs", i.svgjs, i.xmlns);
            },
            defs: function () {
              var e;
              return (
                this._defs ||
                  ((e = this.node.getElementsByTagName("defs")[0])
                    ? (this._defs = i.adopt(e))
                    : (this._defs = new i.Defs()),
                  this.node.appendChild(this._defs.node)),
                this._defs
              );
            },
            parent: function () {
              return this.node.parentNode &&
                "#document" != this.node.parentNode.nodeName
                ? this.node.parentNode
                : null;
            },
            remove: function () {
              return (
                this.parent() && this.parent().removeChild(this.node), this
              );
            },
            clear: function () {
              for (; this.node.hasChildNodes(); )
                this.node.removeChild(this.node.lastChild);
              return (
                delete this._defs,
                i.parser.draw &&
                  !i.parser.draw.parentNode &&
                  this.node.appendChild(i.parser.draw),
                this
              );
            },
            clone: function (e) {
              this.writeDataToDom();
              var t = this.node,
                i = f(t.cloneNode(!0));
              return (
                e
                  ? (e.node || e).appendChild(i.node)
                  : t.parentNode.insertBefore(i.node, t.nextSibling),
                i
              );
            }
          }
        })),
        i.extend(i.Element, {}),
        (i.Gradient = i.invent({
          create: function (e) {
            this.constructor.call(this, i.create(e + "Gradient")),
              (this.type = e);
          },
          inherit: i.Container,
          extend: {
            at: function (e, t, a) {
              return this.put(new i.Stop()).update(e, t, a);
            },
            update: function (e) {
              return (
                this.clear(), "function" == typeof e && e.call(this, this), this
              );
            },
            fill: function () {
              return "url(#" + this.id() + ")";
            },
            toString: function () {
              return this.fill();
            },
            attr: function (e, t, a) {
              return (
                "transform" == e && (e = "gradientTransform"),
                i.Container.prototype.attr.call(this, e, t, a)
              );
            }
          },
          construct: {
            gradient: function (e, t) {
              return this.defs().gradient(e, t);
            }
          }
        })),
        i.extend(i.Gradient, i.FX, {
          from: function (e, t) {
            return "radial" == (this._target || this).type
              ? this.attr({ fx: new i.Number(e), fy: new i.Number(t) })
              : this.attr({ x1: new i.Number(e), y1: new i.Number(t) });
          },
          to: function (e, t) {
            return "radial" == (this._target || this).type
              ? this.attr({ cx: new i.Number(e), cy: new i.Number(t) })
              : this.attr({ x2: new i.Number(e), y2: new i.Number(t) });
          }
        }),
        i.extend(i.Defs, {
          gradient: function (e, t) {
            return this.put(new i.Gradient(e)).update(t);
          }
        }),
        (i.Stop = i.invent({
          create: "stop",
          inherit: i.Element,
          extend: {
            update: function (e) {
              return (
                ("number" == typeof e || e instanceof i.Number) &&
                  (e = {
                    offset: arguments[0],
                    color: arguments[1],
                    opacity: arguments[2]
                  }),
                null != e.opacity && this.attr("stop-opacity", e.opacity),
                null != e.color && this.attr("stop-color", e.color),
                null != e.offset && this.attr("offset", new i.Number(e.offset)),
                this
              );
            }
          }
        })),
        (i.Pattern = i.invent({
          create: "pattern",
          inherit: i.Container,
          extend: {
            fill: function () {
              return "url(#" + this.id() + ")";
            },
            update: function (e) {
              return (
                this.clear(), "function" == typeof e && e.call(this, this), this
              );
            },
            toString: function () {
              return this.fill();
            },
            attr: function (e, t, a) {
              return (
                "transform" == e && (e = "patternTransform"),
                i.Container.prototype.attr.call(this, e, t, a)
              );
            }
          },
          construct: {
            pattern: function (e, t, i) {
              return this.defs().pattern(e, t, i);
            }
          }
        })),
        i.extend(i.Defs, {
          pattern: function (e, t, a) {
            return this.put(new i.Pattern())
              .update(a)
              .attr({
                x: 0,
                y: 0,
                width: e,
                height: t,
                patternUnits: "userSpaceOnUse"
              });
          }
        }),
        (i.Shape = i.invent({
          create: function (e) {
            this.constructor.call(this, e);
          },
          inherit: i.Element
        })),
        (i.Symbol = i.invent({
          create: "symbol",
          inherit: i.Container,
          construct: {
            symbol: function () {
              return this.put(new i.Symbol());
            }
          }
        })),
        (i.Use = i.invent({
          create: "use",
          inherit: i.Shape,
          extend: {
            element: function (e, t) {
              return this.attr("href", (t || "") + "#" + e, i.xlink);
            }
          },
          construct: {
            use: function (e, t) {
              return this.put(new i.Use()).element(e, t);
            }
          }
        })),
        (i.Rect = i.invent({
          create: "rect",
          inherit: i.Shape,
          construct: {
            rect: function (e, t) {
              return this.put(new i.Rect()).size(e, t);
            }
          }
        })),
        (i.Circle = i.invent({
          create: "circle",
          inherit: i.Shape,
          construct: {
            circle: function (e) {
              return this.put(new i.Circle())
                .rx(new i.Number(e).divide(2))
                .move(0, 0);
            }
          }
        })),
        i.extend(i.Circle, i.FX, {
          rx: function (e) {
            return this.attr("r", e);
          },
          ry: function (e) {
            return this.rx(e);
          }
        }),
        (i.Ellipse = i.invent({
          create: "ellipse",
          inherit: i.Shape,
          construct: {
            ellipse: function (e, t) {
              return this.put(new i.Ellipse()).size(e, t).move(0, 0);
            }
          }
        })),
        i.extend(i.Ellipse, i.Rect, i.FX, {
          rx: function (e) {
            return this.attr("rx", e);
          },
          ry: function (e) {
            return this.attr("ry", e);
          }
        }),
        i.extend(i.Circle, i.Ellipse, {
          x: function (e) {
            return null == e ? this.cx() - this.rx() : this.cx(e + this.rx());
          },
          y: function (e) {
            return null == e ? this.cy() - this.ry() : this.cy(e + this.ry());
          },
          cx: function (e) {
            return null == e ? this.attr("cx") : this.attr("cx", e);
          },
          cy: function (e) {
            return null == e ? this.attr("cy") : this.attr("cy", e);
          },
          width: function (e) {
            return null == e
              ? 2 * this.rx()
              : this.rx(new i.Number(e).divide(2));
          },
          height: function (e) {
            return null == e
              ? 2 * this.ry()
              : this.ry(new i.Number(e).divide(2));
          },
          size: function (e, t) {
            var a = u(this, e, t);
            return this.rx(new i.Number(a.width).divide(2)).ry(
              new i.Number(a.height).divide(2)
            );
          }
        }),
        (i.Line = i.invent({
          create: "line",
          inherit: i.Shape,
          extend: {
            array: function () {
              return new i.PointArray([
                [this.attr("x1"), this.attr("y1")],
                [this.attr("x2"), this.attr("y2")]
              ]);
            },
            plot: function (e, t, a, n) {
              return null == e
                ? this.array()
                : ((e =
                    void 0 !== t
                      ? { x1: e, y1: t, x2: a, y2: n }
                      : new i.PointArray(e).toLine()),
                  this.attr(e));
            },
            move: function (e, t) {
              return this.attr(this.array().move(e, t).toLine());
            },
            size: function (e, t) {
              var i = u(this, e, t);
              return this.attr(this.array().size(i.width, i.height).toLine());
            }
          },
          construct: {
            line: function (e, t, a, n) {
              return i.Line.prototype.plot.apply(
                this.put(new i.Line()),
                null != e ? [e, t, a, n] : [0, 0, 0, 0]
              );
            }
          }
        })),
        (i.Polyline = i.invent({
          create: "polyline",
          inherit: i.Shape,
          construct: {
            polyline: function (e) {
              return this.put(new i.Polyline()).plot(e || new i.PointArray());
            }
          }
        })),
        (i.Polygon = i.invent({
          create: "polygon",
          inherit: i.Shape,
          construct: {
            polygon: function (e) {
              return this.put(new i.Polygon()).plot(e || new i.PointArray());
            }
          }
        })),
        i.extend(i.Polyline, i.Polygon, {
          array: function () {
            return (
              this._array ||
              (this._array = new i.PointArray(this.attr("points")))
            );
          },
          plot: function (e) {
            return null == e
              ? this.array()
              : this.clear().attr(
                  "points",
                  "string" == typeof e ? e : (this._array = new i.PointArray(e))
                );
          },
          clear: function () {
            return delete this._array, this;
          },
          move: function (e, t) {
            return this.attr("points", this.array().move(e, t));
          },
          size: function (e, t) {
            var i = u(this, e, t);
            return this.attr("points", this.array().size(i.width, i.height));
          }
        }),
        i.extend(i.Line, i.Polyline, i.Polygon, {
          morphArray: i.PointArray,
          x: function (e) {
            return null == e ? this.bbox().x : this.move(e, this.bbox().y);
          },
          y: function (e) {
            return null == e ? this.bbox().y : this.move(this.bbox().x, e);
          },
          width: function (e) {
            var t = this.bbox();
            return null == e ? t.width : this.size(e, t.height);
          },
          height: function (e) {
            var t = this.bbox();
            return null == e ? t.height : this.size(t.width, e);
          }
        }),
        (i.Path = i.invent({
          create: "path",
          inherit: i.Shape,
          extend: {
            morphArray: i.PathArray,
            array: function () {
              return (
                this._array || (this._array = new i.PathArray(this.attr("d")))
              );
            },
            plot: function (e) {
              return null == e
                ? this.array()
                : this.clear().attr(
                    "d",
                    "string" == typeof e
                      ? e
                      : (this._array = new i.PathArray(e))
                  );
            },
            clear: function () {
              return delete this._array, this;
            }
          },
          construct: {
            path: function (e) {
              return this.put(new i.Path()).plot(e || new i.PathArray());
            }
          }
        })),
        (i.Image = i.invent({
          create: "image",
          inherit: i.Shape,
          extend: {
            load: function (t) {
              if (!t) return this;
              var a = this,
                n = new e.Image();
              return (
                i.on(n, "load", function () {
                  i.off(n);
                  var e = a.parent(i.Pattern);
                  null !== e &&
                    (0 == a.width() &&
                      0 == a.height() &&
                      a.size(n.width, n.height),
                    e &&
                      0 == e.width() &&
                      0 == e.height() &&
                      e.size(a.width(), a.height()),
                    "function" == typeof a._loaded &&
                      a._loaded.call(a, {
                        width: n.width,
                        height: n.height,
                        ratio: n.width / n.height,
                        url: t
                      }));
                }),
                i.on(n, "error", function (e) {
                  i.off(n),
                    "function" == typeof a._error && a._error.call(a, e);
                }),
                this.attr("href", (n.src = this.src = t), i.xlink)
              );
            },
            loaded: function (e) {
              return (this._loaded = e), this;
            },
            error: function (e) {
              return (this._error = e), this;
            }
          },
          construct: {
            image: function (e, t, a) {
              return this.put(new i.Image())
                .load(e)
                .size(t || 0, a || t || 0);
            }
          }
        })),
        (i.Text = i.invent({
          create: function () {
            this.constructor.call(this, i.create("text")),
              (this.dom.leading = new i.Number(1.3)),
              (this._rebuild = !0),
              (this._build = !1),
              this.attr("font-family", i.defaults.attrs["font-family"]);
          },
          inherit: i.Shape,
          extend: {
            x: function (e) {
              return null == e ? this.attr("x") : this.attr("x", e);
            },
            text: function (e) {
              if (void 0 === e) {
                e = "";
                for (
                  var t = this.node.childNodes, a = 0, n = t.length;
                  a < n;
                  ++a
                )
                  0 != a &&
                    3 != t[a].nodeType &&
                    1 == i.adopt(t[a]).dom.newLined &&
                    (e += "\n"),
                    (e += t[a].textContent);
                return e;
              }
              if ((this.clear().build(!0), "function" == typeof e))
                e.call(this, this);
              else {
                a = 0;
                for (var s = (e = e.split("\n")).length; a < s; a++)
                  this.tspan(e[a]).newLine();
              }
              return this.build(!1).rebuild();
            },
            size: function (e) {
              return this.attr("font-size", e).rebuild();
            },
            leading: function (e) {
              return null == e
                ? this.dom.leading
                : ((this.dom.leading = new i.Number(e)), this.rebuild());
            },
            lines: function () {
              var e = ((this.textPath && this.textPath()) || this).node,
                t = i.utils.map(
                  i.utils.filterSVGElements(e.childNodes),
                  function (e) {
                    return i.adopt(e);
                  }
                );
              return new i.Set(t);
            },
            rebuild: function (e) {
              if (
                ("boolean" == typeof e && (this._rebuild = e), this._rebuild)
              ) {
                var t = this,
                  a = 0,
                  n = this.dom.leading * new i.Number(this.attr("font-size"));
                this.lines().each(function () {
                  this.dom.newLined &&
                    (t.textPath() || this.attr("x", t.attr("x")),
                    "\n" == this.text()
                      ? (a += n)
                      : (this.attr("dy", n + a), (a = 0)));
                }),
                  this.fire("rebuild");
              }
              return this;
            },
            build: function (e) {
              return (this._build = !!e), this;
            },
            setData: function (e) {
              return (
                (this.dom = e),
                (this.dom.leading = new i.Number(e.leading || 1.3)),
                this
              );
            }
          },
          construct: {
            text: function (e) {
              return this.put(new i.Text()).text(e);
            },
            plain: function (e) {
              return this.put(new i.Text()).plain(e);
            }
          }
        })),
        (i.Tspan = i.invent({
          create: "tspan",
          inherit: i.Shape,
          extend: {
            text: function (e) {
              return null == e
                ? this.node.textContent + (this.dom.newLined ? "\n" : "")
                : ("function" == typeof e ? e.call(this, this) : this.plain(e),
                  this);
            },
            dx: function (e) {
              return this.attr("dx", e);
            },
            dy: function (e) {
              return this.attr("dy", e);
            },
            newLine: function () {
              var e = this.parent(i.Text);
              return (
                (this.dom.newLined = !0),
                this.dy(e.dom.leading * e.attr("font-size")).attr("x", e.x())
              );
            }
          }
        })),
        i.extend(i.Text, i.Tspan, {
          plain: function (e) {
            return (
              !1 === this._build && this.clear(),
              this.node.appendChild(t.createTextNode(e)),
              this
            );
          },
          tspan: function (e) {
            var t = ((this.textPath && this.textPath()) || this).node,
              a = new i.Tspan();
            return (
              !1 === this._build && this.clear(),
              t.appendChild(a.node),
              a.text(e)
            );
          },
          clear: function () {
            for (
              var e = ((this.textPath && this.textPath()) || this).node;
              e.hasChildNodes();

            )
              e.removeChild(e.lastChild);
            return this;
          },
          length: function () {
            return this.node.getComputedTextLength();
          }
        }),
        (i.TextPath = i.invent({
          create: "textPath",
          inherit: i.Parent,
          parent: i.Text,
          construct: {
            morphArray: i.PathArray,
            array: function () {
              var e = this.track();
              return e ? e.array() : null;
            },
            plot: function (e) {
              var t = this.track(),
                i = null;
              return t && (i = t.plot(e)), null == e ? i : this;
            },
            track: function () {
              var e = this.textPath();
              if (e) return e.reference("href");
            },
            textPath: function () {
              if (
                this.node.firstChild &&
                "textPath" == this.node.firstChild.nodeName
              )
                return i.adopt(this.node.firstChild);
            }
          }
        })),
        (i.Nested = i.invent({
          create: function () {
            this.constructor.call(this, i.create("svg")),
              this.style("overflow", "visible");
          },
          inherit: i.Container,
          construct: {
            nested: function () {
              return this.put(new i.Nested());
            }
          }
        }));
      var r = {
        stroke: [
          "color",
          "width",
          "opacity",
          "linecap",
          "linejoin",
          "miterlimit",
          "dasharray",
          "dashoffset"
        ],
        fill: ["color", "opacity", "rule"],
        prefix: function (e, t) {
          return "color" == t ? e : e + "-" + t;
        }
      };
      function l(e, t, a, n) {
        return a + n.replace(i.regex.dots, " .");
      }
      function c(e) {
        return e.toLowerCase().replace(/-(.)/g, function (e, t) {
          return t.toUpperCase();
        });
      }
      function h(e) {
        return e.charAt(0).toUpperCase() + e.slice(1);
      }
      function d(e) {
        var t = e.toString(16);
        return 1 == t.length ? "0" + t : t;
      }
      function u(e, t, i) {
        if (null == t || null == i) {
          var a = e.bbox();
          null == t
            ? (t = (a.width / a.height) * i)
            : null == i && (i = (a.height / a.width) * t);
        }
        return { width: t, height: i };
      }
      function g(e, t, i) {
        return { x: t * e.a + i * e.c + 0, y: t * e.b + i * e.d + 0 };
      }
      function p(e) {
        return { a: e[0], b: e[1], c: e[2], d: e[3], e: e[4], f: e[5] };
      }
      function f(t) {
        for (var a = t.childNodes.length - 1; a >= 0; a--)
          t.childNodes[a] instanceof e.SVGElement && f(t.childNodes[a]);
        return i.adopt(t).id(i.eid(t.nodeName));
      }
      function m(e) {
        return Math.abs(e) > 1e-37 ? e : 0;
      }
      ["fill", "stroke"].forEach(function (e) {
        var t = {};
        (t[e] = function (t) {
          if (void 0 === t) return this;
          if (
            "string" == typeof t ||
            i.Color.isRgb(t) ||
            (t && "function" == typeof t.fill)
          )
            this.attr(e, t);
          else
            for (var a = r[e].length - 1; a >= 0; a--)
              null != t[r[e][a]] && this.attr(r.prefix(e, r[e][a]), t[r[e][a]]);
          return this;
        }),
          i.extend(i.Element, i.FX, t);
      }),
        i.extend(i.Element, i.FX, {
          translate: function (e, t) {
            return this.transform({ x: e, y: t });
          },
          matrix: function (e) {
            return this.attr(
              "transform",
              new i.Matrix(6 == arguments.length ? [].slice.call(arguments) : e)
            );
          },
          opacity: function (e) {
            return this.attr("opacity", e);
          },
          dx: function (e) {
            return this.x(
              new i.Number(e).plus(this instanceof i.FX ? 0 : this.x()),
              !0
            );
          },
          dy: function (e) {
            return this.y(
              new i.Number(e).plus(this instanceof i.FX ? 0 : this.y()),
              !0
            );
          }
        }),
        i.extend(i.Path, {
          length: function () {
            return this.node.getTotalLength();
          },
          pointAt: function (e) {
            return this.node.getPointAtLength(e);
          }
        }),
        (i.Set = i.invent({
          create: function (e) {
            Array.isArray(e) ? (this.members = e) : this.clear();
          },
          extend: {
            add: function () {
              for (
                var e = [].slice.call(arguments), t = 0, i = e.length;
                t < i;
                t++
              )
                this.members.push(e[t]);
              return this;
            },
            remove: function (e) {
              var t = this.index(e);
              return t > -1 && this.members.splice(t, 1), this;
            },
            each: function (e) {
              for (var t = 0, i = this.members.length; t < i; t++)
                e.apply(this.members[t], [t, this.members]);
              return this;
            },
            clear: function () {
              return (this.members = []), this;
            },
            length: function () {
              return this.members.length;
            },
            has: function (e) {
              return this.index(e) >= 0;
            },
            index: function (e) {
              return this.members.indexOf(e);
            },
            get: function (e) {
              return this.members[e];
            },
            first: function () {
              return this.get(0);
            },
            last: function () {
              return this.get(this.members.length - 1);
            },
            valueOf: function () {
              return this.members;
            }
          },
          construct: {
            set: function (e) {
              return new i.Set(e);
            }
          }
        })),
        (i.FX.Set = i.invent({
          create: function (e) {
            this.set = e;
          }
        })),
        (i.Set.inherit = function () {
          var e = [];
          for (var t in i.Shape.prototype)
            "function" == typeof i.Shape.prototype[t] &&
              "function" != typeof i.Set.prototype[t] &&
              e.push(t);
          for (var t in (e.forEach(function (e) {
            i.Set.prototype[e] = function () {
              for (var t = 0, a = this.members.length; t < a; t++)
                this.members[t] &&
                  "function" == typeof this.members[t][e] &&
                  this.members[t][e].apply(this.members[t], arguments);
              return "animate" == e
                ? this.fx || (this.fx = new i.FX.Set(this))
                : this;
            };
          }),
          (e = []),
          i.FX.prototype))
            "function" == typeof i.FX.prototype[t] &&
              "function" != typeof i.FX.Set.prototype[t] &&
              e.push(t);
          e.forEach(function (e) {
            i.FX.Set.prototype[e] = function () {
              for (var t = 0, i = this.set.members.length; t < i; t++)
                this.set.members[t].fx[e].apply(
                  this.set.members[t].fx,
                  arguments
                );
              return this;
            };
          });
        }),
        i.extend(i.Element, {}),
        i.extend(i.Element, {
          remember: function (e, t) {
            if ("object" === nK(arguments[0]))
              for (var i in e) this.remember(i, e[i]);
            else {
              if (1 == arguments.length) return this.memory()[e];
              this.memory()[e] = t;
            }
            return this;
          },
          forget: function () {
            if (0 == arguments.length) this._memory = {};
            else
              for (var e = arguments.length - 1; e >= 0; e--)
                delete this.memory()[arguments[e]];
            return this;
          },
          memory: function () {
            return this._memory || (this._memory = {});
          }
        }),
        (i.get = function (e) {
          var a = t.getElementById(
            (function (e) {
              var t = (e || "").toString().match(i.regex.reference);
              if (t) return t[1];
            })(e) || e
          );
          return i.adopt(a);
        }),
        (i.select = function (e, a) {
          return new i.Set(
            i.utils.map((a || t).querySelectorAll(e), function (e) {
              return i.adopt(e);
            })
          );
        }),
        i.extend(i.Parent, {
          select: function (e) {
            return i.select(e, this.node);
          }
        });
      var x = "abcdef".split("");
      if ("function" != typeof e.CustomEvent) {
        var b = function (e, i) {
          i = i || { bubbles: !1, cancelable: !1, detail: void 0 };
          var a = t.createEvent("CustomEvent");
          return a.initCustomEvent(e, i.bubbles, i.cancelable, i.detail), a;
        };
        (b.prototype = e.Event.prototype), (i.CustomEvent = b);
      } else i.CustomEvent = e.CustomEvent;
      return i;
    }),
    "function" == typeof define && define.amd
      ? define(function () {
          return ou(od, od.document);
        })
      : "object" === nK(nq)
      ? (nq = od.document
          ? ou(od, od.document)
          : function (e) {
              return ou(e, e.document);
            })
      : (od.SVG = ou(od, od.document)),
    /*! svg.filter.js - v2.0.2 - 2016-02-24
     * https://github.com/wout/svg.filter.js
     * Copyright (c) 2016 Wout Fierens; Licensed MIT */ function () {
      (SVG.Filter = SVG.invent({
        create: "filter",
        inherit: SVG.Parent,
        extend: {
          source: "SourceGraphic",
          sourceAlpha: "SourceAlpha",
          background: "BackgroundImage",
          backgroundAlpha: "BackgroundAlpha",
          fill: "FillPaint",
          stroke: "StrokePaint",
          autoSetIn: !0,
          put: function (e, t) {
            return (
              this.add(e, t),
              !e.attr("in") && this.autoSetIn && e.attr("in", this.source),
              e.attr("result") || e.attr("result", e),
              e
            );
          },
          blend: function (e, t, i) {
            return this.put(new SVG.BlendEffect(e, t, i));
          },
          colorMatrix: function (e, t) {
            return this.put(new SVG.ColorMatrixEffect(e, t));
          },
          convolveMatrix: function (e) {
            return this.put(new SVG.ConvolveMatrixEffect(e));
          },
          componentTransfer: function (e) {
            return this.put(new SVG.ComponentTransferEffect(e));
          },
          composite: function (e, t, i) {
            return this.put(new SVG.CompositeEffect(e, t, i));
          },
          flood: function (e, t) {
            return this.put(new SVG.FloodEffect(e, t));
          },
          offset: function (e, t) {
            return this.put(new SVG.OffsetEffect(e, t));
          },
          image: function (e) {
            return this.put(new SVG.ImageEffect(e));
          },
          merge: function () {
            var e = [void 0];
            for (var t in arguments) e.push(arguments[t]);
            return this.put(
              new (SVG.MergeEffect.bind.apply(SVG.MergeEffect, e))()
            );
          },
          gaussianBlur: function (e, t) {
            return this.put(new SVG.GaussianBlurEffect(e, t));
          },
          morphology: function (e, t) {
            return this.put(new SVG.MorphologyEffect(e, t));
          },
          diffuseLighting: function (e, t, i) {
            return this.put(new SVG.DiffuseLightingEffect(e, t, i));
          },
          displacementMap: function (e, t, i, a, n) {
            return this.put(new SVG.DisplacementMapEffect(e, t, i, a, n));
          },
          specularLighting: function (e, t, i, a) {
            return this.put(new SVG.SpecularLightingEffect(e, t, i, a));
          },
          tile: function () {
            return this.put(new SVG.TileEffect());
          },
          turbulence: function (e, t, i, a, n) {
            return this.put(new SVG.TurbulenceEffect(e, t, i, a, n));
          },
          toString: function () {
            return "url(#" + this.attr("id") + ")";
          }
        }
      })),
        SVG.extend(SVG.Defs, {
          filter: function (e) {
            var t = this.put(new SVG.Filter());
            return "function" == typeof e && e.call(t, t), t;
          }
        }),
        SVG.extend(SVG.Container, {
          filter: function (e) {
            return this.defs().filter(e);
          }
        }),
        SVG.extend(SVG.Element, SVG.G, SVG.Nested, {
          filter: function (e) {
            return (
              (this.filterer =
                e instanceof SVG.Element ? e : this.doc().filter(e)),
              this.doc() &&
                this.filterer.doc() !== this.doc() &&
                this.doc().defs().add(this.filterer),
              this.attr("filter", this.filterer),
              this.filterer
            );
          },
          unfilter: function (e) {
            return (
              this.filterer && !0 === e && this.filterer.remove(),
              delete this.filterer,
              this.attr("filter", null)
            );
          }
        }),
        (SVG.Effect = SVG.invent({
          create: function () {
            this.constructor.call(this);
          },
          inherit: SVG.Element,
          extend: {
            in: function (e) {
              return null == e
                ? (this.parent() &&
                    this.parent()
                      .select('[result="' + this.attr("in") + '"]')
                      .get(0)) ||
                    this.attr("in")
                : this.attr("in", e);
            },
            result: function (e) {
              return null == e ? this.attr("result") : this.attr("result", e);
            },
            toString: function () {
              return this.result();
            }
          }
        })),
        (SVG.ParentEffect = SVG.invent({
          create: function () {
            this.constructor.call(this);
          },
          inherit: SVG.Parent,
          extend: {
            in: function (e) {
              return null == e
                ? (this.parent() &&
                    this.parent()
                      .select('[result="' + this.attr("in") + '"]')
                      .get(0)) ||
                    this.attr("in")
                : this.attr("in", e);
            },
            result: function (e) {
              return null == e ? this.attr("result") : this.attr("result", e);
            },
            toString: function () {
              return this.result();
            }
          }
        }));
      var e = {
        blend: function (e, t) {
          return this.parent() && this.parent().blend(this, e, t);
        },
        colorMatrix: function (e, t) {
          return this.parent() && this.parent().colorMatrix(e, t).in(this);
        },
        convolveMatrix: function (e) {
          return this.parent() && this.parent().convolveMatrix(e).in(this);
        },
        componentTransfer: function (e) {
          return this.parent() && this.parent().componentTransfer(e).in(this);
        },
        composite: function (e, t) {
          return this.parent() && this.parent().composite(this, e, t);
        },
        flood: function (e, t) {
          return this.parent() && this.parent().flood(e, t);
        },
        offset: function (e, t) {
          return this.parent() && this.parent().offset(e, t).in(this);
        },
        image: function (e) {
          return this.parent() && this.parent().image(e);
        },
        merge: function () {
          return (
            this.parent() &&
            this.parent().merge.apply(this.parent(), [this].concat(arguments))
          );
        },
        gaussianBlur: function (e, t) {
          return this.parent() && this.parent().gaussianBlur(e, t).in(this);
        },
        morphology: function (e, t) {
          return this.parent() && this.parent().morphology(e, t).in(this);
        },
        diffuseLighting: function (e, t, i) {
          return (
            this.parent() && this.parent().diffuseLighting(e, t, i).in(this)
          );
        },
        displacementMap: function (e, t, i, a) {
          return (
            this.parent() && this.parent().displacementMap(this, e, t, i, a)
          );
        },
        specularLighting: function (e, t, i, a) {
          return (
            this.parent() && this.parent().specularLighting(e, t, i, a).in(this)
          );
        },
        tile: function () {
          return this.parent() && this.parent().tile().in(this);
        },
        turbulence: function (e, t, i, a, n) {
          return (
            this.parent() && this.parent().turbulence(e, t, i, a, n).in(this)
          );
        }
      };
      SVG.extend(SVG.Effect, e),
        SVG.extend(SVG.ParentEffect, e),
        (SVG.ChildEffect = SVG.invent({
          create: function () {
            this.constructor.call(this);
          },
          inherit: SVG.Element,
          extend: {
            in: function (e) {
              this.attr("in", e);
            }
          }
        }));
      var t = {
        distantLight: function (e, t) {
          this.attr({ azimuth: e, elevation: t });
        },
        pointLight: function (e, t, i) {
          this.attr({ x: e, y: t, z: i });
        },
        spotLight: function (e, t, i, a, n, s) {
          this.attr({
            x: e,
            y: t,
            z: i,
            pointsAtX: a,
            pointsAtY: n,
            pointsAtZ: s
          });
        },
        mergeNode: function (e) {
          this.attr("in", e);
        }
      };
      function i(e) {
        return (
          Array.isArray(e) && (e = new SVG.Array(e)),
          e
            .toString()
            .replace(/^\s+/, "")
            .replace(/\s+$/, "")
            .replace(/\s+/g, " ")
        );
      }
      function a() {
        var e = function () {};
        for (var t in ("function" == typeof arguments[arguments.length - 1] &&
          ((e = arguments[arguments.length - 1]),
          Array.prototype.splice.call(arguments, arguments.length - 1, 1)),
        arguments))
          for (var i in arguments[t]) e(arguments[t][i], i, arguments[t]);
      }
      ["r", "g", "b", "a"].forEach(function (e) {
        t["Func" + e.toUpperCase()] = function (e) {
          switch ((this.attr("type", e), e)) {
            case "table":
              this.attr("tableValues", arguments[1]);
              break;
            case "linear":
              this.attr("slope", arguments[1]),
                this.attr("intercept", arguments[2]);
              break;
            case "gamma":
              this.attr("amplitude", arguments[1]),
                this.attr("exponent", arguments[2]),
                this.attr("offset", arguments[2]);
          }
        };
      }),
        a(
          {
            blend: function (e, t, i) {
              this.attr({ in: e, in2: t, mode: i || "normal" });
            },
            colorMatrix: function (e, t) {
              "matrix" == e && (t = i(t)),
                this.attr({ type: e, values: void 0 === t ? null : t });
            },
            convolveMatrix: function (e) {
              (e = i(e)),
                this.attr({
                  order: Math.sqrt(e.split(" ").length),
                  kernelMatrix: e
                });
            },
            composite: function (e, t, i) {
              this.attr({ in: e, in2: t, operator: i });
            },
            flood: function (e, t) {
              this.attr("flood-color", e),
                null != t && this.attr("flood-opacity", t);
            },
            offset: function (e, t) {
              this.attr({ dx: e, dy: t });
            },
            image: function (e) {
              this.attr("href", e, SVG.xlink);
            },
            displacementMap: function (e, t, i, a, n) {
              this.attr({
                in: e,
                in2: t,
                scale: i,
                xChannelSelector: a,
                yChannelSelector: n
              });
            },
            gaussianBlur: function (e, t) {
              null != e || null != t
                ? this.attr(
                    "stdDeviation",
                    (function (e) {
                      if (!Array.isArray(e)) return e;
                      for (var t = 0, i = e.length, a = []; t < i; t++)
                        a.push(e[t]);
                      return a.join(" ");
                    })(Array.prototype.slice.call(arguments))
                  )
                : this.attr("stdDeviation", "0 0");
            },
            morphology: function (e, t) {
              this.attr({ operator: e, radius: t });
            },
            tile: function () {},
            turbulence: function (e, t, i, a, n) {
              this.attr({
                numOctaves: t,
                seed: i,
                stitchTiles: a,
                baseFrequency: e,
                type: n
              });
            }
          },
          function (e, t) {
            var i = t.charAt(0).toUpperCase() + t.slice(1);
            SVG[i + "Effect"] = SVG.invent({
              create: function () {
                this.constructor.call(this, SVG.create("fe" + i)),
                  e.apply(this, arguments),
                  this.result(this.attr("id") + "Out");
              },
              inherit: SVG.Effect,
              extend: {}
            });
          }
        ),
        a(
          {
            merge: function () {
              var e;
              if (arguments[0] instanceof SVG.Set) {
                var t = this;
                arguments[0].each(function (e) {
                  this instanceof SVG.MergeNode
                    ? t.put(this)
                    : (this instanceof SVG.Effect ||
                        this instanceof SVG.ParentEffect) &&
                      t.put(new SVG.MergeNode(this));
                });
              } else {
                e = Array.isArray(arguments[0]) ? arguments[0] : arguments;
                for (var i = 0; i < e.length; i++)
                  e[i] instanceof SVG.MergeNode
                    ? this.put(e[i])
                    : this.put(new SVG.MergeNode(e[i]));
              }
            },
            componentTransfer: function (e) {
              if (
                ((this.rgb = new SVG.Set()),
                ["r", "g", "b", "a"].forEach(
                  function (e) {
                    (this[e] = new SVG["Func" + e.toUpperCase()]("identity")),
                      this.rgb.add(this[e]),
                      this.node.appendChild(this[e].node);
                  }.bind(this)
                ),
                e)
              )
                for (var t in (e.rgb &&
                  (["r", "g", "b"].forEach(
                    function (t) {
                      this[t].attr(e.rgb);
                    }.bind(this)
                  ),
                  delete e.rgb),
                e))
                  this[t].attr(e[t]);
            },
            diffuseLighting: function (e, t, i) {
              this.attr({
                surfaceScale: e,
                diffuseConstant: t,
                kernelUnitLength: i
              });
            },
            specularLighting: function (e, t, i, a) {
              this.attr({
                surfaceScale: e,
                diffuseConstant: t,
                specularExponent: i,
                kernelUnitLength: a
              });
            }
          },
          function (e, t) {
            var i = t.charAt(0).toUpperCase() + t.slice(1);
            SVG[i + "Effect"] = SVG.invent({
              create: function () {
                this.constructor.call(this, SVG.create("fe" + i)),
                  e.apply(this, arguments),
                  this.result(this.attr("id") + "Out");
              },
              inherit: SVG.ParentEffect,
              extend: {}
            });
          }
        ),
        a(t, function (e, t) {
          var i = t.charAt(0).toUpperCase() + t.slice(1);
          SVG[i] = SVG.invent({
            create: function () {
              this.constructor.call(this, SVG.create("fe" + i)),
                e.apply(this, arguments);
            },
            inherit: SVG.ChildEffect,
            extend: {}
          });
        }),
        SVG.extend(SVG.MergeEffect, {
          in: function (e) {
            return (
              e instanceof SVG.MergeNode
                ? this.add(e, 0)
                : this.add(new SVG.MergeNode(e), 0),
              this
            );
          }
        }),
        SVG.extend(
          SVG.CompositeEffect,
          SVG.BlendEffect,
          SVG.DisplacementMapEffect,
          {
            in2: function (e) {
              return null == e
                ? (this.parent() &&
                    this.parent()
                      .select('[result="' + this.attr("in2") + '"]')
                      .get(0)) ||
                    this.attr("in2")
                : this.attr("in2", e);
            }
          }
        ),
        (SVG.filter = {
          sepiatone: [
            0.343, 0.669, 0.119, 0, 0, 0.249, 0.626, 0.13, 0, 0, 0.172, 0.334,
            0.111, 0, 0, 0, 0, 0, 1, 0
          ]
        });
    }.call(void 0),
    (function () {
      function e(e) {
        switch (e[0]) {
          case "z":
          case "Z":
            (e[0] = "L"), (e[1] = this.start[0]), (e[2] = this.start[1]);
            break;
          case "H":
            (e[0] = "L"), (e[2] = this.pos[1]);
            break;
          case "V":
            (e[0] = "L"), (e[2] = e[1]), (e[1] = this.pos[0]);
            break;
          case "T":
            (e[0] = "Q"),
              (e[3] = e[1]),
              (e[4] = e[2]),
              (e[1] = this.reflection[1]),
              (e[2] = this.reflection[0]);
            break;
          case "S":
            (e[0] = "C"),
              (e[6] = e[4]),
              (e[5] = e[3]),
              (e[4] = e[2]),
              (e[3] = e[1]),
              (e[2] = this.reflection[1]),
              (e[1] = this.reflection[0]);
        }
        return e;
      }
      function t(e) {
        var t = e.length;
        return (
          (this.pos = [e[t - 2], e[t - 1]]),
          -1 != "SCQT".indexOf(e[0]) &&
            (this.reflection = [
              2 * this.pos[0] - e[t - 4],
              2 * this.pos[1] - e[t - 3]
            ]),
          e
        );
      }
      function i(e) {
        var t = [e];
        switch (e[0]) {
          case "M":
            return (this.pos = this.start = [e[1], e[2]]), t;
          case "L":
            (e[5] = e[3] = e[1]),
              (e[6] = e[4] = e[2]),
              (e[1] = this.pos[0]),
              (e[2] = this.pos[1]);
            break;
          case "Q":
            (e[6] = e[4]),
              (e[5] = e[3]),
              (e[4] = (1 * e[4]) / 3 + (2 * e[2]) / 3),
              (e[3] = (1 * e[3]) / 3 + (2 * e[1]) / 3),
              (e[2] = (1 * this.pos[1]) / 3 + (2 * e[2]) / 3),
              (e[1] = (1 * this.pos[0]) / 3 + (2 * e[1]) / 3);
            break;
          case "A":
            e = (t = (function (e, t) {
              var i,
                a,
                n,
                s,
                o,
                r,
                l,
                c,
                h,
                d,
                u,
                g,
                p,
                f,
                m,
                x,
                b,
                v,
                y,
                w,
                C,
                k,
                A,
                S,
                L,
                O = Math.abs(t[1]),
                T = Math.abs(t[2]),
                P = t[3] % 360,
                M = t[4],
                _ = t[5],
                D = t[6],
                E = t[7],
                I = new SVG.Point(e),
                H = new SVG.Point(D, E),
                F = [];
              if (0 === O || 0 === T || (I.x === H.x && I.y === H.y))
                return [["C", I.x, I.y, H.x, H.y, H.x, H.y]];
              for (
                (a =
                  ((i = new SVG.Point(
                    (I.x - H.x) / 2,
                    (I.y - H.y) / 2
                  ).transform(new SVG.Matrix().rotate(P))).x *
                    i.x) /
                    (O * O) +
                  (i.y * i.y) / (T * T)) > 1 &&
                  ((O *= a = Math.sqrt(a)), (T *= a)),
                  n = new SVG.Matrix()
                    .rotate(P)
                    .scale(1 / O, 1 / T)
                    .rotate(-P),
                  I = I.transform(n),
                  o = Math.sqrt(
                    (r =
                      (s = [(H = H.transform(n)).x - I.x, H.y - I.y])[0] *
                        s[0] +
                      s[1] * s[1])
                  ),
                  s[0] /= o,
                  s[1] /= o,
                  l = r < 4 ? Math.sqrt(1 - r / 4) : 0,
                  M === _ && (l *= -1),
                  c = new SVG.Point(
                    (H.x + I.x) / 2 + -(l * s[1]),
                    (H.y + I.y) / 2 + l * s[0]
                  ),
                  h = new SVG.Point(I.x - c.x, I.y - c.y),
                  d = new SVG.Point(H.x - c.x, H.y - c.y),
                  u = Math.acos(h.x / Math.sqrt(h.x * h.x + h.y * h.y)),
                  h.y < 0 && (u *= -1),
                  g = Math.acos(d.x / Math.sqrt(d.x * d.x + d.y * d.y)),
                  d.y < 0 && (g *= -1),
                  _ && u > g && (g += 2 * Math.PI),
                  !_ && u < g && (g -= 2 * Math.PI),
                  f = Math.ceil((2 * Math.abs(u - g)) / Math.PI),
                  x = [],
                  b = u,
                  m = (4 * Math.tan((p = (g - u) / f) / 4)) / 3,
                  C = 0;
                C <= f;
                C++
              )
                (y = Math.cos(b)),
                  (v = Math.sin(b)),
                  (w = new SVG.Point(c.x + y, c.y + v)),
                  (x[C] = [
                    new SVG.Point(w.x + m * v, w.y - m * y),
                    w,
                    new SVG.Point(w.x - m * v, w.y + m * y)
                  ]),
                  (b += p);
              for (
                x[0][0] = x[0][1].clone(),
                  x[x.length - 1][2] = x[x.length - 1][1].clone(),
                  n = new SVG.Matrix().rotate(P).scale(O, T).rotate(-P),
                  C = 0,
                  k = x.length;
                C < k;
                C++
              )
                (x[C][0] = x[C][0].transform(n)),
                  (x[C][1] = x[C][1].transform(n)),
                  (x[C][2] = x[C][2].transform(n));
              for (C = 1, k = x.length; C < k; C++)
                (A = (w = x[C - 1][2]).x),
                  (S = w.y),
                  (L = (w = x[C][0]).x),
                  F.push(["C", A, S, L, w.y, (D = (w = x[C][1]).x), (E = w.y)]);
              return F;
            })(this.pos, e))[0];
        }
        return (
          (e[0] = "C"),
          (this.pos = [e[5], e[6]]),
          (this.reflection = [2 * e[5] - e[3], 2 * e[6] - e[4]]),
          t
        );
      }
      function a(e, t) {
        if (!1 === t) return !1;
        for (var i = t, a = e.length; i < a; ++i) if ("M" == e[i][0]) return i;
        return !1;
      }
      SVG.extend(SVG.PathArray, {
        morph: function (n) {
          for (
            var s = this.value, o = this.parse(n), r = 0, l = 0, c = !1, h = !1;
            !1 !== r || !1 !== l;

          ) {
            (c = a(s, !1 !== r && r + 1)),
              (h = a(o, !1 !== l && l + 1)),
              !1 === r &&
                (r =
                  0 == (d = new SVG.PathArray(u.start).bbox()).height ||
                  0 == d.width
                    ? s.push(s[0]) - 1
                    : s.push(["M", d.x + d.width / 2, d.y + d.height / 2]) - 1),
              !1 === l &&
                (l =
                  0 == (d = new SVG.PathArray(u.dest).bbox()).height ||
                  0 == d.width
                    ? o.push(o[0]) - 1
                    : o.push(["M", d.x + d.width / 2, d.y + d.height / 2]) - 1);
            var d,
              u = (function (a, n, s, o, r, l, c) {
                for (
                  var h = a.slice(n, s || c),
                    d = o.slice(r, l || c),
                    u = 0,
                    g = { pos: [0, 0], start: [0, 0] },
                    p = { pos: [0, 0], start: [0, 0] };
                  (h[u] = e.call(g, h[u])),
                    (d[u] = e.call(p, d[u])),
                    h[u][0] != d[u][0] ||
                    "M" == h[u][0] ||
                    ("A" == h[u][0] &&
                      (h[u][4] != d[u][4] || h[u][5] != d[u][5]))
                      ? (Array.prototype.splice.apply(
                          h,
                          [u, 1].concat(i.call(g, h[u]))
                        ),
                        Array.prototype.splice.apply(
                          d,
                          [u, 1].concat(i.call(p, d[u]))
                        ))
                      : ((h[u] = t.call(g, h[u])), (d[u] = t.call(p, d[u]))),
                    ++u != h.length || u != d.length;

                )
                  u == h.length &&
                    h.push([
                      "C",
                      g.pos[0],
                      g.pos[1],
                      g.pos[0],
                      g.pos[1],
                      g.pos[0],
                      g.pos[1]
                    ]),
                    u == d.length &&
                      d.push([
                        "C",
                        p.pos[0],
                        p.pos[1],
                        p.pos[0],
                        p.pos[1],
                        p.pos[0],
                        p.pos[1]
                      ]);
                return { start: h, dest: d };
              })(s, r, c, o, l, h);
            (s = s.slice(0, r).concat(u.start, !1 === c ? [] : s.slice(c))),
              (o = o.slice(0, l).concat(u.dest, !1 === h ? [] : o.slice(h))),
              (r = !1 !== c && r + u.start.length),
              (l = !1 !== h && l + u.dest.length);
          }
          return (
            (this.value = s),
            (this.destination = new SVG.PathArray()),
            (this.destination.value = o),
            this
          );
        }
      });
    })(),
    /*! svg.draggable.js - v2.2.2 - 2019-01-08
     * https://github.com/svgdotjs/svg.draggable.js
     * Copyright (c) 2019 Wout Fierens; Licensed MIT */ function () {
      function e(e) {
        e.remember("_draggable", this), (this.el = e);
      }
      (e.prototype.init = function (e, t) {
        var i = this;
        (this.constraint = e),
          (this.value = t),
          this.el.on("mousedown.drag", function (e) {
            i.start(e);
          }),
          this.el.on("touchstart.drag", function (e) {
            i.start(e);
          });
      }),
        (e.prototype.transformPoint = function (e, t) {
          var i =
            ((e = e || window.event).changedTouches && e.changedTouches[0]) ||
            e;
          return (
            (this.p.x = i.clientX - (t || 0)),
            (this.p.y = i.clientY),
            this.p.matrixTransform(this.m)
          );
        }),
        (e.prototype.getBBox = function () {
          var e = this.el.bbox();
          return (
            this.el instanceof SVG.Nested && (e = this.el.rbox()),
            (this.el instanceof SVG.G ||
              this.el instanceof SVG.Use ||
              this.el instanceof SVG.Nested) &&
              ((e.x = this.el.x()), (e.y = this.el.y())),
            e
          );
        }),
        (e.prototype.start = function (e) {
          if (
            ("click" != e.type &&
              "mousedown" != e.type &&
              "mousemove" != e.type) ||
            1 == (e.which || e.buttons)
          ) {
            var t = this;
            if (
              (this.el.fire("beforedrag", { event: e, handler: this }),
              !this.el.event().defaultPrevented)
            ) {
              e.preventDefault(),
                e.stopPropagation(),
                (this.parent =
                  this.parent ||
                  this.el.parent(SVG.Nested) ||
                  this.el.parent(SVG.Doc)),
                (this.p = this.parent.node.createSVGPoint()),
                (this.m = this.el.node.getScreenCTM().inverse());
              var i,
                a = this.getBBox();
              if (this.el instanceof SVG.Text)
                switch (
                  ((i = this.el.node.getComputedTextLength()),
                  this.el.attr("text-anchor"))
                ) {
                  case "middle":
                    i /= 2;
                    break;
                  case "start":
                    i = 0;
                }
              (this.startPoints = {
                point: this.transformPoint(e, i),
                box: a,
                transform: this.el.transform()
              }),
                SVG.on(window, "mousemove.drag", function (e) {
                  t.drag(e);
                }),
                SVG.on(window, "touchmove.drag", function (e) {
                  t.drag(e);
                }),
                SVG.on(window, "mouseup.drag", function (e) {
                  t.end(e);
                }),
                SVG.on(window, "touchend.drag", function (e) {
                  t.end(e);
                }),
                this.el.fire("dragstart", {
                  event: e,
                  p: this.startPoints.point,
                  m: this.m,
                  handler: this
                });
            }
          }
        }),
        (e.prototype.drag = function (e) {
          var t = this.getBBox(),
            i = this.transformPoint(e),
            a = this.startPoints.box.x + i.x - this.startPoints.point.x,
            n = this.startPoints.box.y + i.y - this.startPoints.point.y,
            s = this.constraint,
            o = i.x - this.startPoints.point.x,
            r = i.y - this.startPoints.point.y;
          if (
            (this.el.fire("dragmove", {
              event: e,
              p: i,
              m: this.m,
              handler: this
            }),
            this.el.event().defaultPrevented)
          )
            return i;
          if ("function" == typeof s) {
            var l = s.call(this.el, a, n, this.m);
            "boolean" == typeof l && (l = { x: l, y: l }),
              !0 === l.x ? this.el.x(a) : !1 !== l.x && this.el.x(l.x),
              !0 === l.y ? this.el.y(n) : !1 !== l.y && this.el.y(l.y);
          } else
            "object" == typeof s &&
              (null != s.minX && a < s.minX
                ? (o = (a = s.minX) - this.startPoints.box.x)
                : null != s.maxX &&
                  a > s.maxX - t.width &&
                  (o = (a = s.maxX - t.width) - this.startPoints.box.x),
              null != s.minY && n < s.minY
                ? (r = (n = s.minY) - this.startPoints.box.y)
                : null != s.maxY &&
                  n > s.maxY - t.height &&
                  (r = (n = s.maxY - t.height) - this.startPoints.box.y),
              null != s.snapToGrid &&
                ((a -= a % s.snapToGrid),
                (n -= n % s.snapToGrid),
                (o -= o % s.snapToGrid),
                (r -= r % s.snapToGrid)),
              this.el instanceof SVG.G
                ? this.el
                    .matrix(this.startPoints.transform)
                    .transform({ x: o, y: r }, !0)
                : this.el.move(a, n));
          return i;
        }),
        (e.prototype.end = function (e) {
          var t = this.drag(e);
          this.el.fire("dragend", { event: e, p: t, m: this.m, handler: this }),
            SVG.off(window, "mousemove.drag"),
            SVG.off(window, "touchmove.drag"),
            SVG.off(window, "mouseup.drag"),
            SVG.off(window, "touchend.drag");
        }),
        SVG.extend(SVG.Element, {
          draggable: function (t, i) {
            ("function" != typeof t && "object" != typeof t) ||
              ((i = t), (t = !0));
            var a = this.remember("_draggable") || new e(this);
            return (
              (t = void 0 === t || t)
                ? a.init(i || {}, t)
                : (this.off("mousedown.drag"), this.off("touchstart.drag")),
              this
            );
          }
        });
    }.call(void 0),
    (function () {
      function e(e) {
        (this.el = e),
          e.remember("_selectHandler", this),
          (this.pointSelection = { isSelected: !1 }),
          (this.rectSelection = { isSelected: !1 }),
          (this.pointsList = {
            lt: [0, 0],
            rt: ["width", 0],
            rb: ["width", "height"],
            lb: [0, "height"],
            t: ["width", 0],
            r: ["width", "height"],
            b: ["width", "height"],
            l: [0, "height"]
          }),
          (this.pointCoord = function (e, t, i) {
            var a = "string" != typeof e ? e : t[e];
            return i ? a / 2 : a;
          }),
          (this.pointCoords = function (e, t) {
            var i = this.pointsList[e];
            return {
              x: this.pointCoord(i[0], t, "t" === e || "b" === e),
              y: this.pointCoord(i[1], t, "r" === e || "l" === e)
            };
          });
      }
      (e.prototype.init = function (e, t) {
        var i = this.el.bbox();
        this.options = {};
        var a = this.el.selectize.defaults.points;
        for (var n in this.el.selectize.defaults)
          (this.options[n] = this.el.selectize.defaults[n]),
            void 0 !== t[n] && (this.options[n] = t[n]);
        var s = ["points", "pointsExclude"];
        for (var n in s) {
          var o = this.options[s[n]];
          "string" == typeof o
            ? (o = o.length > 0 ? o.split(/\s*,\s*/i) : [])
            : "boolean" == typeof o && "points" === s[n] && (o = o ? a : []),
            (this.options[s[n]] = o);
        }
        (this.options.points = [a, this.options.points].reduce(function (e, t) {
          return e.filter(function (e) {
            return t.indexOf(e) > -1;
          });
        })),
          (this.options.points = [
            this.options.points,
            this.options.pointsExclude
          ].reduce(function (e, t) {
            return e.filter(function (e) {
              return 0 > t.indexOf(e);
            });
          })),
          (this.parent = this.el.parent()),
          (this.nested = this.nested || this.parent.group()),
          this.nested.matrix(new SVG.Matrix(this.el).translate(i.x, i.y)),
          this.options.deepSelect &&
          -1 !== ["line", "polyline", "polygon"].indexOf(this.el.type)
            ? this.selectPoints(e)
            : this.selectRect(e),
          this.observe(),
          this.cleanup();
      }),
        (e.prototype.selectPoints = function (e) {
          return (
            (this.pointSelection.isSelected = e),
            this.pointSelection.set ||
              ((this.pointSelection.set = this.parent.set()),
              this.drawPoints()),
            this
          );
        }),
        (e.prototype.getPointArray = function () {
          var e = this.el.bbox();
          return this.el
            .array()
            .valueOf()
            .map(function (t) {
              return [t[0] - e.x, t[1] - e.y];
            });
        }),
        (e.prototype.drawPoints = function () {
          for (
            var e = this, t = this.getPointArray(), i = 0, a = t.length;
            i < a;
            ++i
          ) {
            var n = (function (t) {
                return function (i) {
                  (i = i || window.event).preventDefault
                    ? i.preventDefault()
                    : (i.returnValue = !1),
                    i.stopPropagation();
                  var a = i.pageX || i.touches[0].pageX,
                    n = i.pageY || i.touches[0].pageY;
                  e.el.fire("point", { x: a, y: n, i: t, event: i });
                };
              })(i),
              s = this.drawPoint(t[i][0], t[i][1])
                .addClass(this.options.classPoints)
                .addClass(this.options.classPoints + "_point")
                .on("touchstart", n)
                .on("mousedown", n);
            this.pointSelection.set.add(s);
          }
        }),
        (e.prototype.drawPoint = function (e, t) {
          var i = this.options.pointType;
          switch (i) {
            case "circle":
              return this.drawCircle(e, t);
            case "rect":
              return this.drawRect(e, t);
            default:
              if ("function" == typeof i) return i.call(this, e, t);
              throw Error("Unknown " + i + " point type!");
          }
        }),
        (e.prototype.drawCircle = function (e, t) {
          return this.nested.circle(this.options.pointSize).center(e, t);
        }),
        (e.prototype.drawRect = function (e, t) {
          return this.nested
            .rect(this.options.pointSize, this.options.pointSize)
            .center(e, t);
        }),
        (e.prototype.updatePointSelection = function () {
          var e = this.getPointArray();
          this.pointSelection.set.each(function (t) {
            (this.cx() === e[t][0] && this.cy() === e[t][1]) ||
              this.center(e[t][0], e[t][1]);
          });
        }),
        (e.prototype.updateRectSelection = function () {
          var e = this,
            t = this.el.bbox();
          if (
            (this.rectSelection.set
              .get(0)
              .attr({ width: t.width, height: t.height }),
            this.options.points.length &&
              this.options.points.map(function (i, a) {
                var n = e.pointCoords(i, t);
                e.rectSelection.set.get(a + 1).center(n.x, n.y);
              }),
            this.options.rotationPoint)
          ) {
            var i = this.rectSelection.set.length();
            this.rectSelection.set.get(i - 1).center(t.width / 2, 20);
          }
        }),
        (e.prototype.selectRect = function (e) {
          var t = this,
            i = this.el.bbox();
          function a(e) {
            return function (i) {
              (i = i || window.event).preventDefault
                ? i.preventDefault()
                : (i.returnValue = !1),
                i.stopPropagation();
              var a = i.pageX || i.touches[0].pageX,
                n = i.pageY || i.touches[0].pageY;
              t.el.fire(e, { x: a, y: n, event: i });
            };
          }
          if (
            ((this.rectSelection.isSelected = e),
            (this.rectSelection.set =
              this.rectSelection.set || this.parent.set()),
            this.rectSelection.set.get(0) ||
              this.rectSelection.set.add(
                this.nested
                  .rect(i.width, i.height)
                  .addClass(this.options.classRect)
              ),
            this.options.points.length &&
              2 > this.rectSelection.set.length() &&
              (this.options.points.map(function (e, n) {
                var s = t.pointCoords(e, i),
                  o = t
                    .drawPoint(s.x, s.y)
                    .attr("class", t.options.classPoints + "_" + e)
                    .on("mousedown", a(e))
                    .on("touchstart", a(e));
                t.rectSelection.set.add(o);
              }),
              this.rectSelection.set.each(function () {
                this.addClass(t.options.classPoints);
              })),
            this.options.rotationPoint &&
              ((this.options.points && !this.rectSelection.set.get(9)) ||
                (!this.options.points && !this.rectSelection.set.get(1))))
          ) {
            var n = function (e) {
                (e = e || window.event).preventDefault
                  ? e.preventDefault()
                  : (e.returnValue = !1),
                  e.stopPropagation();
                var i = e.pageX || e.touches[0].pageX,
                  a = e.pageY || e.touches[0].pageY;
                t.el.fire("rot", { x: i, y: a, event: e });
              },
              s = this.drawPoint(i.width / 2, 20)
                .attr("class", this.options.classPoints + "_rot")
                .on("touchstart", n)
                .on("mousedown", n);
            this.rectSelection.set.add(s);
          }
        }),
        (e.prototype.handler = function () {
          var e = this.el.bbox();
          this.nested.matrix(new SVG.Matrix(this.el).translate(e.x, e.y)),
            this.rectSelection.isSelected && this.updateRectSelection(),
            this.pointSelection.isSelected && this.updatePointSelection();
        }),
        (e.prototype.observe = function () {
          var e = this;
          if (MutationObserver) {
            if (this.rectSelection.isSelected || this.pointSelection.isSelected)
              (this.observerInst =
                this.observerInst ||
                new MutationObserver(function () {
                  e.handler();
                })),
                this.observerInst.observe(this.el.node, { attributes: !0 });
            else
              try {
                this.observerInst.disconnect(), delete this.observerInst;
              } catch (e) {}
          } else
            this.el.off("DOMAttrModified.select"),
              (this.rectSelection.isSelected ||
                this.pointSelection.isSelected) &&
                this.el.on("DOMAttrModified.select", function () {
                  e.handler();
                });
        }),
        (e.prototype.cleanup = function () {
          !this.rectSelection.isSelected &&
            this.rectSelection.set &&
            (this.rectSelection.set.each(function () {
              this.remove();
            }),
            this.rectSelection.set.clear(),
            delete this.rectSelection.set),
            !this.pointSelection.isSelected &&
              this.pointSelection.set &&
              (this.pointSelection.set.each(function () {
                this.remove();
              }),
              this.pointSelection.set.clear(),
              delete this.pointSelection.set),
            this.pointSelection.isSelected ||
              this.rectSelection.isSelected ||
              (this.nested.remove(), delete this.nested);
        }),
        SVG.extend(SVG.Element, {
          selectize: function (t, i) {
            return (
              "object" == typeof t && ((i = t), (t = !0)),
              (this.remember("_selectHandler") || new e(this)).init(
                void 0 === t || t,
                i || {}
              ),
              this
            );
          }
        }),
        (SVG.Element.prototype.selectize.defaults = {
          points: ["lt", "rt", "rb", "lb", "t", "r", "b", "l"],
          pointsExclude: [],
          classRect: "svg_select_boundingRect",
          classPoints: "svg_select_points",
          pointSize: 7,
          rotationPoint: !0,
          deepSelect: !1,
          pointType: "circle"
        });
    })(),
    (function () {
      (function () {
        function e(e) {
          e.remember("_resizeHandler", this),
            (this.el = e),
            (this.parameters = {}),
            (this.lastUpdateCall = null),
            (this.p = e.doc().node.createSVGPoint());
        }
        (e.prototype.transformPoint = function (e, t, i) {
          return (
            (this.p.x = e - (this.offset.x - window.pageXOffset)),
            (this.p.y = t - (this.offset.y - window.pageYOffset)),
            this.p.matrixTransform(i || this.m)
          );
        }),
          (e.prototype._extractPosition = function (e) {
            return {
              x: null != e.clientX ? e.clientX : e.touches[0].clientX,
              y: null != e.clientY ? e.clientY : e.touches[0].clientY
            };
          }),
          (e.prototype.init = function (e) {
            var t = this;
            if ((this.stop(), "stop" !== e)) {
              for (var i in ((this.options = {}), this.el.resize.defaults))
                (this.options[i] = this.el.resize.defaults[i]),
                  void 0 !== e[i] && (this.options[i] = e[i]);
              this.el.on("lt.resize", function (e) {
                t.resize(e || window.event);
              }),
                this.el.on("rt.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("rb.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("lb.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("t.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("r.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("b.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("l.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("rot.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.el.on("point.resize", function (e) {
                  t.resize(e || window.event);
                }),
                this.update();
            }
          }),
          (e.prototype.stop = function () {
            return (
              this.el.off("lt.resize"),
              this.el.off("rt.resize"),
              this.el.off("rb.resize"),
              this.el.off("lb.resize"),
              this.el.off("t.resize"),
              this.el.off("r.resize"),
              this.el.off("b.resize"),
              this.el.off("l.resize"),
              this.el.off("rot.resize"),
              this.el.off("point.resize"),
              this
            );
          }),
          (e.prototype.resize = function (e) {
            var t = this;
            (this.m = this.el.node.getScreenCTM().inverse()),
              (this.offset = { x: window.pageXOffset, y: window.pageYOffset });
            var i = this._extractPosition(e.detail.event);
            if (
              ((this.parameters = {
                type: this.el.type,
                p: this.transformPoint(i.x, i.y),
                x: e.detail.x,
                y: e.detail.y,
                box: this.el.bbox(),
                rotation: this.el.transform().rotation
              }),
              "text" === this.el.type &&
                (this.parameters.fontSize = this.el.attr()["font-size"]),
              void 0 !== e.detail.i)
            ) {
              var a = this.el.array().valueOf();
              (this.parameters.i = e.detail.i),
                (this.parameters.pointCoords = [
                  a[e.detail.i][0],
                  a[e.detail.i][1]
                ]);
            }
            switch (e.type) {
              case "lt":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t);
                  if (
                    this.parameters.box.width - i[0] > 0 &&
                    this.parameters.box.height - i[1] > 0
                  ) {
                    if ("text" === this.parameters.type)
                      return (
                        this.el.move(
                          this.parameters.box.x + i[0],
                          this.parameters.box.y
                        ),
                        void this.el.attr(
                          "font-size",
                          this.parameters.fontSize - i[0]
                        )
                      );
                    (i = this.checkAspectRatio(i)),
                      this.el
                        .move(
                          this.parameters.box.x + i[0],
                          this.parameters.box.y + i[1]
                        )
                        .size(
                          this.parameters.box.width - i[0],
                          this.parameters.box.height - i[1]
                        );
                  }
                };
                break;
              case "rt":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 2);
                  if (
                    this.parameters.box.width + i[0] > 0 &&
                    this.parameters.box.height - i[1] > 0
                  ) {
                    if ("text" === this.parameters.type)
                      return (
                        this.el.move(
                          this.parameters.box.x - i[0],
                          this.parameters.box.y
                        ),
                        void this.el.attr(
                          "font-size",
                          this.parameters.fontSize + i[0]
                        )
                      );
                    (i = this.checkAspectRatio(i, !0)),
                      this.el
                        .move(
                          this.parameters.box.x,
                          this.parameters.box.y + i[1]
                        )
                        .size(
                          this.parameters.box.width + i[0],
                          this.parameters.box.height - i[1]
                        );
                  }
                };
                break;
              case "rb":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 0);
                  if (
                    this.parameters.box.width + i[0] > 0 &&
                    this.parameters.box.height + i[1] > 0
                  ) {
                    if ("text" === this.parameters.type)
                      return (
                        this.el.move(
                          this.parameters.box.x - i[0],
                          this.parameters.box.y
                        ),
                        void this.el.attr(
                          "font-size",
                          this.parameters.fontSize + i[0]
                        )
                      );
                    (i = this.checkAspectRatio(i)),
                      this.el
                        .move(this.parameters.box.x, this.parameters.box.y)
                        .size(
                          this.parameters.box.width + i[0],
                          this.parameters.box.height + i[1]
                        );
                  }
                };
                break;
              case "lb":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 1);
                  if (
                    this.parameters.box.width - i[0] > 0 &&
                    this.parameters.box.height + i[1] > 0
                  ) {
                    if ("text" === this.parameters.type)
                      return (
                        this.el.move(
                          this.parameters.box.x + i[0],
                          this.parameters.box.y
                        ),
                        void this.el.attr(
                          "font-size",
                          this.parameters.fontSize - i[0]
                        )
                      );
                    (i = this.checkAspectRatio(i, !0)),
                      this.el
                        .move(
                          this.parameters.box.x + i[0],
                          this.parameters.box.y
                        )
                        .size(
                          this.parameters.box.width - i[0],
                          this.parameters.box.height + i[1]
                        );
                  }
                };
                break;
              case "t":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 2);
                  if (this.parameters.box.height - i[1] > 0) {
                    if ("text" === this.parameters.type) return;
                    this.el
                      .move(this.parameters.box.x, this.parameters.box.y + i[1])
                      .height(this.parameters.box.height - i[1]);
                  }
                };
                break;
              case "r":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 0);
                  if (this.parameters.box.width + i[0] > 0) {
                    if ("text" === this.parameters.type) return;
                    this.el
                      .move(this.parameters.box.x, this.parameters.box.y)
                      .width(this.parameters.box.width + i[0]);
                  }
                };
                break;
              case "b":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 0);
                  if (this.parameters.box.height + i[1] > 0) {
                    if ("text" === this.parameters.type) return;
                    this.el
                      .move(this.parameters.box.x, this.parameters.box.y)
                      .height(this.parameters.box.height + i[1]);
                  }
                };
                break;
              case "l":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(e, t, 1);
                  if (this.parameters.box.width - i[0] > 0) {
                    if ("text" === this.parameters.type) return;
                    this.el
                      .move(this.parameters.box.x + i[0], this.parameters.box.y)
                      .width(this.parameters.box.width - i[0]);
                  }
                };
                break;
              case "rot":
                this.calc = function (e, t) {
                  var i = e + this.parameters.p.x,
                    a = t + this.parameters.p.y,
                    n = Math.atan2(
                      this.parameters.p.y -
                        this.parameters.box.y -
                        this.parameters.box.height / 2,
                      this.parameters.p.x -
                        this.parameters.box.x -
                        this.parameters.box.width / 2
                    ),
                    s = Math.atan2(
                      a -
                        this.parameters.box.y -
                        this.parameters.box.height / 2,
                      i - this.parameters.box.x - this.parameters.box.width / 2
                    ),
                    o =
                      this.parameters.rotation +
                      (180 * (s - n)) / Math.PI +
                      this.options.snapToAngle / 2;
                  this.el
                    .center(this.parameters.box.cx, this.parameters.box.cy)
                    .rotate(
                      o - (o % this.options.snapToAngle),
                      this.parameters.box.cx,
                      this.parameters.box.cy
                    );
                };
                break;
              case "point":
                this.calc = function (e, t) {
                  var i = this.snapToGrid(
                      e,
                      t,
                      this.parameters.pointCoords[0],
                      this.parameters.pointCoords[1]
                    ),
                    a = this.el.array().valueOf();
                  (a[this.parameters.i][0] =
                    this.parameters.pointCoords[0] + i[0]),
                    (a[this.parameters.i][1] =
                      this.parameters.pointCoords[1] + i[1]),
                    this.el.plot(a);
                };
            }
            this.el.fire("resizestart", {
              dx: this.parameters.x,
              dy: this.parameters.y,
              event: e
            }),
              SVG.on(window, "touchmove.resize", function (e) {
                t.update(e || window.event);
              }),
              SVG.on(window, "touchend.resize", function () {
                t.done();
              }),
              SVG.on(window, "mousemove.resize", function (e) {
                t.update(e || window.event);
              }),
              SVG.on(window, "mouseup.resize", function () {
                t.done();
              });
          }),
          (e.prototype.update = function (e) {
            if (e) {
              var t = this._extractPosition(e),
                i = this.transformPoint(t.x, t.y),
                a = i.x - this.parameters.p.x,
                n = i.y - this.parameters.p.y;
              (this.lastUpdateCall = [a, n]),
                this.calc(a, n),
                this.el.fire("resizing", { dx: a, dy: n, event: e });
            } else
              this.lastUpdateCall &&
                this.calc(this.lastUpdateCall[0], this.lastUpdateCall[1]);
          }),
          (e.prototype.done = function () {
            (this.lastUpdateCall = null),
              SVG.off(window, "mousemove.resize"),
              SVG.off(window, "mouseup.resize"),
              SVG.off(window, "touchmove.resize"),
              SVG.off(window, "touchend.resize"),
              this.el.fire("resizedone");
          }),
          (e.prototype.snapToGrid = function (e, t, i, a) {
            var n;
            return (
              void 0 !== a
                ? (n = [
                    (i + e) % this.options.snapToGrid,
                    (a + t) % this.options.snapToGrid
                  ])
                : ((i = null == i ? 3 : i),
                  (n = [
                    (this.parameters.box.x +
                      e +
                      (1 & i ? 0 : this.parameters.box.width)) %
                      this.options.snapToGrid,
                    (this.parameters.box.y +
                      t +
                      (2 & i ? 0 : this.parameters.box.height)) %
                      this.options.snapToGrid
                  ])),
              e < 0 && (n[0] -= this.options.snapToGrid),
              t < 0 && (n[1] -= this.options.snapToGrid),
              (e -=
                Math.abs(n[0]) < this.options.snapToGrid / 2
                  ? n[0]
                  : n[0] -
                    (e < 0
                      ? -this.options.snapToGrid
                      : this.options.snapToGrid)),
              (t -=
                Math.abs(n[1]) < this.options.snapToGrid / 2
                  ? n[1]
                  : n[1] -
                    (t < 0
                      ? -this.options.snapToGrid
                      : this.options.snapToGrid)),
              this.constraintToBox(e, t, i, a)
            );
          }),
          (e.prototype.constraintToBox = function (e, t, i, a) {
            var n,
              s,
              o = this.options.constraint || {};
            return (
              void 0 !== a
                ? ((n = i), (s = a))
                : ((n =
                    this.parameters.box.x +
                    (1 & i ? 0 : this.parameters.box.width)),
                  (s =
                    this.parameters.box.y +
                    (2 & i ? 0 : this.parameters.box.height))),
              void 0 !== o.minX && n + e < o.minX && (e = o.minX - n),
              void 0 !== o.maxX && n + e > o.maxX && (e = o.maxX - n),
              void 0 !== o.minY && s + t < o.minY && (t = o.minY - s),
              void 0 !== o.maxY && s + t > o.maxY && (t = o.maxY - s),
              [e, t]
            );
          }),
          (e.prototype.checkAspectRatio = function (e, t) {
            if (!this.options.saveAspectRatio) return e;
            var i = e.slice(),
              a = this.parameters.box.width / this.parameters.box.height,
              n = this.parameters.box.width + e[0],
              s = this.parameters.box.height - e[1],
              o = n / s;
            return (
              o < a
                ? ((i[1] = n / a - this.parameters.box.height),
                  t && (i[1] = -i[1]))
                : o > a &&
                  ((i[0] = this.parameters.box.width - s * a),
                  t && (i[0] = -i[0])),
              i
            );
          }),
          SVG.extend(SVG.Element, {
            resize: function (t) {
              return (
                (this.remember("_resizeHandler") || new e(this)).init(t || {}),
                this
              );
            }
          }),
          (SVG.Element.prototype.resize.defaults = {
            snapToAngle: 0.1,
            snapToGrid: 1,
            constraint: {},
            saveAspectRatio: !1
          });
      }).call(this);
    })(),
    void 0 === window.Apex && (window.Apex = {});
  var ox = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "initModules",
            value: function () {
              (this.ctx.publicMethods = [
                "updateOptions",
                "updateSeries",
                "appendData",
                "appendSeries",
                "toggleSeries",
                "showSeries",
                "hideSeries",
                "setLocale",
                "resetSeries",
                "zoomX",
                "toggleDataPointSelection",
                "dataURI",
                "exportToCSV",
                "addXaxisAnnotation",
                "addYaxisAnnotation",
                "addPointAnnotation",
                "clearAnnotations",
                "removeAnnotation",
                "paper",
                "destroy"
              ]),
                (this.ctx.eventList = [
                  "click",
                  "mousedown",
                  "mousemove",
                  "mouseleave",
                  "touchstart",
                  "touchmove",
                  "touchleave",
                  "mouseup",
                  "touchend"
                ]),
                (this.ctx.animations = new si(this.ctx)),
                (this.ctx.axes = new sF(this.ctx)),
                (this.ctx.core = new of(this.ctx.el, this.ctx)),
                (this.ctx.config = new sb({})),
                (this.ctx.data = new sL(this.ctx)),
                (this.ctx.grid = new sM(this.ctx)),
                (this.ctx.graphics = new sn(this.ctx)),
                (this.ctx.coreUtils = new ss(this.ctx)),
                (this.ctx.crosshairs = new sz(this.ctx)),
                (this.ctx.events = new sI(this.ctx)),
                (this.ctx.exports = new sT(this.ctx)),
                (this.ctx.localization = new sH(this.ctx)),
                (this.ctx.options = new sd()),
                (this.ctx.responsive = new sY(this.ctx)),
                (this.ctx.series = new sS(this.ctx)),
                (this.ctx.theme = new sX(this.ctx)),
                (this.ctx.formatters = new sp(this.ctx)),
                (this.ctx.titleSubtitle = new sN(this.ctx)),
                (this.ctx.legend = new s$(this.ctx)),
                (this.ctx.toolbar = new sU(this.ctx)),
                (this.ctx.tooltip = new s2(this.ctx)),
                (this.ctx.dimensions = new sG(this.ctx)),
                (this.ctx.updateHelpers = new om(this.ctx)),
                (this.ctx.zoomPanSelection = new sq(this.ctx)),
                (this.ctx.w.globals.tooltip = new s2(this.ctx));
            }
          }
        ]),
        e
      );
    })(),
    ob = (function () {
      function e(t) {
        nQ(this, e), (this.ctx = t), (this.w = t.w);
      }
      return (
        n1(e, [
          {
            key: "clear",
            value: function (e) {
              var t = e.isUpdating;
              this.ctx.zoomPanSelection && this.ctx.zoomPanSelection.destroy(),
                this.ctx.toolbar && this.ctx.toolbar.destroy(),
                (this.ctx.animations = null),
                (this.ctx.axes = null),
                (this.ctx.annotations = null),
                (this.ctx.core = null),
                (this.ctx.data = null),
                (this.ctx.grid = null),
                (this.ctx.series = null),
                (this.ctx.responsive = null),
                (this.ctx.theme = null),
                (this.ctx.formatters = null),
                (this.ctx.titleSubtitle = null),
                (this.ctx.legend = null),
                (this.ctx.dimensions = null),
                (this.ctx.options = null),
                (this.ctx.crosshairs = null),
                (this.ctx.zoomPanSelection = null),
                (this.ctx.updateHelpers = null),
                (this.ctx.toolbar = null),
                (this.ctx.localization = null),
                (this.ctx.w.globals.tooltip = null),
                this.clearDomElements({ isUpdating: t });
            }
          },
          {
            key: "killSVG",
            value: function (e) {
              e.each(function (e, t) {
                this.removeClass("*"), this.off(), this.stop();
              }, !0),
                e.ungroup(),
                e.clear();
            }
          },
          {
            key: "clearDomElements",
            value: function (e) {
              var t = this,
                i = e.isUpdating,
                a = this.w.globals.dom.Paper.node;
              a.parentNode &&
                a.parentNode.parentNode &&
                !i &&
                (a.parentNode.parentNode.style.minHeight = "unset");
              var n = this.w.globals.dom.baseEl;
              n &&
                this.ctx.eventList.forEach(function (e) {
                  n.removeEventListener(e, t.ctx.events.documentEvent);
                });
              var s = this.w.globals.dom;
              if (null !== this.ctx.el)
                for (; this.ctx.el.firstChild; )
                  this.ctx.el.removeChild(this.ctx.el.firstChild);
              this.killSVG(s.Paper),
                s.Paper.remove(),
                (s.elWrap = null),
                (s.elGraphical = null),
                (s.elLegendWrap = null),
                (s.elLegendForeign = null),
                (s.baseEl = null),
                (s.elGridRect = null),
                (s.elGridRectMask = null),
                (s.elGridRectMarkerMask = null),
                (s.elForecastMask = null),
                (s.elNonForecastMask = null),
                (s.elDefs = null);
            }
          }
        ]),
        e
      );
    })(),
    ov = new WeakMap();
  nq = (function () {
    function e(t, i) {
      nQ(this, e),
        (this.opts = i),
        (this.ctx = this),
        (this.w = new sy(i).init()),
        (this.el = t),
        (this.w.globals.cuid = st.randomId()),
        (this.w.globals.chartID = this.w.config.chart.id
          ? st.escapeString(this.w.config.chart.id)
          : this.w.globals.cuid),
        new ox(this).initModules(),
        (this.create = st.bind(this.create, this)),
        (this.windowResizeHandler = this._windowResizeHandler.bind(this)),
        (this.parentResizeHandler = this._parentResizeCallback.bind(this));
    }
    return (
      n1(
        e,
        [
          {
            key: "render",
            value: function () {
              var e = this;
              return new Promise(function (t, i) {
                if (null !== e.el) {
                  void 0 === Apex._chartInstances &&
                    (Apex._chartInstances = []),
                    e.w.config.chart.id &&
                      Apex._chartInstances.push({
                        id: e.w.globals.chartID,
                        group: e.w.config.chart.group,
                        chart: e
                      }),
                    e.setLocale(e.w.config.chart.defaultLocale);
                  var a = e.w.config.chart.events.beforeMount;
                  if (
                    ("function" == typeof a && a(e, e.w),
                    e.events.fireEvent("beforeMount", [e, e.w]),
                    window.addEventListener("resize", e.windowResizeHandler),
                    (function (e, t) {
                      var i = !1;
                      if (e.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {
                        var a = e.getBoundingClientRect();
                        ("none" !== e.style.display && 0 !== a.width) ||
                          (i = !0);
                      }
                      var n = new ResizeObserver(function (a) {
                        i && t.call(e, a), (i = !0);
                      });
                      e.nodeType === Node.DOCUMENT_FRAGMENT_NODE
                        ? Array.from(e.children).forEach(function (e) {
                            return n.observe(e);
                          })
                        : n.observe(e),
                        ov.set(t, n);
                    })(e.el.parentNode, e.parentResizeHandler),
                    !e.css)
                  ) {
                    var n = e.el.getRootNode && e.el.getRootNode(),
                      s = st.is("ShadowRoot", n),
                      o = e.el.ownerDocument,
                      r = o.getElementById("apexcharts-css");
                    (!s && r) ||
                      ((e.css = document.createElement("style")),
                      (e.css.id = "apexcharts-css"),
                      (e.css.textContent =
                        '@keyframes opaque {\n  0% {\n      opacity: 0\n  }\n\n  to {\n      opacity: 1\n  }\n}\n\n@keyframes resizeanim {\n  0%,to {\n      opacity: 0\n  }\n}\n\n.apexcharts-canvas {\n  position: relative;\n  user-select: none\n}\n\n.apexcharts-canvas ::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 6px\n}\n\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\n  border-radius: 4px;\n  background-color: rgba(0,0,0,.5);\n  box-shadow: 0 0 1px rgba(255,255,255,.5);\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,.5)\n}\n\n.apexcharts-inner {\n  position: relative\n}\n\n.apexcharts-text tspan {\n  font-family: inherit\n}\n\n.legend-mouseover-inactive {\n  transition: .15s ease all;\n  opacity: .2\n}\n\n.apexcharts-legend-text {\n  padding-left: 15px;\n  margin-left: -15px;\n}\n\n.apexcharts-series-collapsed {\n  opacity: 0\n}\n\n.apexcharts-tooltip {\n  border-radius: 5px;\n  box-shadow: 2px 2px 6px -4px #999;\n  cursor: default;\n  font-size: 14px;\n  left: 62px;\n  opacity: 0;\n  pointer-events: none;\n  position: absolute;\n  top: 20px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  white-space: nowrap;\n  z-index: 12;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-tooltip.apexcharts-theme-light {\n  border: 1px solid #e3e3e3;\n  background: rgba(255,255,255,.96)\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark {\n  color: #fff;\n  background: rgba(30,30,30,.8)\n}\n\n.apexcharts-tooltip * {\n  font-family: inherit\n}\n\n.apexcharts-tooltip-title {\n  padding: 6px;\n  font-size: 15px;\n  margin-bottom: 4px\n}\n\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\n  background: #eceff1;\n  border-bottom: 1px solid #ddd\n}\n\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\n  background: rgba(0,0,0,.7);\n  border-bottom: 1px solid #333\n}\n\n.apexcharts-tooltip-text-goals-value,.apexcharts-tooltip-text-y-value,.apexcharts-tooltip-text-z-value {\n  display: inline-block;\n  margin-left: 5px;\n  font-weight: 600\n}\n\n.apexcharts-tooltip-text-goals-label:empty,.apexcharts-tooltip-text-goals-value:empty,.apexcharts-tooltip-text-y-label:empty,.apexcharts-tooltip-text-y-value:empty,.apexcharts-tooltip-text-z-value:empty,.apexcharts-tooltip-title:empty {\n  display: none\n}\n\n.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  padding: 6px 0 5px\n}\n\n.apexcharts-tooltip-goals-group,.apexcharts-tooltip-text-goals-label,.apexcharts-tooltip-text-goals-value {\n  display: flex\n}\n\n.apexcharts-tooltip-text-goals-label:not(:empty),.apexcharts-tooltip-text-goals-value:not(:empty) {\n  margin-top: -6px\n}\n\n.apexcharts-tooltip-marker {\n  width: 12px;\n  height: 12px;\n  position: relative;\n  top: 0;\n  margin-right: 10px;\n  border-radius: 50%\n}\n\n.apexcharts-tooltip-series-group {\n  padding: 0 10px;\n  display: none;\n  text-align: left;\n  justify-content: left;\n  align-items: center\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\n  opacity: 1\n}\n\n.apexcharts-tooltip-series-group.apexcharts-active,.apexcharts-tooltip-series-group:last-child {\n  padding-bottom: 4px\n}\n\n.apexcharts-tooltip-series-group-hidden {\n  opacity: 0;\n  height: 0;\n  line-height: 0;\n  padding: 0!important\n}\n\n.apexcharts-tooltip-y-group {\n  padding: 6px 0 5px\n}\n\n.apexcharts-custom-tooltip,.apexcharts-tooltip-box {\n  padding: 4px 8px\n}\n\n.apexcharts-tooltip-boxPlot {\n  display: flex;\n  flex-direction: column-reverse\n}\n\n.apexcharts-tooltip-box>div {\n  margin: 4px 0\n}\n\n.apexcharts-tooltip-box span.value {\n  font-weight: 700\n}\n\n.apexcharts-tooltip-rangebar {\n  padding: 5px 8px\n}\n\n.apexcharts-tooltip-rangebar .category {\n  font-weight: 600;\n  color: #777\n}\n\n.apexcharts-tooltip-rangebar .series-name {\n  font-weight: 700;\n  display: block;\n  margin-bottom: 5px\n}\n\n.apexcharts-xaxistooltip,.apexcharts-yaxistooltip {\n  opacity: 0;\n  pointer-events: none;\n  color: #373d3f;\n  font-size: 13px;\n  text-align: center;\n  border-radius: 2px;\n  position: absolute;\n  z-index: 10;\n  background: #eceff1;\n  border: 1px solid #90a4ae\n}\n\n.apexcharts-xaxistooltip {\n  padding: 9px 10px;\n  transition: .15s ease all\n}\n\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-xaxistooltip:after,.apexcharts-xaxistooltip:before {\n  left: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-xaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-left: -6px\n}\n\n.apexcharts-xaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-left: -7px\n}\n\n.apexcharts-xaxistooltip-bottom:after,.apexcharts-xaxistooltip-bottom:before {\n  bottom: 100%\n}\n\n.apexcharts-xaxistooltip-top:after,.apexcharts-xaxistooltip-top:before {\n  top: 100%\n}\n\n.apexcharts-xaxistooltip-bottom:after {\n  border-bottom-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-bottom:before {\n  border-bottom-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\n  border-bottom-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip-top:after {\n  border-top-color: #eceff1\n}\n\n.apexcharts-xaxistooltip-top:before {\n  border-top-color: #90a4ae\n}\n\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after,.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\n  border-top-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-xaxistooltip.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-yaxistooltip {\n  padding: 4px 10px\n}\n\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\n  background: rgba(0,0,0,.7);\n  border: 1px solid rgba(0,0,0,.5);\n  color: #fff\n}\n\n.apexcharts-yaxistooltip:after,.apexcharts-yaxistooltip:before {\n  top: 50%;\n  border: solid transparent;\n  content: " ";\n  height: 0;\n  width: 0;\n  position: absolute;\n  pointer-events: none\n}\n\n.apexcharts-yaxistooltip:after {\n  border-color: transparent;\n  border-width: 6px;\n  margin-top: -6px\n}\n\n.apexcharts-yaxistooltip:before {\n  border-color: transparent;\n  border-width: 7px;\n  margin-top: -7px\n}\n\n.apexcharts-yaxistooltip-left:after,.apexcharts-yaxistooltip-left:before {\n  left: 100%\n}\n\n.apexcharts-yaxistooltip-right:after,.apexcharts-yaxistooltip-right:before {\n  right: 100%\n}\n\n.apexcharts-yaxistooltip-left:after {\n  border-left-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-left:before {\n  border-left-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\n  border-left-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip-right:after {\n  border-right-color: #eceff1\n}\n\n.apexcharts-yaxistooltip-right:before {\n  border-right-color: #90a4ae\n}\n\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after,.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\n  border-right-color: rgba(0,0,0,.5)\n}\n\n.apexcharts-yaxistooltip.apexcharts-active {\n  opacity: 1\n}\n\n.apexcharts-yaxistooltip-hidden {\n  display: none\n}\n\n.apexcharts-xcrosshairs,.apexcharts-ycrosshairs {\n  pointer-events: none;\n  opacity: 0;\n  transition: .15s ease all\n}\n\n.apexcharts-xcrosshairs.apexcharts-active,.apexcharts-ycrosshairs.apexcharts-active {\n  opacity: 1;\n  transition: .15s ease all\n}\n\n.apexcharts-ycrosshairs-hidden {\n  opacity: 0\n}\n\n.apexcharts-selection-rect {\n  cursor: move\n}\n\n.svg_select_boundingRect,.svg_select_points_rot {\n  pointer-events: none;\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_boundingRect,.apexcharts-selection-rect+g .svg_select_points_rot {\n  opacity: 0;\n  visibility: hidden\n}\n\n.apexcharts-selection-rect+g .svg_select_points_l,.apexcharts-selection-rect+g .svg_select_points_r {\n  cursor: ew-resize;\n  opacity: 1;\n  visibility: visible\n}\n\n.svg_select_points {\n  fill: #efefef;\n  stroke: #333;\n  rx: 2\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\n  cursor: crosshair\n}\n\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\n  cursor: move\n}\n\n.apexcharts-menu-icon,.apexcharts-pan-icon,.apexcharts-reset-icon,.apexcharts-selection-icon,.apexcharts-toolbar-custom-icon,.apexcharts-zoom-icon,.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  cursor: pointer;\n  width: 20px;\n  height: 20px;\n  line-height: 24px;\n  color: #6e8192;\n  text-align: center\n}\n\n.apexcharts-menu-icon svg,.apexcharts-reset-icon svg,.apexcharts-zoom-icon svg,.apexcharts-zoomin-icon svg,.apexcharts-zoomout-icon svg {\n  fill: #6e8192\n}\n\n.apexcharts-selection-icon svg {\n  fill: #444;\n  transform: scale(.76)\n}\n\n.apexcharts-theme-dark .apexcharts-menu-icon svg,.apexcharts-theme-dark .apexcharts-pan-icon svg,.apexcharts-theme-dark .apexcharts-reset-icon svg,.apexcharts-theme-dark .apexcharts-selection-icon svg,.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg,.apexcharts-theme-dark .apexcharts-zoom-icon svg,.apexcharts-theme-dark .apexcharts-zoomin-icon svg,.apexcharts-theme-dark .apexcharts-zoomout-icon svg {\n  fill: #f3f4f5\n}\n\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg {\n  fill: #008ffb\n}\n\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg,.apexcharts-theme-light .apexcharts-reset-icon:hover svg,.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg {\n  fill: #333\n}\n\n.apexcharts-menu-icon,.apexcharts-selection-icon {\n  position: relative\n}\n\n.apexcharts-reset-icon {\n  margin-left: 5px\n}\n\n.apexcharts-menu-icon,.apexcharts-reset-icon,.apexcharts-zoom-icon {\n  transform: scale(.85)\n}\n\n.apexcharts-zoomin-icon,.apexcharts-zoomout-icon {\n  transform: scale(.7)\n}\n\n.apexcharts-zoomout-icon {\n  margin-right: 3px\n}\n\n.apexcharts-pan-icon {\n  transform: scale(.62);\n  position: relative;\n  left: 1px;\n  top: 0\n}\n\n.apexcharts-pan-icon svg {\n  fill: #fff;\n  stroke: #6e8192;\n  stroke-width: 2\n}\n\n.apexcharts-pan-icon.apexcharts-selected svg {\n  stroke: #008ffb\n}\n\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\n  stroke: #333\n}\n\n.apexcharts-toolbar {\n  position: absolute;\n  z-index: 11;\n  max-width: 176px;\n  text-align: right;\n  border-radius: 3px;\n  padding: 0 6px 2px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center\n}\n\n.apexcharts-menu {\n  background: #fff;\n  position: absolute;\n  top: 100%;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  padding: 3px;\n  right: 10px;\n  opacity: 0;\n  min-width: 110px;\n  transition: .15s ease all;\n  pointer-events: none\n}\n\n.apexcharts-menu.apexcharts-menu-open {\n  opacity: 1;\n  pointer-events: all;\n  transition: .15s ease all\n}\n\n.apexcharts-menu-item {\n  padding: 6px 7px;\n  font-size: 12px;\n  cursor: pointer\n}\n\n.apexcharts-theme-light .apexcharts-menu-item:hover {\n  background: #eee\n}\n\n.apexcharts-theme-dark .apexcharts-menu {\n  background: rgba(0,0,0,.7);\n  color: #fff\n}\n\n@media screen and (min-width:768px) {\n  .apexcharts-canvas:hover .apexcharts-toolbar {\n      opacity: 1\n  }\n}\n\n.apexcharts-canvas .apexcharts-element-hidden,.apexcharts-datalabel.apexcharts-element-hidden,.apexcharts-hide .apexcharts-series-points {\n  opacity: 0\n}\n\n.apexcharts-hidden-element-shown {\n  opacity: 1;\n  transition: 0.25s ease all;\n}\n.apexcharts-datalabel,.apexcharts-datalabel-label,.apexcharts-datalabel-value,.apexcharts-datalabels,.apexcharts-pie-label {\n  cursor: default;\n  pointer-events: none\n}\n\n.apexcharts-pie-label-delay {\n  opacity: 0;\n  animation-name: opaque;\n  animation-duration: .3s;\n  animation-fill-mode: forwards;\n  animation-timing-function: ease\n}\n\n.apexcharts-annotation-rect,.apexcharts-area-series .apexcharts-area,.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-gridline,.apexcharts-line,.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,.apexcharts-point-annotation-label,.apexcharts-radar-series path,.apexcharts-radar-series polygon,.apexcharts-toolbar svg,.apexcharts-tooltip .apexcharts-marker,.apexcharts-xaxis-annotation-label,.apexcharts-yaxis-annotation-label,.apexcharts-zoom-rect {\n  pointer-events: none\n}\n\n.apexcharts-marker {\n  transition: .15s ease all\n}\n\n.resize-triggers {\n  animation: 1ms resizeanim;\n  visibility: hidden;\n  opacity: 0;\n  height: 100%;\n  width: 100%;\n  overflow: hidden\n}\n\n.contract-trigger:before,.resize-triggers,.resize-triggers>div {\n  content: " ";\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0\n}\n\n.resize-triggers>div {\n  height: 100%;\n  width: 100%;\n  background: #eee;\n  overflow: auto\n}\n\n.contract-trigger:before {\n  overflow: hidden;\n  width: 200%;\n  height: 200%\n}\n\n.apexcharts-bar-goals-markers{\n  pointer-events: none\n}\n\n.apexcharts-bar-shadows{\n  pointer-events: none\n}\n\n.apexcharts-rangebar-goals-markers{\n  pointer-events: none\n}'),
                      s ? n.prepend(e.css) : o.head.appendChild(e.css));
                  }
                  var l = e.create(e.w.config.series, {});
                  if (!l) return t(e);
                  e.mount(l)
                    .then(function () {
                      "function" == typeof e.w.config.chart.events.mounted &&
                        e.w.config.chart.events.mounted(e, e.w),
                        e.events.fireEvent("mounted", [e, e.w]),
                        t(l);
                    })
                    .catch(function (e) {
                      i(e);
                    });
                } else i(Error("Element not found"));
              });
            }
          },
          {
            key: "create",
            value: function (e, t) {
              var i = this.w;
              new ox(this).initModules();
              var a = this.w.globals;
              if (
                ((a.noData = !1),
                (a.animationEnded = !1),
                this.responsive.checkResponsiveConfig(t),
                i.config.xaxis.convertedCatToNumeric &&
                  new sx(i.config).convertCatToNumericXaxis(i.config, this.ctx),
                null === this.el ||
                  (this.core.setupElements(),
                  "treemap" === i.config.chart.type &&
                    ((i.config.grid.show = !1), (i.config.yaxis[0].show = !1)),
                  0 === a.svgWidth))
              )
                return (a.animationEnded = !0), null;
              var n = ss.checkComboSeries(e);
              (a.comboCharts = n.comboCharts),
                (a.comboBarCount = n.comboBarCount);
              var s = e.every(function (e) {
                return e.data && 0 === e.data.length;
              });
              (0 === e.length || s) && this.series.handleNoData(),
                this.events.setupEventHandlers(),
                this.data.parseData(e),
                this.theme.init(),
                new sC(this).setGlobalMarkerSize(),
                this.formatters.setLabelFormatters(),
                this.titleSubtitle.draw(),
                (a.noData &&
                  a.collapsedSeries.length !== a.series.length &&
                  !i.config.legend.showForSingleSeries) ||
                  this.legend.init(),
                this.series.hasAllSeriesEqualX(),
                a.axisCharts &&
                  (this.core.coreCalculations(),
                  "category" !== i.config.xaxis.type &&
                    this.formatters.setLabelFormatters(),
                  (this.ctx.toolbar.minX = i.globals.minX),
                  (this.ctx.toolbar.maxX = i.globals.maxX)),
                this.formatters.heatmapLabelFormatters(),
                new ss(this).getLargestMarkerSize(),
                this.dimensions.plotCoords();
              var o = this.core.xySettings();
              this.grid.createGridMask();
              var r = this.core.plotChartType(e, o),
                l = new sA(this);
              return (
                l.bringForward(),
                i.config.dataLabels.background.enabled &&
                  l.dataLabelsBackground(),
                this.core.shiftGraphPosition(),
                {
                  elGraph: r,
                  xyRatios: o,
                  dimensions: {
                    plot: {
                      left: i.globals.translateX,
                      top: i.globals.translateY,
                      width: i.globals.gridWidth,
                      height: i.globals.gridHeight
                    }
                  }
                }
              );
            }
          },
          {
            key: "mount",
            value: function () {
              var e = this,
                t =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : null,
                i = this,
                a = i.w;
              return new Promise(function (n, s) {
                if (null === i.el)
                  return s(
                    Error(
                      "Not enough data to display or target element not found"
                    )
                  );
                (null === t || a.globals.allSeriesCollapsed) &&
                  i.series.handleNoData(),
                  (i.grid = new sM(i));
                var o,
                  r,
                  l = i.grid.drawGrid();
                if (
                  ((i.annotations = new su(i)),
                  i.annotations.drawImageAnnos(),
                  i.annotations.drawTextAnnos(),
                  "back" === a.config.grid.position &&
                    (l && a.globals.dom.elGraphical.add(l.el),
                    null != l &&
                      null !== (o = l.elGridBorders) &&
                      void 0 !== o &&
                      o.node &&
                      a.globals.dom.elGraphical.add(l.elGridBorders)),
                  Array.isArray(t.elGraph))
                )
                  for (var c = 0; c < t.elGraph.length; c++)
                    a.globals.dom.elGraphical.add(t.elGraph[c]);
                else a.globals.dom.elGraphical.add(t.elGraph);
                "front" === a.config.grid.position &&
                  (l && a.globals.dom.elGraphical.add(l.el),
                  null != l &&
                    null !== (r = l.elGridBorders) &&
                    void 0 !== r &&
                    r.node &&
                    a.globals.dom.elGraphical.add(l.elGridBorders)),
                  "front" === a.config.xaxis.crosshairs.position &&
                    i.crosshairs.drawXCrosshairs(),
                  "front" === a.config.yaxis[0].crosshairs.position &&
                    i.crosshairs.drawYCrosshairs(),
                  "treemap" !== a.config.chart.type &&
                    i.axes.drawAxis(a.config.chart.type, l);
                var h = new sP(e.ctx, l),
                  d = new sE(e.ctx, l);
                if (
                  (null !== l &&
                    (h.xAxisLabelCorrections(l.xAxisTickWidth),
                    d.setYAxisTextAlignments(),
                    a.config.yaxis.map(function (e, t) {
                      -1 === a.globals.ignoreYAxisIndexes.indexOf(t) &&
                        d.yAxisTitleRotate(t, e.opposite);
                    })),
                  i.annotations.drawAxesAnnotations(),
                  !a.globals.noData)
                ) {
                  if (
                    (a.config.tooltip.enabled &&
                      !a.globals.noData &&
                      i.w.globals.tooltip.drawTooltip(t.xyRatios),
                    a.globals.axisCharts &&
                      (a.globals.isXNumeric ||
                        a.config.xaxis.convertedCatToNumeric ||
                        a.globals.isRangeBar))
                  )
                    (a.config.chart.zoom.enabled ||
                      (a.config.chart.selection &&
                        a.config.chart.selection.enabled) ||
                      (a.config.chart.pan && a.config.chart.pan.enabled)) &&
                      i.zoomPanSelection.init({ xyRatios: t.xyRatios });
                  else {
                    var u = a.config.chart.toolbar.tools;
                    [
                      "zoom",
                      "zoomin",
                      "zoomout",
                      "selection",
                      "pan",
                      "reset"
                    ].forEach(function (e) {
                      u[e] = !1;
                    });
                  }
                  a.config.chart.toolbar.show &&
                    !a.globals.allSeriesCollapsed &&
                    i.toolbar.createToolbar();
                }
                a.globals.memory.methodsToExec.length > 0 &&
                  a.globals.memory.methodsToExec.forEach(function (e) {
                    e.method(e.params, !1, e.context);
                  }),
                  a.globals.axisCharts ||
                    a.globals.noData ||
                    i.core.resizeNonAxisCharts(),
                  n(i);
              });
            }
          },
          {
            key: "destroy",
            value: function () {
              window.removeEventListener("resize", this.windowResizeHandler),
                this.el.parentNode,
                (e = this.parentResizeHandler),
                (t = ov.get(e)) && (t.disconnect(), ov.delete(e));
              var e,
                t,
                i = this.w.config.chart.id;
              i &&
                Apex._chartInstances.forEach(function (e, t) {
                  e.id === st.escapeString(i) &&
                    Apex._chartInstances.splice(t, 1);
                }),
                new ob(this.ctx).clear({ isUpdating: !1 });
            }
          },
          {
            key: "updateOptions",
            value: function (e) {
              var t = this,
                i =
                  arguments.length > 1 &&
                  void 0 !== arguments[1] &&
                  arguments[1],
                a =
                  !(arguments.length > 2 && void 0 !== arguments[2]) ||
                  arguments[2],
                n =
                  !(arguments.length > 3 && void 0 !== arguments[3]) ||
                  arguments[3],
                s =
                  !(arguments.length > 4 && void 0 !== arguments[4]) ||
                  arguments[4],
                o = this.w;
              return (
                (o.globals.selection = void 0),
                e.series &&
                  (this.series.resetSeries(!1, !0, !1),
                  e.series.length &&
                    e.series[0].data &&
                    (e.series = e.series.map(function (e, i) {
                      return t.updateHelpers._extendSeries(e, i);
                    })),
                  this.updateHelpers.revertDefaultAxisMinMax()),
                e.xaxis && (e = this.updateHelpers.forceXAxisUpdate(e)),
                e.yaxis && (e = this.updateHelpers.forceYAxisUpdate(e)),
                o.globals.collapsedSeriesIndices.length > 0 &&
                  this.series.clearPreviousPaths(),
                e.theme && (e = this.theme.updateThemeOptions(e)),
                this.updateHelpers._updateOptions(e, i, a, n, s)
              );
            }
          },
          {
            key: "updateSeries",
            value: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : [],
                t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1],
                i =
                  !(arguments.length > 2 && void 0 !== arguments[2]) ||
                  arguments[2];
              return (
                this.series.resetSeries(!1),
                this.updateHelpers.revertDefaultAxisMinMax(),
                this.updateHelpers._updateSeries(e, t, i)
              );
            }
          },
          {
            key: "appendSeries",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1],
                i =
                  !(arguments.length > 2 && void 0 !== arguments[2]) ||
                  arguments[2],
                a = this.w.config.series.slice();
              return (
                a.push(e),
                this.series.resetSeries(!1),
                this.updateHelpers.revertDefaultAxisMinMax(),
                this.updateHelpers._updateSeries(a, t, i)
              );
            }
          },
          {
            key: "appendData",
            value: function (e) {
              var t =
                !(arguments.length > 1 && void 0 !== arguments[1]) ||
                arguments[1];
              (this.w.globals.dataChanged = !0), this.series.getPreviousPaths();
              for (
                var i = this.w.config.series.slice(), a = 0;
                a < i.length;
                a++
              )
                if (null !== e[a] && void 0 !== e[a])
                  for (var n = 0; n < e[a].data.length; n++)
                    i[a].data.push(e[a].data[n]);
              return (
                (this.w.config.series = i),
                t &&
                  (this.w.globals.initialSeries = st.clone(
                    this.w.config.series
                  )),
                this.update()
              );
            }
          },
          {
            key: "update",
            value: function (e) {
              var t = this;
              return new Promise(function (i, a) {
                new ob(t.ctx).clear({ isUpdating: !0 });
                var n = t.create(t.w.config.series, e);
                if (!n) return i(t);
                t.mount(n)
                  .then(function () {
                    "function" == typeof t.w.config.chart.events.updated &&
                      t.w.config.chart.events.updated(t, t.w),
                      t.events.fireEvent("updated", [t, t.w]),
                      (t.w.globals.isDirty = !0),
                      i(t);
                  })
                  .catch(function (e) {
                    a(e);
                  });
              });
            }
          },
          {
            key: "getSyncedCharts",
            value: function () {
              var e = this.getGroupedCharts(),
                t = [this];
              return (
                e.length &&
                  ((t = []),
                  e.forEach(function (e) {
                    t.push(e);
                  })),
                t
              );
            }
          },
          {
            key: "getGroupedCharts",
            value: function () {
              var e = this;
              return Apex._chartInstances
                .filter(function (e) {
                  if (e.group) return !0;
                })
                .map(function (t) {
                  return e.w.config.chart.group === t.group ? t.chart : e;
                });
            }
          },
          {
            key: "toggleSeries",
            value: function (e) {
              return this.series.toggleSeries(e);
            }
          },
          {
            key: "highlightSeriesOnLegendHover",
            value: function (e, t) {
              return this.series.toggleSeriesOnHover(e, t);
            }
          },
          {
            key: "showSeries",
            value: function (e) {
              this.series.showSeries(e);
            }
          },
          {
            key: "hideSeries",
            value: function (e) {
              this.series.hideSeries(e);
            }
          },
          {
            key: "resetSeries",
            value: function () {
              var e =
                  !(arguments.length > 0 && void 0 !== arguments[0]) ||
                  arguments[0],
                t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1];
              this.series.resetSeries(e, t);
            }
          },
          {
            key: "addEventListener",
            value: function (e, t) {
              this.events.addEventListener(e, t);
            }
          },
          {
            key: "removeEventListener",
            value: function (e, t) {
              this.events.removeEventListener(e, t);
            }
          },
          {
            key: "addXaxisAnnotation",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1],
                i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : void 0,
                a = this;
              i && (a = i), a.annotations.addXaxisAnnotationExternal(e, t, a);
            }
          },
          {
            key: "addYaxisAnnotation",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1],
                i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : void 0,
                a = this;
              i && (a = i), a.annotations.addYaxisAnnotationExternal(e, t, a);
            }
          },
          {
            key: "addPointAnnotation",
            value: function (e) {
              var t =
                  !(arguments.length > 1 && void 0 !== arguments[1]) ||
                  arguments[1],
                i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : void 0,
                a = this;
              i && (a = i), a.annotations.addPointAnnotationExternal(e, t, a);
            }
          },
          {
            key: "clearAnnotations",
            value: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : void 0,
                t = this;
              e && (t = e), t.annotations.clearAnnotations(t);
            }
          },
          {
            key: "removeAnnotation",
            value: function (e) {
              var t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : void 0,
                i = this;
              t && (i = t), i.annotations.removeAnnotation(i, e);
            }
          },
          {
            key: "getChartArea",
            value: function () {
              return this.w.globals.dom.baseEl.querySelector(
                ".apexcharts-inner"
              );
            }
          },
          {
            key: "getSeriesTotalXRange",
            value: function (e, t) {
              return this.coreUtils.getSeriesTotalsXRange(e, t);
            }
          },
          {
            key: "getHighestValueInSeries",
            value: function () {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : 0;
              return new sD(this.ctx).getMinYMaxY(e).highestY;
            }
          },
          {
            key: "getLowestValueInSeries",
            value: function () {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : 0;
              return new sD(this.ctx).getMinYMaxY(e).lowestY;
            }
          },
          {
            key: "getSeriesTotal",
            value: function () {
              return this.w.globals.seriesTotals;
            }
          },
          {
            key: "toggleDataPointSelection",
            value: function (e, t) {
              return this.updateHelpers.toggleDataPointSelection(e, t);
            }
          },
          {
            key: "zoomX",
            value: function (e, t) {
              this.ctx.toolbar.zoomUpdateOptions(e, t);
            }
          },
          {
            key: "setLocale",
            value: function (e) {
              this.localization.setCurrentLocaleValues(e);
            }
          },
          {
            key: "dataURI",
            value: function (e) {
              return new sT(this.ctx).dataURI(e);
            }
          },
          {
            key: "exportToCSV",
            value: function () {
              var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {};
              return new sT(this.ctx).exportToCSV(e);
            }
          },
          {
            key: "paper",
            value: function () {
              return this.w.globals.dom.Paper;
            }
          },
          {
            key: "_parentResizeCallback",
            value: function () {
              this.w.globals.animationEnded &&
                this.w.config.chart.redrawOnParentResize &&
                this._windowResize();
            }
          },
          {
            key: "_windowResize",
            value: function () {
              var e = this;
              clearTimeout(this.w.globals.resizeTimer),
                (this.w.globals.resizeTimer = window.setTimeout(function () {
                  (e.w.globals.resized = !0),
                    (e.w.globals.dataChanged = !1),
                    e.ctx.update();
                }, 150));
            }
          },
          {
            key: "_windowResizeHandler",
            value: function () {
              var e = this.w.config.chart.redrawOnWindowResize;
              "function" == typeof e && (e = e()), e && this._windowResize();
            }
          }
        ],
        [
          {
            key: "getChartByID",
            value: function (e) {
              var t = st.escapeString(e),
                i = Apex._chartInstances.filter(function (e) {
                  return e.id === t;
                })[0];
              return i && i.chart;
            }
          },
          {
            key: "initOnLoad",
            value: function () {
              for (
                var t = document.querySelectorAll("[data-apexcharts]"), i = 0;
                i < t.length;
                i++
              )
                new e(
                  t[i],
                  JSON.parse(t[i].getAttribute("data-options"))
                ).render();
            }
          },
          {
            key: "exec",
            value: function (e, t) {
              var i = this.getChartByID(e);
              if (i) {
                i.w.globals.isExecCalled = !0;
                var a = null;
                if (-1 !== i.publicMethods.indexOf(t)) {
                  for (
                    var n = arguments.length,
                      s = Array(n > 2 ? n - 2 : 0),
                      o = 2;
                    o < n;
                    o++
                  )
                    s[o - 2] = arguments[o];
                  a = i[t].apply(i, s);
                }
                return a;
              }
            }
          },
          {
            key: "merge",
            value: function (e, t) {
              return st.extend(e, t);
            }
          }
        ]
      ),
      e
    );
  })();
  var oy = {};
  (oy = function () {
    // API
    (this.style = function (e) {
      var t = getComputedStyle(document.body).getPropertyValue(e);
      return t ? t.trim() : "undefined";
    }),
      (this.colors = function () {
        return {
          gray: {
            50: this.style("--x-gray-50"),
            100: this.style("--x-gray-100"),
            200: this.style("--x-gray-200"),
            300: this.style("--x-gray-300"),
            400: this.style("--x-gray-400"),
            500: this.style("--x-gray-500"),
            600: this.style("--x-gray-600"),
            700: this.style("--x-gray-700"),
            800: this.style("--x-gray-800"),
            900: this.style("--x-gray-900")
          },
          theme: {
            primary: this.style("--x-primary"),
            primarySubtle: this.style("--x-primary-subtle"),
            secondary: this.style("--x-secondary"),
            tertiary: this.style("--x-tertiary"),
            info: this.style("--x-info"),
            success: this.style("--x-success"),
            danger: this.style("--x-danger"),
            warning: this.style("--x-warning"),
            light: this.style("--x-light"),
            dark: this.style("--x-dark")
          },
          transparent: "transparent",
          body: {
            color: this.style("--x-body-color"),
            fontSize: this.style("--x-body-font-size")
          },
          border: {
            width: this.style("--x-border-width"),
            color: this.style("--x-border-color")
          }
        };
      }),
      (this.fonts = function () {
        return {
          base: this.style("--x-font-sans-serif"),
          code: this.style("--x-font-monospace"),
          serif: this.style("--x-font-serif")
        };
      });
  }),
    (nU = function () {
      this.init = function (e) {
        var t,
          i,
          a = new oy(),
          n = [
            a.colors().theme.primary,
            a.colors().theme.success,
            a.colors().theme.warning,
            a.colors().theme.danger
          ];
        e &&
          ((t = {
            chart: {
              zoom: { enabled: !1 },
              toolbar: { show: !1 },
              shadow: { enabled: !1 },
              animations: { enabled: !1 }
            },
            colors: n,
            stroke: { width: 4, curve: "smooth" },
            series: [
              {
                name: "Ongoing",
                type: "line",
                data: [30, 50, 70, 90, 80, 70, 90, 120, 100, 120, 140]
              },
              {
                name: "Finished",
                type: "line",
                data: [50, 70, 30, 20, 10, 10, 40, 100, 90, 100, 120]
              }
            ],
            markers: { size: 0 },
            xaxis: {
              axisBorder: { show: !1 },
              axisTicks: { show: !1 },
              categories: [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec"
              ],
              labels: {
                style: {
                  colors: "#999",
                  fontSize: "13px",
                  fontFamily: "#333",
                  cssClass: "apexcharts-xaxis-label"
                }
              }
            },
            yaxis: {
              axisBorder: { show: !1 },
              axisTicks: { show: !1 },
              labels: {
                style: {
                  colors: "#999",
                  fontSize: "13px",
                  fontFamily: "inherit",
                  cssClass: "apexcharts-xaxis-label"
                }
              }
            },
            legend: { show: !1 },
            grid: { borderColor: "#f3f3f3", strokeDashArray: 3 },
            dataLabels: { enabled: !1 },
            tooltip: {
              shared: !0,
              intersect: !1,
              y: {
                formatter: function (e) {
                  return void 0 !== e ? e.toFixed(0) + " orders" : e;
                }
              }
            }
          }),
          (i = e.dataset.height), // Inject dynamic properties
          (t.colors = n),
          (t.chart.height = i || 350), // Create chart
          new nq(e, t).render());
      };
    });
  var ow = {};
  ow = function () {
    this.init = function (e) {
      var t,
        i,
        a = new oy(),
        n = [
          a.colors().theme.primary,
          a.colors().theme.light,
          a.colors().theme.dark
        ];
      e &&
        ((t = {
          chart: {
            type: "line",
            stacked: !1,
            zoom: { enabled: !1 },
            toolbar: { show: !1 },
            shadow: { enabled: !1 },
            offsetX: 0,
            animations: {
              enabled: !1,
              easing: "easeinout",
              speed: 800,
              animateGradually: { enabled: !0, delay: 150 },
              dynamicAnimation: { enabled: !0, speed: 350 }
            },
            fontFamily: a.fonts().base
          },
          colors: n,
          plotOptions: { bar: { columnWidth: "40%", borderRadius: 3 } },
          stroke: { colors: ["transparent"], width: 4, curve: "smooth" },
          series: [
            {
              name: "Delivered",
              type: "bar",
              data: [10, 17, 12, 8, 10, 10, 20]
            }
          ],
          markers: { size: 0 },
          xaxis: {
            axisBorder: { show: !1 },
            axisTicks: { show: !1 },
            categories: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
            labels: {
              style: {
                colors: "#999",
                fontSize: "13px",
                cssClass: "apexcharts-xaxis-label"
              }
            }
          },
          yaxis: {
            axisBorder: { show: !1 },
            axisTicks: { show: !1 },
            labels: {
              style: {
                colors: ["#999"],
                fontSize: "13px",
                cssClass: "apexcharts-xaxis-label"
              }
            }
          },
          legend: { show: !1 },
          grid: { borderColor: "#e3ebf6", strokeDashArray: 3 },
          dataLabels: { enabled: !1 },
          tooltip: {
            shared: !0,
            intersect: !1,
            y: {
              formatter: function (e) {
                return void 0 !== e ? e.toFixed(0) + " orders" : e;
              }
            }
          }
        }),
        (i = e.dataset.height), // Inject dynamic properties
        (t.colors = n),
        (t.chart.height = i || 350), // Create chart
        new nq(e, t).render());
    };
  };
  var oC = {};
  oC = function () {
    this.init = function (e) {
      var t,
        i,
        a = new oy(),
        n = [a.colors().theme.primary];
      e &&
        ((t = {
          chart: {
            type: "bar",
            stacked: !0,
            zoom: { enabled: !1 },
            toolbar: { show: !1 },
            shadow: { enabled: !1 },
            offsetX: 0,
            animations: {
              enabled: !1,
              easing: "easeinout",
              speed: 800,
              animateGradually: { enabled: !0, delay: 150 },
              dynamicAnimation: { enabled: !0, speed: 350 }
            },
            fontFamily: a.fonts().base
          },
          colors: n,
          plotOptions: { bar: { columnWidth: "23px", borderRadius: 2 } },
          stroke: { colors: ["transparent"], width: 2, curve: "smooth" },
          series: [
            {
              name: "Revenue",
              type: "bar",
              data: [30, 10, 20, 10, 17, 12, 8, 20]
            }
          ],
          markers: { size: 0 },
          xaxis: {
            axisBorder: { show: !1 },
            axisTicks: { show: !1 },
            categories: [
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec"
            ],
            labels: {
              style: {
                colors: a.colors().body.color,
                fontSize: "13px",
                cssClass: "apexcharts-xaxis-label"
              }
            }
          },
          yaxis: {
            axisBorder: { show: !1 },
            axisTicks: { show: !1 },
            labels: {
              style: {
                colors: [a.colors().body.color],
                fontSize: "13px",
                cssClass: "apexcharts-xaxis-label"
              }
            }
          },
          legend: { show: !1 },
          grid: { borderColor: a.colors().border.color, strokeDashArray: 3 },
          dataLabels: { enabled: !1 },
          tooltip: {
            shared: !0,
            intersect: !1,
            y: {
              formatter: function (e) {
                return void 0 !== e ? e.toFixed(0) + " orders" : e;
              }
            }
          },
          responsive: [
            {
              breakpoint: 364,
              options: {
                plotOptions: { bar: { columnWidth: "30px", borderRadius: 2 } }
              }
            }
          ]
        }),
        (i = e.dataset.height), // Inject dynamic properties
        (t.colors = n),
        (t.chart.height = i || 350), // Create chart
        new nq(e, t).render());
    };
  };
  var ok = {},
    oA = {};
  (i = "millisecond"),
    (a = "second"),
    (n = "minute"),
    (s = "hour"),
    (o = "week"),
    (r = "month"),
    (l = "quarter"),
    (c = "year"),
    (h = "date"),
    (d = "Invalid Date"),
    (u =
      /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/),
    (g =
      /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g),
    (p = function (e, t, i) {
      var a = String(e);
      return !a || a.length >= t ? e : "" + Array(t + 1 - a.length).join(i) + e;
    }),
    ((m = {})[(f = "en")] = {
      name: "en",
      weekdays:
        "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
      months:
        "January_February_March_April_May_June_July_August_September_October_November_December".split(
          "_"
        ),
      ordinal: function (e) {
        var t = ["th", "st", "nd", "rd"],
          i = e % 100;
        return "[" + e + (t[(i - 20) % 10] || t[i] || "th") + "]";
      }
    }),
    (x = function (e) {
      return e instanceof w;
    }),
    (b = function e(t, i, a) {
      var n;
      if (!t) return f;
      if ("string" == typeof t) {
        var s = t.toLowerCase();
        m[s] && (n = s), i && ((m[s] = i), (n = s));
        var o = t.split("-");
        if (!n && o.length > 1) return e(o[0]);
      } else {
        var r = t.name;
        (m[r] = t), (n = r);
      }
      return !a && n && (f = n), n || (!a && f);
    }),
    (v = function (e, t) {
      if (x(e)) return e.clone();
      var i = "object" == typeof t ? t : {};
      return (i.date = e), (i.args = arguments), new w(i);
    }),
    ((y = {
      s: p,
      z: function (e) {
        var t = -e.utcOffset(),
          i = Math.abs(t);
        return (
          (t <= 0 ? "+" : "-") +
          p(Math.floor(i / 60), 2, "0") +
          ":" +
          p(i % 60, 2, "0")
        );
      },
      m: function e(t, i) {
        if (t.date() < i.date()) return -e(i, t);
        var a = 12 * (i.year() - t.year()) + (i.month() - t.month()),
          n = t.clone().add(a, r),
          s = i - n < 0,
          o = t.clone().add(a + (s ? -1 : 1), r);
        return +(-(a + (i - n) / (s ? n - o : o - n)) || 0);
      },
      a: function (e) {
        return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
      },
      p: function (e) {
        return (
          { M: r, y: c, w: o, d: "day", D: h, h: s, m: n, s: a, ms: i, Q: l }[
            e
          ] ||
          String(e || "")
            .toLowerCase()
            .replace(/s$/, "")
        );
      },
      u: function (e) {
        return void 0 === e;
      }
    }).l = b),
    (y.i = x),
    (y.w = function (e, t) {
      return v(e, { locale: t.$L, utc: t.$u, x: t.$x, $offset: t.$offset });
    }),
    (C = (w = (function () {
      function e(e) {
        (this.$L = b(e.locale, null, !0)), this.parse(e);
      }
      var t = e.prototype;
      return (
        (t.parse = function (e) {
          (this.$d = (function (e) {
            var t = e.date,
              i = e.utc;
            if (null === t) return new Date(NaN);
            if (y.u(t)) return new Date();
            if (t instanceof Date) return new Date(t);
            if ("string" == typeof t && !/Z$/i.test(t)) {
              var a = t.match(u);
              if (a) {
                var n = a[2] - 1 || 0,
                  s = (a[7] || "0").substring(0, 3);
                return i
                  ? new Date(
                      Date.UTC(
                        a[1],
                        n,
                        a[3] || 1,
                        a[4] || 0,
                        a[5] || 0,
                        a[6] || 0,
                        s
                      )
                    )
                  : new Date(
                      a[1],
                      n,
                      a[3] || 1,
                      a[4] || 0,
                      a[5] || 0,
                      a[6] || 0,
                      s
                    );
              }
            }
            return new Date(t);
          })(e)),
            (this.$x = e.x || {}),
            this.init();
        }),
        (t.init = function () {
          var e = this.$d;
          (this.$y = e.getFullYear()),
            (this.$M = e.getMonth()),
            (this.$D = e.getDate()),
            (this.$W = e.getDay()),
            (this.$H = e.getHours()),
            (this.$m = e.getMinutes()),
            (this.$s = e.getSeconds()),
            (this.$ms = e.getMilliseconds());
        }),
        (t.$utils = function () {
          return y;
        }),
        (t.isValid = function () {
          return this.$d.toString() !== d;
        }),
        (t.isSame = function (e, t) {
          var i = v(e);
          return this.startOf(t) <= i && i <= this.endOf(t);
        }),
        (t.isAfter = function (e, t) {
          return v(e) < this.startOf(t);
        }),
        (t.isBefore = function (e, t) {
          return this.endOf(t) < v(e);
        }),
        (t.$g = function (e, t, i) {
          return y.u(e) ? this[t] : this.set(i, e);
        }),
        (t.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }),
        (t.valueOf = function () {
          return this.$d.getTime();
        }),
        (t.startOf = function (e, t) {
          var i = this,
            l = !!y.u(t) || t,
            d = y.p(e),
            u = function (e, t) {
              var a = y.w(
                i.$u ? Date.UTC(i.$y, t, e) : new Date(i.$y, t, e),
                i
              );
              return l ? a : a.endOf("day");
            },
            g = function (e, t) {
              return y.w(
                i
                  .toDate()
                  [e].apply(
                    i.toDate("s"),
                    (l ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(t)
                  ),
                i
              );
            },
            p = this.$W,
            f = this.$M,
            m = this.$D,
            x = "set" + (this.$u ? "UTC" : "");
          switch (d) {
            case c:
              return l ? u(1, 0) : u(31, 11);
            case r:
              return l ? u(1, f) : u(0, f + 1);
            case o:
              var b = this.$locale().weekStart || 0,
                v = (p < b ? p + 7 : p) - b;
              return u(l ? m - v : m + (6 - v), f);
            case "day":
            case h:
              return g(x + "Hours", 0);
            case s:
              return g(x + "Minutes", 1);
            case n:
              return g(x + "Seconds", 2);
            case a:
              return g(x + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }),
        (t.endOf = function (e) {
          return this.startOf(e, !1);
        }),
        (t.$set = function (e, t) {
          var o,
            l = y.p(e),
            d = "set" + (this.$u ? "UTC" : ""),
            u = (((o = {}).day = d + "Date"),
            (o[h] = d + "Date"),
            (o[r] = d + "Month"),
            (o[c] = d + "FullYear"),
            (o[s] = d + "Hours"),
            (o[n] = d + "Minutes"),
            (o[a] = d + "Seconds"),
            (o[i] = d + "Milliseconds"),
            o)[l],
            g = "day" === l ? this.$D + (t - this.$W) : t;
          if (l === r || l === c) {
            var p = this.clone().set(h, 1);
            p.$d[u](g),
              p.init(),
              (this.$d = p.set(h, Math.min(this.$D, p.daysInMonth())).$d);
          } else u && this.$d[u](g);
          return this.init(), this;
        }),
        (t.set = function (e, t) {
          return this.clone().$set(e, t);
        }),
        (t.get = function (e) {
          return this[y.p(e)]();
        }),
        (t.add = function (e, t) {
          var i,
            l = this;
          e = Number(e);
          var h = y.p(t),
            d = function (t) {
              var i = v(l);
              return y.w(i.date(i.date() + Math.round(t * e)), l);
            };
          if (h === r) return this.set(r, this.$M + e);
          if (h === c) return this.set(c, this.$y + e);
          if ("day" === h) return d(1);
          if (h === o) return d(7);
          var u = (((i = {})[n] = 6e4), (i[s] = 36e5), (i[a] = 1e3), i)[h] || 1,
            g = this.$d.getTime() + e * u;
          return y.w(g, this);
        }),
        (t.subtract = function (e, t) {
          return this.add(-1 * e, t);
        }),
        (t.format = function (e) {
          var t = this,
            i = this.$locale();
          if (!this.isValid()) return i.invalidDate || d;
          var a = e || "YYYY-MM-DDTHH:mm:ssZ",
            n = y.z(this),
            s = this.$H,
            o = this.$m,
            r = this.$M,
            l = i.weekdays,
            c = i.months,
            h = i.meridiem,
            u = function (e, i, n, s) {
              return (e && (e[i] || e(t, a))) || n[i].slice(0, s);
            },
            p = function (e) {
              return y.s(s % 12 || 12, e, "0");
            },
            f =
              h ||
              function (e, t, i) {
                var a = e < 12 ? "AM" : "PM";
                return i ? a.toLowerCase() : a;
              };
          return a.replace(g, function (e, a) {
            return (
              a ||
              (function (e) {
                switch (e) {
                  case "YY":
                    return String(t.$y).slice(-2);
                  case "YYYY":
                    return y.s(t.$y, 4, "0");
                  case "M":
                    return r + 1;
                  case "MM":
                    return y.s(r + 1, 2, "0");
                  case "MMM":
                    return u(i.monthsShort, r, c, 3);
                  case "MMMM":
                    return u(c, r);
                  case "D":
                    return t.$D;
                  case "DD":
                    return y.s(t.$D, 2, "0");
                  case "d":
                    return String(t.$W);
                  case "dd":
                    return u(i.weekdaysMin, t.$W, l, 2);
                  case "ddd":
                    return u(i.weekdaysShort, t.$W, l, 3);
                  case "dddd":
                    return l[t.$W];
                  case "H":
                    return String(s);
                  case "HH":
                    return y.s(s, 2, "0");
                  case "h":
                    return p(1);
                  case "hh":
                    return p(2);
                  case "a":
                    return f(s, o, !0);
                  case "A":
                    return f(s, o, !1);
                  case "m":
                    return String(o);
                  case "mm":
                    return y.s(o, 2, "0");
                  case "s":
                    return String(t.$s);
                  case "ss":
                    return y.s(t.$s, 2, "0");
                  case "SSS":
                    return y.s(t.$ms, 3, "0");
                  case "Z":
                    return n;
                }
                return null;
              })(e) ||
              n.replace(":", "")
            );
          });
        }),
        (t.utcOffset = function () {
          return -(15 * Math.round(this.$d.getTimezoneOffset() / 15));
        }),
        (t.diff = function (e, t, i) {
          var h,
            d = this,
            u = y.p(t),
            g = v(e),
            p = (g.utcOffset() - this.utcOffset()) * 6e4,
            f = this - g,
            m = function () {
              return y.m(d, g);
            };
          switch (u) {
            case c:
              h = m() / 12;
              break;
            case r:
              h = m();
              break;
            case l:
              h = m() / 3;
              break;
            case o:
              h = (f - p) / 6048e5;
              break;
            case "day":
              h = (f - p) / 864e5;
              break;
            case s:
              h = f / 36e5;
              break;
            case n:
              h = f / 6e4;
              break;
            case a:
              h = f / 1e3;
              break;
            default:
              h = f;
          }
          return i ? h : y.a(h);
        }),
        (t.daysInMonth = function () {
          return this.endOf(r).$D;
        }),
        (t.$locale = function () {
          return m[this.$L];
        }),
        (t.locale = function (e, t) {
          if (!e) return this.$L;
          var i = this.clone(),
            a = b(e, t, !0);
          return a && (i.$L = a), i;
        }),
        (t.clone = function () {
          return y.w(this.$d, this);
        }),
        (t.toDate = function () {
          return new Date(this.valueOf());
        }),
        (t.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }),
        (t.toISOString = function () {
          return this.$d.toISOString();
        }),
        (t.toString = function () {
          return this.$d.toUTCString();
        }),
        e
      );
    })()).prototype),
    (v.prototype = C),
    [
      ["$ms", i],
      ["$s", a],
      ["$m", n],
      ["$H", s],
      ["$W", "day"],
      ["$M", r],
      ["$y", c],
      ["$D", h]
    ].forEach(function (e) {
      C[e[1]] = function (t) {
        return this.$g(t, e[0], e[1]);
      };
    }),
    (v.extend = function (e, t) {
      return e.$i || (e(t, w, v), (e.$i = !0)), v;
    }),
    (v.locale = b),
    (v.isDayjs = x),
    (v.unix = function (e) {
      return v(1e3 * e);
    }),
    (v.en = m[f]),
    (v.Ls = m),
    (v.p = {}),
    (oA = v),
    (ok = function () {
      this.init = function (e) {
        var t = new oy(),
          i = [
            t.colors().theme.primary,
            t.colors().theme.light,
            t.colors().theme.dark
          ];
        e &&
          (function (e) {
            let a = L("6rwMJ");
            var n = {
                chart: {
                  stacked: !1,
                  zoom: { enabled: !1 },
                  toolbar: { show: !1 },
                  shadow: { enabled: !1 },
                  animations: { enabled: !1 }
                },
                colors: i,
                stroke: {
                  width: 3,
                  curve: "smooth",
                  lineCap: "butt",
                  dashArray: [0, 3]
                },
                series: [
                  {
                    name: "Price",
                    data: a.map((e) => ({
                      x: new Date(e.date),
                      y: [e.open, e.open, e.close, e.close]
                    }))
                  }
                ],
                markers: { size: 0 },
                xaxis: {
                  type: "datetime",
                  tooltip: { enabled: !1 },
                  axisBorder: { show: !1 },
                  axisTicks: { show: !0 },
                  tooltip: {
                    enabled: !0,
                    formatter: function (e) {
                      return oA(e).format("MMM YYYY");
                    }
                  },
                  labels: {
                    show: !0,
                    showDuplicates: !1,
                    formatter: function (e) {
                      return oA(e).format("MMM YYYY");
                    }
                  }
                },
                yaxis: [
                  {
                    seriesName: "Price",
                    axisBorder: { show: !1 },
                    axisTicks: { show: !0 },
                    labels: {
                      style: {
                        colors: t.colors().body.color,
                        fontSize: "13px",
                        fontFamily: "inherit",
                        cssClass: "apexcharts-xaxis-label"
                      }
                    },
                    opposite: !1
                  }
                ],
                legend: { show: !1 },
                grid: {
                  borderColor: t.colors().border.color,
                  strokeDashArray: 3
                },
                dataLabels: { enabled: !1 },
                tooltip: {
                  x: {
                    formatter: function (e) {
                      return oA(e).format("MMM DD, YYYY");
                    }
                  }
                }
              },
              s = e.dataset.height; // Inject dynamic properties
            (n.colors = i),
              (n.chart.height = s || 350), // Create chart
              new nq(e, n).render();
          })(e);
      };
    });
  var oS = {};
  oS = function () {
    this.init = function (e) {
      var t = new oy();
      e &&
        (function (e) {
          let i = {
              chart: {
                width: "100%",
                sparkline: { enabled: !0 },
                animations: { enabled: !1 }
              },
              series: [],
              labels: [],
              plotOptions: {
                bar: { columnWidth: "40%", endingShape: "rounded" }
              },
              stroke: { curve: "smooth" },
              markers: { size: 0 },
              colors: [],
              tooltip: {
                fixed: { enabled: !1 },
                x: { show: !1 },
                y: {
                  title: {
                    formatter: function (e) {
                      return "";
                    }
                  }
                },
                marker: { show: !1 }
              }
            },
            a = e.dataset.dataset,
            n = e.dataset.labels,
            s = e.dataset.color,
            o = e.dataset.height,
            r = e.dataset.type,
            l = e.dataset.stroke; // Inject synamic properties
          (i.series = [{ data: a.split(",") }]),
            n && (i.labels = [n]),
            (i.colors = [t.colors().theme[s]]),
            (i.chart.height = o || 35),
            (i.chart.type = r || "line"),
            (i.stroke.width = l || 2), // Create chart
            setTimeout(function () {
              new nq(e, i).render();
            }, 300);
        })(e);
    };
  };
  var oL = {},
    oO = {};
  t(oO, "default", function () {
    return o2;
  });
  var oT = [
      "onChange",
      "onClose",
      "onDayCreate",
      "onDestroy",
      "onKeyDown",
      "onMonthChange",
      "onOpen",
      "onParseConfig",
      "onReady",
      "onValueUpdate",
      "onYearChange",
      "onPreCalendarPosition"
    ],
    oP = {
      _disable: [],
      allowInput: !1,
      allowInvalidPreload: !1,
      altFormat: "F j, Y",
      altInput: !1,
      altInputClass: "form-control input",
      animate:
        "object" == typeof window &&
        -1 === window.navigator.userAgent.indexOf("MSIE"),
      ariaDateFormat: "F j, Y",
      autoFillDefaultTime: !0,
      clickOpens: !0,
      closeOnSelect: !0,
      conjunction: ", ",
      dateFormat: "Y-m-d",
      defaultHour: 12,
      defaultMinute: 0,
      defaultSeconds: 0,
      disable: [],
      disableMobile: !1,
      enableSeconds: !1,
      enableTime: !1,
      errorHandler: function (e) {
        return "undefined" != typeof console && console.warn(e);
      },
      getWeek: function (e) {
        var t = new Date(e.getTime());
        t.setHours(0, 0, 0, 0),
          t.setDate(t.getDate() + 3 - ((t.getDay() + 6) % 7));
        var i = new Date(t.getFullYear(), 0, 4);
        return (
          1 +
          Math.round(
            ((t.getTime() - i.getTime()) / 864e5 - 3 + ((i.getDay() + 6) % 7)) /
              7
          )
        );
      },
      hourIncrement: 1,
      ignoredFocusElements: [],
      inline: !1,
      locale: "default",
      minuteIncrement: 5,
      mode: "single",
      monthSelectorType: "dropdown",
      nextArrow:
        "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
      noCalendar: !1,
      now: new Date(),
      onChange: [],
      onClose: [],
      onDayCreate: [],
      onDestroy: [],
      onKeyDown: [],
      onMonthChange: [],
      onOpen: [],
      onParseConfig: [],
      onReady: [],
      onValueUpdate: [],
      onYearChange: [],
      onPreCalendarPosition: [],
      plugins: [],
      position: "auto",
      positionElement: void 0,
      prevArrow:
        "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
      shorthandCurrentMonth: !1,
      showMonths: 1,
      static: !1,
      time_24hr: !1,
      weekNumbers: !1,
      wrap: !1
    },
    oM = {
      weekdays: {
        shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        longhand: [
          "Sunday",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday"
        ]
      },
      months: {
        shorthand: [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec"
        ],
        longhand: [
          "January",
          "February",
          "March",
          "April",
          "May",
          "June",
          "July",
          "August",
          "September",
          "October",
          "November",
          "December"
        ]
      },
      daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
      firstDayOfWeek: 0,
      ordinal: function (e) {
        var t = e % 100;
        if (t > 3 && t < 21) return "th";
        switch (t % 10) {
          case 1:
            return "st";
          case 2:
            return "nd";
          case 3:
            return "rd";
          default:
            return "th";
        }
      },
      rangeSeparator: " to ",
      weekAbbreviation: "Wk",
      scrollTitle: "Scroll to increment",
      toggleTitle: "Click to toggle",
      amPM: ["AM", "PM"],
      yearAriaLabel: "Year",
      monthAriaLabel: "Month",
      hourAriaLabel: "Hour",
      minuteAriaLabel: "Minute",
      time_24hr: !1
    },
    o_ = function (e, t) {
      return void 0 === t && (t = 2), ("000" + e).slice(-1 * t);
    },
    oD = function (e) {
      return !0 === e ? 1 : 0;
    };
  function oE(e, t) {
    var i;
    return function () {
      var a = this,
        n = arguments;
      clearTimeout(i),
        (i = setTimeout(function () {
          return e.apply(a, n);
        }, t));
    };
  }
  var oI = function (e) {
    return e instanceof Array ? e : [e];
  };
  function oH(e, t, i) {
    if (!0 === i) return e.classList.add(t);
    e.classList.remove(t);
  }
  function oF(e, t, i) {
    var a = window.document.createElement(e);
    return (
      (t = t || ""),
      (i = i || ""),
      (a.className = t),
      void 0 !== i && (a.textContent = i),
      a
    );
  }
  function oz(e) {
    for (; e.firstChild; ) e.removeChild(e.firstChild);
  }
  function oY(e, t) {
    var i = oF("div", "numInputWrapper"),
      a = oF("input", "numInput " + e),
      n = oF("span", "arrowUp"),
      s = oF("span", "arrowDown");
    if (
      (-1 === navigator.userAgent.indexOf("MSIE 9.0")
        ? (a.type = "number")
        : ((a.type = "text"), (a.pattern = "\\d*")),
      void 0 !== t)
    )
      for (var o in t) a.setAttribute(o, t[o]);
    return i.appendChild(a), i.appendChild(n), i.appendChild(s), i;
  }
  function oX(e) {
    try {
      if ("function" == typeof e.composedPath) return e.composedPath()[0];
      return e.target;
    } catch (t) {
      return e.target;
    }
  }
  var oN = function () {},
    oR = function (e, t, i) {
      return i.months[t ? "shorthand" : "longhand"][e];
    },
    oV = {
      D: oN,
      F: function (e, t, i) {
        e.setMonth(i.months.longhand.indexOf(t));
      },
      G: function (e, t) {
        e.setHours((e.getHours() >= 12 ? 12 : 0) + parseFloat(t));
      },
      H: function (e, t) {
        e.setHours(parseFloat(t));
      },
      J: function (e, t) {
        e.setDate(parseFloat(t));
      },
      K: function (e, t, i) {
        e.setHours(
          (e.getHours() % 12) + 12 * oD(RegExp(i.amPM[1], "i").test(t))
        );
      },
      M: function (e, t, i) {
        e.setMonth(i.months.shorthand.indexOf(t));
      },
      S: function (e, t) {
        e.setSeconds(parseFloat(t));
      },
      U: function (e, t) {
        return new Date(1e3 * parseFloat(t));
      },
      W: function (e, t, i) {
        var a = parseInt(t),
          n = new Date(e.getFullYear(), 0, 2 + (a - 1) * 7, 0, 0, 0, 0);
        return n.setDate(n.getDate() - n.getDay() + i.firstDayOfWeek), n;
      },
      Y: function (e, t) {
        e.setFullYear(parseFloat(t));
      },
      Z: function (e, t) {
        return new Date(t);
      },
      d: function (e, t) {
        e.setDate(parseFloat(t));
      },
      h: function (e, t) {
        e.setHours((e.getHours() >= 12 ? 12 : 0) + parseFloat(t));
      },
      i: function (e, t) {
        e.setMinutes(parseFloat(t));
      },
      j: function (e, t) {
        e.setDate(parseFloat(t));
      },
      l: oN,
      m: function (e, t) {
        e.setMonth(parseFloat(t) - 1);
      },
      n: function (e, t) {
        e.setMonth(parseFloat(t) - 1);
      },
      s: function (e, t) {
        e.setSeconds(parseFloat(t));
      },
      u: function (e, t) {
        return new Date(parseFloat(t));
      },
      w: oN,
      y: function (e, t) {
        e.setFullYear(2e3 + parseFloat(t));
      }
    },
    oW = {
      D: "",
      F: "",
      G: "(\\d\\d|\\d)",
      H: "(\\d\\d|\\d)",
      J: "(\\d\\d|\\d)\\w+",
      K: "",
      M: "",
      S: "(\\d\\d|\\d)",
      U: "(.+)",
      W: "(\\d\\d|\\d)",
      Y: "(\\d{4})",
      Z: "(.+)",
      d: "(\\d\\d|\\d)",
      h: "(\\d\\d|\\d)",
      i: "(\\d\\d|\\d)",
      j: "(\\d\\d|\\d)",
      l: "",
      m: "(\\d\\d|\\d)",
      n: "(\\d\\d|\\d)",
      s: "(\\d\\d|\\d)",
      u: "(.+)",
      w: "(\\d\\d|\\d)",
      y: "(\\d{2})"
    },
    oB = {
      Z: function (e) {
        return e.toISOString();
      },
      D: function (e, t, i) {
        return t.weekdays.shorthand[oB.w(e, t, i)];
      },
      F: function (e, t, i) {
        return oR(oB.n(e, t, i) - 1, !1, t);
      },
      G: function (e, t, i) {
        return o_(oB.h(e, t, i));
      },
      H: function (e) {
        return o_(e.getHours());
      },
      J: function (e, t) {
        return void 0 !== t.ordinal
          ? e.getDate() + t.ordinal(e.getDate())
          : e.getDate();
      },
      K: function (e, t) {
        return t.amPM[oD(e.getHours() > 11)];
      },
      M: function (e, t) {
        return oR(e.getMonth(), !0, t);
      },
      S: function (e) {
        return o_(e.getSeconds());
      },
      U: function (e) {
        return e.getTime() / 1e3;
      },
      W: function (e, t, i) {
        return i.getWeek(e);
      },
      Y: function (e) {
        return o_(e.getFullYear(), 4);
      },
      d: function (e) {
        return o_(e.getDate());
      },
      h: function (e) {
        return e.getHours() % 12 ? e.getHours() % 12 : 12;
      },
      i: function (e) {
        return o_(e.getMinutes());
      },
      j: function (e) {
        return e.getDate();
      },
      l: function (e, t) {
        return t.weekdays.longhand[e.getDay()];
      },
      m: function (e) {
        return o_(e.getMonth() + 1);
      },
      n: function (e) {
        return e.getMonth() + 1;
      },
      s: function (e) {
        return e.getSeconds();
      },
      u: function (e) {
        return e.getTime();
      },
      w: function (e) {
        return e.getDay();
      },
      y: function (e) {
        return String(e.getFullYear()).substring(2);
      }
    },
    oG = function (e) {
      var t = e.config,
        i = void 0 === t ? oP : t,
        a = e.l10n,
        n = void 0 === a ? oM : a,
        s = e.isMobile,
        o = void 0 !== s && s;
      return function (e, t, a) {
        var s = a || n;
        return void 0 === i.formatDate || o
          ? t
              .split("")
              .map(function (t, a, n) {
                return oB[t] && "\\" !== n[a - 1]
                  ? oB[t](e, s, i)
                  : "\\" !== t
                  ? t
                  : "";
              })
              .join("")
          : i.formatDate(e, t, s);
      };
    },
    oj = function (e) {
      var t = e.config,
        i = void 0 === t ? oP : t,
        a = e.l10n,
        n = void 0 === a ? oM : a;
      return function (e, t, a, s) {
        if (0 === e || e) {
          var o,
            r = s || n;
          if (e instanceof Date) o = new Date(e.getTime());
          else if ("string" != typeof e && void 0 !== e.toFixed)
            o = new Date(e);
          else if ("string" == typeof e) {
            var l = t || (i || oP).dateFormat,
              c = String(e).trim();
            if ("today" === c) (o = new Date()), (a = !0);
            else if (i && i.parseDate) o = i.parseDate(e, l);
            else if (/Z$/.test(c) || /GMT$/.test(c)) o = new Date(e);
            else {
              for (
                var h = void 0, d = [], u = 0, g = 0, p = "";
                u < l.length;
                u++
              ) {
                var f = l[u],
                  m = "\\" === f,
                  x = "\\" === l[u - 1] || m;
                if (oW[f] && !x) {
                  p += oW[f];
                  var b = new RegExp(p).exec(e);
                  b &&
                    (h = !0) &&
                    d["Y" !== f ? "push" : "unshift"]({
                      fn: oV[f],
                      val: b[++g]
                    });
                } else m || (p += ".");
              }
              (o =
                i && i.noCalendar
                  ? new Date(new Date().setHours(0, 0, 0, 0))
                  : new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)),
                d.forEach(function (e) {
                  var t = e.fn,
                    i = e.val;
                  return (o = t(o, i, r) || o);
                }),
                (o = h ? o : void 0);
            }
          }
          if (!(o instanceof Date && !isNaN(o.getTime()))) {
            i.errorHandler(Error("Invalid date provided: " + e));
            return;
          }
          return !0 === a && o.setHours(0, 0, 0, 0), o;
        }
      };
    };
  function o$(e, t, i) {
    return (void 0 === i && (i = !0), !1 !== i)
      ? new Date(e.getTime()).setHours(0, 0, 0, 0) -
          new Date(t.getTime()).setHours(0, 0, 0, 0)
      : e.getTime() - t.getTime();
  }
  var oU = function (e, t, i) {
      return 3600 * e + 60 * t + i;
    },
    oq = function (e) {
      var t = Math.floor(e / 3600),
        i = (e - 3600 * t) / 60;
      return [t, i, e - 3600 * t - 60 * i];
    },
    oZ = { DAY: 864e5 };
  function oJ(e) {
    var t = e.defaultHour,
      i = e.defaultMinute,
      a = e.defaultSeconds;
    if (void 0 !== e.minDate) {
      var n = e.minDate.getHours(),
        s = e.minDate.getMinutes(),
        o = e.minDate.getSeconds();
      t < n && (t = n),
        t === n && i < s && (i = s),
        t === n && i === s && a < o && (a = e.minDate.getSeconds());
    }
    if (void 0 !== e.maxDate) {
      var r = e.maxDate.getHours(),
        l = e.maxDate.getMinutes();
      (t = Math.min(t, r)) === r && (i = Math.min(l, i)),
        t === r && i === l && (a = e.maxDate.getSeconds());
    }
    return { hours: t, minutes: i, seconds: a };
  }
  "function" != typeof Object.assign &&
    (Object.assign = function (e) {
      for (var t = [], i = 1; i < arguments.length; i++)
        t[i - 1] = arguments[i];
      if (!e) throw TypeError("Cannot convert undefined or null to object");
      for (
        var a = function (t) {
            t &&
              Object.keys(t).forEach(function (i) {
                return (e[i] = t[i]);
              });
          },
          n = 0;
        n < t.length;
        n++
      )
        a(t[n]);
      return e;
    });
  var oK = function () {
      return (oK =
        Object.assign ||
        function (e) {
          for (var t, i = 1, a = arguments.length; i < a; i++)
            for (var n in (t = arguments[i]))
              Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
          return e;
        }).apply(this, arguments);
    },
    oQ = function () {
      for (var e = 0, t = 0, i = arguments.length; t < i; t++)
        e += arguments[t].length;
      for (var a = Array(e), n = 0, t = 0; t < i; t++)
        for (var s = arguments[t], o = 0, r = s.length; o < r; o++, n++)
          a[n] = s[o];
      return a;
    };
  function o0(e, t) {
    for (
      var i = Array.prototype.slice.call(e).filter(function (e) {
          return e instanceof HTMLElement;
        }),
        a = [],
        n = 0;
      n < i.length;
      n++
    ) {
      var s = i[n];
      try {
        if (null !== s.getAttribute("data-fp-omit")) continue;
        void 0 !== s._flatpickr &&
          (s._flatpickr.destroy(), (s._flatpickr = void 0)),
          (s._flatpickr = (function (e, t) {
            var i,
              a = { config: oK(oK({}, oP), o1.defaultConfig), l10n: oM };
            function n() {
              var e;
              return (
                (null === (e = a.calendarContainer) || void 0 === e
                  ? void 0
                  : e.getRootNode()
                ).activeElement || document.activeElement
              );
            }
            function s(e) {
              return e.bind(a);
            }
            function o() {
              var e = a.config;
              (!1 !== e.weekNumbers || 1 !== e.showMonths) &&
                !0 !== e.noCalendar &&
                window.requestAnimationFrame(function () {
                  if (
                    (void 0 !== a.calendarContainer &&
                      ((a.calendarContainer.style.visibility = "hidden"),
                      (a.calendarContainer.style.display = "block")),
                    void 0 !== a.daysContainer)
                  ) {
                    var t = (a.days.offsetWidth + 1) * e.showMonths;
                    (a.daysContainer.style.width = t + "px"),
                      (a.calendarContainer.style.width =
                        t +
                        (void 0 !== a.weekWrapper
                          ? a.weekWrapper.offsetWidth
                          : 0) +
                        "px"),
                      a.calendarContainer.style.removeProperty("visibility"),
                      a.calendarContainer.style.removeProperty("display");
                  }
                });
            }
            function r(e) {
              if (0 === a.selectedDates.length) {
                var t =
                    void 0 === a.config.minDate ||
                    o$(new Date(), a.config.minDate) >= 0
                      ? new Date()
                      : new Date(a.config.minDate.getTime()),
                  i = oJ(a.config);
                t.setHours(i.hours, i.minutes, i.seconds, t.getMilliseconds()),
                  (a.selectedDates = [t]),
                  (a.latestSelectedDateObj = t);
              }
              void 0 !== e &&
                "blur" !== e.type &&
                (function (e) {
                  e.preventDefault();
                  var t = "keydown" === e.type,
                    i = oX(e);
                  void 0 !== a.amPM &&
                    i === a.amPM &&
                    (a.amPM.textContent =
                      a.l10n.amPM[oD(a.amPM.textContent === a.l10n.amPM[0])]);
                  var n = parseFloat(i.getAttribute("min")),
                    s = parseFloat(i.getAttribute("max")),
                    o = parseFloat(i.getAttribute("step")),
                    r = parseInt(i.value, 10),
                    l =
                      r + o * (e.delta || (t ? (38 === e.which ? 1 : -1) : 0));
                  if (void 0 !== i.value && 2 === i.value.length) {
                    var c = i === a.hourElement,
                      h = i === a.minuteElement;
                    l < n
                      ? ((l = s + l + oD(!c) + (oD(c) && oD(!a.amPM))),
                        h && m(void 0, -1, a.hourElement))
                      : l > s &&
                        ((l = i === a.hourElement ? l - s - oD(!a.amPM) : n),
                        h && m(void 0, 1, a.hourElement)),
                      a.amPM &&
                        c &&
                        (1 === o ? l + r === 23 : Math.abs(l - r) > o) &&
                        (a.amPM.textContent =
                          a.l10n.amPM[
                            oD(a.amPM.textContent === a.l10n.amPM[0])
                          ]),
                      (i.value = o_(l));
                  }
                })(e);
              var n = a._input.value;
              l(), K(), a._input.value !== n && a._debouncedChange();
            }
            function l() {
              if (void 0 !== a.hourElement && void 0 !== a.minuteElement) {
                var e = (parseInt(a.hourElement.value.slice(-2), 10) || 0) % 24,
                  t = (parseInt(a.minuteElement.value, 10) || 0) % 60,
                  i =
                    void 0 !== a.secondElement
                      ? (parseInt(a.secondElement.value, 10) || 0) % 60
                      : 0;
                void 0 !== a.amPM &&
                  (e =
                    (e % 12) + 12 * oD(a.amPM.textContent === a.l10n.amPM[1]));
                var n =
                    void 0 !== a.config.minTime ||
                    (a.config.minDate &&
                      a.minDateHasTime &&
                      a.latestSelectedDateObj &&
                      0 === o$(a.latestSelectedDateObj, a.config.minDate, !0)),
                  s =
                    void 0 !== a.config.maxTime ||
                    (a.config.maxDate &&
                      a.maxDateHasTime &&
                      a.latestSelectedDateObj &&
                      0 === o$(a.latestSelectedDateObj, a.config.maxDate, !0));
                if (
                  void 0 !== a.config.maxTime &&
                  void 0 !== a.config.minTime &&
                  a.config.minTime > a.config.maxTime
                ) {
                  var o = oU(
                      a.config.minTime.getHours(),
                      a.config.minTime.getMinutes(),
                      a.config.minTime.getSeconds()
                    ),
                    r = oU(
                      a.config.maxTime.getHours(),
                      a.config.maxTime.getMinutes(),
                      a.config.maxTime.getSeconds()
                    ),
                    l = oU(e, t, i);
                  if (l > r && l < o) {
                    var c = oq(o);
                    (e = c[0]), (t = c[1]), (i = c[2]);
                  }
                } else {
                  if (s) {
                    var d =
                      void 0 !== a.config.maxTime
                        ? a.config.maxTime
                        : a.config.maxDate;
                    (e = Math.min(e, d.getHours())) === d.getHours() &&
                      (t = Math.min(t, d.getMinutes())),
                      t === d.getMinutes() && (i = Math.min(i, d.getSeconds()));
                  }
                  if (n) {
                    var u =
                      void 0 !== a.config.minTime
                        ? a.config.minTime
                        : a.config.minDate;
                    (e = Math.max(e, u.getHours())) === u.getHours() &&
                      t < u.getMinutes() &&
                      (t = u.getMinutes()),
                      t === u.getMinutes() && (i = Math.max(i, u.getSeconds()));
                  }
                }
                h(e, t, i);
              }
            }
            function c(e) {
              var t = e || a.latestSelectedDateObj;
              t &&
                t instanceof Date &&
                h(t.getHours(), t.getMinutes(), t.getSeconds());
            }
            function h(e, t, i) {
              void 0 !== a.latestSelectedDateObj &&
                a.latestSelectedDateObj.setHours(e % 24, t, i || 0, 0),
                a.hourElement &&
                  a.minuteElement &&
                  !a.isMobile &&
                  ((a.hourElement.value = o_(
                    a.config.time_24hr
                      ? e
                      : ((12 + e) % 12) + 12 * oD(e % 12 == 0)
                  )),
                  (a.minuteElement.value = o_(t)),
                  void 0 !== a.amPM &&
                    (a.amPM.textContent = a.l10n.amPM[oD(e >= 12)]),
                  void 0 !== a.secondElement &&
                    (a.secondElement.value = o_(i)));
            }
            function d(e) {
              var t = parseInt(oX(e).value) + (e.delta || 0);
              (t / 1e3 > 1 ||
                ("Enter" === e.key && !/[^\d]/.test(t.toString()))) &&
                P(t);
            }
            function u(e, t, i, n) {
              return t instanceof Array
                ? t.forEach(function (t) {
                    return u(e, t, i, n);
                  })
                : e instanceof Array
                ? e.forEach(function (e) {
                    return u(e, t, i, n);
                  })
                : void (e.addEventListener(t, i, n),
                  a._handlers.push({
                    remove: function () {
                      return e.removeEventListener(t, i, n);
                    }
                  }));
            }
            function g() {
              $("onChange");
            }
            function p(e, t) {
              var i =
                  void 0 !== e
                    ? a.parseDate(e)
                    : a.latestSelectedDateObj ||
                      (a.config.minDate && a.config.minDate > a.now
                        ? a.config.minDate
                        : a.config.maxDate && a.config.maxDate < a.now
                        ? a.config.maxDate
                        : a.now),
                n = a.currentYear,
                s = a.currentMonth;
              try {
                void 0 !== i &&
                  ((a.currentYear = i.getFullYear()),
                  (a.currentMonth = i.getMonth()));
              } catch (e) {
                (e.message = "Invalid date supplied: " + i),
                  a.config.errorHandler(e);
              }
              t && a.currentYear !== n && ($("onYearChange"), C()),
                t &&
                  (a.currentYear !== n || a.currentMonth !== s) &&
                  $("onMonthChange"),
                a.redraw();
            }
            function f(e) {
              var t = oX(e);
              ~t.className.indexOf("arrow") &&
                m(e, t.classList.contains("arrowUp") ? 1 : -1);
            }
            function m(e, t, i) {
              var a = e && oX(e),
                n = i || (a && a.parentNode && a.parentNode.firstChild),
                s = U("increment");
              (s.delta = t), n && n.dispatchEvent(s);
            }
            function x(e, t, i, n) {
              var s = M(t, !0),
                o = oF("span", e, t.getDate().toString());
              return (
                (o.dateObj = t),
                (o.$i = n),
                o.setAttribute(
                  "aria-label",
                  a.formatDate(t, a.config.ariaDateFormat)
                ),
                -1 === e.indexOf("hidden") &&
                  0 === o$(t, a.now) &&
                  ((a.todayDateElem = o),
                  o.classList.add("today"),
                  o.setAttribute("aria-current", "date")),
                s
                  ? ((o.tabIndex = -1),
                    q(t) &&
                      (o.classList.add("selected"),
                      (a.selectedDateElem = o),
                      "range" === a.config.mode &&
                        (oH(
                          o,
                          "startRange",
                          a.selectedDates[0] &&
                            0 === o$(t, a.selectedDates[0], !0)
                        ),
                        oH(
                          o,
                          "endRange",
                          a.selectedDates[1] &&
                            0 === o$(t, a.selectedDates[1], !0)
                        ),
                        "nextMonthDay" === e && o.classList.add("inRange"))))
                  : o.classList.add("flatpickr-disabled"),
                "range" === a.config.mode &&
                  "range" === a.config.mode &&
                  !(a.selectedDates.length < 2) &&
                  o$(t, a.selectedDates[0]) >= 0 &&
                  0 >= o$(t, a.selectedDates[1]) &&
                  !q(t) &&
                  o.classList.add("inRange"),
                a.weekNumbers &&
                  1 === a.config.showMonths &&
                  "prevMonthDay" !== e &&
                  n % 7 == 6 &&
                  a.weekNumbers.insertAdjacentHTML(
                    "beforeend",
                    "<span class='flatpickr-day'>" +
                      a.config.getWeek(t) +
                      "</span>"
                  ),
                $("onDayCreate", o),
                o
              );
            }
            function b(e) {
              e.focus(), "range" === a.config.mode && I(e);
            }
            function v(e) {
              for (
                var t = e > 0 ? 0 : a.config.showMonths - 1,
                  i = e > 0 ? a.config.showMonths : -1,
                  n = t;
                n != i;
                n += e
              )
                for (
                  var s = a.daysContainer.children[n],
                    o = e > 0 ? 0 : s.children.length - 1,
                    r = e > 0 ? s.children.length : -1,
                    l = o;
                  l != r;
                  l += e
                ) {
                  var c = s.children[l];
                  if (-1 === c.className.indexOf("hidden") && M(c.dateObj))
                    return c;
                }
            }
            function y(e, t) {
              var i = n(),
                s = _(i || document.body),
                o =
                  void 0 !== e
                    ? e
                    : s
                    ? i
                    : void 0 !== a.selectedDateElem && _(a.selectedDateElem)
                    ? a.selectedDateElem
                    : void 0 !== a.todayDateElem && _(a.todayDateElem)
                    ? a.todayDateElem
                    : v(t > 0 ? 1 : -1);
              void 0 === o
                ? a._input.focus()
                : s
                ? (function (e, t) {
                    for (
                      var i =
                          -1 === e.className.indexOf("Month")
                            ? e.dateObj.getMonth()
                            : a.currentMonth,
                        n = t > 0 ? a.config.showMonths : -1,
                        s = t > 0 ? 1 : -1,
                        o = i - a.currentMonth;
                      o != n;
                      o += s
                    )
                      for (
                        var r = a.daysContainer.children[o],
                          l =
                            i - a.currentMonth === o
                              ? e.$i + t
                              : t < 0
                              ? r.children.length - 1
                              : 0,
                          c = r.children.length,
                          h = l;
                        h >= 0 && h < c && h != (t > 0 ? c : -1);
                        h += s
                      ) {
                        var d = r.children[h];
                        if (
                          -1 === d.className.indexOf("hidden") &&
                          M(d.dateObj) &&
                          Math.abs(e.$i - h) >= Math.abs(t)
                        )
                          return b(d);
                      }
                    a.changeMonth(s), y(v(s), 0);
                  })(o, t)
                : b(o);
            }
            function w() {
              if (void 0 !== a.daysContainer) {
                oz(a.daysContainer), a.weekNumbers && oz(a.weekNumbers);
                for (
                  var e = document.createDocumentFragment(), t = 0;
                  t < a.config.showMonths;
                  t++
                ) {
                  var i = new Date(a.currentYear, a.currentMonth, 1);
                  i.setMonth(a.currentMonth + t),
                    e.appendChild(
                      (function (e, t) {
                        for (
                          var i =
                              (new Date(e, t, 1).getDay() -
                                a.l10n.firstDayOfWeek +
                                7) %
                              7,
                            n = a.utils.getDaysInMonth((t - 1 + 12) % 12, e),
                            s = a.utils.getDaysInMonth(t, e),
                            o = window.document.createDocumentFragment(),
                            r = a.config.showMonths > 1,
                            l = r ? "prevMonthDay hidden" : "prevMonthDay",
                            c = r ? "nextMonthDay hidden" : "nextMonthDay",
                            h = n + 1 - i,
                            d = 0;
                          h <= n;
                          h++, d++
                        )
                          o.appendChild(
                            x("flatpickr-day " + l, new Date(e, t - 1, h), h, d)
                          );
                        for (h = 1; h <= s; h++, d++)
                          o.appendChild(
                            x("flatpickr-day", new Date(e, t, h), h, d)
                          );
                        for (
                          var u = s + 1;
                          u <= 42 - i &&
                          (1 === a.config.showMonths || d % 7 != 0);
                          u++, d++
                        )
                          o.appendChild(
                            x(
                              "flatpickr-day " + c,
                              new Date(e, t + 1, u % s),
                              u,
                              d
                            )
                          );
                        var g = oF("div", "dayContainer");
                        return g.appendChild(o), g;
                      })(i.getFullYear(), i.getMonth())
                    );
                }
                a.daysContainer.appendChild(e),
                  (a.days = a.daysContainer.firstChild),
                  "range" === a.config.mode &&
                    1 === a.selectedDates.length &&
                    I();
              }
            }
            function C() {
              if (
                !(a.config.showMonths > 1) &&
                "dropdown" === a.config.monthSelectorType
              ) {
                (a.monthsDropdownContainer.tabIndex = -1),
                  (a.monthsDropdownContainer.innerHTML = "");
                for (var e, t = 0; t < 12; t++)
                  if (
                    ((e = t),
                    !(
                      (void 0 !== a.config.minDate &&
                        a.currentYear === a.config.minDate.getFullYear() &&
                        e < a.config.minDate.getMonth()) ||
                      (void 0 !== a.config.maxDate &&
                        a.currentYear === a.config.maxDate.getFullYear() &&
                        e > a.config.maxDate.getMonth())
                    ))
                  ) {
                    var i = oF("option", "flatpickr-monthDropdown-month");
                    (i.value = new Date(a.currentYear, t)
                      .getMonth()
                      .toString()),
                      (i.textContent = oR(
                        t,
                        a.config.shorthandCurrentMonth,
                        a.l10n
                      )),
                      (i.tabIndex = -1),
                      a.currentMonth === t && (i.selected = !0),
                      a.monthsDropdownContainer.appendChild(i);
                  }
              }
            }
            function k() {
              oz(a.monthNav),
                a.monthNav.appendChild(a.prevMonthNav),
                a.config.showMonths &&
                  ((a.yearElements = []), (a.monthElements = []));
              for (var e = a.config.showMonths; e--; ) {
                var t = (function () {
                  var e,
                    t = oF("div", "flatpickr-month"),
                    i = window.document.createDocumentFragment();
                  a.config.showMonths > 1 ||
                  "static" === a.config.monthSelectorType
                    ? (e = oF("span", "cur-month"))
                    : ((a.monthsDropdownContainer = oF(
                        "select",
                        "flatpickr-monthDropdown-months"
                      )),
                      a.monthsDropdownContainer.setAttribute(
                        "aria-label",
                        a.l10n.monthAriaLabel
                      ),
                      u(a.monthsDropdownContainer, "change", function (e) {
                        var t = parseInt(oX(e).value, 10);
                        a.changeMonth(t - a.currentMonth), $("onMonthChange");
                      }),
                      C(),
                      (e = a.monthsDropdownContainer));
                  var n = oY("cur-year", { tabindex: "-1" }),
                    s = n.getElementsByTagName("input")[0];
                  s.setAttribute("aria-label", a.l10n.yearAriaLabel),
                    a.config.minDate &&
                      s.setAttribute(
                        "min",
                        a.config.minDate.getFullYear().toString()
                      ),
                    a.config.maxDate &&
                      (s.setAttribute(
                        "max",
                        a.config.maxDate.getFullYear().toString()
                      ),
                      (s.disabled =
                        !!a.config.minDate &&
                        a.config.minDate.getFullYear() ===
                          a.config.maxDate.getFullYear()));
                  var o = oF("div", "flatpickr-current-month");
                  return (
                    o.appendChild(e),
                    o.appendChild(n),
                    i.appendChild(o),
                    t.appendChild(i),
                    { container: t, yearElement: s, monthElement: e }
                  );
                })();
                a.yearElements.push(t.yearElement),
                  a.monthElements.push(t.monthElement),
                  a.monthNav.appendChild(t.container);
              }
              a.monthNav.appendChild(a.nextMonthNav);
            }
            function A() {
              a.weekdayContainer
                ? oz(a.weekdayContainer)
                : (a.weekdayContainer = oF("div", "flatpickr-weekdays"));
              for (var e = a.config.showMonths; e--; ) {
                var t = oF("div", "flatpickr-weekdaycontainer");
                a.weekdayContainer.appendChild(t);
              }
              return S(), a.weekdayContainer;
            }
            function S() {
              if (a.weekdayContainer) {
                var e = a.l10n.firstDayOfWeek,
                  t = oQ(a.l10n.weekdays.shorthand);
                e > 0 &&
                  e < t.length &&
                  (t = oQ(t.splice(e, t.length), t.splice(0, e)));
                for (var i = a.config.showMonths; i--; )
                  a.weekdayContainer.children[i].innerHTML =
                    "\n      <span class='flatpickr-weekday'>\n        " +
                    t.join("</span><span class='flatpickr-weekday'>") +
                    "\n      </span>\n      ";
              }
            }
            function L(e, t) {
              void 0 === t && (t = !0);
              var i = t ? e : e - a.currentMonth;
              (i < 0 && !0 === a._hidePrevMonthArrow) ||
                (i > 0 && !0 === a._hideNextMonthArrow) ||
                ((a.currentMonth += i),
                (a.currentMonth < 0 || a.currentMonth > 11) &&
                  ((a.currentYear += a.currentMonth > 11 ? 1 : -1),
                  (a.currentMonth = (a.currentMonth + 12) % 12),
                  $("onYearChange"),
                  C()),
                w(),
                $("onMonthChange"),
                Z());
            }
            function O(e) {
              return a.calendarContainer.contains(e);
            }
            function T(e) {
              if (a.isOpen && !a.config.inline) {
                var t = oX(e),
                  i = O(t),
                  n =
                    !(
                      t === a.input ||
                      t === a.altInput ||
                      a.element.contains(t) ||
                      (e.path &&
                        e.path.indexOf &&
                        (~e.path.indexOf(a.input) ||
                          ~e.path.indexOf(a.altInput)))
                    ) &&
                    !i &&
                    !O(e.relatedTarget),
                  s = !a.config.ignoredFocusElements.some(function (e) {
                    return e.contains(t);
                  });
                n &&
                  s &&
                  (a.config.allowInput &&
                    a.setDate(
                      a._input.value,
                      !1,
                      a.config.altInput
                        ? a.config.altFormat
                        : a.config.dateFormat
                    ),
                  void 0 !== a.timeContainer &&
                    void 0 !== a.minuteElement &&
                    void 0 !== a.hourElement &&
                    "" !== a.input.value &&
                    void 0 !== a.input.value &&
                    r(),
                  a.close(),
                  a.config &&
                    "range" === a.config.mode &&
                    1 === a.selectedDates.length &&
                    a.clear(!1));
              }
            }
            function P(e) {
              if (
                !(
                  !e ||
                  (a.config.minDate && e < a.config.minDate.getFullYear()) ||
                  (a.config.maxDate && e > a.config.maxDate.getFullYear())
                )
              ) {
                var t = a.currentYear !== e;
                (a.currentYear = e || a.currentYear),
                  a.config.maxDate &&
                  a.currentYear === a.config.maxDate.getFullYear()
                    ? (a.currentMonth = Math.min(
                        a.config.maxDate.getMonth(),
                        a.currentMonth
                      ))
                    : a.config.minDate &&
                      a.currentYear === a.config.minDate.getFullYear() &&
                      (a.currentMonth = Math.max(
                        a.config.minDate.getMonth(),
                        a.currentMonth
                      )),
                  t && (a.redraw(), $("onYearChange"), C());
              }
            }
            function M(e, t) {
              void 0 === t && (t = !0);
              var i,
                n = a.parseDate(e, void 0, t);
              if (
                (a.config.minDate &&
                  n &&
                  0 >
                    o$(
                      n,
                      a.config.minDate,
                      void 0 !== t ? t : !a.minDateHasTime
                    )) ||
                (a.config.maxDate &&
                  n &&
                  o$(
                    n,
                    a.config.maxDate,
                    void 0 !== t ? t : !a.maxDateHasTime
                  ) > 0)
              )
                return !1;
              if (!a.config.enable && 0 === a.config.disable.length) return !0;
              if (void 0 === n) return !1;
              for (
                var s = !!a.config.enable,
                  o =
                    null !== (i = a.config.enable) && void 0 !== i
                      ? i
                      : a.config.disable,
                  r = 0,
                  l = void 0;
                r < o.length;
                r++
              ) {
                if (
                  ("function" == typeof (l = o[r]) && l(n)) ||
                  (l instanceof Date &&
                    void 0 !== n &&
                    l.getTime() === n.getTime())
                )
                  return s;
                if ("string" == typeof l) {
                  var c = a.parseDate(l, void 0, !0);
                  return c && c.getTime() === n.getTime() ? s : !s;
                }
                if (
                  "object" == typeof l &&
                  void 0 !== n &&
                  l.from &&
                  l.to &&
                  n.getTime() >= l.from.getTime() &&
                  n.getTime() <= l.to.getTime()
                )
                  return s;
              }
              return !s;
            }
            function _(e) {
              return (
                void 0 !== a.daysContainer &&
                -1 === e.className.indexOf("hidden") &&
                -1 === e.className.indexOf("flatpickr-disabled") &&
                a.daysContainer.contains(e)
              );
            }
            function D(e) {
              var t = e.target === a._input,
                i = a._input.value.trimEnd() !== J();
              t &&
                i &&
                !(e.relatedTarget && O(e.relatedTarget)) &&
                a.setDate(
                  a._input.value,
                  !0,
                  e.target === a.altInput
                    ? a.config.altFormat
                    : a.config.dateFormat
                );
            }
            function E(t) {
              var i = oX(t),
                s = a.config.wrap ? e.contains(i) : i === a._input,
                o = a.config.allowInput,
                c = a.isOpen && (!o || !s),
                h = a.config.inline && s && !o;
              if (13 === t.keyCode && s) {
                if (o)
                  return (
                    a.setDate(
                      a._input.value,
                      !0,
                      i === a.altInput
                        ? a.config.altFormat
                        : a.config.dateFormat
                    ),
                    a.close(),
                    i.blur()
                  );
                a.open();
              } else if (O(i) || c || h) {
                var d = !!a.timeContainer && a.timeContainer.contains(i);
                switch (t.keyCode) {
                  case 13:
                    d ? (t.preventDefault(), r(), R()) : V(t);
                    break;
                  case 27:
                    t.preventDefault(), R();
                    break;
                  case 8:
                  case 46:
                    s &&
                      !a.config.allowInput &&
                      (t.preventDefault(), a.clear());
                    break;
                  case 37:
                  case 39:
                    if (d || s) a.hourElement && a.hourElement.focus();
                    else {
                      t.preventDefault();
                      var u = n();
                      if (
                        void 0 !== a.daysContainer &&
                        (!1 === o || (u && _(u)))
                      ) {
                        var g = 39 === t.keyCode ? 1 : -1;
                        t.ctrlKey
                          ? (t.stopPropagation(), L(g), y(v(1), 0))
                          : y(void 0, g);
                      }
                    }
                    break;
                  case 38:
                  case 40:
                    t.preventDefault();
                    var p = 40 === t.keyCode ? 1 : -1;
                    (a.daysContainer && void 0 !== i.$i) ||
                    i === a.input ||
                    i === a.altInput
                      ? t.ctrlKey
                        ? (t.stopPropagation(),
                          P(a.currentYear - p),
                          y(v(1), 0))
                        : d || y(void 0, 7 * p)
                      : i === a.currentYearElement
                      ? P(a.currentYear - p)
                      : a.config.enableTime &&
                        (!d && a.hourElement && a.hourElement.focus(),
                        r(t),
                        a._debouncedChange());
                    break;
                  case 9:
                    if (d) {
                      var f = [
                          a.hourElement,
                          a.minuteElement,
                          a.secondElement,
                          a.amPM
                        ]
                          .concat(a.pluginElements)
                          .filter(function (e) {
                            return e;
                          }),
                        m = f.indexOf(i);
                      if (-1 !== m) {
                        var x = f[m + (t.shiftKey ? -1 : 1)];
                        t.preventDefault(), (x || a._input).focus();
                      }
                    } else
                      !a.config.noCalendar &&
                        a.daysContainer &&
                        a.daysContainer.contains(i) &&
                        t.shiftKey &&
                        (t.preventDefault(), a._input.focus());
                }
              }
              if (void 0 !== a.amPM && i === a.amPM)
                switch (t.key) {
                  case a.l10n.amPM[0].charAt(0):
                  case a.l10n.amPM[0].charAt(0).toLowerCase():
                    (a.amPM.textContent = a.l10n.amPM[0]), l(), K();
                    break;
                  case a.l10n.amPM[1].charAt(0):
                  case a.l10n.amPM[1].charAt(0).toLowerCase():
                    (a.amPM.textContent = a.l10n.amPM[1]), l(), K();
                }
              (s || O(i)) && $("onKeyDown", t);
            }
            function I(e, t) {
              if (
                (void 0 === t && (t = "flatpickr-day"),
                !(
                  1 !== a.selectedDates.length ||
                  (e &&
                    (!e.classList.contains(t) ||
                      e.classList.contains("flatpickr-disabled")))
                ))
              ) {
                for (
                  var i = e
                      ? e.dateObj.getTime()
                      : a.days.firstElementChild.dateObj.getTime(),
                    n = a.parseDate(a.selectedDates[0], void 0, !0).getTime(),
                    s = Math.min(i, a.selectedDates[0].getTime()),
                    o = Math.max(i, a.selectedDates[0].getTime()),
                    r = !1,
                    l = 0,
                    c = 0,
                    h = s;
                  h < o;
                  h += oZ.DAY
                )
                  !M(new Date(h), !0) &&
                    ((r = r || (h > s && h < o)),
                    h < n && (!l || h > l)
                      ? (l = h)
                      : h > n && (!c || h < c) && (c = h));
                Array.from(
                  a.rContainer.querySelectorAll(
                    "*:nth-child(-n+" + a.config.showMonths + ") > ." + t
                  )
                ).forEach(function (t) {
                  var s,
                    o,
                    h,
                    d = t.dateObj.getTime(),
                    u = (l > 0 && d < l) || (c > 0 && d > c);
                  if (u) {
                    t.classList.add("notAllowed"),
                      ["inRange", "startRange", "endRange"].forEach(function (
                        e
                      ) {
                        t.classList.remove(e);
                      });
                    return;
                  }
                  (!r || u) &&
                    ([
                      "startRange",
                      "inRange",
                      "endRange",
                      "notAllowed"
                    ].forEach(function (e) {
                      t.classList.remove(e);
                    }),
                    void 0 !== e &&
                      (e.classList.add(
                        i <= a.selectedDates[0].getTime()
                          ? "startRange"
                          : "endRange"
                      ),
                      n < i && d === n
                        ? t.classList.add("startRange")
                        : n > i && d === n && t.classList.add("endRange"),
                      d >= l &&
                        (0 === c || d <= c) &&
                        (s = d) > Math.min((o = n), (h = i)) &&
                        s < Math.max(o, h) &&
                        t.classList.add("inRange")));
                });
              }
            }
            function H() {
              !a.isOpen || a.config.static || a.config.inline || X();
            }
            function F(e) {
              return function (t) {
                var i = (a.config["_" + e + "Date"] = a.parseDate(
                    t,
                    a.config.dateFormat
                  )),
                  n = a.config["_" + ("min" === e ? "max" : "min") + "Date"];
                void 0 !== i &&
                  (a["min" === e ? "minDateHasTime" : "maxDateHasTime"] =
                    i.getHours() > 0 ||
                    i.getMinutes() > 0 ||
                    i.getSeconds() > 0),
                  a.selectedDates &&
                    ((a.selectedDates = a.selectedDates.filter(function (e) {
                      return M(e);
                    })),
                    a.selectedDates.length || "min" !== e || c(i),
                    K()),
                  a.daysContainer &&
                    (N(),
                    void 0 !== i
                      ? (a.currentYearElement[e] = i.getFullYear().toString())
                      : a.currentYearElement.removeAttribute(e),
                    (a.currentYearElement.disabled =
                      !!n &&
                      void 0 !== i &&
                      n.getFullYear() === i.getFullYear()));
              };
            }
            function z() {
              return a.config.wrap ? e.querySelector("[data-input]") : e;
            }
            function Y() {
              "object" != typeof a.config.locale &&
                void 0 === o1.l10ns[a.config.locale] &&
                a.config.errorHandler(
                  Error("flatpickr: invalid locale " + a.config.locale)
                ),
                (a.l10n = oK(
                  oK({}, o1.l10ns.default),
                  "object" == typeof a.config.locale
                    ? a.config.locale
                    : "default" !== a.config.locale
                    ? o1.l10ns[a.config.locale]
                    : void 0
                )),
                (oW.D = "(" + a.l10n.weekdays.shorthand.join("|") + ")"),
                (oW.l = "(" + a.l10n.weekdays.longhand.join("|") + ")"),
                (oW.M = "(" + a.l10n.months.shorthand.join("|") + ")"),
                (oW.F = "(" + a.l10n.months.longhand.join("|") + ")"),
                (oW.K =
                  "(" +
                  a.l10n.amPM[0] +
                  "|" +
                  a.l10n.amPM[1] +
                  "|" +
                  a.l10n.amPM[0].toLowerCase() +
                  "|" +
                  a.l10n.amPM[1].toLowerCase() +
                  ")"),
                void 0 ===
                  oK(oK({}, t), JSON.parse(JSON.stringify(e.dataset || {})))
                    .time_24hr &&
                  void 0 === o1.defaultConfig.time_24hr &&
                  (a.config.time_24hr = a.l10n.time_24hr),
                (a.formatDate = oG(a)),
                (a.parseDate = oj({ config: a.config, l10n: a.l10n }));
            }
            function X(e) {
              if ("function" == typeof a.config.position)
                return void a.config.position(a, e);
              if (void 0 !== a.calendarContainer) {
                $("onPreCalendarPosition");
                var t = e || a._positionElement,
                  i = Array.prototype.reduce.call(
                    a.calendarContainer.children,
                    function (e, t) {
                      return e + t.offsetHeight;
                    },
                    0
                  ),
                  n = a.calendarContainer.offsetWidth,
                  s = a.config.position.split(" "),
                  o = s[0],
                  r = s.length > 1 ? s[1] : null,
                  l = t.getBoundingClientRect(),
                  c = window.innerHeight - l.bottom,
                  h = "above" === o || ("below" !== o && c < i && l.top > i),
                  d =
                    window.pageYOffset +
                    l.top +
                    (h ? -i - 2 : t.offsetHeight + 2);
                if (
                  (oH(a.calendarContainer, "arrowTop", !h),
                  oH(a.calendarContainer, "arrowBottom", h),
                  !a.config.inline)
                ) {
                  var u = window.pageXOffset + l.left,
                    g = !1,
                    p = !1;
                  "center" === r
                    ? ((u -= (n - l.width) / 2), (g = !0))
                    : "right" === r && ((u -= n - l.width), (p = !0)),
                    oH(a.calendarContainer, "arrowLeft", !g && !p),
                    oH(a.calendarContainer, "arrowCenter", g),
                    oH(a.calendarContainer, "arrowRight", p);
                  var f =
                      window.document.body.offsetWidth -
                      (window.pageXOffset + l.right),
                    m = u + n > window.document.body.offsetWidth,
                    x = f + n > window.document.body.offsetWidth;
                  if (
                    (oH(a.calendarContainer, "rightMost", m), !a.config.static)
                  ) {
                    if (((a.calendarContainer.style.top = d + "px"), m)) {
                      if (x) {
                        var b = (function () {
                          for (
                            var e = null, t = 0;
                            t < document.styleSheets.length;
                            t++
                          ) {
                            var i = document.styleSheets[t];
                            if (i.cssRules) {
                              try {
                                i.cssRules;
                              } catch (e) {
                                continue;
                              }
                              e = i;
                              break;
                            }
                          }
                          return null != e
                            ? e
                            : (function () {
                                var e = document.createElement("style");
                                return document.head.appendChild(e), e.sheet;
                              })();
                        })();
                        if (void 0 === b) return;
                        var v = Math.max(
                            0,
                            window.document.body.offsetWidth / 2 - n / 2
                          ),
                          y = b.cssRules.length,
                          w = "{left:" + l.left + "px;right:auto;}";
                        oH(a.calendarContainer, "rightMost", !1),
                          oH(a.calendarContainer, "centerMost", !0),
                          b.insertRule(
                            ".flatpickr-calendar.centerMost:before,.flatpickr-calendar.centerMost:after" +
                              w,
                            y
                          ),
                          (a.calendarContainer.style.left = v + "px"),
                          (a.calendarContainer.style.right = "auto");
                      } else
                        (a.calendarContainer.style.left = "auto"),
                          (a.calendarContainer.style.right = f + "px");
                    } else
                      (a.calendarContainer.style.left = u + "px"),
                        (a.calendarContainer.style.right = "auto");
                  }
                }
              }
            }
            function N() {
              a.config.noCalendar || a.isMobile || (C(), Z(), w());
            }
            function R() {
              a._input.focus(),
                -1 !== window.navigator.userAgent.indexOf("MSIE") ||
                void 0 !== navigator.msMaxTouchPoints
                  ? setTimeout(a.close, 0)
                  : a.close();
            }
            function V(e) {
              e.preventDefault(), e.stopPropagation();
              var t = (function e(t, i) {
                return i(t) ? t : t.parentNode ? e(t.parentNode, i) : void 0;
              })(oX(e), function (e) {
                return (
                  e.classList &&
                  e.classList.contains("flatpickr-day") &&
                  !e.classList.contains("flatpickr-disabled") &&
                  !e.classList.contains("notAllowed")
                );
              });
              if (void 0 !== t) {
                var i = (a.latestSelectedDateObj = new Date(
                    t.dateObj.getTime()
                  )),
                  n =
                    (i.getMonth() < a.currentMonth ||
                      i.getMonth() >
                        a.currentMonth + a.config.showMonths - 1) &&
                    "range" !== a.config.mode;
                if (((a.selectedDateElem = t), "single" === a.config.mode))
                  a.selectedDates = [i];
                else if ("multiple" === a.config.mode) {
                  var s = q(i);
                  s
                    ? a.selectedDates.splice(parseInt(s), 1)
                    : a.selectedDates.push(i);
                } else
                  "range" === a.config.mode &&
                    (2 === a.selectedDates.length && a.clear(!1, !1),
                    (a.latestSelectedDateObj = i),
                    a.selectedDates.push(i),
                    0 !== o$(i, a.selectedDates[0], !0) &&
                      a.selectedDates.sort(function (e, t) {
                        return e.getTime() - t.getTime();
                      }));
                if ((l(), n)) {
                  var o = a.currentYear !== i.getFullYear();
                  (a.currentYear = i.getFullYear()),
                    (a.currentMonth = i.getMonth()),
                    o && ($("onYearChange"), C()),
                    $("onMonthChange");
                }
                if (
                  (Z(),
                  w(),
                  K(),
                  n || "range" === a.config.mode || 1 !== a.config.showMonths
                    ? void 0 !== a.selectedDateElem &&
                      void 0 === a.hourElement &&
                      a.selectedDateElem &&
                      a.selectedDateElem.focus()
                    : b(t),
                  void 0 !== a.hourElement &&
                    void 0 !== a.hourElement &&
                    a.hourElement.focus(),
                  a.config.closeOnSelect)
                ) {
                  var r = "single" === a.config.mode && !a.config.enableTime,
                    c =
                      "range" === a.config.mode &&
                      2 === a.selectedDates.length &&
                      !a.config.enableTime;
                  (r || c) && R();
                }
                g();
              }
            }
            (a.parseDate = oj({ config: a.config, l10n: a.l10n })),
              (a._handlers = []),
              (a.pluginElements = []),
              (a.loadedPlugins = []),
              (a._bind = u),
              (a._setHoursFromDate = c),
              (a._positionCalendar = X),
              (a.changeMonth = L),
              (a.changeYear = P),
              (a.clear = function (e, t) {
                if (
                  (void 0 === e && (e = !0),
                  void 0 === t && (t = !0),
                  (a.input.value = ""),
                  void 0 !== a.altInput && (a.altInput.value = ""),
                  void 0 !== a.mobileInput && (a.mobileInput.value = ""),
                  (a.selectedDates = []),
                  (a.latestSelectedDateObj = void 0),
                  !0 === t &&
                    ((a.currentYear = a._initialDate.getFullYear()),
                    (a.currentMonth = a._initialDate.getMonth())),
                  !0 === a.config.enableTime)
                ) {
                  var i = oJ(a.config);
                  h(i.hours, i.minutes, i.seconds);
                }
                a.redraw(), e && $("onChange");
              }),
              (a.close = function () {
                (a.isOpen = !1),
                  a.isMobile ||
                    (void 0 !== a.calendarContainer &&
                      a.calendarContainer.classList.remove("open"),
                    void 0 !== a._input && a._input.classList.remove("active")),
                  $("onClose");
              }),
              (a.onMouseOver = I),
              (a._createElement = oF),
              (a.createDay = x),
              (a.destroy = function () {
                void 0 !== a.config && $("onDestroy");
                for (var e = a._handlers.length; e--; ) a._handlers[e].remove();
                if (((a._handlers = []), a.mobileInput))
                  a.mobileInput.parentNode &&
                    a.mobileInput.parentNode.removeChild(a.mobileInput),
                    (a.mobileInput = void 0);
                else if (
                  a.calendarContainer &&
                  a.calendarContainer.parentNode
                ) {
                  if (a.config.static && a.calendarContainer.parentNode) {
                    var t = a.calendarContainer.parentNode;
                    if (
                      (t.lastChild && t.removeChild(t.lastChild), t.parentNode)
                    ) {
                      for (; t.firstChild; )
                        t.parentNode.insertBefore(t.firstChild, t);
                      t.parentNode.removeChild(t);
                    }
                  } else
                    a.calendarContainer.parentNode.removeChild(
                      a.calendarContainer
                    );
                }
                a.altInput &&
                  ((a.input.type = "text"),
                  a.altInput.parentNode &&
                    a.altInput.parentNode.removeChild(a.altInput),
                  delete a.altInput),
                  a.input &&
                    ((a.input.type = a.input._type),
                    a.input.classList.remove("flatpickr-input"),
                    a.input.removeAttribute("readonly")),
                  [
                    "_showTimeInput",
                    "latestSelectedDateObj",
                    "_hideNextMonthArrow",
                    "_hidePrevMonthArrow",
                    "__hideNextMonthArrow",
                    "__hidePrevMonthArrow",
                    "isMobile",
                    "isOpen",
                    "selectedDateElem",
                    "minDateHasTime",
                    "maxDateHasTime",
                    "days",
                    "daysContainer",
                    "_input",
                    "_positionElement",
                    "innerContainer",
                    "rContainer",
                    "monthNav",
                    "todayDateElem",
                    "calendarContainer",
                    "weekdayContainer",
                    "prevMonthNav",
                    "nextMonthNav",
                    "monthsDropdownContainer",
                    "currentMonthElement",
                    "currentYearElement",
                    "navigationCurrentMonth",
                    "selectedDateElem",
                    "config"
                  ].forEach(function (e) {
                    try {
                      delete a[e];
                    } catch (e) {}
                  });
              }),
              (a.isEnabled = M),
              (a.jumpToDate = p),
              (a.updateValue = K),
              (a.open = function (e, t) {
                if (
                  (void 0 === t && (t = a._positionElement), !0 === a.isMobile)
                ) {
                  if (e) {
                    e.preventDefault();
                    var i = oX(e);
                    i && i.blur();
                  }
                  void 0 !== a.mobileInput &&
                    (a.mobileInput.focus(), a.mobileInput.click()),
                    $("onOpen");
                  return;
                }
                if (!a._input.disabled && !a.config.inline) {
                  var n = a.isOpen;
                  (a.isOpen = !0),
                    n ||
                      (a.calendarContainer.classList.add("open"),
                      a._input.classList.add("active"),
                      $("onOpen"),
                      X(t)),
                    !0 !== a.config.enableTime ||
                      !0 !== a.config.noCalendar ||
                      !1 !== a.config.allowInput ||
                      (void 0 !== e &&
                        a.timeContainer.contains(e.relatedTarget)) ||
                      setTimeout(function () {
                        return a.hourElement.select();
                      }, 50);
                }
              }),
              (a.redraw = N),
              (a.set = function (e, t) {
                if (null !== e && "object" == typeof e)
                  for (var i in (Object.assign(a.config, e), e))
                    void 0 !== W[i] &&
                      W[i].forEach(function (e) {
                        return e();
                      });
                else
                  (a.config[e] = t),
                    void 0 !== W[e]
                      ? W[e].forEach(function (e) {
                          return e();
                        })
                      : oT.indexOf(e) > -1 && (a.config[e] = oI(t));
                a.redraw(), K(!0);
              }),
              (a.setDate = function (e, t, i) {
                if (
                  (void 0 === t && (t = !1),
                  void 0 === i && (i = a.config.dateFormat),
                  (0 !== e && !e) || (e instanceof Array && 0 === e.length))
                )
                  return a.clear(t);
                B(e, i),
                  (a.latestSelectedDateObj =
                    a.selectedDates[a.selectedDates.length - 1]),
                  a.redraw(),
                  p(void 0, t),
                  c(),
                  0 === a.selectedDates.length && a.clear(!1),
                  K(t),
                  t && $("onChange");
              }),
              (a.toggle = function (e) {
                if (!0 === a.isOpen) return a.close();
                a.open(e);
              });
            var W = {
              locale: [Y, S],
              showMonths: [k, o, A],
              minDate: [p],
              maxDate: [p],
              positionElement: [j],
              clickOpens: [
                function () {
                  !0 === a.config.clickOpens
                    ? (u(a._input, "focus", a.open),
                      u(a._input, "click", a.open))
                    : (a._input.removeEventListener("focus", a.open),
                      a._input.removeEventListener("click", a.open));
                }
              ]
            };
            function B(e, t) {
              var i = [];
              if (e instanceof Array)
                i = e.map(function (e) {
                  return a.parseDate(e, t);
                });
              else if (e instanceof Date || "number" == typeof e)
                i = [a.parseDate(e, t)];
              else if ("string" == typeof e)
                switch (a.config.mode) {
                  case "single":
                  case "time":
                    i = [a.parseDate(e, t)];
                    break;
                  case "multiple":
                    i = e.split(a.config.conjunction).map(function (e) {
                      return a.parseDate(e, t);
                    });
                    break;
                  case "range":
                    i = e.split(a.l10n.rangeSeparator).map(function (e) {
                      return a.parseDate(e, t);
                    });
                }
              else
                a.config.errorHandler(
                  Error("Invalid date supplied: " + JSON.stringify(e))
                );
              (a.selectedDates = a.config.allowInvalidPreload
                ? i
                : i.filter(function (e) {
                    return e instanceof Date && M(e, !1);
                  })),
                "range" === a.config.mode &&
                  a.selectedDates.sort(function (e, t) {
                    return e.getTime() - t.getTime();
                  });
            }
            function G(e) {
              return e
                .slice()
                .map(function (e) {
                  return "string" == typeof e ||
                    "number" == typeof e ||
                    e instanceof Date
                    ? a.parseDate(e, void 0, !0)
                    : e && "object" == typeof e && e.from && e.to
                    ? {
                        from: a.parseDate(e.from, void 0),
                        to: a.parseDate(e.to, void 0)
                      }
                    : e;
                })
                .filter(function (e) {
                  return e;
                });
            }
            function j() {
              a._positionElement = a.config.positionElement || a._input;
            }
            function $(e, t) {
              if (void 0 !== a.config) {
                var i = a.config[e];
                if (void 0 !== i && i.length > 0)
                  for (var n = 0; i[n] && n < i.length; n++)
                    i[n](a.selectedDates, a.input.value, a, t);
                "onChange" === e &&
                  (a.input.dispatchEvent(U("change")),
                  a.input.dispatchEvent(U("input")));
              }
            }
            function U(e) {
              var t = document.createEvent("Event");
              return t.initEvent(e, !0, !0), t;
            }
            function q(e) {
              for (var t = 0; t < a.selectedDates.length; t++) {
                var i = a.selectedDates[t];
                if (i instanceof Date && 0 === o$(i, e)) return "" + t;
              }
              return !1;
            }
            function Z() {
              a.config.noCalendar ||
                a.isMobile ||
                !a.monthNav ||
                (a.yearElements.forEach(function (e, t) {
                  var i = new Date(a.currentYear, a.currentMonth, 1);
                  i.setMonth(a.currentMonth + t),
                    a.config.showMonths > 1 ||
                    "static" === a.config.monthSelectorType
                      ? (a.monthElements[t].textContent =
                          oR(
                            i.getMonth(),
                            a.config.shorthandCurrentMonth,
                            a.l10n
                          ) + " ")
                      : (a.monthsDropdownContainer.value = i
                          .getMonth()
                          .toString()),
                    (e.value = i.getFullYear().toString());
                }),
                (a._hidePrevMonthArrow =
                  void 0 !== a.config.minDate &&
                  (a.currentYear === a.config.minDate.getFullYear()
                    ? a.currentMonth <= a.config.minDate.getMonth()
                    : a.currentYear < a.config.minDate.getFullYear())),
                (a._hideNextMonthArrow =
                  void 0 !== a.config.maxDate &&
                  (a.currentYear === a.config.maxDate.getFullYear()
                    ? a.currentMonth + 1 > a.config.maxDate.getMonth()
                    : a.currentYear > a.config.maxDate.getFullYear())));
            }
            function J(e) {
              var t =
                e ||
                (a.config.altInput ? a.config.altFormat : a.config.dateFormat);
              return a.selectedDates
                .map(function (e) {
                  return a.formatDate(e, t);
                })
                .filter(function (e, t, i) {
                  return (
                    "range" !== a.config.mode ||
                    a.config.enableTime ||
                    i.indexOf(e) === t
                  );
                })
                .join(
                  "range" !== a.config.mode
                    ? a.config.conjunction
                    : a.l10n.rangeSeparator
                );
            }
            function K(e) {
              void 0 === e && (e = !0),
                void 0 !== a.mobileInput &&
                  a.mobileFormatStr &&
                  (a.mobileInput.value =
                    void 0 !== a.latestSelectedDateObj
                      ? a.formatDate(a.latestSelectedDateObj, a.mobileFormatStr)
                      : ""),
                (a.input.value = J(a.config.dateFormat)),
                void 0 !== a.altInput &&
                  (a.altInput.value = J(a.config.altFormat)),
                !1 !== e && $("onValueUpdate");
            }
            function Q(e) {
              var t = oX(e),
                i = a.prevMonthNav.contains(t),
                n = a.nextMonthNav.contains(t);
              i || n
                ? L(i ? -1 : 1)
                : a.yearElements.indexOf(t) >= 0
                ? t.select()
                : t.classList.contains("arrowUp")
                ? a.changeYear(a.currentYear + 1)
                : t.classList.contains("arrowDown") &&
                  a.changeYear(a.currentYear - 1);
            }
            return (
              (a.element = a.input = e),
              (a.isOpen = !1),
              (function () {
                var i = [
                    "wrap",
                    "weekNumbers",
                    "allowInput",
                    "allowInvalidPreload",
                    "clickOpens",
                    "time_24hr",
                    "enableTime",
                    "noCalendar",
                    "altInput",
                    "shorthandCurrentMonth",
                    "inline",
                    "static",
                    "enableSeconds",
                    "disableMobile"
                  ],
                  n = oK(
                    oK({}, JSON.parse(JSON.stringify(e.dataset || {}))),
                    t
                  ),
                  o = {};
                (a.config.parseDate = n.parseDate),
                  (a.config.formatDate = n.formatDate),
                  Object.defineProperty(a.config, "enable", {
                    get: function () {
                      return a.config._enable;
                    },
                    set: function (e) {
                      a.config._enable = G(e);
                    }
                  }),
                  Object.defineProperty(a.config, "disable", {
                    get: function () {
                      return a.config._disable;
                    },
                    set: function (e) {
                      a.config._disable = G(e);
                    }
                  });
                var r = "time" === n.mode;
                if (!n.dateFormat && (n.enableTime || r)) {
                  var l = o1.defaultConfig.dateFormat || oP.dateFormat;
                  o.dateFormat =
                    n.noCalendar || r
                      ? "H:i" + (n.enableSeconds ? ":S" : "")
                      : l + " H:i" + (n.enableSeconds ? ":S" : "");
                }
                if (n.altInput && (n.enableTime || r) && !n.altFormat) {
                  var c = o1.defaultConfig.altFormat || oP.altFormat;
                  o.altFormat =
                    n.noCalendar || r
                      ? "h:i" + (n.enableSeconds ? ":S K" : " K")
                      : c + " h:i" + (n.enableSeconds ? ":S" : "") + " K";
                }
                Object.defineProperty(a.config, "minDate", {
                  get: function () {
                    return a.config._minDate;
                  },
                  set: F("min")
                }),
                  Object.defineProperty(a.config, "maxDate", {
                    get: function () {
                      return a.config._maxDate;
                    },
                    set: F("max")
                  });
                var h = function (e) {
                  return function (t) {
                    a.config["min" === e ? "_minTime" : "_maxTime"] =
                      a.parseDate(t, "H:i:S");
                  };
                };
                Object.defineProperty(a.config, "minTime", {
                  get: function () {
                    return a.config._minTime;
                  },
                  set: h("min")
                }),
                  Object.defineProperty(a.config, "maxTime", {
                    get: function () {
                      return a.config._maxTime;
                    },
                    set: h("max")
                  }),
                  "time" === n.mode &&
                    ((a.config.noCalendar = !0), (a.config.enableTime = !0)),
                  Object.assign(a.config, o, n);
                for (var d = 0; d < i.length; d++)
                  a.config[i[d]] =
                    !0 === a.config[i[d]] || "true" === a.config[i[d]];
                oT
                  .filter(function (e) {
                    return void 0 !== a.config[e];
                  })
                  .forEach(function (e) {
                    a.config[e] = oI(a.config[e] || []).map(s);
                  }),
                  (a.isMobile =
                    !a.config.disableMobile &&
                    !a.config.inline &&
                    "single" === a.config.mode &&
                    !a.config.disable.length &&
                    !a.config.enable &&
                    !a.config.weekNumbers &&
                    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
                      navigator.userAgent
                    ));
                for (var d = 0; d < a.config.plugins.length; d++) {
                  var u = a.config.plugins[d](a) || {};
                  for (var g in u)
                    oT.indexOf(g) > -1
                      ? (a.config[g] = oI(u[g]).map(s).concat(a.config[g]))
                      : void 0 === n[g] && (a.config[g] = u[g]);
                }
                n.altInputClass ||
                  (a.config.altInputClass =
                    z().className + " " + a.config.altInputClass),
                  $("onParseConfig");
              })(),
              Y(),
              (function () {
                if (((a.input = z()), !a.input)) {
                  a.config.errorHandler(
                    Error("Invalid input element specified")
                  );
                  return;
                }
                (a.input._type = a.input.type),
                  (a.input.type = "text"),
                  a.input.classList.add("flatpickr-input"),
                  (a._input = a.input),
                  a.config.altInput &&
                    ((a.altInput = oF(
                      a.input.nodeName,
                      a.config.altInputClass
                    )),
                    (a._input = a.altInput),
                    (a.altInput.placeholder = a.input.placeholder),
                    (a.altInput.disabled = a.input.disabled),
                    (a.altInput.required = a.input.required),
                    (a.altInput.tabIndex = a.input.tabIndex),
                    (a.altInput.type = "text"),
                    a.input.setAttribute("type", "hidden"),
                    !a.config.static &&
                      a.input.parentNode &&
                      a.input.parentNode.insertBefore(
                        a.altInput,
                        a.input.nextSibling
                      )),
                  a.config.allowInput ||
                    a._input.setAttribute("readonly", "readonly"),
                  j();
              })(),
              (function () {
                (a.selectedDates = []),
                  (a.now = a.parseDate(a.config.now) || new Date());
                var e =
                  a.config.defaultDate ||
                  (("INPUT" === a.input.nodeName ||
                    "TEXTAREA" === a.input.nodeName) &&
                  a.input.placeholder &&
                  a.input.value === a.input.placeholder
                    ? null
                    : a.input.value);
                e && B(e, a.config.dateFormat),
                  (a._initialDate =
                    a.selectedDates.length > 0
                      ? a.selectedDates[0]
                      : a.config.minDate &&
                        a.config.minDate.getTime() > a.now.getTime()
                      ? a.config.minDate
                      : a.config.maxDate &&
                        a.config.maxDate.getTime() < a.now.getTime()
                      ? a.config.maxDate
                      : a.now),
                  (a.currentYear = a._initialDate.getFullYear()),
                  (a.currentMonth = a._initialDate.getMonth()),
                  a.selectedDates.length > 0 &&
                    (a.latestSelectedDateObj = a.selectedDates[0]),
                  void 0 !== a.config.minTime &&
                    (a.config.minTime = a.parseDate(a.config.minTime, "H:i")),
                  void 0 !== a.config.maxTime &&
                    (a.config.maxTime = a.parseDate(a.config.maxTime, "H:i")),
                  (a.minDateHasTime =
                    !!a.config.minDate &&
                    (a.config.minDate.getHours() > 0 ||
                      a.config.minDate.getMinutes() > 0 ||
                      a.config.minDate.getSeconds() > 0)),
                  (a.maxDateHasTime =
                    !!a.config.maxDate &&
                    (a.config.maxDate.getHours() > 0 ||
                      a.config.maxDate.getMinutes() > 0 ||
                      a.config.maxDate.getSeconds() > 0));
              })(),
              (a.utils = {
                getDaysInMonth: function (e, t) {
                  return (void 0 === e && (e = a.currentMonth),
                  void 0 === t && (t = a.currentYear),
                  1 === e && ((t % 4 == 0 && t % 100 != 0) || t % 400 == 0))
                    ? 29
                    : a.l10n.daysInMonth[e];
                }
              }),
              a.isMobile ||
                (function () {
                  var e = window.document.createDocumentFragment();
                  if (
                    ((a.calendarContainer = oF("div", "flatpickr-calendar")),
                    (a.calendarContainer.tabIndex = -1),
                    !a.config.noCalendar)
                  ) {
                    if (
                      (e.appendChild(
                        ((a.monthNav = oF("div", "flatpickr-months")),
                        (a.yearElements = []),
                        (a.monthElements = []),
                        (a.prevMonthNav = oF("span", "flatpickr-prev-month")),
                        (a.prevMonthNav.innerHTML = a.config.prevArrow),
                        (a.nextMonthNav = oF("span", "flatpickr-next-month")),
                        (a.nextMonthNav.innerHTML = a.config.nextArrow),
                        k(),
                        Object.defineProperty(a, "_hidePrevMonthArrow", {
                          get: function () {
                            return a.__hidePrevMonthArrow;
                          },
                          set: function (e) {
                            a.__hidePrevMonthArrow !== e &&
                              (oH(a.prevMonthNav, "flatpickr-disabled", e),
                              (a.__hidePrevMonthArrow = e));
                          }
                        }),
                        Object.defineProperty(a, "_hideNextMonthArrow", {
                          get: function () {
                            return a.__hideNextMonthArrow;
                          },
                          set: function (e) {
                            a.__hideNextMonthArrow !== e &&
                              (oH(a.nextMonthNav, "flatpickr-disabled", e),
                              (a.__hideNextMonthArrow = e));
                          }
                        }),
                        (a.currentYearElement = a.yearElements[0]),
                        Z(),
                        a.monthNav)
                      ),
                      (a.innerContainer = oF(
                        "div",
                        "flatpickr-innerContainer"
                      )),
                      a.config.weekNumbers)
                    ) {
                      var t = (function () {
                          a.calendarContainer.classList.add("hasWeeks");
                          var e = oF("div", "flatpickr-weekwrapper");
                          e.appendChild(
                            oF(
                              "span",
                              "flatpickr-weekday",
                              a.l10n.weekAbbreviation
                            )
                          );
                          var t = oF("div", "flatpickr-weeks");
                          return (
                            e.appendChild(t), { weekWrapper: e, weekNumbers: t }
                          );
                        })(),
                        i = t.weekWrapper,
                        n = t.weekNumbers;
                      a.innerContainer.appendChild(i),
                        (a.weekNumbers = n),
                        (a.weekWrapper = i);
                    }
                    (a.rContainer = oF("div", "flatpickr-rContainer")),
                      a.rContainer.appendChild(A()),
                      a.daysContainer ||
                        ((a.daysContainer = oF("div", "flatpickr-days")),
                        (a.daysContainer.tabIndex = -1)),
                      w(),
                      a.rContainer.appendChild(a.daysContainer),
                      a.innerContainer.appendChild(a.rContainer),
                      e.appendChild(a.innerContainer);
                  }
                  a.config.enableTime &&
                    e.appendChild(
                      (function () {
                        a.calendarContainer.classList.add("hasTime"),
                          a.config.noCalendar &&
                            a.calendarContainer.classList.add("noCalendar");
                        var e = oJ(a.config);
                        (a.timeContainer = oF("div", "flatpickr-time")),
                          (a.timeContainer.tabIndex = -1);
                        var t = oF("span", "flatpickr-time-separator", ":"),
                          i = oY("flatpickr-hour", {
                            "aria-label": a.l10n.hourAriaLabel
                          });
                        a.hourElement = i.getElementsByTagName("input")[0];
                        var n = oY("flatpickr-minute", {
                          "aria-label": a.l10n.minuteAriaLabel
                        });
                        if (
                          ((a.minuteElement =
                            n.getElementsByTagName("input")[0]),
                          (a.hourElement.tabIndex = a.minuteElement.tabIndex =
                            -1),
                          (a.hourElement.value = o_(
                            a.latestSelectedDateObj
                              ? a.latestSelectedDateObj.getHours()
                              : a.config.time_24hr
                              ? e.hours
                              : (function (e) {
                                  switch (e % 24) {
                                    case 0:
                                    case 12:
                                      return 12;
                                    default:
                                      return e % 12;
                                  }
                                })(e.hours)
                          )),
                          (a.minuteElement.value = o_(
                            a.latestSelectedDateObj
                              ? a.latestSelectedDateObj.getMinutes()
                              : e.minutes
                          )),
                          a.hourElement.setAttribute(
                            "step",
                            a.config.hourIncrement.toString()
                          ),
                          a.minuteElement.setAttribute(
                            "step",
                            a.config.minuteIncrement.toString()
                          ),
                          a.hourElement.setAttribute(
                            "min",
                            a.config.time_24hr ? "0" : "1"
                          ),
                          a.hourElement.setAttribute(
                            "max",
                            a.config.time_24hr ? "23" : "12"
                          ),
                          a.hourElement.setAttribute("maxlength", "2"),
                          a.minuteElement.setAttribute("min", "0"),
                          a.minuteElement.setAttribute("max", "59"),
                          a.minuteElement.setAttribute("maxlength", "2"),
                          a.timeContainer.appendChild(i),
                          a.timeContainer.appendChild(t),
                          a.timeContainer.appendChild(n),
                          a.config.time_24hr &&
                            a.timeContainer.classList.add("time24hr"),
                          a.config.enableSeconds)
                        ) {
                          a.timeContainer.classList.add("hasSeconds");
                          var s = oY("flatpickr-second");
                          (a.secondElement =
                            s.getElementsByTagName("input")[0]),
                            (a.secondElement.value = o_(
                              a.latestSelectedDateObj
                                ? a.latestSelectedDateObj.getSeconds()
                                : e.seconds
                            )),
                            a.secondElement.setAttribute(
                              "step",
                              a.minuteElement.getAttribute("step")
                            ),
                            a.secondElement.setAttribute("min", "0"),
                            a.secondElement.setAttribute("max", "59"),
                            a.secondElement.setAttribute("maxlength", "2"),
                            a.timeContainer.appendChild(
                              oF("span", "flatpickr-time-separator", ":")
                            ),
                            a.timeContainer.appendChild(s);
                        }
                        return (
                          a.config.time_24hr ||
                            ((a.amPM = oF(
                              "span",
                              "flatpickr-am-pm",
                              a.l10n.amPM[
                                oD(
                                  (a.latestSelectedDateObj
                                    ? a.hourElement.value
                                    : a.config.defaultHour) > 11
                                )
                              ]
                            )),
                            (a.amPM.title = a.l10n.toggleTitle),
                            (a.amPM.tabIndex = -1),
                            a.timeContainer.appendChild(a.amPM)),
                          a.timeContainer
                        );
                      })()
                    ),
                    oH(
                      a.calendarContainer,
                      "rangeMode",
                      "range" === a.config.mode
                    ),
                    oH(a.calendarContainer, "animate", !0 === a.config.animate),
                    oH(
                      a.calendarContainer,
                      "multiMonth",
                      a.config.showMonths > 1
                    ),
                    a.calendarContainer.appendChild(e);
                  var s =
                    void 0 !== a.config.appendTo &&
                    void 0 !== a.config.appendTo.nodeType;
                  if (
                    (a.config.inline || a.config.static) &&
                    (a.calendarContainer.classList.add(
                      a.config.inline ? "inline" : "static"
                    ),
                    a.config.inline &&
                      (!s && a.element.parentNode
                        ? a.element.parentNode.insertBefore(
                            a.calendarContainer,
                            a._input.nextSibling
                          )
                        : void 0 !== a.config.appendTo &&
                          a.config.appendTo.appendChild(a.calendarContainer)),
                    a.config.static)
                  ) {
                    var o = oF("div", "flatpickr-wrapper");
                    a.element.parentNode &&
                      a.element.parentNode.insertBefore(o, a.element),
                      o.appendChild(a.element),
                      a.altInput && o.appendChild(a.altInput),
                      o.appendChild(a.calendarContainer);
                  }
                  a.config.static ||
                    a.config.inline ||
                    (void 0 !== a.config.appendTo
                      ? a.config.appendTo
                      : window.document.body
                    ).appendChild(a.calendarContainer);
                })(),
              (function () {
                if (
                  (a.config.wrap &&
                    ["open", "close", "toggle", "clear"].forEach(function (e) {
                      Array.prototype.forEach.call(
                        a.element.querySelectorAll("[data-" + e + "]"),
                        function (t) {
                          return u(t, "click", a[e]);
                        }
                      );
                    }),
                  a.isMobile)
                ) {
                  (function () {
                    var e = a.config.enableTime
                      ? a.config.noCalendar
                        ? "time"
                        : "datetime-local"
                      : "date";
                    (a.mobileInput = oF(
                      "input",
                      a.input.className + " flatpickr-mobile"
                    )),
                      (a.mobileInput.tabIndex = 1),
                      (a.mobileInput.type = e),
                      (a.mobileInput.disabled = a.input.disabled),
                      (a.mobileInput.required = a.input.required),
                      (a.mobileInput.placeholder = a.input.placeholder),
                      (a.mobileFormatStr =
                        "datetime-local" === e
                          ? "Y-m-d\\TH:i:S"
                          : "date" === e
                          ? "Y-m-d"
                          : "H:i:S"),
                      a.selectedDates.length > 0 &&
                        (a.mobileInput.defaultValue = a.mobileInput.value =
                          a.formatDate(a.selectedDates[0], a.mobileFormatStr)),
                      a.config.minDate &&
                        (a.mobileInput.min = a.formatDate(
                          a.config.minDate,
                          "Y-m-d"
                        )),
                      a.config.maxDate &&
                        (a.mobileInput.max = a.formatDate(
                          a.config.maxDate,
                          "Y-m-d"
                        )),
                      a.input.getAttribute("step") &&
                        (a.mobileInput.step = String(
                          a.input.getAttribute("step")
                        )),
                      (a.input.type = "hidden"),
                      void 0 !== a.altInput && (a.altInput.type = "hidden");
                    try {
                      a.input.parentNode &&
                        a.input.parentNode.insertBefore(
                          a.mobileInput,
                          a.input.nextSibling
                        );
                    } catch (e) {}
                    u(a.mobileInput, "change", function (e) {
                      a.setDate(oX(e).value, !1, a.mobileFormatStr),
                        $("onChange"),
                        $("onClose");
                    });
                  })();
                  return;
                }
                var e = oE(H, 50);
                (a._debouncedChange = oE(g, 300)),
                  a.daysContainer &&
                    !/iPhone|iPad|iPod/i.test(navigator.userAgent) &&
                    u(a.daysContainer, "mouseover", function (e) {
                      "range" === a.config.mode && I(oX(e));
                    }),
                  u(a._input, "keydown", E),
                  void 0 !== a.calendarContainer &&
                    u(a.calendarContainer, "keydown", E),
                  a.config.inline || a.config.static || u(window, "resize", e),
                  void 0 !== window.ontouchstart
                    ? u(window.document, "touchstart", T)
                    : u(window.document, "mousedown", T),
                  u(window.document, "focus", T, { capture: !0 }),
                  !0 === a.config.clickOpens &&
                    (u(a._input, "focus", a.open),
                    u(a._input, "click", a.open)),
                  void 0 !== a.daysContainer &&
                    (u(a.monthNav, "click", Q),
                    u(a.monthNav, ["keyup", "increment"], d),
                    u(a.daysContainer, "click", V)),
                  void 0 !== a.timeContainer &&
                    void 0 !== a.minuteElement &&
                    void 0 !== a.hourElement &&
                    (u(a.timeContainer, ["increment"], r),
                    u(a.timeContainer, "blur", r, { capture: !0 }),
                    u(a.timeContainer, "click", f),
                    u(
                      [a.hourElement, a.minuteElement],
                      ["focus", "click"],
                      function (e) {
                        return oX(e).select();
                      }
                    ),
                    void 0 !== a.secondElement &&
                      u(a.secondElement, "focus", function () {
                        return a.secondElement && a.secondElement.select();
                      }),
                    void 0 !== a.amPM &&
                      u(a.amPM, "click", function (e) {
                        r(e);
                      })),
                  a.config.allowInput && u(a._input, "blur", D);
              })(),
              (a.selectedDates.length || a.config.noCalendar) &&
                (a.config.enableTime &&
                  c(a.config.noCalendar ? a.latestSelectedDateObj : void 0),
                K(!1)),
              o(),
              (i = /^((?!chrome|android).)*safari/i.test(navigator.userAgent)),
              !a.isMobile && i && X(),
              $("onReady"),
              a
            );
          })(s, t || {})),
          a.push(s._flatpickr);
      } catch (e) {
        console.error(e);
      }
    }
    return 1 === a.length ? a[0] : a;
  }
  "undefined" != typeof HTMLElement &&
    "undefined" != typeof HTMLCollection &&
    "undefined" != typeof NodeList &&
    ((HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr =
      function (e) {
        return o0(this, e);
      }),
    (HTMLElement.prototype.flatpickr = function (e) {
      return o0([this], e);
    }));
  var o1 = function (e, t) {
    return "string" == typeof e
      ? o0(window.document.querySelectorAll(e), t)
      : e instanceof Node
      ? o0([e], t)
      : o0(e, t);
  };
  (o1.defaultConfig = {}),
    (o1.l10ns = { en: oK({}, oM), default: oK({}, oM) }),
    (o1.localize = function (e) {
      o1.l10ns.default = oK(oK({}, o1.l10ns.default), e);
    }),
    (o1.setDefaults = function (e) {
      o1.defaultConfig = oK(oK({}, o1.defaultConfig), e);
    }),
    (o1.parseDate = oj({})),
    (o1.formatDate = oG({})),
    (o1.compareDates = o$),
    "undefined" != typeof jQuery &&
      void 0 !== jQuery.fn &&
      (jQuery.fn.flatpickr = function (e) {
        return o0(this, e);
      }),
    (Date.prototype.fp_incr = function (e) {
      return new Date(
        this.getFullYear(),
        this.getMonth(),
        this.getDate() + ("string" == typeof e ? parseInt(e, 10) : e)
      );
    }),
    "undefined" != typeof window && (window.flatpickr = o1);
  var o2 = o1;
  oL = function () {
    (this.init = function (e) {
      (0, oO.default)(e, {
        enableTime: !1,
        allowInput: !0,
        wrap: !0,
        dateFormat: "M d, Y",
        position: "right"
      });
    }),
      (this.range = function (e) {
        (0, oO.default)(e, {
          enableTime: !1,
          allowInput: !0,
          wrap: !0,
          dateFormat: "M d, Y",
          mode: "range",
          defaultDate: ["Jan 23, 2022", "Jan 30, 2022"]
        });
      });
  };
  var o4 = {}; // import Choices from "choices.js";
  (o4 = function () {
    this.init = function (e) {
      new Choices(".js-choice", {
        choices: [
          {
            value: "Value 1",
            label:
              '<img src="/img/crypto/bitcoin.svg" class="w-rem-6 h-rem-6 me-2" /> Bitcoin',
            id: 1
          },
          {
            value: "Value 2",
            label: "Label 2",
            id: 2,
            customProperties: { random: "I am a custom property" }
          }
        ],
        allowHTML: !0
      });
    };
  }),
    document.addEventListener("DOMContentLoaded", () => {
      [].slice
        .call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        .map(function (e) {
          return new a9(e);
        }),
        [].slice
          .call(document.querySelectorAll('[data-bs-toggle="popover"]'))
          .map(function (e) {
            return new ne(e);
          }); // Line chart
      let e = document.querySelector("#chart-line");
      e && new nU().init(e); // Bar chart
      let t = document.querySelector("#chart-bar");
      t && new ow().init(t); // Users chart
      let i = document.querySelector("#chart-users");
      i && new oC().init(i); // Users chart
      let a = document.querySelector("#chart-crypto-price");
      a && new ok().init(a); // Spark chart
      let n = document.querySelectorAll("[data-toggle='spark-chart']");
      n &&
        Array.prototype.forEach.call(n, function (e) {
          new oS().init(e);
        }); // Datepicker
      let s = document.querySelector(".daterangepicker");
      s && new oL().range(".daterangepicker");
      let o = document.querySelector(".datepicker");
      o && new oL().init(".datepicker");
      let r = document.querySelector(".js-choice");
      r && new o4().init();
    });
})();
