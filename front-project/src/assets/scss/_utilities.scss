@use 'sass:color';

@import '~@/assets/vendor/bootstrap/scss/_functions.scss';

@import 'bootstrap/scss/variables';
@import 'bootstrap/scss/maps';
@import 'bootstrap/scss/mixins';
@import 'bootstrap/scss/utilities';


$utilities: map-merge(
  $utilities,
  (

    // Position
    'position': (
      property: position,
      responsive: true,
      values: static relative absolute fixed sticky
    ),

    // Background colors
    'background-color': map-merge(
      map-get($utilities, 'background-color'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'background-color'), 'values'),
          (
            'secondary': var(--#{$prefix}gray-100),
            'gray': var(--#{$prefix}gray-200)
          )
        )
      )
    ),

    // Background faded colors
    'background-faded-color': (
      property: background-color,
      class: bg-faded,
      local-vars: (
        'bg-opacity': .1
      ),
      values: map-remove($utilities-bg-colors, 'black', 'white', 'body')
    ),

    // Background size
    'background-size': (
      property: background-size,
      class: bg-size,
      values: (
        cover: cover,
        contain: contain
      )
    ),

    // Background position
    'background-position': (
      property: background-position,
      class: bg-position,
      values: (
        'center': center,
        'center-y': left center,
        'center-x': center top,
        'top-end': top right,
        'top-start': top left,
        'top-center': top center,
        'center-end': center right,
        'center-start': center left,
        'center-bottom': center bottom,
        'bottom-end': bottom right,
        'bottom-start': bottom left,
        'bottom-center': bottom center
      )
    ),

    // Background repeat
    'background-repeat': (
      property: background-repeat,
      class: bg-repeat,
      values: (
        0: no-repeat,
        x: repeat-x,
        y: repeat-y
      )
    ),

    // Background attachment
    'background-attachment': (
      property: background-attachment,
      class: bg-attachment,
      values: fixed
    ),

    // Disble background image
    'background-image': (
      property: background-image,
      class: bg-image,
      values: none
    ),

    // Border on the sides
    'border': (
      property: border,
      responsive: true,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
        'dashed': var(--#{$prefix}border-width) dashed color.scale($border-color, $lightness: -4%),
        0: 0,
      )
    ),

    'border-top': (
      property: border-top,
      responsive: true,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
        0: 0,
      )
    ),

    'border-end': (
      property: border-right,
      responsive: true,
      class: border-end,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
        0: 0,
      )
    ),

    'border-bottom': (
      property: border-bottom,
      responsive: true,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
        0: 0,
      )
    ),

    'border-start': (
      property: border-left,
      responsive: true,
      class: border-start,
      values: (
        null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
        0: 0,
      )
    ),

    // Border colors
    'border-color': map-merge(
      map-get($utilities, 'border-color'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'border-color'), 'values'),
          (
            'light': $border-light-color,
            'input': $input-border-color
          )
        )
      )
    ),

    // Rounded top: 0
    'rounded-top': map-merge(
      map-get($utilities, 'rounded-top'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'rounded-top'), 'values'),
          (
            0: 0
          )
        )
      )
    ),

    // Rounded end: 0
    'rounded-end': map-merge(
      map-get($utilities, 'rounded-end'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'rounded-end'), 'values'),
          (
            0: 0
          )
        )
      )
    ),

    // Rounded bottom: 0
    'rounded-bottom': map-merge(
      map-get($utilities, 'rounded-bottom'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'rounded-bottom'), 'values'),
          (
            0: 0
          )
        )
      )
    ),

    // Rounded start: 0
    'rounded-start': map-merge(
      map-get($utilities, 'rounded-start'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'rounded-start'), 'values'),
          (
            0: 0
          )
        )
      )
    ),

    // Width
    'width': (
      property: width,
      responsive: true,
      class: w,
      values: (
        25: 25%,
        50: 50%,
        75: 75%,
        100: 100%,
        auto: auto
      )
    ),

    // Opacity
    'opacity': (
      property: opacity,
      class: opacity,
      values: (
        0: 0,
        10: .1,
        20: .2,
        25: .25,
        30: .3,
        40: .4,
        50: .5,
        60: .6,
        70: .7,
        75: .75,
        80: .8,
        90: .9,
        100: 1
      )
    ),

    // Text color
    'color': (
      property: color,
      class: text,
      local-vars: (
        'text-opacity': 1
      ),
      values: map-merge(
        $utilities-text-colors,
        (
          'white': $white,
          'body': var(--#{$prefix}body-color),
          'muted': $text-muted,
          'nav': var(--#{$prefix}nav-link-color),
          'border': var(--#{$prefix}border-color),
          'reset': inherit
        )
      )
    ),

    // Font weight
    'font-weight': map-merge(
      map-get($utilities, 'font-weight'),
      (
        values: map-merge(
          map-get(map-get($utilities, 'font-weight'), 'values'),
          (
            500: 500,
            medium: $font-weight-medium,
            semibold: $font-weight-semibold
          )
        )
      )
    ),

    // Table layout
    'table-layout': (
      property: table-layout,
      values: fixed
    ),

    // Z-index
    'z-index': (
      property: z-index,
      class: zindex,
      values: 1 2 3 4 5 10
    )
  )
);
